
koky_engine_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  0000355a  0000360e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000355a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002c4  008002c4  000037d2  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000037d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000037d5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003808  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001f0  00000000  00000000  00003848  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001964  00000000  00000000  00003a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bfc  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d34  00000000  00000000  00005f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  00007ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008fa  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000afe  00000000  00000000  00008b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00009634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_2>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_11>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_16>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__fuse+0xff7dfbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__fuse+0xff7dfa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <TUI+0x296>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	ea e5       	ldi	r30, 0x5A	; 90
      d6:	f5 e3       	ldi	r31, 0x35	; 53
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a4 3c       	cpi	r26, 0xC4	; 196
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	22 e0       	ldi	r18, 0x02	; 2
      e6:	a4 ec       	ldi	r26, 0xC4	; 196
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	aa 3d       	cpi	r26, 0xDA	; 218
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
      f8:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <__vector_1>:
#define ENC_B_PORT	PORTD
// ============================================================================


ISR(INT0_vect)
{
     100:	1f 92       	push	r1
     102:	0f 92       	push	r0
     104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	2f 93       	push	r18
     10e:	3f 93       	push	r19
     110:	4f 93       	push	r20
     112:	5f 93       	push	r21
     114:	6f 93       	push	r22
     116:	7f 93       	push	r23
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	af 93       	push	r26
     11e:	bf 93       	push	r27
     120:	ef 93       	push	r30
     122:	ff 93       	push	r31
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
	TUI_back_timer_clear();
     12c:	0e 94 39 02 	call	0x472	; 0x472 <TUI_back_timer_clear>
	TUI('b');
     130:	82 e6       	ldi	r24, 0x62	; 98
     132:	0e 94 13 03 	call	0x626	; 0x626 <TUI>
}
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	ff 91       	pop	r31
     13e:	ef 91       	pop	r30
     140:	bf 91       	pop	r27
     142:	af 91       	pop	r26
     144:	9f 91       	pop	r25
     146:	8f 91       	pop	r24
     148:	7f 91       	pop	r23
     14a:	6f 91       	pop	r22
     14c:	5f 91       	pop	r21
     14e:	4f 91       	pop	r20
     150:	3f 91       	pop	r19
     152:	2f 91       	pop	r18
     154:	0f 90       	pop	r0
     156:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <__vector_2>:

ISR(INT1_vect)
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	2f 93       	push	r18
     16e:	3f 93       	push	r19
     170:	4f 93       	push	r20
     172:	5f 93       	push	r21
     174:	6f 93       	push	r22
     176:	7f 93       	push	r23
     178:	8f 93       	push	r24
     17a:	9f 93       	push	r25
     17c:	af 93       	push	r26
     17e:	bf 93       	push	r27
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t step = 0;
	static uint8_t dir = 0;

	TUI_back_timer_clear();
     18c:	0e 94 39 02 	call	0x472	; 0x472 <TUI_back_timer_clear>
	if (ENC_A_PIN & ENC_A)
     190:	89 e2       	ldi	r24, 0x29	; 41
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	80 81       	ld	r24, Z
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 71       	andi	r24, 0x10	; 16
     19e:	99 27       	eor	r25, r25
     1a0:	89 2b       	or	r24, r25
     1a2:	b1 f0       	breq	.+44     	; 0x1d0 <__vector_2+0x70>
	{
		
		if (!dir)
     1a4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1a8:	88 23       	and	r24, r24
     1aa:	69 f4       	brne	.+26     	; 0x1c6 <__vector_2+0x66>
		{
			step++;
     1ac:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <step.1884>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1b6:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	f8 f0       	brcs	.+62     	; 0x1fc <__vector_2+0x9c>
				TUI('-');
     1be:	8d e2       	ldi	r24, 0x2D	; 45
     1c0:	0e 94 13 03 	call	0x626	; 0x626 <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1c4:	1b c0       	rjmp	.+54     	; 0x1fc <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('-');
		}
		else
		{
			dir = 0;
     1c6:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
			step = 0;
     1ca:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <step.1884>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1ce:	16 c0       	rjmp	.+44     	; 0x1fc <__vector_2+0x9c>
			step = 0;
		}
	}
	else
	{
		if (dir)
     1d0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1d4:	88 23       	and	r24, r24
     1d6:	69 f0       	breq	.+26     	; 0x1f2 <__vector_2+0x92>
		{
			step++;
     1d8:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1dc:	8f 5f       	subi	r24, 0xFF	; 255
     1de:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <step.1884>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1e2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1e6:	85 30       	cpi	r24, 0x05	; 5
     1e8:	48 f0       	brcs	.+18     	; 0x1fc <__vector_2+0x9c>
				TUI('+');
     1ea:	8b e2       	ldi	r24, 0x2B	; 43
     1ec:	0e 94 13 03 	call	0x626	; 0x626 <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('+');
		}
		else
		{
			dir = 1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
			step = 0;
     1f8:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <step.1884>
		}
	}
}
     1fc:	00 00       	nop
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	3f 91       	pop	r19
     218:	2f 91       	pop	r18
     21a:	0f 90       	pop	r0
     21c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <encoder_init>:

// encoder initialization
void encoder_init(void)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
	// set button
	BTN_PORT |= BTN;		// pull-up
     22e:	8b e2       	ldi	r24, 0x2B	; 43
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	2b e2       	ldi	r18, 0x2B	; 43
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	f9 01       	movw	r30, r18
     238:	20 81       	ld	r18, Z
     23a:	24 60       	ori	r18, 0x04	; 4
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
	EICRA = (1<<ISC01);		// falling edge
     240:	89 e6       	ldi	r24, 0x69	; 105
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	22 e0       	ldi	r18, 0x02	; 2
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);		// int enable from INT0
     24a:	8d e3       	ldi	r24, 0x3D	; 61
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	fc 01       	movw	r30, r24
     252:	20 83       	st	Z, r18

	// set encoder	
	ENC_A_PORT |= ENC_A;	// pull-up
     254:	8b e2       	ldi	r24, 0x2B	; 43
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	2b e2       	ldi	r18, 0x2B	; 43
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	20 81       	ld	r18, Z
     260:	20 61       	ori	r18, 0x10	; 16
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
	ENC_B_PORT |= ENC_B;	// pull-up
     266:	8b e2       	ldi	r24, 0x2B	; 43
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	2b e2       	ldi	r18, 0x2B	; 43
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	f9 01       	movw	r30, r18
     270:	20 81       	ld	r18, Z
     272:	28 60       	ori	r18, 0x08	; 8
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18

	EICRA |= (1<<ISC11);	// falling edge
     278:	89 e6       	ldi	r24, 0x69	; 105
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	29 e6       	ldi	r18, 0x69	; 105
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	28 60       	ori	r18, 0x08	; 8
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
	EIMSK |= (1<<INT1);		// int enable from INT0
     28a:	8d e3       	ldi	r24, 0x3D	; 61
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2d e3       	ldi	r18, 0x3D	; 61
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	22 60       	ori	r18, 0x02	; 2
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
}
     29c:	00 00       	nop
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <main>:

int main(void)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00;
     2ac:	84 e2       	ldi	r24, 0x24	; 36
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	10 82       	st	Z, r1
	DDRC = 0x00;
     2b4:	87 e2       	ldi	r24, 0x27	; 39
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
	DDRD = 0x00;
     2bc:	8a e2       	ldi	r24, 0x2A	; 42
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	10 82       	st	Z, r1

	PORTB = 0x00;
     2c4:	85 e2       	ldi	r24, 0x25	; 37
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	10 82       	st	Z, r1
	PORTC = 0x00;
     2cc:	88 e2       	ldi	r24, 0x28	; 40
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	fc 01       	movw	r30, r24
     2d2:	10 82       	st	Z, r1
	PORTD = 0x00;
     2d4:	8b e2       	ldi	r24, 0x2B	; 43
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	fc 01       	movw	r30, r24
     2da:	10 82       	st	Z, r1

	motor_init();
     2dc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <motor_init>
	encoder_init();
     2e0:	0e 94 13 01 	call	0x226	; 0x226 <encoder_init>
	lcd_init();
     2e4:	0e 94 43 0a 	call	0x1486	; 0x1486 <lcd_init>
	ntc_init();
     2e8:	0e 94 b2 13 	call	0x2764	; 0x2764 <ntc_init>
	valve_init();
     2ec:	0e 94 20 17 	call	0x2e40	; 0x2e40 <valve_init>

	sei();
     2f0:	78 94       	sei

	TUI_inti();
     2f2:	0e 94 c1 02 	call	0x582	; 0x582 <TUI_inti>
	TUI('s');
     2f6:	83 e7       	ldi	r24, 0x73	; 115
     2f8:	0e 94 13 03 	call	0x626	; 0x626 <TUI>
		
	for(;;)
    {
		asm("nop");
     2fc:	00 00       	nop
    }
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <main+0x58>

00000300 <TUI_sec_timer_init>:
#define EEP_ADDR		(void *)0x10
#define eep_read()		eeprom_read_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))
#define eep_update()	eeprom_update_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))

void TUI_sec_timer_init(void)
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	TUI_sec_timer_stop();
     308:	0e 94 a9 01 	call	0x352	; 0x352 <TUI_sec_timer_stop>
	TCCR1A = 0;
     30c:	80 e8       	ldi	r24, 0x80	; 128
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	fc 01       	movw	r30, r24
     312:	10 82       	st	Z, r1
	OCR1A = F_CPU / 1024;							// TOP value for 1 sec
     314:	88 e8       	ldi	r24, 0x88	; 136
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	24 e8       	ldi	r18, 0x84	; 132
     31a:	3e e1       	ldi	r19, 0x1E	; 30
     31c:	fc 01       	movw	r30, r24
     31e:	31 83       	std	Z+1, r19	; 0x01
     320:	20 83       	st	Z, r18
	TIMSK1 = (1<<OCIE1A);							// compare IT enable
     322:	8f e6       	ldi	r24, 0x6F	; 111
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	22 e0       	ldi	r18, 0x02	; 2
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
	TUI_sec_timer_start();
     32c:	0e 94 9c 01 	call	0x338	; 0x338 <TUI_sec_timer_start>
}
     330:	00 00       	nop
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <TUI_sec_timer_start>:
void TUI_sec_timer_start(void)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);	// CTC mode clk/1024
     340:	81 e8       	ldi	r24, 0x81	; 129
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	2d e0       	ldi	r18, 0x0D	; 13
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
}
     34a:	00 00       	nop
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <TUI_sec_timer_stop>:
void TUI_sec_timer_stop(void)
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12);							// CTC mode clk = 0
     35a:	81 e8       	ldi	r24, 0x81	; 129
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	28 e0       	ldi	r18, 0x08	; 8
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
}
     364:	00 00       	nop
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	2f 93       	push	r18
     37a:	3f 93       	push	r19
     37c:	4f 93       	push	r20
     37e:	5f 93       	push	r21
     380:	6f 93       	push	r22
     382:	7f 93       	push	r23
     384:	8f 93       	push	r24
     386:	9f 93       	push	r25
     388:	af 93       	push	r26
     38a:	bf 93       	push	r27
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
	if (machine_state == MACHINE_START)
     398:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     39c:	88 23       	and	r24, r24
     39e:	c9 f5       	brne	.+114    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		if (user_profile.sec > 0)
     3a0:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3a4:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3a8:	89 2b       	or	r24, r25
     3aa:	49 f0       	breq	.+18     	; 0x3be <__vector_11+0x52>
		{
			user_profile.sec--;
     3ac:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3b0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <user_profile+0x3>
     3ba:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <user_profile+0x2>
		}
		if (!user_profile.sec)
     3be:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3c2:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3c6:	89 2b       	or	r24, r25
     3c8:	21 f5       	brne	.+72     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			motor_smoothly_rmp(user_profile.rpm, 0);
     3ca:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     3ce:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <motor_smoothly_rmp>
			machine_state = MACHINE_STOP;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
			VALVE_OFF;
     3e0:	8b e2       	ldi	r24, 0x2B	; 43
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	2b e2       	ldi	r18, 0x2B	; 43
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	f9 01       	movw	r30, r18
     3ea:	20 81       	ld	r18, Z
     3ec:	2d 7f       	andi	r18, 0xFD	; 253
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 83       	st	Z, r18
			user_profile = backup_profile;
     3f2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     3f6:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     3fa:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     3fe:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     402:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     406:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     40a:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     40e:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
		}
	}
	TUI('s');
     412:	83 e7       	ldi	r24, 0x73	; 115
     414:	0e 94 13 03 	call	0x626	; 0x626 <TUI>
}
     418:	00 00       	nop
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	bf 91       	pop	r27
     424:	af 91       	pop	r26
     426:	9f 91       	pop	r25
     428:	8f 91       	pop	r24
     42a:	7f 91       	pop	r23
     42c:	6f 91       	pop	r22
     42e:	5f 91       	pop	r21
     430:	4f 91       	pop	r20
     432:	3f 91       	pop	r19
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <TUI_back_timer_init>:


void TUI_back_timer_init(void)
{
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	cd b7       	in	r28, 0x3d	; 61
     448:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;									// normal mode
     44a:	84 e4       	ldi	r24, 0x44	; 68
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	fc 01       	movw	r30, r24
     450:	10 82       	st	Z, r1
	TCCR0B = (1<<CS02) | (1<<CS00);				// clk/1024
     452:	85 e4       	ldi	r24, 0x45	; 69
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	25 e0       	ldi	r18, 0x05	; 5
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
	TIMSK0 = (1<<TOIE0);						// compare IT enable
     45c:	8e e6       	ldi	r24, 0x6E	; 110
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	fc 01       	movw	r30, r24
     464:	20 83       	st	Z, r18
	TUI_back_timer_clear();
     466:	0e 94 39 02 	call	0x472	; 0x472 <TUI_back_timer_clear>
}
     46a:	00 00       	nop
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <TUI_back_timer_clear>:
void TUI_back_timer_clear(void)
{
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
	back_tick = 0;
     47a:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <back_tick>
     47e:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <back_tick+0x1>
     482:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <back_tick+0x2>
     486:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <back_tick+0x3>
	TCNT0 = 0;
     48a:	86 e4       	ldi	r24, 0x46	; 70
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	10 82       	st	Z, r1
}
     492:	00 00       	nop
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <__vector_16>:
ISR(TIMER0_OVF_vect)
{
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4a2:	0f 92       	push	r0
     4a4:	11 24       	eor	r1, r1
     4a6:	2f 93       	push	r18
     4a8:	3f 93       	push	r19
     4aa:	4f 93       	push	r20
     4ac:	5f 93       	push	r21
     4ae:	6f 93       	push	r22
     4b0:	7f 93       	push	r23
     4b2:	8f 93       	push	r24
     4b4:	9f 93       	push	r25
     4b6:	af 93       	push	r26
     4b8:	bf 93       	push	r27
     4ba:	ef 93       	push	r30
     4bc:	ff 93       	push	r31
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	1f 92       	push	r1
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
	const uint8_t sec_to_return = 3;
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	89 83       	std	Y+1, r24	; 0x01
	back_tick++;
     4cc:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <back_tick>
     4d0:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <back_tick+0x1>
     4d4:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <back_tick+0x2>
     4d8:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <back_tick+0x3>
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	a1 1d       	adc	r26, r1
     4e0:	b1 1d       	adc	r27, r1
     4e2:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <back_tick>
     4e6:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <back_tick+0x1>
     4ea:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <back_tick+0x2>
     4ee:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <back_tick+0x3>
	if (back_tick == ( (((uint32_t) sec_to_return) * ((uint32_t) F_CPU)) / (((uint32_t) 256) * ((uint32_t) 1024))) )
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	a0 e0       	ldi	r26, 0x00	; 0
     4fa:	b0 e0       	ldi	r27, 0x00	; 0
     4fc:	9c 01       	movw	r18, r24
     4fe:	ad 01       	movw	r20, r26
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	72 e1       	ldi	r23, 0x12	; 18
     504:	8a e7       	ldi	r24, 0x7A	; 122
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__mulsi3>
     50c:	dc 01       	movw	r26, r24
     50e:	cb 01       	movw	r24, r22
     510:	9c 01       	movw	r18, r24
     512:	ad 01       	movw	r20, r26
     514:	01 2e       	mov	r0, r17
     516:	12 e1       	ldi	r17, 0x12	; 18
     518:	56 95       	lsr	r21
     51a:	47 95       	ror	r20
     51c:	37 95       	ror	r19
     51e:	27 95       	ror	r18
     520:	1a 95       	dec	r17
     522:	d1 f7       	brne	.-12     	; 0x518 <__vector_16+0x7e>
     524:	10 2d       	mov	r17, r0
     526:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <back_tick>
     52a:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <back_tick+0x1>
     52e:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <back_tick+0x2>
     532:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <back_tick+0x3>
     536:	28 17       	cp	r18, r24
     538:	39 07       	cpc	r19, r25
     53a:	4a 07       	cpc	r20, r26
     53c:	5b 07       	cpc	r21, r27
     53e:	59 f4       	brne	.+22     	; 0x556 <__vector_16+0xbc>
	{
		TUI_back_timer_clear();
     540:	0e 94 39 02 	call	0x472	; 0x472 <TUI_back_timer_clear>
		if (menu != MAIN_MENU)
     544:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     548:	88 23       	and	r24, r24
     54a:	29 f0       	breq	.+10     	; 0x556 <__vector_16+0xbc>
		{
			menu = MAIN_MENU;
     54c:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
			TUI('s');
     550:	83 e7       	ldi	r24, 0x73	; 115
     552:	0e 94 13 03 	call	0x626	; 0x626 <TUI>
		}
	}
}
     556:	00 00       	nop
     558:	0f 90       	pop	r0
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     57c:	0f 90       	pop	r0
     57e:	1f 90       	pop	r1
     580:	18 95       	reti

00000582 <TUI_inti>:

void TUI_inti(void)
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
	menu = MAIN_MENU;
     58a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
	machine_state = MACHINE_STOP;
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
	actual_rmp = 0;
     594:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <actual_rmp+0x1>
     598:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <actual_rmp>

	TUI_sec_timer_init();
     59c:	0e 94 80 01 	call	0x300	; 0x300 <TUI_sec_timer_init>
	TUI_back_timer_init();
     5a0:	0e 94 21 02 	call	0x442	; 0x442 <TUI_back_timer_init>

	// EEPROM is empty
	if (eeprom_read_byte(EEP_ADDR) == 0xFF)
     5a4:	80 e1       	ldi	r24, 0x10	; 16
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 81 1a 	call	0x3502	; 0x3502 <eeprom_read_byte>
     5ac:	8f 3f       	cpi	r24, 0xFF	; 255
     5ae:	41 f4       	brne	.+16     	; 0x5c0 <TUI_inti+0x3e>
	{
		eep_update();
     5b0:	4d e0       	ldi	r20, 0x0D	; 13
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	60 e1       	ldi	r22, 0x10	; 16
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 89 1a 	call	0x3512	; 0x3512 <eeprom_update_block>
	}
	eep_read();
     5c0:	4d e0       	ldi	r20, 0x0D	; 13
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	60 e1       	ldi	r22, 0x10	; 16
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <eeprom_read_block>

	user_profile = eeprom_data.profile[eeprom_data.profile_id];
     5d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5d4:	88 2f       	mov	r24, r24
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	9e 4f       	sbci	r25, 0xFE	; 254
     5e4:	fc 01       	movw	r30, r24
     5e6:	80 81       	ld	r24, Z
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	a2 81       	ldd	r26, Z+2	; 0x02
     5ec:	b3 81       	ldd	r27, Z+3	; 0x03
     5ee:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     5f2:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     5f6:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     5fa:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
	backup_profile = user_profile;
     5fe:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     602:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     606:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     60a:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     60e:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     612:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     616:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     61a:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
}
     61e:	00 00       	nop
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <TUI>:

void TUI(char action)
{
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	00 d0       	rcall	.+0      	; 0x62c <TUI+0x6>
     62c:	00 d0       	rcall	.+0      	; 0x62e <TUI+0x8>
     62e:	1f 92       	push	r1
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
     634:	8d 83       	std	Y+5, r24	; 0x05
	static item_menu_select_t item_menu_secect = ITEM_MENU_SELECT_RPM;
	static load_menu_select_t load_menu_select = LOAD_MENU_SELECT_PROFILE1;
	static save_menu_select_t save_menu_select = SAVE_MENU_SELECT_PROFILE1;

	// nastaveni
	switch (menu)
     636:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     63a:	88 2f       	mov	r24, r24
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	91 05       	cpc	r25, r1
     642:	09 f4       	brne	.+2      	; 0x646 <TUI+0x20>
     644:	fc c0       	rjmp	.+504    	; 0x83e <TUI+0x218>
     646:	83 30       	cpi	r24, 0x03	; 3
     648:	91 05       	cpc	r25, r1
     64a:	34 f4       	brge	.+12     	; 0x658 <TUI+0x32>
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	81 f0       	breq	.+32     	; 0x670 <TUI+0x4a>
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	09 f4       	brne	.+2      	; 0x656 <TUI+0x30>
     654:	92 c0       	rjmp	.+292    	; 0x77a <TUI+0x154>
     656:	36 c2       	rjmp	.+1132   	; 0xac4 <__stack+0x1c5>
     658:	84 30       	cpi	r24, 0x04	; 4
     65a:	91 05       	cpc	r25, r1
     65c:	09 f4       	brne	.+2      	; 0x660 <TUI+0x3a>
     65e:	77 c1       	rjmp	.+750    	; 0x94e <__stack+0x4f>
     660:	84 30       	cpi	r24, 0x04	; 4
     662:	91 05       	cpc	r25, r1
     664:	0c f4       	brge	.+2      	; 0x668 <TUI+0x42>
     666:	2f c1       	rjmp	.+606    	; 0x8c6 <TUI+0x2a0>
     668:	05 97       	sbiw	r24, 0x05	; 5
     66a:	09 f4       	brne	.+2      	; 0x66e <TUI+0x48>
     66c:	cd c1       	rjmp	.+922    	; 0xa08 <__stack+0x109>
     66e:	2a c2       	rjmp	.+1108   	; 0xac4 <__stack+0x1c5>
	{
		case MAIN_MENU:
			switch (action)
     670:	8d 81       	ldd	r24, Y+5	; 0x05
     672:	88 2f       	mov	r24, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	8d 32       	cpi	r24, 0x2D	; 45
     678:	91 05       	cpc	r25, r1
     67a:	31 f0       	breq	.+12     	; 0x688 <TUI+0x62>
     67c:	82 36       	cpi	r24, 0x62	; 98
     67e:	91 05       	cpc	r25, r1
     680:	89 f0       	breq	.+34     	; 0x6a4 <TUI+0x7e>
     682:	8b 97       	sbiw	r24, 0x2b	; 43
     684:	09 f0       	breq	.+2      	; 0x688 <TUI+0x62>
					break;

				default:
					;
			}
			break;
     686:	1e c2       	rjmp	.+1084   	; 0xac4 <__stack+0x1c5>
			{
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
     688:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     68c:	88 23       	and	r24, r24
     68e:	09 f4       	brne	.+2      	; 0x692 <TUI+0x6c>
     690:	72 c0       	rjmp	.+228    	; 0x776 <TUI+0x150>
						break;
					main_menu_secelt = (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ? MAIN_MENU_SELECT_MENU : MAIN_MENU_SELECT_CONTOL;
     692:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	99 23       	and	r25, r25
     69a:	09 f0       	breq	.+2      	; 0x69e <TUI+0x78>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <main_menu_secelt.1912>
					break;
     6a2:	6a c0       	rjmp	.+212    	; 0x778 <TUI+0x152>

				// stisk tlacitka
				case 'b':
					if (main_menu_secelt == MAIN_MENU_SELECT_CONTOL)
     6a4:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     6a8:	88 23       	and	r24, r24
     6aa:	09 f0       	breq	.+2      	; 0x6ae <TUI+0x88>
     6ac:	50 c0       	rjmp	.+160    	; 0x74e <TUI+0x128>
					{
						if (machine_state == MACHINE_STOP)
     6ae:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     6b2:	81 30       	cpi	r24, 0x01	; 1
     6b4:	39 f5       	brne	.+78     	; 0x704 <TUI+0xde>
						{
							machine_state = MACHINE_START;
     6b6:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <machine_state>
							VALVE_ON;
     6ba:	8b e2       	ldi	r24, 0x2B	; 43
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	2b e2       	ldi	r18, 0x2B	; 43
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	f9 01       	movw	r30, r18
     6c4:	20 81       	ld	r18, Z
     6c6:	22 60       	ori	r18, 0x02	; 2
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
							backup_profile = user_profile;
     6cc:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     6d0:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     6d4:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     6d8:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     6dc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     6e0:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     6e4:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     6e8:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);							
     6ec:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <user_profile>
     6f0:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <user_profile+0x1>
     6f4:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <actual_rmp>
     6f8:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <actual_rmp+0x1>
     6fc:	b9 01       	movw	r22, r18
     6fe:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <motor_smoothly_rmp>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     702:	3a c0       	rjmp	.+116    	; 0x778 <TUI+0x152>
							backup_profile = user_profile;
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);							
						}
						else
						{
							machine_state = MACHINE_STOP;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
							motor_smoothly_rmp(user_profile.rpm, 0);
     70a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     70e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <motor_smoothly_rmp>
							VALVE_OFF;
     71a:	8b e2       	ldi	r24, 0x2B	; 43
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	2b e2       	ldi	r18, 0x2B	; 43
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	2d 7f       	andi	r18, 0xFD	; 253
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
							user_profile = backup_profile;
     72c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     730:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     734:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     738:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     73c:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     740:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     744:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     748:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     74c:	15 c0       	rjmp	.+42     	; 0x778 <TUI+0x152>
							user_profile = backup_profile;
						}
					}
					else
					{
						menu = ITEM_MENU;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
						backup_profile = user_profile;
     754:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     758:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     75c:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     760:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     764:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     768:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     76c:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     770:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
					}
					break;
     774:	01 c0       	rjmp	.+2      	; 0x778 <TUI+0x152>
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
						break;
     776:	00 00       	nop
					break;

				default:
					;
			}
			break;
     778:	a5 c1       	rjmp	.+842    	; 0xac4 <__stack+0x1c5>

		case ITEM_MENU:
			switch (action)
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	8d 32       	cpi	r24, 0x2D	; 45
     782:	91 05       	cpc	r25, r1
     784:	11 f1       	breq	.+68     	; 0x7ca <TUI+0x1a4>
     786:	82 36       	cpi	r24, 0x62	; 98
     788:	91 05       	cpc	r25, r1
     78a:	d9 f1       	breq	.+118    	; 0x802 <TUI+0x1dc>
     78c:	8b 97       	sbiw	r24, 0x2b	; 43
     78e:	09 f0       	breq	.+2      	; 0x792 <TUI+0x16c>
					break;

				default:
					;
			}
			break;
     790:	99 c1       	rjmp	.+818    	; 0xac4 <__stack+0x1c5>

		case ITEM_MENU:
			switch (action)
			{
				case '+':
					switch (item_menu_secect)
     792:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	81 30       	cpi	r24, 0x01	; 1
     79c:	91 05       	cpc	r25, r1
     79e:	49 f0       	breq	.+18     	; 0x7b2 <TUI+0x18c>
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	91 05       	cpc	r25, r1
     7a4:	51 f0       	breq	.+20     	; 0x7ba <TUI+0x194>
     7a6:	89 2b       	or	r24, r25
     7a8:	61 f4       	brne	.+24     	; 0x7c2 <TUI+0x19c>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <TUI+0x1a2>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <TUI+0x1a2>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     7ba:	83 e0       	ldi	r24, 0x03	; 3
     7bc:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <TUI+0x1a2>
						default:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     7c2:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <item_menu_secect.1913>
					}
					break;
     7c6:	3a c0       	rjmp	.+116    	; 0x83c <TUI+0x216>
     7c8:	39 c0       	rjmp	.+114    	; 0x83c <TUI+0x216>

				case  '-':
					switch (item_menu_secect)
     7ca:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     7ce:	88 2f       	mov	r24, r24
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	81 30       	cpi	r24, 0x01	; 1
     7d4:	91 05       	cpc	r25, r1
     7d6:	49 f0       	breq	.+18     	; 0x7ea <TUI+0x1c4>
     7d8:	82 30       	cpi	r24, 0x02	; 2
     7da:	91 05       	cpc	r25, r1
     7dc:	49 f0       	breq	.+18     	; 0x7f0 <TUI+0x1ca>
     7de:	89 2b       	or	r24, r25
     7e0:	59 f4       	brne	.+22     	; 0x7f8 <TUI+0x1d2>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7e8:	0b c0       	rjmp	.+22     	; 0x800 <TUI+0x1da>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     7ea:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <item_menu_secect.1913>
							break;
     7ee:	08 c0       	rjmp	.+16     	; 0x800 <TUI+0x1da>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <TUI+0x1da>
						default:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
					}
					break;
     7fe:	1e c0       	rjmp	.+60     	; 0x83c <TUI+0x216>
     800:	1d c0       	rjmp	.+58     	; 0x83c <TUI+0x216>

				case 'b':
					switch (item_menu_secect)
     802:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	91 05       	cpc	r25, r1
     80e:	49 f0       	breq	.+18     	; 0x822 <TUI+0x1fc>
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	91 05       	cpc	r25, r1
     814:	51 f0       	breq	.+20     	; 0x82a <TUI+0x204>
     816:	89 2b       	or	r24, r25
     818:	61 f4       	brne	.+24     	; 0x832 <TUI+0x20c>
					{
						case ITEM_MENU_SELECT_RPM:
							menu = RPM_MENU;
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     820:	0c c0       	rjmp	.+24     	; 0x83a <TUI+0x214>
						case ITEM_MENU_SELECT_TIME:
							menu = TIME_MENU;
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     828:	08 c0       	rjmp	.+16     	; 0x83a <TUI+0x214>
						case ITEM_MENU_SELECT_LOAD:
							menu = LOAD_MENU;
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     830:	04 c0       	rjmp	.+8      	; 0x83a <TUI+0x214>
						default:
							menu = SAVE_MENU;
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
					}
					break;
     838:	00 c0       	rjmp	.+0      	; 0x83a <TUI+0x214>
     83a:	00 00       	nop

				default:
					;
			}
			break;
     83c:	43 c1       	rjmp	.+646    	; 0xac4 <__stack+0x1c5>

		case RPM_MENU:
			switch (action)
     83e:	8d 81       	ldd	r24, Y+5	; 0x05
     840:	88 2f       	mov	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	8d 32       	cpi	r24, 0x2D	; 45
     846:	91 05       	cpc	r25, r1
     848:	b9 f0       	breq	.+46     	; 0x878 <TUI+0x252>
     84a:	82 36       	cpi	r24, 0x62	; 98
     84c:	91 05       	cpc	r25, r1
     84e:	21 f1       	breq	.+72     	; 0x898 <TUI+0x272>
     850:	8b 97       	sbiw	r24, 0x2b	; 43
     852:	09 f0       	breq	.+2      	; 0x856 <TUI+0x230>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     854:	37 c1       	rjmp	.+622    	; 0xac4 <__stack+0x1c5>

		case RPM_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
     856:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     85a:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     85e:	8c 32       	cpi	r24, 0x2C	; 44
     860:	91 40       	sbci	r25, 0x01	; 1
     862:	68 f5       	brcc	.+90     	; 0x8be <TUI+0x298>
						backup_profile.rpm++;
     864:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     868:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     872:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
					break;
     876:	23 c0       	rjmp	.+70     	; 0x8be <TUI+0x298>
				case '-':
					if (backup_profile.rpm > 0)
     878:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     87c:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     880:	89 2b       	or	r24, r25
     882:	f9 f0       	breq	.+62     	; 0x8c2 <TUI+0x29c>
						backup_profile.rpm--;
     884:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     888:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     892:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
					break;
     896:	15 c0       	rjmp	.+42     	; 0x8c2 <TUI+0x29c>
				case  'b':
					menu = MAIN_MENU;
     898:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					user_profile = backup_profile;
     89c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     8a0:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     8a4:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8a8:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8ac:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     8b0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     8b4:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     8b8:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					break;
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <TUI+0x29e>
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
						backup_profile.rpm++;
					break;
     8be:	00 00       	nop
     8c0:	01 c1       	rjmp	.+514    	; 0xac4 <__stack+0x1c5>
				case '-':
					if (backup_profile.rpm > 0)
						backup_profile.rpm--;
					break;
     8c2:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     8c4:	ff c0       	rjmp	.+510    	; 0xac4 <__stack+0x1c5>

		case TIME_MENU:
			switch (action)
     8c6:	8d 81       	ldd	r24, Y+5	; 0x05
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	8d 32       	cpi	r24, 0x2D	; 45
     8ce:	91 05       	cpc	r25, r1
     8d0:	b9 f0       	breq	.+46     	; 0x900 <__stack+0x1>
     8d2:	82 36       	cpi	r24, 0x62	; 98
     8d4:	91 05       	cpc	r25, r1
     8d6:	21 f1       	breq	.+72     	; 0x920 <__stack+0x21>
     8d8:	8b 97       	sbiw	r24, 0x2b	; 43
     8da:	09 f0       	breq	.+2      	; 0x8de <TUI+0x2b8>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     8dc:	f3 c0       	rjmp	.+486    	; 0xac4 <__stack+0x1c5>

		case TIME_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
     8de:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8e2:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8e6:	80 3a       	cpi	r24, 0xA0	; 160
     8e8:	9c 48       	sbci	r25, 0x8C	; 140
     8ea:	68 f5       	brcc	.+90     	; 0x946 <__stack+0x47>
						backup_profile.sec+=60;
     8ec:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8f0:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8f4:	cc 96       	adiw	r24, 0x3c	; 60
     8f6:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <backup_profile+0x3>
     8fa:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <backup_profile+0x2>
					break;
     8fe:	23 c0       	rjmp	.+70     	; 0x946 <__stack+0x47>
				case '-':
					if (backup_profile.sec > 0)
     900:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     904:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     908:	89 2b       	or	r24, r25
     90a:	f9 f0       	breq	.+62     	; 0x94a <__stack+0x4b>
						backup_profile.sec-=60;
     90c:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     910:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     914:	cc 97       	sbiw	r24, 0x3c	; 60
     916:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <backup_profile+0x3>
     91a:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <backup_profile+0x2>
					break;
     91e:	15 c0       	rjmp	.+42     	; 0x94a <__stack+0x4b>
				case  'b':
					menu = MAIN_MENU;
     920:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					user_profile = backup_profile;
     924:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     928:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     92c:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     930:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     934:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     938:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     93c:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     940:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					break;
     944:	03 c0       	rjmp	.+6      	; 0x94c <__stack+0x4d>
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
						backup_profile.sec+=60;
					break;
     946:	00 00       	nop
     948:	bd c0       	rjmp	.+378    	; 0xac4 <__stack+0x1c5>
				case '-':
					if (backup_profile.sec > 0)
						backup_profile.sec-=60;
					break;
     94a:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     94c:	bb c0       	rjmp	.+374    	; 0xac4 <__stack+0x1c5>

		case LOAD_MENU:
			switch (action)
     94e:	8d 81       	ldd	r24, Y+5	; 0x05
     950:	88 2f       	mov	r24, r24
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	8d 32       	cpi	r24, 0x2D	; 45
     956:	91 05       	cpc	r25, r1
     958:	d9 f0       	breq	.+54     	; 0x990 <__stack+0x91>
     95a:	82 36       	cpi	r24, 0x62	; 98
     95c:	91 05       	cpc	r25, r1
     95e:	69 f1       	breq	.+90     	; 0x9ba <__stack+0xbb>
     960:	8b 97       	sbiw	r24, 0x2b	; 43
     962:	09 f0       	breq	.+2      	; 0x966 <__stack+0x67>
					eep_update();
					break;
				default:
				;
			}
			break;
     964:	af c0       	rjmp	.+350    	; 0xac4 <__stack+0x1c5>

		case LOAD_MENU:
			switch (action)
			{
				case '+':
					switch (load_menu_select)
     966:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     96a:	88 2f       	mov	r24, r24
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	00 97       	sbiw	r24, 0x00	; 0
     970:	19 f0       	breq	.+6      	; 0x978 <__stack+0x79>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	29 f0       	breq	.+10     	; 0x980 <__stack+0x81>
     976:	08 c0       	rjmp	.+16     	; 0x988 <__stack+0x89>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     97e:	07 c0       	rjmp	.+14     	; 0x98e <__stack+0x8f>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     986:	03 c0       	rjmp	.+6      	; 0x98e <__stack+0x8f>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     988:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <load_menu_select.1914>
					}
					break;
     98c:	3c c0       	rjmp	.+120    	; 0xa06 <__stack+0x107>
     98e:	3b c0       	rjmp	.+118    	; 0xa06 <__stack+0x107>
				case '-':
					switch (load_menu_select)
     990:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     994:	88 2f       	mov	r24, r24
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	00 97       	sbiw	r24, 0x00	; 0
     99a:	19 f0       	breq	.+6      	; 0x9a2 <__stack+0xa3>
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	29 f0       	breq	.+10     	; 0x9aa <__stack+0xab>
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <__stack+0xb1>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     9a8:	07 c0       	rjmp	.+14     	; 0x9b8 <__stack+0xb9>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     9aa:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <load_menu_select.1914>
							break;
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <__stack+0xb9>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
					}
					break;
     9b6:	27 c0       	rjmp	.+78     	; 0xa06 <__stack+0x107>
     9b8:	26 c0       	rjmp	.+76     	; 0xa06 <__stack+0x107>
				case  'b':
					menu = MAIN_MENU;
     9ba:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					eeprom_data.profile_id = load_menu_select;
     9be:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     9c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					user_profile = eeprom_data.profile[eeprom_data.profile_id];
     9c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9ca:	88 2f       	mov	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	88 0f       	add	r24, r24
     9d4:	99 1f       	adc	r25, r25
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	9e 4f       	sbci	r25, 0xFE	; 254
     9da:	fc 01       	movw	r30, r24
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	a2 81       	ldd	r26, Z+2	; 0x02
     9e2:	b3 81       	ldd	r27, Z+3	; 0x03
     9e4:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     9e8:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     9ec:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     9f0:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					eep_update();
     9f4:	4d e0       	ldi	r20, 0x0D	; 13
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	60 e1       	ldi	r22, 0x10	; 16
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	0e 94 89 1a 	call	0x3512	; 0x3512 <eeprom_update_block>
					break;
     a04:	00 00       	nop
				default:
				;
			}
			break;
     a06:	5e c0       	rjmp	.+188    	; 0xac4 <__stack+0x1c5>

		case SAVE_MENU:
			switch (action)
     a08:	8d 81       	ldd	r24, Y+5	; 0x05
     a0a:	88 2f       	mov	r24, r24
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	8d 32       	cpi	r24, 0x2D	; 45
     a10:	91 05       	cpc	r25, r1
     a12:	d9 f0       	breq	.+54     	; 0xa4a <__stack+0x14b>
     a14:	82 36       	cpi	r24, 0x62	; 98
     a16:	91 05       	cpc	r25, r1
     a18:	69 f1       	breq	.+90     	; 0xa74 <__stack+0x175>
     a1a:	8b 97       	sbiw	r24, 0x2b	; 43
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__stack+0x121>
					eep_update();
					break;
				default:
				;
			}
			break;
     a1e:	51 c0       	rjmp	.+162    	; 0xac2 <__stack+0x1c3>

		case SAVE_MENU:
			switch (action)
			{
				case '+':
					switch (save_menu_select)
     a20:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a24:	88 2f       	mov	r24, r24
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	19 f0       	breq	.+6      	; 0xa32 <__stack+0x133>
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	29 f0       	breq	.+10     	; 0xa3a <__stack+0x13b>
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <__stack+0x143>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a38:	07 c0       	rjmp	.+14     	; 0xa48 <__stack+0x149>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a40:	03 c0       	rjmp	.+6      	; 0xa48 <__stack+0x149>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     a42:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <save_menu_select.1915>
					}
					break;
     a46:	3d c0       	rjmp	.+122    	; 0xac2 <__stack+0x1c3>
     a48:	3c c0       	rjmp	.+120    	; 0xac2 <__stack+0x1c3>
				case '-':
					switch (save_menu_select)
     a4a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a4e:	88 2f       	mov	r24, r24
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	19 f0       	breq	.+6      	; 0xa5c <__stack+0x15d>
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	29 f0       	breq	.+10     	; 0xa64 <__stack+0x165>
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__stack+0x16b>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a62:	07 c0       	rjmp	.+14     	; 0xa72 <__stack+0x173>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     a64:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <save_menu_select.1915>
							break;
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__stack+0x173>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
					}
					break;
     a70:	28 c0       	rjmp	.+80     	; 0xac2 <__stack+0x1c3>
     a72:	27 c0       	rjmp	.+78     	; 0xac2 <__stack+0x1c3>
				case  'b':
					menu = MAIN_MENU;
     a74:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					eeprom_data.profile_id = save_menu_select;
     a78:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a7c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					eeprom_data.profile[eeprom_data.profile_id] = user_profile;
     a80:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	9c 01       	movw	r18, r24
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	3e 4f       	sbci	r19, 0xFE	; 254
     a96:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     a9a:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     a9e:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     aa2:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     aa6:	f9 01       	movw	r30, r18
     aa8:	80 83       	st	Z, r24
     aaa:	91 83       	std	Z+1, r25	; 0x01
     aac:	a2 83       	std	Z+2, r26	; 0x02
     aae:	b3 83       	std	Z+3, r27	; 0x03
					eep_update();
     ab0:	4d e0       	ldi	r20, 0x0D	; 13
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	60 e1       	ldi	r22, 0x10	; 16
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 89 1a 	call	0x3512	; 0x3512 <eeprom_update_block>
					break;
     ac0:	00 00       	nop
				default:
				;
			}
			break;
     ac2:	00 00       	nop
		default:
			;
	}

	// zobrazeni
	switch (menu)
     ac4:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     ac8:	88 2f       	mov	r24, r24
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	91 05       	cpc	r25, r1
     ad0:	09 f4       	brne	.+2      	; 0xad4 <__stack+0x1d5>
     ad2:	20 c2       	rjmp	.+1088   	; 0xf14 <__stack+0x615>
     ad4:	83 30       	cpi	r24, 0x03	; 3
     ad6:	91 05       	cpc	r25, r1
     ad8:	34 f4       	brge	.+12     	; 0xae6 <__stack+0x1e7>
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	81 f0       	breq	.+32     	; 0xafe <__stack+0x1ff>
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	09 f4       	brne	.+2      	; 0xae4 <__stack+0x1e5>
     ae2:	b3 c1       	rjmp	.+870    	; 0xe4a <__stack+0x54b>
			break;

		default:
		;
	}
}
     ae4:	c7 c4       	rjmp	.+2446   	; 0x1474 <__stack+0xb75>
		default:
			;
	}

	// zobrazeni
	switch (menu)
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	91 05       	cpc	r25, r1
     aea:	09 f4       	brne	.+2      	; 0xaee <__stack+0x1ef>
     aec:	d5 c2       	rjmp	.+1450   	; 0x1098 <__stack+0x799>
     aee:	84 30       	cpi	r24, 0x04	; 4
     af0:	91 05       	cpc	r25, r1
     af2:	0c f4       	brge	.+2      	; 0xaf6 <__stack+0x1f7>
     af4:	4e c2       	rjmp	.+1180   	; 0xf92 <__stack+0x693>
     af6:	05 97       	sbiw	r24, 0x05	; 5
     af8:	09 f4       	brne	.+2      	; 0xafc <__stack+0x1fd>
     afa:	c5 c3       	rjmp	.+1930   	; 0x1286 <__stack+0x987>
			break;

		default:
		;
	}
}
     afc:	bb c4       	rjmp	.+2422   	; 0x1474 <__stack+0xb75>
	// zobrazeni
	switch (menu)
	{
		case MAIN_MENU:

			if (user_profile.sec/3600)
     afe:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b02:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b06:	80 31       	cpi	r24, 0x10	; 16
     b08:	9e 40       	sbci	r25, 0x0E	; 14
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <__stack+0x20f>
     b0c:	5f c0       	rjmp	.+190    	; 0xbcc <__stack+0x2cd>
				lcd_printf("\f%02d:%02d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     b0e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b12:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b16:	20 e1       	ldi	r18, 0x10	; 16
     b18:	3e e0       	ldi	r19, 0x0E	; 14
     b1a:	b9 01       	movw	r22, r18
     b1c:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
     b20:	ac 01       	movw	r20, r24
     b22:	9a 01       	movw	r18, r20
     b24:	a9 e8       	ldi	r26, 0x89	; 137
     b26:	b8 e8       	ldi	r27, 0x88	; 136
     b28:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
     b2c:	fc 01       	movw	r30, r24
     b2e:	f6 95       	lsr	r31
     b30:	e7 95       	ror	r30
     b32:	f2 95       	swap	r31
     b34:	e2 95       	swap	r30
     b36:	ef 70       	andi	r30, 0x0F	; 15
     b38:	ef 27       	eor	r30, r31
     b3a:	ff 70       	andi	r31, 0x0F	; 15
     b3c:	ef 27       	eor	r30, r31
     b3e:	2c e3       	ldi	r18, 0x3C	; 60
     b40:	2e 9f       	mul	r18, r30
     b42:	c0 01       	movw	r24, r0
     b44:	2f 9f       	mul	r18, r31
     b46:	90 0d       	add	r25, r0
     b48:	11 24       	eor	r1, r1
     b4a:	fa 01       	movw	r30, r20
     b4c:	e8 1b       	sub	r30, r24
     b4e:	f9 0b       	sbc	r31, r25
     b50:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b54:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b58:	20 e1       	ldi	r18, 0x10	; 16
     b5a:	3e e0       	ldi	r19, 0x0E	; 14
     b5c:	b9 01       	movw	r22, r18
     b5e:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
     b62:	9c 01       	movw	r18, r24
     b64:	a9 e8       	ldi	r26, 0x89	; 137
     b66:	b8 e8       	ldi	r27, 0x88	; 136
     b68:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
     b6c:	9c 01       	movw	r18, r24
     b6e:	36 95       	lsr	r19
     b70:	27 95       	ror	r18
     b72:	32 95       	swap	r19
     b74:	22 95       	swap	r18
     b76:	2f 70       	andi	r18, 0x0F	; 15
     b78:	23 27       	eor	r18, r19
     b7a:	3f 70       	andi	r19, 0x0F	; 15
     b7c:	23 27       	eor	r18, r19
     b7e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b82:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b86:	40 e1       	ldi	r20, 0x10	; 16
     b88:	5e e0       	ldi	r21, 0x0E	; 14
     b8a:	ba 01       	movw	r22, r20
     b8c:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
     b90:	cb 01       	movw	r24, r22
     b92:	4f 2f       	mov	r20, r31
     b94:	4f 93       	push	r20
     b96:	4e 2f       	mov	r20, r30
     b98:	4f 93       	push	r20
     b9a:	43 2f       	mov	r20, r19
     b9c:	4f 93       	push	r20
     b9e:	2f 93       	push	r18
     ba0:	29 2f       	mov	r18, r25
     ba2:	2f 93       	push	r18
     ba4:	8f 93       	push	r24
     ba6:	8e e0       	ldi	r24, 0x0E	; 14
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	89 2f       	mov	r24, r25
     bac:	8f 93       	push	r24
     bae:	8e e0       	ldi	r24, 0x0E	; 14
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	8f 93       	push	r24
     bb4:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     bb8:	4d b7       	in	r20, 0x3d	; 61
     bba:	5e b7       	in	r21, 0x3e	; 62
     bbc:	48 5f       	subi	r20, 0xF8	; 248
     bbe:	5f 4f       	sbci	r21, 0xFF	; 255
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	4d c0       	rjmp	.+154    	; 0xc66 <__stack+0x367>
			else
				lcd_printf("\f%02d:%02d   ", (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     bcc:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     bd0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     bd4:	20 e1       	ldi	r18, 0x10	; 16
     bd6:	3e e0       	ldi	r19, 0x0E	; 14
     bd8:	b9 01       	movw	r22, r18
     bda:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
     bde:	ac 01       	movw	r20, r24
     be0:	9a 01       	movw	r18, r20
     be2:	a9 e8       	ldi	r26, 0x89	; 137
     be4:	b8 e8       	ldi	r27, 0x88	; 136
     be6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
     bea:	fc 01       	movw	r30, r24
     bec:	f6 95       	lsr	r31
     bee:	e7 95       	ror	r30
     bf0:	f2 95       	swap	r31
     bf2:	e2 95       	swap	r30
     bf4:	ef 70       	andi	r30, 0x0F	; 15
     bf6:	ef 27       	eor	r30, r31
     bf8:	ff 70       	andi	r31, 0x0F	; 15
     bfa:	ef 27       	eor	r30, r31
     bfc:	2c e3       	ldi	r18, 0x3C	; 60
     bfe:	2e 9f       	mul	r18, r30
     c00:	c0 01       	movw	r24, r0
     c02:	2f 9f       	mul	r18, r31
     c04:	90 0d       	add	r25, r0
     c06:	11 24       	eor	r1, r1
     c08:	fa 01       	movw	r30, r20
     c0a:	e8 1b       	sub	r30, r24
     c0c:	f9 0b       	sbc	r31, r25
     c0e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     c12:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     c16:	20 e1       	ldi	r18, 0x10	; 16
     c18:	3e e0       	ldi	r19, 0x0E	; 14
     c1a:	b9 01       	movw	r22, r18
     c1c:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
     c20:	9c 01       	movw	r18, r24
     c22:	a9 e8       	ldi	r26, 0x89	; 137
     c24:	b8 e8       	ldi	r27, 0x88	; 136
     c26:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
     c2a:	96 95       	lsr	r25
     c2c:	87 95       	ror	r24
     c2e:	92 95       	swap	r25
     c30:	82 95       	swap	r24
     c32:	8f 70       	andi	r24, 0x0F	; 15
     c34:	89 27       	eor	r24, r25
     c36:	9f 70       	andi	r25, 0x0F	; 15
     c38:	89 27       	eor	r24, r25
     c3a:	2f 2f       	mov	r18, r31
     c3c:	2f 93       	push	r18
     c3e:	2e 2f       	mov	r18, r30
     c40:	2f 93       	push	r18
     c42:	29 2f       	mov	r18, r25
     c44:	2f 93       	push	r18
     c46:	8f 93       	push	r24
     c48:	8e e1       	ldi	r24, 0x1E	; 30
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	89 2f       	mov	r24, r25
     c4e:	8f 93       	push	r24
     c50:	8e e1       	ldi	r24, 0x1E	; 30
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	8f 93       	push	r24
     c56:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
			lcd_printf("       %3d%cC", ntc_measure(), 223);
     c66:	0e 94 c4 13 	call	0x2788	; 0x2788 <ntc_measure>
     c6a:	1f 92       	push	r1
     c6c:	2f ed       	ldi	r18, 0xDF	; 223
     c6e:	2f 93       	push	r18
     c70:	29 2f       	mov	r18, r25
     c72:	2f 93       	push	r18
     c74:	8f 93       	push	r24
     c76:	8c e2       	ldi	r24, 0x2C	; 44
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	89 2f       	mov	r24, r25
     c7c:	8f 93       	push	r24
     c7e:	8c e2       	ldi	r24, 0x2C	; 44
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	8f 93       	push	r24
     c84:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
			lcd_printf("\n        %4d", user_profile.rpm);
     c94:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     c98:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     c9c:	29 2f       	mov	r18, r25
     c9e:	2f 93       	push	r18
     ca0:	8f 93       	push	r24
     ca2:	8a e3       	ldi	r24, 0x3A	; 58
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	89 2f       	mov	r24, r25
     ca8:	8f 93       	push	r24
     caa:	8a e3       	ldi	r24, 0x3A	; 58
     cac:	91 e0       	ldi	r25, 0x01	; 1
     cae:	8f 93       	push	r24
     cb0:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0

			switch (machine_state)
     cbc:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	41 f5       	brne	.+80     	; 0xd18 <__stack+0x419>
			{
				case MACHINE_STOP:
					lcd_printf("\n\n%cStart        %cMenu ", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, (main_menu_secelt == MAIN_MENU_SELECT_MENU) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     cc8:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	19 f4       	brne	.+6      	; 0xcd6 <__stack+0x3d7>
     cd0:	28 e0       	ldi	r18, 0x08	; 8
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <__stack+0x3db>
     cd6:	20 e2       	ldi	r18, 0x20	; 32
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     cde:	88 23       	and	r24, r24
     ce0:	19 f4       	brne	.+6      	; 0xce8 <__stack+0x3e9>
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <__stack+0x3ed>
     ce8:	80 e2       	ldi	r24, 0x20	; 32
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	43 2f       	mov	r20, r19
     cee:	4f 93       	push	r20
     cf0:	2f 93       	push	r18
     cf2:	29 2f       	mov	r18, r25
     cf4:	2f 93       	push	r18
     cf6:	8f 93       	push	r24
     cf8:	87 e4       	ldi	r24, 0x47	; 71
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	89 2f       	mov	r24, r25
     cfe:	8f 93       	push	r24
     d00:	87 e4       	ldi	r24, 0x47	; 71
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	8f 93       	push	r24
     d06:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
					break;
     d16:	98 c0       	rjmp	.+304    	; 0xe48 <__stack+0x549>
				default:
					lcd_printf("\n");
     d18:	80 e6       	ldi	r24, 0x60	; 96
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	89 2f       	mov	r24, r25
     d1e:	8f 93       	push	r24
     d20:	80 e6       	ldi	r24, 0x60	; 96
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	8f 93       	push	r24
     d26:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
					// bar to end
					uint32_t bar;
					bar = backup_profile.sec - user_profile.sec;
     d2e:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     d32:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     d36:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     d3a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     d3e:	f9 01       	movw	r30, r18
     d40:	e8 1b       	sub	r30, r24
     d42:	f9 0b       	sbc	r31, r25
     d44:	cf 01       	movw	r24, r30
     d46:	cc 01       	movw	r24, r24
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	9a 83       	std	Y+2, r25	; 0x02
     d50:	ab 83       	std	Y+3, r26	; 0x03
     d52:	bc 83       	std	Y+4, r27	; 0x04
					if (bar)	// div zero
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	ab 81       	ldd	r26, Y+3	; 0x03
     d5a:	bc 81       	ldd	r27, Y+4	; 0x04
     d5c:	89 2b       	or	r24, r25
     d5e:	8a 2b       	or	r24, r26
     d60:	8b 2b       	or	r24, r27
     d62:	09 f4       	brne	.+2      	; 0xd66 <__stack+0x467>
     d64:	4f c0       	rjmp	.+158    	; 0xe04 <__stack+0x505>
					{
						bar *= 20;
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	ab 81       	ldd	r26, Y+3	; 0x03
     d6c:	bc 81       	ldd	r27, Y+4	; 0x04
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	aa 1f       	adc	r26, r26
     d74:	bb 1f       	adc	r27, r27
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	aa 1f       	adc	r26, r26
     d7c:	bb 1f       	adc	r27, r27
     d7e:	9c 01       	movw	r18, r24
     d80:	ad 01       	movw	r20, r26
     d82:	22 0f       	add	r18, r18
     d84:	33 1f       	adc	r19, r19
     d86:	44 1f       	adc	r20, r20
     d88:	55 1f       	adc	r21, r21
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	44 1f       	adc	r20, r20
     d90:	55 1f       	adc	r21, r21
     d92:	82 0f       	add	r24, r18
     d94:	93 1f       	adc	r25, r19
     d96:	a4 1f       	adc	r26, r20
     d98:	b5 1f       	adc	r27, r21
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	ab 83       	std	Y+3, r26	; 0x03
     da0:	bc 83       	std	Y+4, r27	; 0x04
						bar = bar / backup_profile.sec;
     da2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     da6:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     daa:	9c 01       	movw	r18, r24
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	ab 81       	ldd	r26, Y+3	; 0x03
     db6:	bc 81       	ldd	r27, Y+4	; 0x04
     db8:	bc 01       	movw	r22, r24
     dba:	cd 01       	movw	r24, r26
     dbc:	0e 94 35 1a 	call	0x346a	; 0x346a <__udivmodsi4>
     dc0:	da 01       	movw	r26, r20
     dc2:	c9 01       	movw	r24, r18
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	9a 83       	std	Y+2, r25	; 0x02
     dc8:	ab 83       	std	Y+3, r26	; 0x03
     dca:	bc 83       	std	Y+4, r27	; 0x04
					}
					for (; bar > 0; bar--)
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <__stack+0x505>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
     dce:	1f 92       	push	r1
     dd0:	89 e0       	ldi	r24, 0x09	; 9
     dd2:	8f 93       	push	r24
     dd4:	82 e6       	ldi	r24, 0x62	; 98
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	89 2f       	mov	r24, r25
     dda:	8f 93       	push	r24
     ddc:	82 e6       	ldi	r24, 0x62	; 98
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	8f 93       	push	r24
     de2:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
					if (bar)	// div zero
					{
						bar *= 20;
						bar = bar / backup_profile.sec;
					}
					for (; bar > 0; bar--)
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	ab 81       	ldd	r26, Y+3	; 0x03
     df4:	bc 81       	ldd	r27, Y+4	; 0x04
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	a1 09       	sbc	r26, r1
     dfa:	b1 09       	sbc	r27, r1
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	ab 83       	std	Y+3, r26	; 0x03
     e02:	bc 83       	std	Y+4, r27	; 0x04
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	ab 81       	ldd	r26, Y+3	; 0x03
     e0a:	bc 81       	ldd	r27, Y+4	; 0x04
     e0c:	89 2b       	or	r24, r25
     e0e:	8a 2b       	or	r24, r26
     e10:	8b 2b       	or	r24, r27
     e12:	e9 f6       	brne	.-70     	; 0xdce <__stack+0x4cf>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
					}

					lcd_printf("\n%cStop", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e14:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     e18:	88 23       	and	r24, r24
     e1a:	19 f4       	brne	.+6      	; 0xe22 <__stack+0x523>
     e1c:	88 e0       	ldi	r24, 0x08	; 8
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <__stack+0x527>
     e22:	80 e2       	ldi	r24, 0x20	; 32
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	29 2f       	mov	r18, r25
     e28:	2f 93       	push	r18
     e2a:	8f 93       	push	r24
     e2c:	85 e6       	ldi	r24, 0x65	; 101
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	89 2f       	mov	r24, r25
     e32:	8f 93       	push	r24
     e34:	85 e6       	ldi	r24, 0x65	; 101
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	8f 93       	push	r24
     e3a:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
					break;
     e46:	00 00       	nop
			}
			break;
     e48:	15 c3       	rjmp	.+1578   	; 0x1474 <__stack+0xb75>

		case ITEM_MENU:
			lcd_printf("\f%cRychlost omylani", (item_menu_secect == ITEM_MENU_SELECT_RPM) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e4a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     e4e:	88 23       	and	r24, r24
     e50:	19 f4       	brne	.+6      	; 0xe58 <__stack+0x559>
     e52:	88 e0       	ldi	r24, 0x08	; 8
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <__stack+0x55d>
     e58:	80 e2       	ldi	r24, 0x20	; 32
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	29 2f       	mov	r18, r25
     e5e:	2f 93       	push	r18
     e60:	8f 93       	push	r24
     e62:	8d e6       	ldi	r24, 0x6D	; 109
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	89 2f       	mov	r24, r25
     e68:	8f 93       	push	r24
     e6a:	8d e6       	ldi	r24, 0x6D	; 109
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	8f 93       	push	r24
     e70:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
			lcd_printf("\n%cDelka omylani", (item_menu_secect == ITEM_MENU_SELECT_TIME) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e7c:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	19 f4       	brne	.+6      	; 0xe8a <__stack+0x58b>
     e84:	88 e0       	ldi	r24, 0x08	; 8
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <__stack+0x58f>
     e8a:	80 e2       	ldi	r24, 0x20	; 32
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	29 2f       	mov	r18, r25
     e90:	2f 93       	push	r18
     e92:	8f 93       	push	r24
     e94:	81 e8       	ldi	r24, 0x81	; 129
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	89 2f       	mov	r24, r25
     e9a:	8f 93       	push	r24
     e9c:	81 e8       	ldi	r24, 0x81	; 129
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	8f 93       	push	r24
     ea2:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
			lcd_printf("\n%cNacist profil", (item_menu_secect == ITEM_MENU_SELECT_LOAD) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     eae:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	19 f4       	brne	.+6      	; 0xebc <__stack+0x5bd>
     eb6:	88 e0       	ldi	r24, 0x08	; 8
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <__stack+0x5c1>
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	29 2f       	mov	r18, r25
     ec2:	2f 93       	push	r18
     ec4:	8f 93       	push	r24
     ec6:	82 e9       	ldi	r24, 0x92	; 146
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	89 2f       	mov	r24, r25
     ecc:	8f 93       	push	r24
     ece:	82 e9       	ldi	r24, 0x92	; 146
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	8f 93       	push	r24
     ed4:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
			lcd_printf("\n%cUlozit profil", (item_menu_secect == ITEM_MENU_SELECT_SAVE) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     ee0:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     ee4:	83 30       	cpi	r24, 0x03	; 3
     ee6:	19 f4       	brne	.+6      	; 0xeee <__stack+0x5ef>
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <__stack+0x5f3>
     eee:	80 e2       	ldi	r24, 0x20	; 32
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	29 2f       	mov	r18, r25
     ef4:	2f 93       	push	r18
     ef6:	8f 93       	push	r24
     ef8:	83 ea       	ldi	r24, 0xA3	; 163
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	89 2f       	mov	r24, r25
     efe:	8f 93       	push	r24
     f00:	83 ea       	ldi	r24, 0xA3	; 163
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	8f 93       	push	r24
     f06:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
			break;
     f12:	b0 c2       	rjmp	.+1376   	; 0x1474 <__stack+0xb75>

		case RPM_MENU:
			lcd_printf("\fNastaveni otacek");
     f14:	84 eb       	ldi	r24, 0xB4	; 180
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	89 2f       	mov	r24, r25
     f1a:	8f 93       	push	r24
     f1c:	84 eb       	ldi	r24, 0xB4	; 180
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	8f 93       	push	r24
     f22:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
			lcd_printf("\nza minutu");
     f2a:	86 ec       	ldi	r24, 0xC6	; 198
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	89 2f       	mov	r24, r25
     f30:	8f 93       	push	r24
     f32:	86 ec       	ldi	r24, 0xC6	; 198
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	8f 93       	push	r24
     f38:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
			lcd_printf("\nStara hodnota:%6d", user_profile.rpm);
     f40:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     f44:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     f48:	29 2f       	mov	r18, r25
     f4a:	2f 93       	push	r18
     f4c:	8f 93       	push	r24
     f4e:	81 ed       	ldi	r24, 0xD1	; 209
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	89 2f       	mov	r24, r25
     f54:	8f 93       	push	r24
     f56:	81 ed       	ldi	r24, 0xD1	; 209
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	8f 93       	push	r24
     f5c:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
			lcd_printf("\nNova  hodnota:%6d", backup_profile.rpm);
     f68:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     f6c:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     f70:	29 2f       	mov	r18, r25
     f72:	2f 93       	push	r18
     f74:	8f 93       	push	r24
     f76:	84 ee       	ldi	r24, 0xE4	; 228
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	89 2f       	mov	r24, r25
     f7c:	8f 93       	push	r24
     f7e:	84 ee       	ldi	r24, 0xE4	; 228
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	8f 93       	push	r24
     f84:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
			break;
     f90:	71 c2       	rjmp	.+1250   	; 0x1474 <__stack+0xb75>

		case TIME_MENU:
			lcd_printf("\fNastaveni delky");
     f92:	87 ef       	ldi	r24, 0xF7	; 247
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	89 2f       	mov	r24, r25
     f98:	8f 93       	push	r24
     f9a:	87 ef       	ldi	r24, 0xF7	; 247
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	8f 93       	push	r24
     fa0:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
			lcd_printf("\nomylani [HH:MM]");
     fa8:	88 e0       	ldi	r24, 0x08	; 8
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	89 2f       	mov	r24, r25
     fae:	8f 93       	push	r24
     fb0:	88 e0       	ldi	r24, 0x08	; 8
     fb2:	92 e0       	ldi	r25, 0x02	; 2
     fb4:	8f 93       	push	r24
     fb6:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
			lcd_printf("\nStary cas:     %2d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60);
     fbe:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     fc2:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     fc6:	20 e1       	ldi	r18, 0x10	; 16
     fc8:	3e e0       	ldi	r19, 0x0E	; 14
     fca:	b9 01       	movw	r22, r18
     fcc:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
     fd0:	9c 01       	movw	r18, r24
     fd2:	a9 e8       	ldi	r26, 0x89	; 137
     fd4:	b8 e8       	ldi	r27, 0x88	; 136
     fd6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
     fda:	9c 01       	movw	r18, r24
     fdc:	36 95       	lsr	r19
     fde:	27 95       	ror	r18
     fe0:	32 95       	swap	r19
     fe2:	22 95       	swap	r18
     fe4:	2f 70       	andi	r18, 0x0F	; 15
     fe6:	23 27       	eor	r18, r19
     fe8:	3f 70       	andi	r19, 0x0F	; 15
     fea:	23 27       	eor	r18, r19
     fec:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     ff0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     ff4:	40 e1       	ldi	r20, 0x10	; 16
     ff6:	5e e0       	ldi	r21, 0x0E	; 14
     ff8:	ba 01       	movw	r22, r20
     ffa:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
     ffe:	cb 01       	movw	r24, r22
    1000:	43 2f       	mov	r20, r19
    1002:	4f 93       	push	r20
    1004:	2f 93       	push	r18
    1006:	29 2f       	mov	r18, r25
    1008:	2f 93       	push	r18
    100a:	8f 93       	push	r24
    100c:	89 e1       	ldi	r24, 0x19	; 25
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	89 2f       	mov	r24, r25
    1012:	8f 93       	push	r24
    1014:	89 e1       	ldi	r24, 0x19	; 25
    1016:	92 e0       	ldi	r25, 0x02	; 2
    1018:	8f 93       	push	r24
    101a:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
			lcd_printf("\nNovy  cas:     %2d:%02d", backup_profile.sec/3600, (backup_profile.sec%3600)/60);
    102a:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
    102e:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
    1032:	20 e1       	ldi	r18, 0x10	; 16
    1034:	3e e0       	ldi	r19, 0x0E	; 14
    1036:	b9 01       	movw	r22, r18
    1038:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    103c:	9c 01       	movw	r18, r24
    103e:	a9 e8       	ldi	r26, 0x89	; 137
    1040:	b8 e8       	ldi	r27, 0x88	; 136
    1042:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    1046:	9c 01       	movw	r18, r24
    1048:	36 95       	lsr	r19
    104a:	27 95       	ror	r18
    104c:	32 95       	swap	r19
    104e:	22 95       	swap	r18
    1050:	2f 70       	andi	r18, 0x0F	; 15
    1052:	23 27       	eor	r18, r19
    1054:	3f 70       	andi	r19, 0x0F	; 15
    1056:	23 27       	eor	r18, r19
    1058:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
    105c:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
    1060:	40 e1       	ldi	r20, 0x10	; 16
    1062:	5e e0       	ldi	r21, 0x0E	; 14
    1064:	ba 01       	movw	r22, r20
    1066:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    106a:	cb 01       	movw	r24, r22
    106c:	43 2f       	mov	r20, r19
    106e:	4f 93       	push	r20
    1070:	2f 93       	push	r18
    1072:	29 2f       	mov	r18, r25
    1074:	2f 93       	push	r18
    1076:	8f 93       	push	r24
    1078:	82 e3       	ldi	r24, 0x32	; 50
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	89 2f       	mov	r24, r25
    107e:	8f 93       	push	r24
    1080:	82 e3       	ldi	r24, 0x32	; 50
    1082:	92 e0       	ldi	r25, 0x02	; 2
    1084:	8f 93       	push	r24
    1086:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
			break;
    1096:	ee c1       	rjmp	.+988    	; 0x1474 <__stack+0xb75>

		case LOAD_MENU:
			lcd_printf("\fNacteni profilu");
    1098:	8b e4       	ldi	r24, 0x4B	; 75
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	89 2f       	mov	r24, r25
    109e:	8f 93       	push	r24
    10a0:	8b e4       	ldi	r24, 0x4B	; 75
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	8f 93       	push	r24
    10a6:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    10ae:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    10b2:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    10b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    10ba:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    10be:	20 e1       	ldi	r18, 0x10	; 16
    10c0:	3e e0       	ldi	r19, 0x0E	; 14
    10c2:	b9 01       	movw	r22, r18
    10c4:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    10c8:	9c 01       	movw	r18, r24
    10ca:	a9 e8       	ldi	r26, 0x89	; 137
    10cc:	b8 e8       	ldi	r27, 0x88	; 136
    10ce:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    10d2:	9c 01       	movw	r18, r24
    10d4:	36 95       	lsr	r19
    10d6:	27 95       	ror	r18
    10d8:	32 95       	swap	r19
    10da:	22 95       	swap	r18
    10dc:	2f 70       	andi	r18, 0x0F	; 15
    10de:	23 27       	eor	r18, r19
    10e0:	3f 70       	andi	r19, 0x0F	; 15
    10e2:	23 27       	eor	r18, r19
    10e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    10e8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    10ec:	40 e1       	ldi	r20, 0x10	; 16
    10ee:	5e e0       	ldi	r21, 0x0E	; 14
    10f0:	ba 01       	movw	r22, r20
    10f2:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    10f6:	cb 01       	movw	r24, r22
    10f8:	ac 01       	movw	r20, r24
    10fa:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    10fe:	88 23       	and	r24, r24
    1100:	19 f4       	brne	.+6      	; 0x1108 <__stack+0x809>
    1102:	88 e0       	ldi	r24, 0x08	; 8
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <__stack+0x80d>
    1108:	80 e2       	ldi	r24, 0x20	; 32
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	6f 2f       	mov	r22, r31
    110e:	6f 93       	push	r22
    1110:	6e 2f       	mov	r22, r30
    1112:	6f 93       	push	r22
    1114:	63 2f       	mov	r22, r19
    1116:	6f 93       	push	r22
    1118:	2f 93       	push	r18
    111a:	25 2f       	mov	r18, r21
    111c:	2f 93       	push	r18
    111e:	24 2f       	mov	r18, r20
    1120:	2f 93       	push	r18
    1122:	29 2f       	mov	r18, r25
    1124:	2f 93       	push	r18
    1126:	8f 93       	push	r24
    1128:	8c e5       	ldi	r24, 0x5C	; 92
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	89 2f       	mov	r24, r25
    112e:	8f 93       	push	r24
    1130:	8c e5       	ldi	r24, 0x5C	; 92
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	8f 93       	push	r24
    1136:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    113a:	4d b7       	in	r20, 0x3d	; 61
    113c:	5e b7       	in	r21, 0x3e	; 62
    113e:	46 5f       	subi	r20, 0xF6	; 246
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    114c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    1150:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1154:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1158:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    115c:	20 e1       	ldi	r18, 0x10	; 16
    115e:	3e e0       	ldi	r19, 0x0E	; 14
    1160:	b9 01       	movw	r22, r18
    1162:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    1166:	9c 01       	movw	r18, r24
    1168:	a9 e8       	ldi	r26, 0x89	; 137
    116a:	b8 e8       	ldi	r27, 0x88	; 136
    116c:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    1170:	9c 01       	movw	r18, r24
    1172:	36 95       	lsr	r19
    1174:	27 95       	ror	r18
    1176:	32 95       	swap	r19
    1178:	22 95       	swap	r18
    117a:	2f 70       	andi	r18, 0x0F	; 15
    117c:	23 27       	eor	r18, r19
    117e:	3f 70       	andi	r19, 0x0F	; 15
    1180:	23 27       	eor	r18, r19
    1182:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1186:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    118a:	40 e1       	ldi	r20, 0x10	; 16
    118c:	5e e0       	ldi	r21, 0x0E	; 14
    118e:	ba 01       	movw	r22, r20
    1190:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    1194:	cb 01       	movw	r24, r22
    1196:	ac 01       	movw	r20, r24
    1198:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	19 f4       	brne	.+6      	; 0x11a6 <__stack+0x8a7>
    11a0:	88 e0       	ldi	r24, 0x08	; 8
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <__stack+0x8ab>
    11a6:	80 e2       	ldi	r24, 0x20	; 32
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	6f 2f       	mov	r22, r31
    11ac:	6f 93       	push	r22
    11ae:	6e 2f       	mov	r22, r30
    11b0:	6f 93       	push	r22
    11b2:	63 2f       	mov	r22, r19
    11b4:	6f 93       	push	r22
    11b6:	2f 93       	push	r18
    11b8:	25 2f       	mov	r18, r21
    11ba:	2f 93       	push	r18
    11bc:	24 2f       	mov	r18, r20
    11be:	2f 93       	push	r18
    11c0:	29 2f       	mov	r18, r25
    11c2:	2f 93       	push	r18
    11c4:	8f 93       	push	r24
    11c6:	84 e7       	ldi	r24, 0x74	; 116
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	89 2f       	mov	r24, r25
    11cc:	8f 93       	push	r24
    11ce:	84 e7       	ldi	r24, 0x74	; 116
    11d0:	92 e0       	ldi	r25, 0x02	; 2
    11d2:	8f 93       	push	r24
    11d4:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    11d8:	8d b7       	in	r24, 0x3d	; 61
    11da:	9e b7       	in	r25, 0x3e	; 62
    11dc:	0a 96       	adiw	r24, 0x0a	; 10
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    11e8:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    11ec:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    11f0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    11f4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    11f8:	20 e1       	ldi	r18, 0x10	; 16
    11fa:	3e e0       	ldi	r19, 0x0E	; 14
    11fc:	b9 01       	movw	r22, r18
    11fe:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    1202:	9c 01       	movw	r18, r24
    1204:	a9 e8       	ldi	r26, 0x89	; 137
    1206:	b8 e8       	ldi	r27, 0x88	; 136
    1208:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    120c:	9c 01       	movw	r18, r24
    120e:	36 95       	lsr	r19
    1210:	27 95       	ror	r18
    1212:	32 95       	swap	r19
    1214:	22 95       	swap	r18
    1216:	2f 70       	andi	r18, 0x0F	; 15
    1218:	23 27       	eor	r18, r19
    121a:	3f 70       	andi	r19, 0x0F	; 15
    121c:	23 27       	eor	r18, r19
    121e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1222:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    1226:	40 e1       	ldi	r20, 0x10	; 16
    1228:	5e e0       	ldi	r21, 0x0E	; 14
    122a:	ba 01       	movw	r22, r20
    122c:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    1230:	cb 01       	movw	r24, r22
    1232:	ac 01       	movw	r20, r24
    1234:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	19 f4       	brne	.+6      	; 0x1242 <__stack+0x943>
    123c:	88 e0       	ldi	r24, 0x08	; 8
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <__stack+0x947>
    1242:	80 e2       	ldi	r24, 0x20	; 32
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	6f 2f       	mov	r22, r31
    1248:	6f 93       	push	r22
    124a:	6e 2f       	mov	r22, r30
    124c:	6f 93       	push	r22
    124e:	63 2f       	mov	r22, r19
    1250:	6f 93       	push	r22
    1252:	2f 93       	push	r18
    1254:	25 2f       	mov	r18, r21
    1256:	2f 93       	push	r18
    1258:	24 2f       	mov	r18, r20
    125a:	2f 93       	push	r18
    125c:	29 2f       	mov	r18, r25
    125e:	2f 93       	push	r18
    1260:	8f 93       	push	r24
    1262:	8c e8       	ldi	r24, 0x8C	; 140
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	89 2f       	mov	r24, r25
    1268:	8f 93       	push	r24
    126a:	8c e8       	ldi	r24, 0x8C	; 140
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	8f 93       	push	r24
    1270:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    1274:	ed b7       	in	r30, 0x3d	; 61
    1276:	fe b7       	in	r31, 0x3e	; 62
    1278:	3a 96       	adiw	r30, 0x0a	; 10
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
			break;
    1284:	f7 c0       	rjmp	.+494    	; 0x1474 <__stack+0xb75>

		case SAVE_MENU:
			lcd_printf("\fUlozeni profilu");
    1286:	84 ea       	ldi	r24, 0xA4	; 164
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	89 2f       	mov	r24, r25
    128c:	8f 93       	push	r24
    128e:	84 ea       	ldi	r24, 0xA4	; 164
    1290:	92 e0       	ldi	r25, 0x02	; 2
    1292:	8f 93       	push	r24
    1294:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    129c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    12a0:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    12a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    12a8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    12ac:	20 e1       	ldi	r18, 0x10	; 16
    12ae:	3e e0       	ldi	r19, 0x0E	; 14
    12b0:	b9 01       	movw	r22, r18
    12b2:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    12b6:	9c 01       	movw	r18, r24
    12b8:	a9 e8       	ldi	r26, 0x89	; 137
    12ba:	b8 e8       	ldi	r27, 0x88	; 136
    12bc:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    12c0:	9c 01       	movw	r18, r24
    12c2:	36 95       	lsr	r19
    12c4:	27 95       	ror	r18
    12c6:	32 95       	swap	r19
    12c8:	22 95       	swap	r18
    12ca:	2f 70       	andi	r18, 0x0F	; 15
    12cc:	23 27       	eor	r18, r19
    12ce:	3f 70       	andi	r19, 0x0F	; 15
    12d0:	23 27       	eor	r18, r19
    12d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    12d6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    12da:	40 e1       	ldi	r20, 0x10	; 16
    12dc:	5e e0       	ldi	r21, 0x0E	; 14
    12de:	ba 01       	movw	r22, r20
    12e0:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	ac 01       	movw	r20, r24
    12e8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    12ec:	88 23       	and	r24, r24
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <__stack+0x9f7>
    12f0:	88 e0       	ldi	r24, 0x08	; 8
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <__stack+0x9fb>
    12f6:	80 e2       	ldi	r24, 0x20	; 32
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	6f 2f       	mov	r22, r31
    12fc:	6f 93       	push	r22
    12fe:	6e 2f       	mov	r22, r30
    1300:	6f 93       	push	r22
    1302:	63 2f       	mov	r22, r19
    1304:	6f 93       	push	r22
    1306:	2f 93       	push	r18
    1308:	25 2f       	mov	r18, r21
    130a:	2f 93       	push	r18
    130c:	24 2f       	mov	r18, r20
    130e:	2f 93       	push	r18
    1310:	29 2f       	mov	r18, r25
    1312:	2f 93       	push	r18
    1314:	8f 93       	push	r24
    1316:	8c e5       	ldi	r24, 0x5C	; 92
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	89 2f       	mov	r24, r25
    131c:	8f 93       	push	r24
    131e:	8c e5       	ldi	r24, 0x5C	; 92
    1320:	92 e0       	ldi	r25, 0x02	; 2
    1322:	8f 93       	push	r24
    1324:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    1328:	4d b7       	in	r20, 0x3d	; 61
    132a:	5e b7       	in	r21, 0x3e	; 62
    132c:	46 5f       	subi	r20, 0xF6	; 246
    132e:	5f 4f       	sbci	r21, 0xFF	; 255
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    133a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    133e:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1342:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1346:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    134a:	20 e1       	ldi	r18, 0x10	; 16
    134c:	3e e0       	ldi	r19, 0x0E	; 14
    134e:	b9 01       	movw	r22, r18
    1350:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    1354:	9c 01       	movw	r18, r24
    1356:	a9 e8       	ldi	r26, 0x89	; 137
    1358:	b8 e8       	ldi	r27, 0x88	; 136
    135a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    135e:	9c 01       	movw	r18, r24
    1360:	36 95       	lsr	r19
    1362:	27 95       	ror	r18
    1364:	32 95       	swap	r19
    1366:	22 95       	swap	r18
    1368:	2f 70       	andi	r18, 0x0F	; 15
    136a:	23 27       	eor	r18, r19
    136c:	3f 70       	andi	r19, 0x0F	; 15
    136e:	23 27       	eor	r18, r19
    1370:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1374:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1378:	40 e1       	ldi	r20, 0x10	; 16
    137a:	5e e0       	ldi	r21, 0x0E	; 14
    137c:	ba 01       	movw	r22, r20
    137e:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    1382:	cb 01       	movw	r24, r22
    1384:	ac 01       	movw	r20, r24
    1386:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	19 f4       	brne	.+6      	; 0x1394 <__stack+0xa95>
    138e:	88 e0       	ldi	r24, 0x08	; 8
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <__stack+0xa99>
    1394:	80 e2       	ldi	r24, 0x20	; 32
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	6f 2f       	mov	r22, r31
    139a:	6f 93       	push	r22
    139c:	6e 2f       	mov	r22, r30
    139e:	6f 93       	push	r22
    13a0:	63 2f       	mov	r22, r19
    13a2:	6f 93       	push	r22
    13a4:	2f 93       	push	r18
    13a6:	25 2f       	mov	r18, r21
    13a8:	2f 93       	push	r18
    13aa:	24 2f       	mov	r18, r20
    13ac:	2f 93       	push	r18
    13ae:	29 2f       	mov	r18, r25
    13b0:	2f 93       	push	r18
    13b2:	8f 93       	push	r24
    13b4:	84 e7       	ldi	r24, 0x74	; 116
    13b6:	92 e0       	ldi	r25, 0x02	; 2
    13b8:	89 2f       	mov	r24, r25
    13ba:	8f 93       	push	r24
    13bc:	84 e7       	ldi	r24, 0x74	; 116
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	8f 93       	push	r24
    13c2:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    13c6:	8d b7       	in	r24, 0x3d	; 61
    13c8:	9e b7       	in	r25, 0x3e	; 62
    13ca:	0a 96       	adiw	r24, 0x0a	; 10
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    13d6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    13da:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    13de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    13e2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    13e6:	20 e1       	ldi	r18, 0x10	; 16
    13e8:	3e e0       	ldi	r19, 0x0E	; 14
    13ea:	b9 01       	movw	r22, r18
    13ec:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    13f0:	9c 01       	movw	r18, r24
    13f2:	a9 e8       	ldi	r26, 0x89	; 137
    13f4:	b8 e8       	ldi	r27, 0x88	; 136
    13f6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    13fa:	9c 01       	movw	r18, r24
    13fc:	36 95       	lsr	r19
    13fe:	27 95       	ror	r18
    1400:	32 95       	swap	r19
    1402:	22 95       	swap	r18
    1404:	2f 70       	andi	r18, 0x0F	; 15
    1406:	23 27       	eor	r18, r19
    1408:	3f 70       	andi	r19, 0x0F	; 15
    140a:	23 27       	eor	r18, r19
    140c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1410:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    1414:	40 e1       	ldi	r20, 0x10	; 16
    1416:	5e e0       	ldi	r21, 0x0E	; 14
    1418:	ba 01       	movw	r22, r20
    141a:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    141e:	cb 01       	movw	r24, r22
    1420:	ac 01       	movw	r20, r24
    1422:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	19 f4       	brne	.+6      	; 0x1430 <__stack+0xb31>
    142a:	88 e0       	ldi	r24, 0x08	; 8
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <__stack+0xb35>
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	6f 2f       	mov	r22, r31
    1436:	6f 93       	push	r22
    1438:	6e 2f       	mov	r22, r30
    143a:	6f 93       	push	r22
    143c:	63 2f       	mov	r22, r19
    143e:	6f 93       	push	r22
    1440:	2f 93       	push	r18
    1442:	25 2f       	mov	r18, r21
    1444:	2f 93       	push	r18
    1446:	24 2f       	mov	r18, r20
    1448:	2f 93       	push	r18
    144a:	29 2f       	mov	r18, r25
    144c:	2f 93       	push	r18
    144e:	8f 93       	push	r24
    1450:	8c e8       	ldi	r24, 0x8C	; 140
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	89 2f       	mov	r24, r25
    1456:	8f 93       	push	r24
    1458:	8c e8       	ldi	r24, 0x8C	; 140
    145a:	92 e0       	ldi	r25, 0x02	; 2
    145c:	8f 93       	push	r24
    145e:	0e 94 1b 11 	call	0x2236	; 0x2236 <lcd_printf>
    1462:	ed b7       	in	r30, 0x3d	; 61
    1464:	fe b7       	in	r31, 0x3e	; 62
    1466:	3a 96       	adiw	r30, 0x0a	; 10
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
			break;
    1472:	00 00       	nop

		default:
		;
	}
}
    1474:	00 00       	nop
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <lcd_init>:
#include "wyk_lcd.h"

// inicializuje lcd
void lcd_init(void)
{
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	2e 97       	sbiw	r28, 0x0e	; 14
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
	LCD_RS_DDR |= LCD_RS;
    149a:	8a e2       	ldi	r24, 0x2A	; 42
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	2a e2       	ldi	r18, 0x2A	; 42
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	f9 01       	movw	r30, r18
    14a4:	20 81       	ld	r18, Z
    14a6:	21 60       	ori	r18, 0x01	; 1
    14a8:	fc 01       	movw	r30, r24
    14aa:	20 83       	st	Z, r18
	LCD_RS0;
    14ac:	8b e2       	ldi	r24, 0x2B	; 43
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	2b e2       	ldi	r18, 0x2B	; 43
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	f9 01       	movw	r30, r18
    14b6:	20 81       	ld	r18, Z
    14b8:	2e 7f       	andi	r18, 0xFE	; 254
    14ba:	fc 01       	movw	r30, r24
    14bc:	20 83       	st	Z, r18

	LCD_EN_DDR |= LCD_EN;
    14be:	87 e2       	ldi	r24, 0x27	; 39
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	27 e2       	ldi	r18, 0x27	; 39
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	f9 01       	movw	r30, r18
    14c8:	20 81       	ld	r18, Z
    14ca:	20 61       	ori	r18, 0x10	; 16
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18
	LCD_EN0;
    14d0:	88 e2       	ldi	r24, 0x28	; 40
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	28 e2       	ldi	r18, 0x28	; 40
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	f9 01       	movw	r30, r18
    14da:	20 81       	ld	r18, Z
    14dc:	2f 7e       	andi	r18, 0xEF	; 239
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18

	LCD_D7_DDR |= LCD_D7;
    14e2:	87 e2       	ldi	r24, 0x27	; 39
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	27 e2       	ldi	r18, 0x27	; 39
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	f9 01       	movw	r30, r18
    14ec:	20 81       	ld	r18, Z
    14ee:	21 60       	ori	r18, 0x01	; 1
    14f0:	fc 01       	movw	r30, r24
    14f2:	20 83       	st	Z, r18
	LCD_D6_DDR |= LCD_D6;
    14f4:	87 e2       	ldi	r24, 0x27	; 39
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	27 e2       	ldi	r18, 0x27	; 39
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	f9 01       	movw	r30, r18
    14fe:	20 81       	ld	r18, Z
    1500:	22 60       	ori	r18, 0x02	; 2
    1502:	fc 01       	movw	r30, r24
    1504:	20 83       	st	Z, r18
	LCD_D5_DDR |= LCD_D5;
    1506:	87 e2       	ldi	r24, 0x27	; 39
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	27 e2       	ldi	r18, 0x27	; 39
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	f9 01       	movw	r30, r18
    1510:	20 81       	ld	r18, Z
    1512:	24 60       	ori	r18, 0x04	; 4
    1514:	fc 01       	movw	r30, r24
    1516:	20 83       	st	Z, r18
	LCD_D4_DDR |= LCD_D4;
    1518:	87 e2       	ldi	r24, 0x27	; 39
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	27 e2       	ldi	r18, 0x27	; 39
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	f9 01       	movw	r30, r18
    1522:	20 81       	ld	r18, Z
    1524:	28 60       	ori	r18, 0x08	; 8
    1526:	fc 01       	movw	r30, r24
    1528:	20 83       	st	Z, r18

	LCD_D7_0;
    152a:	88 e2       	ldi	r24, 0x28	; 40
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	28 e2       	ldi	r18, 0x28	; 40
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	f9 01       	movw	r30, r18
    1534:	20 81       	ld	r18, Z
    1536:	2e 7f       	andi	r18, 0xFE	; 254
    1538:	fc 01       	movw	r30, r24
    153a:	20 83       	st	Z, r18
	LCD_D6_0;
    153c:	88 e2       	ldi	r24, 0x28	; 40
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	28 e2       	ldi	r18, 0x28	; 40
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	f9 01       	movw	r30, r18
    1546:	20 81       	ld	r18, Z
    1548:	2d 7f       	andi	r18, 0xFD	; 253
    154a:	fc 01       	movw	r30, r24
    154c:	20 83       	st	Z, r18
	LCD_D5_0;
    154e:	88 e2       	ldi	r24, 0x28	; 40
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	28 e2       	ldi	r18, 0x28	; 40
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	f9 01       	movw	r30, r18
    1558:	20 81       	ld	r18, Z
    155a:	2b 7f       	andi	r18, 0xFB	; 251
    155c:	fc 01       	movw	r30, r24
    155e:	20 83       	st	Z, r18
	LCD_D4_0;
    1560:	88 e2       	ldi	r24, 0x28	; 40
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	28 e2       	ldi	r18, 0x28	; 40
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	f9 01       	movw	r30, r18
    156a:	20 81       	ld	r18, Z
    156c:	27 7f       	andi	r18, 0xF7	; 247
    156e:	fc 01       	movw	r30, r24
    1570:	20 83       	st	Z, r18


	lcd_set_nibble(LCD_CMD_INIT>>4);
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 8a 0b 	call	0x1714	; 0x1714 <lcd_set_nibble>
	LCD_EN1;
    157a:	88 e2       	ldi	r24, 0x28	; 40
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	28 e2       	ldi	r18, 0x28	; 40
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	f9 01       	movw	r30, r18
    1584:	20 81       	ld	r18, Z
    1586:	20 61       	ori	r18, 0x10	; 16
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e4       	ldi	r27, 0x40	; 64
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	ab 83       	std	Y+3, r26	; 0x03
    159a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	4a ef       	ldi	r20, 0xFA	; 250
    15a2:	54 e4       	ldi	r21, 0x44	; 68
    15a4:	69 81       	ldd	r22, Y+1	; 0x01
    15a6:	7a 81       	ldd	r23, Y+2	; 0x02
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	af 83       	std	Y+7, r26	; 0x07
    15ba:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e8       	ldi	r20, 0x80	; 128
    15c2:	5f e3       	ldi	r21, 0x3F	; 63
    15c4:	6d 81       	ldd	r22, Y+5	; 0x05
    15c6:	7e 81       	ldd	r23, Y+6	; 0x06
    15c8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ca:	98 85       	ldd	r25, Y+8	; 0x08
    15cc:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	2c f4       	brge	.+10     	; 0x15de <lcd_init+0x158>
		__ticks = 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9a 87       	std	Y+10, r25	; 0x0a
    15da:	89 87       	std	Y+9, r24	; 0x09
    15dc:	3f c0       	rjmp	.+126    	; 0x165c <lcd_init+0x1d6>
	else if (__tmp > 65535)
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	6d 81       	ldd	r22, Y+5	; 0x05
    15e8:	7e 81       	ldd	r23, Y+6	; 0x06
    15ea:	8f 81       	ldd	r24, Y+7	; 0x07
    15ec:	98 85       	ldd	r25, Y+8	; 0x08
    15ee:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	4c f5       	brge	.+82     	; 0x1648 <lcd_init+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e2       	ldi	r20, 0x20	; 32
    15fc:	51 e4       	ldi	r21, 0x41	; 65
    15fe:	69 81       	ldd	r22, Y+1	; 0x01
    1600:	7a 81       	ldd	r23, Y+2	; 0x02
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9a 87       	std	Y+10, r25	; 0x0a
    161c:	89 87       	std	Y+9, r24	; 0x09
    161e:	0f c0       	rjmp	.+30     	; 0x163e <lcd_init+0x1b8>
    1620:	88 ec       	ldi	r24, 0xC8	; 200
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9c 87       	std	Y+12, r25	; 0x0c
    1626:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1628:	8b 85       	ldd	r24, Y+11	; 0x0b
    162a:	9c 85       	ldd	r25, Y+12	; 0x0c
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <lcd_init+0x1a6>
    1630:	9c 87       	std	Y+12, r25	; 0x0c
    1632:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1634:	89 85       	ldd	r24, Y+9	; 0x09
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	9a 87       	std	Y+10, r25	; 0x0a
    163c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    163e:	89 85       	ldd	r24, Y+9	; 0x09
    1640:	9a 85       	ldd	r25, Y+10	; 0x0a
    1642:	89 2b       	or	r24, r25
    1644:	69 f7       	brne	.-38     	; 0x1620 <lcd_init+0x19a>
    1646:	14 c0       	rjmp	.+40     	; 0x1670 <lcd_init+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1648:	6d 81       	ldd	r22, Y+5	; 0x05
    164a:	7e 81       	ldd	r23, Y+6	; 0x06
    164c:	8f 81       	ldd	r24, Y+7	; 0x07
    164e:	98 85       	ldd	r25, Y+8	; 0x08
    1650:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9a 87       	std	Y+10, r25	; 0x0a
    165a:	89 87       	std	Y+9, r24	; 0x09
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	9e 87       	std	Y+14, r25	; 0x0e
    1662:	8d 87       	std	Y+13, r24	; 0x0d
    1664:	8d 85       	ldd	r24, Y+13	; 0x0d
    1666:	9e 85       	ldd	r25, Y+14	; 0x0e
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <lcd_init+0x1e2>
    166c:	9e 87       	std	Y+14, r25	; 0x0e
    166e:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
	LCD_EN0;
    1670:	88 e2       	ldi	r24, 0x28	; 40
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	28 e2       	ldi	r18, 0x28	; 40
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	f9 01       	movw	r30, r18
    167a:	20 81       	ld	r18, Z
    167c:	2f 7e       	andi	r18, 0xEF	; 239
    167e:	fc 01       	movw	r30, r24
    1680:	20 83       	st	Z, r18
	lcd_cmd(LCD_CMD_INIT);
    1682:	88 e2       	ldi	r24, 0x28	; 40
    1684:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
	lcd_cmd(LCD_CMD_CURS);
    1688:	8c e0       	ldi	r24, 0x0C	; 12
    168a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
	lcd_cmd(LCD_CMD_CLR);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>

	// přidání vlastních znaků
	lcd_cmd(LCD_CMD_W_CGRAM);
    1694:	80 e4       	ldi	r24, 0x40	; 64
    1696:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
	// trojuhelnik
	lcd_put(0b00010000);
    169a:	80 e1       	ldi	r24, 0x10	; 16
    169c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011000);
    16a0:	88 e1       	ldi	r24, 0x18	; 24
    16a2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011100);
    16a6:	8c e1       	ldi	r24, 0x1C	; 28
    16a8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011110);
    16ac:	8e e1       	ldi	r24, 0x1E	; 30
    16ae:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011100);
    16b2:	8c e1       	ldi	r24, 0x1C	; 28
    16b4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011000);
    16b8:	88 e1       	ldi	r24, 0x18	; 24
    16ba:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00010000);
    16be:	80 e1       	ldi	r24, 0x10	; 16
    16c0:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00000000);
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	// bar
	lcd_put(0b00000000);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00000000);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011111);
    16d6:	8f e1       	ldi	r24, 0x1F	; 31
    16d8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011111);
    16dc:	8f e1       	ldi	r24, 0x1F	; 31
    16de:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011111);
    16e2:	8f e1       	ldi	r24, 0x1F	; 31
    16e4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00011111);
    16e8:	8f e1       	ldi	r24, 0x1F	; 31
    16ea:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00000000);
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	lcd_put(0b00000000);
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	
	// přepnutí na zápis do zobrazovací paměti
	lcd_cmd(LCD_CMD_W_DDRAM);
    16fa:	80 e8       	ldi	r24, 0x80	; 128
    16fc:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
}
    1700:	00 00       	nop
    1702:	2e 96       	adiw	r28, 0x0e	; 14
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <lcd_set_nibble>:

// posílat napřed msn a pak lsn
void lcd_set_nibble(uint8_t nibble)
{
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	1f 92       	push	r1
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	89 83       	std	Y+1, r24	; 0x01
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	88 70       	andi	r24, 0x08	; 8
    1728:	99 27       	eor	r25, r25
    172a:	89 2b       	or	r24, r25
    172c:	51 f0       	breq	.+20     	; 0x1742 <lcd_set_nibble+0x2e>
    172e:	88 e2       	ldi	r24, 0x28	; 40
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	28 e2       	ldi	r18, 0x28	; 40
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	f9 01       	movw	r30, r18
    1738:	20 81       	ld	r18, Z
    173a:	21 60       	ori	r18, 0x01	; 1
    173c:	fc 01       	movw	r30, r24
    173e:	20 83       	st	Z, r18
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <lcd_set_nibble+0x40>
    1742:	88 e2       	ldi	r24, 0x28	; 40
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	28 e2       	ldi	r18, 0x28	; 40
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	f9 01       	movw	r30, r18
    174c:	20 81       	ld	r18, Z
    174e:	2e 7f       	andi	r18, 0xFE	; 254
    1750:	fc 01       	movw	r30, r24
    1752:	20 83       	st	Z, r18
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	88 2f       	mov	r24, r24
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	84 70       	andi	r24, 0x04	; 4
    175c:	99 27       	eor	r25, r25
    175e:	89 2b       	or	r24, r25
    1760:	51 f0       	breq	.+20     	; 0x1776 <lcd_set_nibble+0x62>
    1762:	88 e2       	ldi	r24, 0x28	; 40
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	28 e2       	ldi	r18, 0x28	; 40
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	f9 01       	movw	r30, r18
    176c:	20 81       	ld	r18, Z
    176e:	22 60       	ori	r18, 0x02	; 2
    1770:	fc 01       	movw	r30, r24
    1772:	20 83       	st	Z, r18
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <lcd_set_nibble+0x74>
    1776:	88 e2       	ldi	r24, 0x28	; 40
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	28 e2       	ldi	r18, 0x28	; 40
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	f9 01       	movw	r30, r18
    1780:	20 81       	ld	r18, Z
    1782:	2d 7f       	andi	r18, 0xFD	; 253
    1784:	fc 01       	movw	r30, r24
    1786:	20 83       	st	Z, r18
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	82 70       	andi	r24, 0x02	; 2
    1790:	99 27       	eor	r25, r25
    1792:	89 2b       	or	r24, r25
    1794:	51 f0       	breq	.+20     	; 0x17aa <lcd_set_nibble+0x96>
    1796:	88 e2       	ldi	r24, 0x28	; 40
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	28 e2       	ldi	r18, 0x28	; 40
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	f9 01       	movw	r30, r18
    17a0:	20 81       	ld	r18, Z
    17a2:	24 60       	ori	r18, 0x04	; 4
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <lcd_set_nibble+0xa8>
    17aa:	88 e2       	ldi	r24, 0x28	; 40
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	28 e2       	ldi	r18, 0x28	; 40
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	f9 01       	movw	r30, r18
    17b4:	20 81       	ld	r18, Z
    17b6:	2b 7f       	andi	r18, 0xFB	; 251
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	81 70       	andi	r24, 0x01	; 1
    17c4:	99 27       	eor	r25, r25
    17c6:	89 2b       	or	r24, r25
    17c8:	51 f0       	breq	.+20     	; 0x17de <lcd_set_nibble+0xca>
    17ca:	88 e2       	ldi	r24, 0x28	; 40
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	28 e2       	ldi	r18, 0x28	; 40
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	f9 01       	movw	r30, r18
    17d4:	20 81       	ld	r18, Z
    17d6:	28 60       	ori	r18, 0x08	; 8
    17d8:	fc 01       	movw	r30, r24
    17da:	20 83       	st	Z, r18
}
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <lcd_set_nibble+0xdc>
void lcd_set_nibble(uint8_t nibble)
{
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    17de:	88 e2       	ldi	r24, 0x28	; 40
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	28 e2       	ldi	r18, 0x28	; 40
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	f9 01       	movw	r30, r18
    17e8:	20 81       	ld	r18, Z
    17ea:	27 7f       	andi	r18, 0xF7	; 247
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
}
    17f0:	00 00       	nop
    17f2:	0f 90       	pop	r0
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <lcd_cmd>:

// pošle lcd instrukci
void lcd_cmd(uint8_t cmd)
{
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	6d 97       	sbiw	r28, 0x1d	; 29
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_set_nibble(cmd>>4);
    1810:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1812:	82 95       	swap	r24
    1814:	8f 70       	andi	r24, 0x0F	; 15
    1816:	0e 94 8a 0b 	call	0x1714	; 0x1714 <lcd_set_nibble>
	LCD_EN1;
    181a:	88 e2       	ldi	r24, 0x28	; 40
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	28 e2       	ldi	r18, 0x28	; 40
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	f9 01       	movw	r30, r18
    1824:	20 81       	ld	r18, Z
    1826:	20 61       	ori	r18, 0x10	; 16
    1828:	fc 01       	movw	r30, r24
    182a:	20 83       	st	Z, r18
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 e4       	ldi	r26, 0x40	; 64
    1832:	b0 e4       	ldi	r27, 0x40	; 64
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	ab 83       	std	Y+3, r26	; 0x03
    183a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	4a ef       	ldi	r20, 0xFA	; 250
    1842:	54 e4       	ldi	r21, 0x44	; 68
    1844:	69 81       	ldd	r22, Y+1	; 0x01
    1846:	7a 81       	ldd	r23, Y+2	; 0x02
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8b 8b       	std	Y+19, r24	; 0x13
    1856:	9c 8b       	std	Y+20, r25	; 0x14
    1858:	ad 8b       	std	Y+21, r26	; 0x15
    185a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e8       	ldi	r20, 0x80	; 128
    1862:	5f e3       	ldi	r21, 0x3F	; 63
    1864:	6b 89       	ldd	r22, Y+19	; 0x13
    1866:	7c 89       	ldd	r23, Y+20	; 0x14
    1868:	8d 89       	ldd	r24, Y+21	; 0x15
    186a:	9e 89       	ldd	r25, Y+22	; 0x16
    186c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <lcd_cmd+0x84>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	98 8f       	std	Y+24, r25	; 0x18
    187a:	8f 8b       	std	Y+23, r24	; 0x17
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <lcd_cmd+0x102>
	else if (__tmp > 65535)
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	3f ef       	ldi	r19, 0xFF	; 255
    1882:	4f e7       	ldi	r20, 0x7F	; 127
    1884:	57 e4       	ldi	r21, 0x47	; 71
    1886:	6b 89       	ldd	r22, Y+19	; 0x13
    1888:	7c 89       	ldd	r23, Y+20	; 0x14
    188a:	8d 89       	ldd	r24, Y+21	; 0x15
    188c:	9e 89       	ldd	r25, Y+22	; 0x16
    188e:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <lcd_cmd+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e2       	ldi	r20, 0x20	; 32
    189c:	51 e4       	ldi	r21, 0x41	; 65
    189e:	69 81       	ldd	r22, Y+1	; 0x01
    18a0:	7a 81       	ldd	r23, Y+2	; 0x02
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	98 8f       	std	Y+24, r25	; 0x18
    18bc:	8f 8b       	std	Y+23, r24	; 0x17
    18be:	0f c0       	rjmp	.+30     	; 0x18de <lcd_cmd+0xe4>
    18c0:	88 ec       	ldi	r24, 0xC8	; 200
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	9a 8f       	std	Y+26, r25	; 0x1a
    18c6:	89 8f       	std	Y+25, r24	; 0x19
    18c8:	89 8d       	ldd	r24, Y+25	; 0x19
    18ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <lcd_cmd+0xd2>
    18d0:	9a 8f       	std	Y+26, r25	; 0x1a
    18d2:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	8f 89       	ldd	r24, Y+23	; 0x17
    18d6:	98 8d       	ldd	r25, Y+24	; 0x18
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	98 8f       	std	Y+24, r25	; 0x18
    18dc:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	8f 89       	ldd	r24, Y+23	; 0x17
    18e0:	98 8d       	ldd	r25, Y+24	; 0x18
    18e2:	89 2b       	or	r24, r25
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <lcd_cmd+0xc6>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <lcd_cmd+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6b 89       	ldd	r22, Y+19	; 0x13
    18ea:	7c 89       	ldd	r23, Y+20	; 0x14
    18ec:	8d 89       	ldd	r24, Y+21	; 0x15
    18ee:	9e 89       	ldd	r25, Y+22	; 0x16
    18f0:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	98 8f       	std	Y+24, r25	; 0x18
    18fa:	8f 8b       	std	Y+23, r24	; 0x17
    18fc:	8f 89       	ldd	r24, Y+23	; 0x17
    18fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1900:	9c 8f       	std	Y+28, r25	; 0x1c
    1902:	8b 8f       	std	Y+27, r24	; 0x1b
    1904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <lcd_cmd+0x10e>
    190c:	9c 8f       	std	Y+28, r25	; 0x1c
    190e:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3);
	LCD_EN0;	
    1910:	88 e2       	ldi	r24, 0x28	; 40
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	28 e2       	ldi	r18, 0x28	; 40
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	f9 01       	movw	r30, r18
    191a:	20 81       	ld	r18, Z
    191c:	2f 7e       	andi	r18, 0xEF	; 239
    191e:	fc 01       	movw	r30, r24
    1920:	20 83       	st	Z, r18
	lcd_set_nibble(cmd);
    1922:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1924:	0e 94 8a 0b 	call	0x1714	; 0x1714 <lcd_set_nibble>
	LCD_EN1;
    1928:	88 e2       	ldi	r24, 0x28	; 40
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	28 e2       	ldi	r18, 0x28	; 40
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	f9 01       	movw	r30, r18
    1932:	20 81       	ld	r18, Z
    1934:	20 61       	ori	r18, 0x10	; 16
    1936:	fc 01       	movw	r30, r24
    1938:	20 83       	st	Z, r18
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 e4       	ldi	r26, 0x40	; 64
    1940:	b0 e4       	ldi	r27, 0x40	; 64
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	9e 83       	std	Y+6, r25	; 0x06
    1946:	af 83       	std	Y+7, r26	; 0x07
    1948:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a ef       	ldi	r20, 0xFA	; 250
    1950:	54 e4       	ldi	r21, 0x44	; 68
    1952:	6d 81       	ldd	r22, Y+5	; 0x05
    1954:	7e 81       	ldd	r23, Y+6	; 0x06
    1956:	8f 81       	ldd	r24, Y+7	; 0x07
    1958:	98 85       	ldd	r25, Y+8	; 0x08
    195a:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	89 87       	std	Y+9, r24	; 0x09
    1964:	9a 87       	std	Y+10, r25	; 0x0a
    1966:	ab 87       	std	Y+11, r26	; 0x0b
    1968:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	69 85       	ldd	r22, Y+9	; 0x09
    1974:	7a 85       	ldd	r23, Y+10	; 0x0a
    1976:	8b 85       	ldd	r24, Y+11	; 0x0b
    1978:	9c 85       	ldd	r25, Y+12	; 0x0c
    197a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <lcd_cmd+0x192>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9e 87       	std	Y+14, r25	; 0x0e
    1988:	8d 87       	std	Y+13, r24	; 0x0d
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <lcd_cmd+0x210>
	else if (__tmp > 65535)
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	69 85       	ldd	r22, Y+9	; 0x09
    1996:	7a 85       	ldd	r23, Y+10	; 0x0a
    1998:	8b 85       	ldd	r24, Y+11	; 0x0b
    199a:	9c 85       	ldd	r25, Y+12	; 0x0c
    199c:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <lcd_cmd+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	6d 81       	ldd	r22, Y+5	; 0x05
    19ae:	7e 81       	ldd	r23, Y+6	; 0x06
    19b0:	8f 81       	ldd	r24, Y+7	; 0x07
    19b2:	98 85       	ldd	r25, Y+8	; 0x08
    19b4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 87       	std	Y+14, r25	; 0x0e
    19ca:	8d 87       	std	Y+13, r24	; 0x0d
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <lcd_cmd+0x1f2>
    19ce:	88 ec       	ldi	r24, 0xC8	; 200
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	98 8b       	std	Y+16, r25	; 0x10
    19d4:	8f 87       	std	Y+15, r24	; 0x0f
    19d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d8:	98 89       	ldd	r25, Y+16	; 0x10
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <lcd_cmd+0x1e0>
    19de:	98 8b       	std	Y+16, r25	; 0x10
    19e0:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9e 87       	std	Y+14, r25	; 0x0e
    19ea:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	89 2b       	or	r24, r25
    19f2:	69 f7       	brne	.-38     	; 0x19ce <lcd_cmd+0x1d4>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <lcd_cmd+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	69 85       	ldd	r22, Y+9	; 0x09
    19f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    19fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    19fe:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 87       	std	Y+14, r25	; 0x0e
    1a08:	8d 87       	std	Y+13, r24	; 0x0d
    1a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0e:	9a 8b       	std	Y+18, r25	; 0x12
    1a10:	89 8b       	std	Y+17, r24	; 0x11
    1a12:	89 89       	ldd	r24, Y+17	; 0x11
    1a14:	9a 89       	ldd	r25, Y+18	; 0x12
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <lcd_cmd+0x21c>
    1a1a:	9a 8b       	std	Y+18, r25	; 0x12
    1a1c:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(3);
	LCD_EN0;
    1a1e:	88 e2       	ldi	r24, 0x28	; 40
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	28 e2       	ldi	r18, 0x28	; 40
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	f9 01       	movw	r30, r18
    1a28:	20 81       	ld	r18, Z
    1a2a:	2f 7e       	andi	r18, 0xEF	; 239
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	20 83       	st	Z, r18
}
    1a30:	00 00       	nop
    1a32:	6d 96       	adiw	r28, 0x1d	; 29
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <lcd_put>:

// pošle lcd znak
void lcd_put(char znak)
{
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	c1 54       	subi	r28, 0x41	; 65
    1a4e:	d1 09       	sbc	r29, r1
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	9e 01       	movw	r18, r28
    1a5c:	2f 5b       	subi	r18, 0xBF	; 191
    1a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a60:	f9 01       	movw	r30, r18
    1a62:	80 83       	st	Z, r24
	LCD_RS1;
    1a64:	8b e2       	ldi	r24, 0x2B	; 43
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	2b e2       	ldi	r18, 0x2B	; 43
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	f9 01       	movw	r30, r18
    1a6e:	20 81       	ld	r18, Z
    1a70:	21 60       	ori	r18, 0x01	; 1
    1a72:	fc 01       	movw	r30, r24
    1a74:	20 83       	st	Z, r18
	lcd_set_nibble(znak>>4);
    1a76:	ce 01       	movw	r24, r28
    1a78:	8f 5b       	subi	r24, 0xBF	; 191
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	80 81       	ld	r24, Z
    1a80:	82 95       	swap	r24
    1a82:	8f 70       	andi	r24, 0x0F	; 15
    1a84:	0e 94 8a 0b 	call	0x1714	; 0x1714 <lcd_set_nibble>
	LCD_EN1;
    1a88:	88 e2       	ldi	r24, 0x28	; 40
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	28 e2       	ldi	r18, 0x28	; 40
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	f9 01       	movw	r30, r18
    1a92:	20 81       	ld	r18, Z
    1a94:	20 61       	ori	r18, 0x10	; 16
    1a96:	fc 01       	movw	r30, r24
    1a98:	20 83       	st	Z, r18
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e2       	ldi	r26, 0x20	; 32
    1aa0:	b2 e4       	ldi	r27, 0x42	; 66
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	ab 83       	std	Y+3, r26	; 0x03
    1aa8:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1aaa:	2b ea       	ldi	r18, 0xAB	; 171
    1aac:	3a ea       	ldi	r19, 0xAA	; 170
    1aae:	4a e2       	ldi	r20, 0x2A	; 42
    1ab0:	50 e4       	ldi	r21, 0x40	; 64
    1ab2:	69 81       	ldd	r22, Y+1	; 0x01
    1ab4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	8d a3       	std	Y+37, r24	; 0x25
    1ac4:	9e a3       	std	Y+38, r25	; 0x26
    1ac6:	af a3       	std	Y+39, r26	; 0x27
    1ac8:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ace:	ab 81       	ldd	r26, Y+3	; 0x03
    1ad0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ad2:	9c 01       	movw	r18, r24
    1ad4:	ad 01       	movw	r20, r26
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__addsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	89 a7       	std	Y+41, r24	; 0x29
    1ae4:	9a a7       	std	Y+42, r25	; 0x2a
    1ae6:	ab a7       	std	Y+43, r26	; 0x2b
    1ae8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	6d a1       	ldd	r22, Y+37	; 0x25
    1af4:	7e a1       	ldd	r23, Y+38	; 0x26
    1af6:	8f a1       	ldd	r24, Y+39	; 0x27
    1af8:	98 a5       	ldd	r25, Y+40	; 0x28
    1afa:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	1c f4       	brge	.+6      	; 0x1b08 <lcd_put+0xc4>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	8d a7       	std	Y+45, r24	; 0x2d
    1b06:	b2 c0       	rjmp	.+356    	; 0x1c6c <lcd_put+0x228>
	else if (__tmp2 > 65535)
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	69 a5       	ldd	r22, Y+41	; 0x29
    1b12:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b18:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	0c f0       	brlt	.+2      	; 0x1b22 <lcd_put+0xde>
    1b20:	7b c0       	rjmp	.+246    	; 0x1c18 <lcd_put+0x1d4>
	{
		_delay_ms(__us / 1000.0);
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4a e7       	ldi	r20, 0x7A	; 122
    1b28:	54 e4       	ldi	r21, 0x44	; 68
    1b2a:	69 81       	ldd	r22, Y+1	; 0x01
    1b2c:	7a 81       	ldd	r23, Y+2	; 0x02
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8e a7       	std	Y+46, r24	; 0x2e
    1b3c:	9f a7       	std	Y+47, r25	; 0x2f
    1b3e:	a8 ab       	std	Y+48, r26	; 0x30
    1b40:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4a ef       	ldi	r20, 0xFA	; 250
    1b48:	54 e4       	ldi	r21, 0x44	; 68
    1b4a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b4c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b4e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b50:	99 a9       	ldd	r25, Y+49	; 0x31
    1b52:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	8a ab       	std	Y+50, r24	; 0x32
    1b5c:	9b ab       	std	Y+51, r25	; 0x33
    1b5e:	ac ab       	std	Y+52, r26	; 0x34
    1b60:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e8       	ldi	r20, 0x80	; 128
    1b68:	5f e3       	ldi	r21, 0x3F	; 63
    1b6a:	6a a9       	ldd	r22, Y+50	; 0x32
    1b6c:	7b a9       	ldd	r23, Y+51	; 0x33
    1b6e:	8c a9       	ldd	r24, Y+52	; 0x34
    1b70:	9d a9       	ldd	r25, Y+53	; 0x35
    1b72:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    1b76:	88 23       	and	r24, r24
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <lcd_put+0x140>
		__ticks = 1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	9f ab       	std	Y+55, r25	; 0x37
    1b80:	8e ab       	std	Y+54, r24	; 0x36
    1b82:	3f c0       	rjmp	.+126    	; 0x1c02 <lcd_put+0x1be>
	else if (__tmp > 65535)
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	3f ef       	ldi	r19, 0xFF	; 255
    1b88:	4f e7       	ldi	r20, 0x7F	; 127
    1b8a:	57 e4       	ldi	r21, 0x47	; 71
    1b8c:	6a a9       	ldd	r22, Y+50	; 0x32
    1b8e:	7b a9       	ldd	r23, Y+51	; 0x33
    1b90:	8c a9       	ldd	r24, Y+52	; 0x34
    1b92:	9d a9       	ldd	r25, Y+53	; 0x35
    1b94:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    1b98:	18 16       	cp	r1, r24
    1b9a:	4c f5       	brge	.+82     	; 0x1bee <lcd_put+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ba6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ba8:	88 a9       	ldd	r24, Y+48	; 0x30
    1baa:	99 a9       	ldd	r25, Y+49	; 0x31
    1bac:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	bc 01       	movw	r22, r24
    1bb6:	cd 01       	movw	r24, r26
    1bb8:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9f ab       	std	Y+55, r25	; 0x37
    1bc2:	8e ab       	std	Y+54, r24	; 0x36
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <lcd_put+0x1a0>
    1bc6:	88 ec       	ldi	r24, 0xC8	; 200
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	99 af       	std	Y+57, r25	; 0x39
    1bcc:	88 af       	std	Y+56, r24	; 0x38
    1bce:	88 ad       	ldd	r24, Y+56	; 0x38
    1bd0:	99 ad       	ldd	r25, Y+57	; 0x39
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <lcd_put+0x18e>
    1bd6:	99 af       	std	Y+57, r25	; 0x39
    1bd8:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	8e a9       	ldd	r24, Y+54	; 0x36
    1bdc:	9f a9       	ldd	r25, Y+55	; 0x37
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	9f ab       	std	Y+55, r25	; 0x37
    1be2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be4:	8e a9       	ldd	r24, Y+54	; 0x36
    1be6:	9f a9       	ldd	r25, Y+55	; 0x37
    1be8:	89 2b       	or	r24, r25
    1bea:	69 f7       	brne	.-38     	; 0x1bc6 <lcd_put+0x182>
    1bec:	3f c0       	rjmp	.+126    	; 0x1c6c <lcd_put+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bee:	6a a9       	ldd	r22, Y+50	; 0x32
    1bf0:	7b a9       	ldd	r23, Y+51	; 0x33
    1bf2:	8c a9       	ldd	r24, Y+52	; 0x34
    1bf4:	9d a9       	ldd	r25, Y+53	; 0x35
    1bf6:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9f ab       	std	Y+55, r25	; 0x37
    1c00:	8e ab       	std	Y+54, r24	; 0x36
    1c02:	8e a9       	ldd	r24, Y+54	; 0x36
    1c04:	9f a9       	ldd	r25, Y+55	; 0x37
    1c06:	9b af       	std	Y+59, r25	; 0x3b
    1c08:	8a af       	std	Y+58, r24	; 0x3a
    1c0a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c0c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <lcd_put+0x1ca>
    1c12:	9b af       	std	Y+59, r25	; 0x3b
    1c14:	8a af       	std	Y+58, r24	; 0x3a
    1c16:	2a c0       	rjmp	.+84     	; 0x1c6c <lcd_put+0x228>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	4f e7       	ldi	r20, 0x7F	; 127
    1c1e:	53 e4       	ldi	r21, 0x43	; 67
    1c20:	6d a1       	ldd	r22, Y+37	; 0x25
    1c22:	7e a1       	ldd	r23, Y+38	; 0x26
    1c24:	8f a1       	ldd	r24, Y+39	; 0x27
    1c26:	98 a5       	ldd	r25, Y+40	; 0x28
    1c28:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	ac f4       	brge	.+42     	; 0x1c5a <lcd_put+0x216>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1c30:	69 a5       	ldd	r22, Y+41	; 0x29
    1c32:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c34:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c36:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c38:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9d af       	std	Y+61, r25	; 0x3d
    1c42:	8c af       	std	Y+60, r24	; 0x3c
    1c44:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c46:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c48:	9f af       	std	Y+63, r25	; 0x3f
    1c4a:	8e af       	std	Y+62, r24	; 0x3e
    1c4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <lcd_put+0x20c>
    1c54:	9f af       	std	Y+63, r25	; 0x3f
    1c56:	8e af       	std	Y+62, r24	; 0x3e
    1c58:	1c c0       	rjmp	.+56     	; 0x1c92 <lcd_put+0x24e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c5a:	6d a1       	ldd	r22, Y+37	; 0x25
    1c5c:	7e a1       	ldd	r23, Y+38	; 0x26
    1c5e:	8f a1       	ldd	r24, Y+39	; 0x27
    1c60:	98 a5       	ldd	r25, Y+40	; 0x28
    1c62:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8d a7       	std	Y+45, r24	; 0x2d
    1c6c:	2d a5       	ldd	r18, Y+45	; 0x2d
    1c6e:	ce 01       	movw	r24, r28
    1c70:	80 5c       	subi	r24, 0xC0	; 192
    1c72:	9f 4f       	sbci	r25, 0xFF	; 255
    1c74:	fc 01       	movw	r30, r24
    1c76:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c78:	ce 01       	movw	r24, r28
    1c7a:	80 5c       	subi	r24, 0xC0	; 192
    1c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7e:	fc 01       	movw	r30, r24
    1c80:	80 81       	ld	r24, Z
    1c82:	28 2f       	mov	r18, r24
    1c84:	2a 95       	dec	r18
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <lcd_put+0x240>
    1c88:	ce 01       	movw	r24, r28
    1c8a:	80 5c       	subi	r24, 0xC0	; 192
    1c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8e:	fc 01       	movw	r30, r24
    1c90:	20 83       	st	Z, r18
	_delay_us(40);
	LCD_EN0;
    1c92:	88 e2       	ldi	r24, 0x28	; 40
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	28 e2       	ldi	r18, 0x28	; 40
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	f9 01       	movw	r30, r18
    1c9c:	20 81       	ld	r18, Z
    1c9e:	2f 7e       	andi	r18, 0xEF	; 239
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	20 83       	st	Z, r18
	lcd_set_nibble(znak);
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	8f 5b       	subi	r24, 0xBF	; 191
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	fc 01       	movw	r30, r24
    1cac:	80 81       	ld	r24, Z
    1cae:	0e 94 8a 0b 	call	0x1714	; 0x1714 <lcd_set_nibble>
	LCD_EN1;
    1cb2:	88 e2       	ldi	r24, 0x28	; 40
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	28 e2       	ldi	r18, 0x28	; 40
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	f9 01       	movw	r30, r18
    1cbc:	20 81       	ld	r18, Z
    1cbe:	20 61       	ori	r18, 0x10	; 16
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	20 83       	st	Z, r18
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e2       	ldi	r26, 0x20	; 32
    1cca:	b2 e4       	ldi	r27, 0x42	; 66
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	af 83       	std	Y+7, r26	; 0x07
    1cd2:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1cd4:	2b ea       	ldi	r18, 0xAB	; 171
    1cd6:	3a ea       	ldi	r19, 0xAA	; 170
    1cd8:	4a e2       	ldi	r20, 0x2A	; 42
    1cda:	50 e4       	ldi	r21, 0x40	; 64
    1cdc:	6d 81       	ldd	r22, Y+5	; 0x05
    1cde:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce2:	98 85       	ldd	r25, Y+8	; 0x08
    1ce4:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	89 87       	std	Y+9, r24	; 0x09
    1cee:	9a 87       	std	Y+10, r25	; 0x0a
    1cf0:	ab 87       	std	Y+11, r26	; 0x0b
    1cf2:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	af 81       	ldd	r26, Y+7	; 0x07
    1cfa:	b8 85       	ldd	r27, Y+8	; 0x08
    1cfc:	9c 01       	movw	r18, r24
    1cfe:	ad 01       	movw	r20, r26
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__addsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	8d 87       	std	Y+13, r24	; 0x0d
    1d0e:	9e 87       	std	Y+14, r25	; 0x0e
    1d10:	af 87       	std	Y+15, r26	; 0x0f
    1d12:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e8       	ldi	r20, 0x80	; 128
    1d1a:	5f e3       	ldi	r21, 0x3F	; 63
    1d1c:	69 85       	ldd	r22, Y+9	; 0x09
    1d1e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d24:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    1d28:	88 23       	and	r24, r24
    1d2a:	1c f4       	brge	.+6      	; 0x1d32 <lcd_put+0x2ee>
		__ticks = 1;
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	89 8b       	std	Y+17, r24	; 0x11
    1d30:	b2 c0       	rjmp	.+356    	; 0x1e96 <lcd_put+0x452>
	else if (__tmp2 > 65535)
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d3c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d40:	98 89       	ldd	r25, Y+16	; 0x10
    1d42:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    1d46:	18 16       	cp	r1, r24
    1d48:	0c f0       	brlt	.+2      	; 0x1d4c <lcd_put+0x308>
    1d4a:	7b c0       	rjmp	.+246    	; 0x1e42 <lcd_put+0x3fe>
	{
		_delay_ms(__us / 1000.0);
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	4a e7       	ldi	r20, 0x7A	; 122
    1d52:	54 e4       	ldi	r21, 0x44	; 68
    1d54:	6d 81       	ldd	r22, Y+5	; 0x05
    1d56:	7e 81       	ldd	r23, Y+6	; 0x06
    1d58:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5a:	98 85       	ldd	r25, Y+8	; 0x08
    1d5c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8a 8b       	std	Y+18, r24	; 0x12
    1d66:	9b 8b       	std	Y+19, r25	; 0x13
    1d68:	ac 8b       	std	Y+20, r26	; 0x14
    1d6a:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	6a 89       	ldd	r22, Y+18	; 0x12
    1d76:	7b 89       	ldd	r23, Y+19	; 0x13
    1d78:	8c 89       	ldd	r24, Y+20	; 0x14
    1d7a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d7c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8e 8b       	std	Y+22, r24	; 0x16
    1d86:	9f 8b       	std	Y+23, r25	; 0x17
    1d88:	a8 8f       	std	Y+24, r26	; 0x18
    1d8a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	6e 89       	ldd	r22, Y+22	; 0x16
    1d96:	7f 89       	ldd	r23, Y+23	; 0x17
    1d98:	88 8d       	ldd	r24, Y+24	; 0x18
    1d9a:	99 8d       	ldd	r25, Y+25	; 0x19
    1d9c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	2c f4       	brge	.+10     	; 0x1dae <lcd_put+0x36a>
		__ticks = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9b 8f       	std	Y+27, r25	; 0x1b
    1daa:	8a 8f       	std	Y+26, r24	; 0x1a
    1dac:	3f c0       	rjmp	.+126    	; 0x1e2c <lcd_put+0x3e8>
	else if (__tmp > 65535)
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	6e 89       	ldd	r22, Y+22	; 0x16
    1db8:	7f 89       	ldd	r23, Y+23	; 0x17
    1dba:	88 8d       	ldd	r24, Y+24	; 0x18
    1dbc:	99 8d       	ldd	r25, Y+25	; 0x19
    1dbe:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    1dc2:	18 16       	cp	r1, r24
    1dc4:	4c f5       	brge	.+82     	; 0x1e18 <lcd_put+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	6a 89       	ldd	r22, Y+18	; 0x12
    1dd0:	7b 89       	ldd	r23, Y+19	; 0x13
    1dd2:	8c 89       	ldd	r24, Y+20	; 0x14
    1dd4:	9d 89       	ldd	r25, Y+21	; 0x15
    1dd6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9b 8f       	std	Y+27, r25	; 0x1b
    1dec:	8a 8f       	std	Y+26, r24	; 0x1a
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <lcd_put+0x3ca>
    1df0:	88 ec       	ldi	r24, 0xC8	; 200
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9d 8f       	std	Y+29, r25	; 0x1d
    1df6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1df8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <lcd_put+0x3b8>
    1e00:	9d 8f       	std	Y+29, r25	; 0x1d
    1e02:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	9b 8f       	std	Y+27, r25	; 0x1b
    1e0c:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e10:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e12:	89 2b       	or	r24, r25
    1e14:	69 f7       	brne	.-38     	; 0x1df0 <lcd_put+0x3ac>
    1e16:	3f c0       	rjmp	.+126    	; 0x1e96 <lcd_put+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e18:	6e 89       	ldd	r22, Y+22	; 0x16
    1e1a:	7f 89       	ldd	r23, Y+23	; 0x17
    1e1c:	88 8d       	ldd	r24, Y+24	; 0x18
    1e1e:	99 8d       	ldd	r25, Y+25	; 0x19
    1e20:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	9b 8f       	std	Y+27, r25	; 0x1b
    1e2a:	8a 8f       	std	Y+26, r24	; 0x1a
    1e2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e30:	9f 8f       	std	Y+31, r25	; 0x1f
    1e32:	8e 8f       	std	Y+30, r24	; 0x1e
    1e34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e36:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e38:	01 97       	sbiw	r24, 0x01	; 1
    1e3a:	f1 f7       	brne	.-4      	; 0x1e38 <lcd_put+0x3f4>
    1e3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1e3e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e40:	2a c0       	rjmp	.+84     	; 0x1e96 <lcd_put+0x452>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	53 e4       	ldi	r21, 0x43	; 67
    1e4a:	69 85       	ldd	r22, Y+9	; 0x09
    1e4c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e50:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e52:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	ac f4       	brge	.+42     	; 0x1e84 <lcd_put+0x440>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1e5a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e5c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e60:	98 89       	ldd	r25, Y+16	; 0x10
    1e62:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	99 a3       	std	Y+33, r25	; 0x21
    1e6c:	88 a3       	std	Y+32, r24	; 0x20
    1e6e:	88 a1       	ldd	r24, Y+32	; 0x20
    1e70:	99 a1       	ldd	r25, Y+33	; 0x21
    1e72:	9b a3       	std	Y+35, r25	; 0x23
    1e74:	8a a3       	std	Y+34, r24	; 0x22
    1e76:	8a a1       	ldd	r24, Y+34	; 0x22
    1e78:	9b a1       	ldd	r25, Y+35	; 0x23
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <lcd_put+0x436>
    1e7e:	9b a3       	std	Y+35, r25	; 0x23
    1e80:	8a a3       	std	Y+34, r24	; 0x22
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <lcd_put+0x45e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e84:	69 85       	ldd	r22, Y+9	; 0x09
    1e86:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e88:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e8c:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	89 8b       	std	Y+17, r24	; 0x11
    1e96:	89 89       	ldd	r24, Y+17	; 0x11
    1e98:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e9a:	8c a1       	ldd	r24, Y+36	; 0x24
    1e9c:	8a 95       	dec	r24
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <lcd_put+0x458>
    1ea0:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(40);
	LCD_EN0;
    1ea2:	88 e2       	ldi	r24, 0x28	; 40
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	28 e2       	ldi	r18, 0x28	; 40
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	f9 01       	movw	r30, r18
    1eac:	20 81       	ld	r18, Z
    1eae:	2f 7e       	andi	r18, 0xEF	; 239
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	20 83       	st	Z, r18
	LCD_RS0;
    1eb4:	8b e2       	ldi	r24, 0x2B	; 43
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	2b e2       	ldi	r18, 0x2B	; 43
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	20 81       	ld	r18, Z
    1ec0:	2e 7f       	andi	r18, 0xFE	; 254
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 83       	st	Z, r18
}
    1ec6:	00 00       	nop
    1ec8:	cf 5b       	subi	r28, 0xBF	; 191
    1eca:	df 4f       	sbci	r29, 0xFF	; 255
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	df 91       	pop	r29
    1ed8:	cf 91       	pop	r28
    1eda:	08 95       	ret

00001edc <nible2hex>:

char nible2hex(uint8_t nible)
{
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	1f 92       	push	r1
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	if (nible < 10)
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	8a 30       	cpi	r24, 0x0A	; 10
    1eec:	18 f4       	brcc	.+6      	; 0x1ef4 <nible2hex+0x18>
		return '0' + nible;
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	80 5d       	subi	r24, 0xD0	; 208
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <nible2hex+0x1c>
	else
		return 'A' + nible - 10;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	89 5c       	subi	r24, 0xC9	; 201
}
    1ef8:	0f 90       	pop	r0
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	08 95       	ret

00001f00 <print_hex>:

// vytiskne číslo int 2B
void print_hex(uint16_t cislo)
{
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <print_hex+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <print_hex+0x8>
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <print_hex+0xa>
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1f12:	1a 82       	std	Y+2, r1	; 0x02
    1f14:	19 82       	std	Y+1, r1	; 0x01
    1f16:	1c c0       	rjmp	.+56     	; 0x1f50 <print_hex+0x50>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	89 2f       	mov	r24, r25
    1f1e:	99 27       	eor	r25, r25
    1f20:	82 95       	swap	r24
    1f22:	8f 70       	andi	r24, 0x0F	; 15
    1f24:	9c 83       	std	Y+4, r25	; 0x04
    1f26:	8b 83       	std	Y+3, r24	; 0x03
		cislo <<= 4;
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	82 95       	swap	r24
    1f2e:	92 95       	swap	r25
    1f30:	90 7f       	andi	r25, 0xF0	; 240
    1f32:	98 27       	eor	r25, r24
    1f34:	80 7f       	andi	r24, 0xF0	; 240
    1f36:	98 27       	eor	r25, r24
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
		lcd_put(nible2hex(nible));
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <nible2hex>
    1f42:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
void print_hex(uint16_t cislo)
{
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	04 97       	sbiw	r24, 0x04	; 4
    1f56:	00 f3       	brcs	.-64     	; 0x1f18 <print_hex+0x18>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
		cislo <<= 4;
		lcd_put(nible2hex(nible));
	}
}
    1f58:	00 00       	nop
    1f5a:	26 96       	adiw	r28, 0x06	; 6
    1f5c:	0f b6       	in	r0, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	de bf       	out	0x3e, r29	; 62
    1f62:	0f be       	out	0x3f, r0	; 63
    1f64:	cd bf       	out	0x3d, r28	; 61
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	08 95       	ret

00001f6c <print_int>:

// vytiskne číslo int 2B
void print_int(int cislo, char znaminko, char nula, int pocet_mist)
{
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	6b 97       	sbiw	r28, 0x1b	; 27
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	9f 8b       	std	Y+23, r25	; 0x17
    1f82:	8e 8b       	std	Y+22, r24	; 0x16
    1f84:	68 8f       	std	Y+24, r22	; 0x18
    1f86:	49 8f       	std	Y+25, r20	; 0x19
    1f88:	3b 8f       	std	Y+27, r19	; 0x1b
    1f8a:	2a 8f       	std	Y+26, r18	; 0x1a
	int poc_cislo = cislo;
    1f8c:	8e 89       	ldd	r24, Y+22	; 0x16
    1f8e:	9f 89       	ldd	r25, Y+23	; 0x17
    1f90:	9d 83       	std	Y+5, r25	; 0x05
    1f92:	8c 83       	std	Y+4, r24	; 0x04
	int8_t i, len = 16, state = 1;
    1f94:	80 e1       	ldi	r24, 0x10	; 16
    1f96:	8a 83       	std	Y+2, r24	; 0x02
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	8b 83       	std	Y+3, r24	; 0x03
	char buf[16];

	// pokud máme vypsat před číslo znamínko
	if (znaminko)
    1f9c:	88 8d       	ldd	r24, Y+24	; 0x18
    1f9e:	88 23       	and	r24, r24
    1fa0:	49 f0       	breq	.+18     	; 0x1fb4 <print_int+0x48>
	{
		lcd_put((cislo >= 0) ? '+' : '-');
    1fa2:	8e 89       	ldd	r24, Y+22	; 0x16
    1fa4:	9f 89       	ldd	r25, Y+23	; 0x17
    1fa6:	99 23       	and	r25, r25
    1fa8:	14 f0       	brlt	.+4      	; 0x1fae <print_int+0x42>
    1faa:	8b e2       	ldi	r24, 0x2B	; 43
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <print_int+0x44>
    1fae:	8d e2       	ldi	r24, 0x2D	; 45
    1fb0:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	}

	// pokud je vypnutá predikce nul
	if (nula)
    1fb4:	89 8d       	ldd	r24, Y+25	; 0x19
    1fb6:	88 23       	and	r24, r24
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <print_int+0x50>
		state = 0;
    1fba:	1b 82       	std	Y+3, r1	; 0x03


	// když je zadána délka čísla
	if (pocet_mist >= 0)
    1fbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fbe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fc0:	99 23       	and	r25, r25
    1fc2:	14 f0       	brlt	.+4      	; 0x1fc8 <print_int+0x5c>
		len = pocet_mist;
    1fc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fc6:	8a 83       	std	Y+2, r24	; 0x02

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;
    1fc8:	8e 89       	ldd	r24, Y+22	; 0x16
    1fca:	9f 89       	ldd	r25, Y+23	; 0x17
    1fcc:	99 23       	and	r25, r25
    1fce:	1c f4       	brge	.+6      	; 0x1fd6 <print_int+0x6a>
    1fd0:	91 95       	neg	r25
    1fd2:	81 95       	neg	r24
    1fd4:	91 09       	sbc	r25, r1
    1fd6:	9f 8b       	std	Y+23, r25	; 0x17
    1fd8:	8e 8b       	std	Y+22, r24	; 0x16

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1fda:	19 82       	std	Y+1, r1	; 0x01
    1fdc:	20 c0       	rjmp	.+64     	; 0x201e <print_int+0xb2>
	{
		buf[i] = '0' + cislo % 10;
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	88 0f       	add	r24, r24
    1fe4:	33 0b       	sbc	r19, r19
    1fe6:	8e 89       	ldd	r24, Y+22	; 0x16
    1fe8:	9f 89       	ldd	r25, Y+23	; 0x17
    1fea:	4a e0       	ldi	r20, 0x0A	; 10
    1fec:	50 e0       	ldi	r21, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	0e 94 21 1a 	call	0x3442	; 0x3442 <__divmodhi4>
    1ff4:	40 e3       	ldi	r20, 0x30	; 48
    1ff6:	48 0f       	add	r20, r24
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	06 96       	adiw	r24, 0x06	; 6
    1ffc:	82 0f       	add	r24, r18
    1ffe:	93 1f       	adc	r25, r19
    2000:	fc 01       	movw	r30, r24
    2002:	40 83       	st	Z, r20
		cislo /= 10;
    2004:	8e 89       	ldd	r24, Y+22	; 0x16
    2006:	9f 89       	ldd	r25, Y+23	; 0x17
    2008:	2a e0       	ldi	r18, 0x0A	; 10
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	b9 01       	movw	r22, r18
    200e:	0e 94 21 1a 	call	0x3442	; 0x3442 <__divmodhi4>
    2012:	cb 01       	movw	r24, r22
    2014:	9f 8b       	std	Y+23, r25	; 0x17
    2016:	8e 8b       	std	Y+22, r24	; 0x16

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	8f 5f       	subi	r24, 0xFF	; 255
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	99 81       	ldd	r25, Y+1	; 0x01
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	98 17       	cp	r25, r24
    2024:	e4 f2       	brlt	.-72     	; 0x1fde <print_int+0x72>
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	81 50       	subi	r24, 0x01	; 1
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	3d c0       	rjmp	.+122    	; 0x20a8 <print_int+0x13c>
	{
		if (buf[i] == '0' && state)
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	08 2e       	mov	r0, r24
    2032:	00 0c       	add	r0, r0
    2034:	99 0b       	sbc	r25, r25
    2036:	9e 01       	movw	r18, r28
    2038:	2a 5f       	subi	r18, 0xFA	; 250
    203a:	3f 4f       	sbci	r19, 0xFF	; 255
    203c:	82 0f       	add	r24, r18
    203e:	93 1f       	adc	r25, r19
    2040:	fc 01       	movw	r30, r24
    2042:	80 81       	ld	r24, Z
    2044:	80 33       	cpi	r24, 0x30	; 48
    2046:	e9 f4       	brne	.+58     	; 0x2082 <print_int+0x116>
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	88 23       	and	r24, r24
    204c:	d1 f0       	breq	.+52     	; 0x2082 <print_int+0x116>
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    204e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2050:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	29 f1       	breq	.+74     	; 0x20a0 <print_int+0x134>
    2056:	8c 81       	ldd	r24, Y+4	; 0x04
    2058:	9d 81       	ldd	r25, Y+5	; 0x05
    205a:	89 2b       	or	r24, r25
    205c:	71 f4       	brne	.+28     	; 0x207a <print_int+0x10e>
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	08 2e       	mov	r0, r24
    2062:	00 0c       	add	r0, r0
    2064:	99 0b       	sbc	r25, r25
    2066:	9c 01       	movw	r18, r24
    2068:	2f 5f       	subi	r18, 0xFF	; 255
    206a:	3f 4f       	sbci	r19, 0xFF	; 255
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	08 2e       	mov	r0, r24
    2070:	00 0c       	add	r0, r0
    2072:	99 0b       	sbc	r25, r25
    2074:	28 17       	cp	r18, r24
    2076:	39 07       	cpc	r19, r25
    2078:	99 f0       	breq	.+38     	; 0x20a0 <print_int+0x134>
			{
				lcd_put(' ');
    207a:	80 e2       	ldi	r24, 0x20	; 32
    207c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <print_int+0x134>
				lcd_put(' ');
			}
		}
		else
		{
			state = 0;
    2082:	1b 82       	std	Y+3, r1	; 0x03
			lcd_put(buf[i]);
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	08 2e       	mov	r0, r24
    2088:	00 0c       	add	r0, r0
    208a:	99 0b       	sbc	r25, r25
    208c:	9e 01       	movw	r18, r28
    208e:	2a 5f       	subi	r18, 0xFA	; 250
    2090:	3f 4f       	sbci	r19, 0xFF	; 255
    2092:	82 0f       	add	r24, r18
    2094:	93 1f       	adc	r25, r19
    2096:	fc 01       	movw	r30, r24
    2098:	80 81       	ld	r24, Z
    209a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <print_int+0x136>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    20a0:	00 00       	nop
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	81 50       	subi	r24, 0x01	; 1
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	88 23       	and	r24, r24
    20ac:	0c f0       	brlt	.+2      	; 0x20b0 <print_int+0x144>
    20ae:	bf cf       	rjmp	.-130    	; 0x202e <print_int+0xc2>
			state = 0;
			lcd_put(buf[i]);
		}

	}
	if (state)
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	88 23       	and	r24, r24
    20b4:	19 f0       	breq	.+6      	; 0x20bc <print_int+0x150>
	{
		lcd_put('0');
    20b6:	80 e3       	ldi	r24, 0x30	; 48
    20b8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	}
}
    20bc:	00 00       	nop
    20be:	6b 96       	adiw	r28, 0x1b	; 27
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	08 95       	ret

000020d0 <print_double>:

// vytiskne double
void print_double(double cislo, char znaminko, char nula, int mista_pred_carkou, int mista_za_carkou)
{
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	61 97       	sbiw	r28, 0x11	; 17
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	68 87       	std	Y+8, r22	; 0x08
    20ee:	79 87       	std	Y+9, r23	; 0x09
    20f0:	8a 87       	std	Y+10, r24	; 0x0a
    20f2:	9b 87       	std	Y+11, r25	; 0x0b
    20f4:	4c 87       	std	Y+12, r20	; 0x0c
    20f6:	2d 87       	std	Y+13, r18	; 0x0d
    20f8:	1f 87       	std	Y+15, r17	; 0x0f
    20fa:	0e 87       	std	Y+14, r16	; 0x0e
    20fc:	f9 8a       	std	Y+17, r15	; 0x11
    20fe:	e8 8a       	std	Y+16, r14	; 0x10
	int i, cela, desetinna;
	char znam = '+';
    2100:	8b e2       	ldi	r24, 0x2B	; 43
    2102:	8b 83       	std	Y+3, r24	; 0x03

	if (mista_za_carkou == -1)
    2104:	88 89       	ldd	r24, Y+16	; 0x10
    2106:	99 89       	ldd	r25, Y+17	; 0x11
    2108:	01 96       	adiw	r24, 0x01	; 1
    210a:	21 f4       	brne	.+8      	; 0x2114 <print_double+0x44>
		mista_za_carkou = 3;
    210c:	83 e0       	ldi	r24, 0x03	; 3
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	99 8b       	std	Y+17, r25	; 0x11
    2112:	88 8b       	std	Y+16, r24	; 0x10

	if (cislo < 0)
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	a9 01       	movw	r20, r18
    211a:	68 85       	ldd	r22, Y+8	; 0x08
    211c:	79 85       	ldd	r23, Y+9	; 0x09
    211e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2120:	9b 85       	ldd	r25, Y+11	; 0x0b
    2122:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    2126:	88 23       	and	r24, r24
    2128:	5c f4       	brge	.+22     	; 0x2140 <print_double+0x70>
	{
		cislo *= -1;
    212a:	88 85       	ldd	r24, Y+8	; 0x08
    212c:	99 85       	ldd	r25, Y+9	; 0x09
    212e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2130:	bb 85       	ldd	r27, Y+11	; 0x0b
    2132:	b0 58       	subi	r27, 0x80	; 128
    2134:	88 87       	std	Y+8, r24	; 0x08
    2136:	99 87       	std	Y+9, r25	; 0x09
    2138:	aa 87       	std	Y+10, r26	; 0x0a
    213a:	bb 87       	std	Y+11, r27	; 0x0b
		znam = '-';
    213c:	8d e2       	ldi	r24, 0x2D	; 45
    213e:	8b 83       	std	Y+3, r24	; 0x03
	}

	cela = (int) cislo;
    2140:	68 85       	ldd	r22, Y+8	; 0x08
    2142:	79 85       	ldd	r23, Y+9	; 0x09
    2144:	8a 85       	ldd	r24, Y+10	; 0x0a
    2146:	9b 85       	ldd	r25, Y+11	; 0x0b
    2148:	0e 94 1e 18 	call	0x303c	; 0x303c <__fixsfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9d 83       	std	Y+5, r25	; 0x05
    2152:	8c 83       	std	Y+4, r24	; 0x04
	cislo -= cela;
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	09 2e       	mov	r0, r25
    215a:	00 0c       	add	r0, r0
    215c:	aa 0b       	sbc	r26, r26
    215e:	bb 0b       	sbc	r27, r27
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	0e 94 56 18 	call	0x30ac	; 0x30ac <__floatsisf>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	9c 01       	movw	r18, r24
    216e:	ad 01       	movw	r20, r26
    2170:	68 85       	ldd	r22, Y+8	; 0x08
    2172:	79 85       	ldd	r23, Y+9	; 0x09
    2174:	8a 85       	ldd	r24, Y+10	; 0x0a
    2176:	9b 85       	ldd	r25, Y+11	; 0x0b
    2178:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__subsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	88 87       	std	Y+8, r24	; 0x08
    2182:	99 87       	std	Y+9, r25	; 0x09
    2184:	aa 87       	std	Y+10, r26	; 0x0a
    2186:	bb 87       	std	Y+11, r27	; 0x0b

	for (i=0; i < mista_za_carkou; i++)
    2188:	1a 82       	std	Y+2, r1	; 0x02
    218a:	19 82       	std	Y+1, r1	; 0x01
    218c:	15 c0       	rjmp	.+42     	; 0x21b8 <print_double+0xe8>
		cislo *= 10;
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e2       	ldi	r20, 0x20	; 32
    2194:	51 e4       	ldi	r21, 0x41	; 65
    2196:	68 85       	ldd	r22, Y+8	; 0x08
    2198:	79 85       	ldd	r23, Y+9	; 0x09
    219a:	8a 85       	ldd	r24, Y+10	; 0x0a
    219c:	9b 85       	ldd	r25, Y+11	; 0x0b
    219e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	88 87       	std	Y+8, r24	; 0x08
    21a8:	99 87       	std	Y+9, r25	; 0x09
    21aa:	aa 87       	std	Y+10, r26	; 0x0a
    21ac:	bb 87       	std	Y+11, r27	; 0x0b
	}

	cela = (int) cislo;
	cislo -= cela;

	for (i=0; i < mista_za_carkou; i++)
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	29 81       	ldd	r18, Y+1	; 0x01
    21ba:	3a 81       	ldd	r19, Y+2	; 0x02
    21bc:	88 89       	ldd	r24, Y+16	; 0x10
    21be:	99 89       	ldd	r25, Y+17	; 0x11
    21c0:	28 17       	cp	r18, r24
    21c2:	39 07       	cpc	r19, r25
    21c4:	24 f3       	brlt	.-56     	; 0x218e <print_double+0xbe>
		cislo *= 10;

	desetinna = (int) cislo;
    21c6:	68 85       	ldd	r22, Y+8	; 0x08
    21c8:	79 85       	ldd	r23, Y+9	; 0x09
    21ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    21cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    21ce:	0e 94 1e 18 	call	0x303c	; 0x303c <__fixsfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9f 83       	std	Y+7, r25	; 0x07
    21d8:	8e 83       	std	Y+6, r24	; 0x06
	cela = (znam == '-') ? -1 * cela : cela;
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	8d 32       	cpi	r24, 0x2D	; 45
    21de:	31 f4       	brne	.+12     	; 0x21ec <print_double+0x11c>
    21e0:	8c 81       	ldd	r24, Y+4	; 0x04
    21e2:	9d 81       	ldd	r25, Y+5	; 0x05
    21e4:	91 95       	neg	r25
    21e6:	81 95       	neg	r24
    21e8:	91 09       	sbc	r25, r1
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <print_double+0x120>
    21ec:	8c 81       	ldd	r24, Y+4	; 0x04
    21ee:	9d 81       	ldd	r25, Y+5	; 0x05
    21f0:	9d 83       	std	Y+5, r25	; 0x05
    21f2:	8c 83       	std	Y+4, r24	; 0x04

	print_int(cela, znaminko, nula, mista_pred_carkou);
    21f4:	2e 85       	ldd	r18, Y+14	; 0x0e
    21f6:	3f 85       	ldd	r19, Y+15	; 0x0f
    21f8:	8c 81       	ldd	r24, Y+4	; 0x04
    21fa:	9d 81       	ldd	r25, Y+5	; 0x05
    21fc:	4d 85       	ldd	r20, Y+13	; 0x0d
    21fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2200:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <print_int>
	lcd_put(',');
    2204:	8c e2       	ldi	r24, 0x2C	; 44
    2206:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	print_int(desetinna, '\0', '0', mista_za_carkou);
    220a:	28 89       	ldd	r18, Y+16	; 0x10
    220c:	39 89       	ldd	r19, Y+17	; 0x11
    220e:	8e 81       	ldd	r24, Y+6	; 0x06
    2210:	9f 81       	ldd	r25, Y+7	; 0x07
    2212:	40 e3       	ldi	r20, 0x30	; 48
    2214:	60 e0       	ldi	r22, 0x00	; 0
    2216:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <print_int>

}
    221a:	00 00       	nop
    221c:	61 96       	adiw	r28, 0x11	; 17
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	08 95       	ret

00002236 <lcd_printf>:

// printf funkce
void lcd_printf(char str[], ...)
{
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	2f 97       	sbiw	r28, 0x0f	; 15
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61

	uint8_t i, j;
	char *str_p;
	int tmp_int;

	char znaminko = '\0';
    2252:	1b 82       	std	Y+3, r1	; 0x03
	char nula = '\0';
    2254:	1c 82       	std	Y+4, r1	; 0x04
	char desetina_carka = '\0';
    2256:	1d 82       	std	Y+5, r1	; 0x05
	int mista_pred_carkou = -1;
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	9f ef       	ldi	r25, 0xFF	; 255
    225c:	9f 83       	std	Y+7, r25	; 0x07
    225e:	8e 83       	std	Y+6, r24	; 0x06
	int mista_za_carkou = -1;
    2260:	8f ef       	ldi	r24, 0xFF	; 255
    2262:	9f ef       	ldi	r25, 0xFF	; 255
    2264:	99 87       	std	Y+9, r25	; 0x09
    2266:	88 87       	std	Y+8, r24	; 0x08



	 __gnuc_va_list ap;
	 //va_list ap;
	 va_start(ap, str);
    2268:	ce 01       	movw	r24, r28
    226a:	4a 96       	adiw	r24, 0x1a	; 26
    226c:	9f 87       	std	Y+15, r25	; 0x0f
    226e:	8e 87       	std	Y+14, r24	; 0x0e



	for (i=0; str[i] != '\0'; i++)
    2270:	19 82       	std	Y+1, r1	; 0x01
    2272:	5e c2       	rjmp	.+1212   	; 0x2730 <lcd_printf+0x4fa>
	{
		// nová stránka
		if (str[i] == '\f')
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	28 8d       	ldd	r18, Y+24	; 0x18
    227c:	39 8d       	ldd	r19, Y+25	; 0x19
    227e:	82 0f       	add	r24, r18
    2280:	93 1f       	adc	r25, r19
    2282:	fc 01       	movw	r30, r24
    2284:	80 81       	ld	r24, Z
    2286:	8c 30       	cpi	r24, 0x0C	; 12
    2288:	51 f4       	brne	.+20     	; 0x229e <lcd_printf+0x68>
		{
			line = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
			lcd_cmd(LCD_CMD_CLR);
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
			lcd_cmd(LCD_CMD_W_DDRAM);
    2296:	80 e8       	ldi	r24, 0x80	; 128
    2298:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
    229c:	46 c2       	rjmp	.+1164   	; 0x272a <lcd_printf+0x4f4>
		}
		// nový řádek
		else if (str[i] == '\n')
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	28 8d       	ldd	r18, Y+24	; 0x18
    22a6:	39 8d       	ldd	r19, Y+25	; 0x19
    22a8:	82 0f       	add	r24, r18
    22aa:	93 1f       	adc	r25, r19
    22ac:	fc 01       	movw	r30, r24
    22ae:	80 81       	ld	r24, Z
    22b0:	8a 30       	cpi	r24, 0x0A	; 10
    22b2:	71 f5       	brne	.+92     	; 0x2310 <lcd_printf+0xda>
		{
			// jestli jsme na 1.
			if (line == 1)
    22b4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22b8:	81 30       	cpi	r24, 0x01	; 1
    22ba:	49 f4       	brne	.+18     	; 0x22ce <lcd_printf+0x98>
			{
				line++;
    22bc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22c0:	8f 5f       	subi	r24, 0xFF	; 255
    22c2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40); // go 2 line
    22c6:	80 ec       	ldi	r24, 0xC0	; 192
    22c8:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
    22cc:	2e c2       	rjmp	.+1116   	; 0x272a <lcd_printf+0x4f4>
			}
			// jestli jsme na 2.
			else if (line == 2)
    22ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22d2:	82 30       	cpi	r24, 0x02	; 2
    22d4:	49 f4       	brne	.+18     	; 0x22e8 <lcd_printf+0xb2>
			{
				line++;
    22d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22da:	8f 5f       	subi	r24, 0xFF	; 255
    22dc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x14); // go 3 line
    22e0:	84 e9       	ldi	r24, 0x94	; 148
    22e2:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
    22e6:	21 c2       	rjmp	.+1090   	; 0x272a <lcd_printf+0x4f4>
			}
			// jestli jsme na 3.
			else if (line == 3)
    22e8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22ec:	83 30       	cpi	r24, 0x03	; 3
    22ee:	49 f4       	brne	.+18     	; 0x2302 <lcd_printf+0xcc>
			{
				line++;
    22f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x54); // go 4 line
    22fa:	84 ed       	ldi	r24, 0xD4	; 212
    22fc:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
    2300:	14 c2       	rjmp	.+1064   	; 0x272a <lcd_printf+0x4f4>
			}
			// jestli jsme na 4.
			else
			{
				line = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x00); // go 1 line
    2308:	80 e8       	ldi	r24, 0x80	; 128
    230a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
    230e:	0d c2       	rjmp	.+1050   	; 0x272a <lcd_printf+0x4f4>
			}
		}
		// návrat vozíku
		else if (str[i] == '\r')
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	28 8d       	ldd	r18, Y+24	; 0x18
    2318:	39 8d       	ldd	r19, Y+25	; 0x19
    231a:	82 0f       	add	r24, r18
    231c:	93 1f       	adc	r25, r19
    231e:	fc 01       	movw	r30, r24
    2320:	80 81       	ld	r24, Z
    2322:	8d 30       	cpi	r24, 0x0D	; 13
    2324:	61 f4       	brne	.+24     	; 0x233e <lcd_printf+0x108>
		{
			// pokud jsme na 2. řádku
			if (line)
    2326:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    232a:	88 23       	and	r24, r24
    232c:	21 f0       	breq	.+8      	; 0x2336 <lcd_printf+0x100>
			{
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40);
    232e:	80 ec       	ldi	r24, 0xC0	; 192
    2330:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
    2334:	fa c1       	rjmp	.+1012   	; 0x272a <lcd_printf+0x4f4>
			}
			// jestli jsme na 1.
			else
			{
				lcd_cmd(LCD_CMD_W_DDRAM);
    2336:	80 e8       	ldi	r24, 0x80	; 128
    2338:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <lcd_cmd>
    233c:	f6 c1       	rjmp	.+1004   	; 0x272a <lcd_printf+0x4f4>
			}
		}
		// tabulátor
		else if (str[i] == '\t')
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	88 2f       	mov	r24, r24
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	28 8d       	ldd	r18, Y+24	; 0x18
    2346:	39 8d       	ldd	r19, Y+25	; 0x19
    2348:	82 0f       	add	r24, r18
    234a:	93 1f       	adc	r25, r19
    234c:	fc 01       	movw	r30, r24
    234e:	80 81       	ld	r24, Z
    2350:	89 30       	cpi	r24, 0x09	; 9
    2352:	69 f4       	brne	.+26     	; 0x236e <lcd_printf+0x138>
		{
			lcd_put(' ');
    2354:	80 e2       	ldi	r24, 0x20	; 32
    2356:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
			lcd_put(' ');
    235a:	80 e2       	ldi	r24, 0x20	; 32
    235c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
			lcd_put(' ');
    2360:	80 e2       	ldi	r24, 0x20	; 32
    2362:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
			lcd_put(' ');
    2366:	80 e2       	ldi	r24, 0x20	; 32
    2368:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
    236c:	de c1       	rjmp	.+956    	; 0x272a <lcd_printf+0x4f4>
		}
		// znak lomeno
		else if (str[i] == '\\')
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	28 8d       	ldd	r18, Y+24	; 0x18
    2376:	39 8d       	ldd	r19, Y+25	; 0x19
    2378:	82 0f       	add	r24, r18
    237a:	93 1f       	adc	r25, r19
    237c:	fc 01       	movw	r30, r24
    237e:	80 81       	ld	r24, Z
    2380:	8c 35       	cpi	r24, 0x5C	; 92
    2382:	21 f4       	brne	.+8      	; 0x238c <lcd_printf+0x156>
		{
			lcd_put(0xA4);
    2384:	84 ea       	ldi	r24, 0xA4	; 164
    2386:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
    238a:	cf c1       	rjmp	.+926    	; 0x272a <lcd_printf+0x4f4>
		}
		else if (str[i] == '%')
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	88 2f       	mov	r24, r24
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	28 8d       	ldd	r18, Y+24	; 0x18
    2394:	39 8d       	ldd	r19, Y+25	; 0x19
    2396:	82 0f       	add	r24, r18
    2398:	93 1f       	adc	r25, r19
    239a:	fc 01       	movw	r30, r24
    239c:	80 81       	ld	r24, Z
    239e:	85 32       	cpi	r24, 0x25	; 37
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <lcd_printf+0x16e>
    23a2:	b8 c1       	rjmp	.+880    	; 0x2714 <lcd_printf+0x4de>
		{
			// pokud jde o znak %
			if (str[i+1] == '%')
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	28 8d       	ldd	r18, Y+24	; 0x18
    23ae:	39 8d       	ldd	r19, Y+25	; 0x19
    23b0:	82 0f       	add	r24, r18
    23b2:	93 1f       	adc	r25, r19
    23b4:	fc 01       	movw	r30, r24
    23b6:	80 81       	ld	r24, Z
    23b8:	85 32       	cpi	r24, 0x25	; 37
    23ba:	39 f4       	brne	.+14     	; 0x23ca <lcd_printf+0x194>
			{
				i++;
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	8f 5f       	subi	r24, 0xFF	; 255
    23c0:	89 83       	std	Y+1, r24	; 0x01
				lcd_put('%');
    23c2:	85 e2       	ldi	r24, 0x25	; 37
    23c4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
    23c8:	b0 c1       	rjmp	.+864    	; 0x272a <lcd_printf+0x4f4>
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	8f 5f       	subi	r24, 0xFF	; 255
    23ce:	8a 83       	std	Y+2, r24	; 0x02
    23d0:	b5 c0       	rjmp	.+362    	; 0x253c <lcd_printf+0x306>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
				{
					if (str[j] == '+' || str[j] == '-')
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	88 2f       	mov	r24, r24
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	28 8d       	ldd	r18, Y+24	; 0x18
    23da:	39 8d       	ldd	r19, Y+25	; 0x19
    23dc:	82 0f       	add	r24, r18
    23de:	93 1f       	adc	r25, r19
    23e0:	fc 01       	movw	r30, r24
    23e2:	80 81       	ld	r24, Z
    23e4:	8b 32       	cpi	r24, 0x2B	; 43
    23e6:	59 f0       	breq	.+22     	; 0x23fe <lcd_printf+0x1c8>
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	88 2f       	mov	r24, r24
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	28 8d       	ldd	r18, Y+24	; 0x18
    23f0:	39 8d       	ldd	r19, Y+25	; 0x19
    23f2:	82 0f       	add	r24, r18
    23f4:	93 1f       	adc	r25, r19
    23f6:	fc 01       	movw	r30, r24
    23f8:	80 81       	ld	r24, Z
    23fa:	8d 32       	cpi	r24, 0x2D	; 45
    23fc:	19 f4       	brne	.+6      	; 0x2404 <lcd_printf+0x1ce>
					{
						znaminko = '+';
    23fe:	8b e2       	ldi	r24, 0x2B	; 43
    2400:	8b 83       	std	Y+3, r24	; 0x03
    2402:	99 c0       	rjmp	.+306    	; 0x2536 <lcd_printf+0x300>
					}
					else if (str[j] == '.')
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	28 8d       	ldd	r18, Y+24	; 0x18
    240c:	39 8d       	ldd	r19, Y+25	; 0x19
    240e:	82 0f       	add	r24, r18
    2410:	93 1f       	adc	r25, r19
    2412:	fc 01       	movw	r30, r24
    2414:	80 81       	ld	r24, Z
    2416:	8e 32       	cpi	r24, 0x2E	; 46
    2418:	19 f4       	brne	.+6      	; 0x2420 <lcd_printf+0x1ea>
					{
						desetina_carka = ',';
    241a:	8c e2       	ldi	r24, 0x2C	; 44
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	8b c0       	rjmp	.+278    	; 0x2536 <lcd_printf+0x300>
					}
					else if (str[j] == '0')
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	88 2f       	mov	r24, r24
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	28 8d       	ldd	r18, Y+24	; 0x18
    2428:	39 8d       	ldd	r19, Y+25	; 0x19
    242a:	82 0f       	add	r24, r18
    242c:	93 1f       	adc	r25, r19
    242e:	fc 01       	movw	r30, r24
    2430:	80 81       	ld	r24, Z
    2432:	80 33       	cpi	r24, 0x30	; 48
    2434:	d1 f4       	brne	.+52     	; 0x246a <lcd_printf+0x234>
					{
						if (desetina_carka == '\0')
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	88 23       	and	r24, r24
    243a:	a1 f4       	brne	.+40     	; 0x2464 <lcd_printf+0x22e>
						{
							if (nula == '0')
    243c:	8c 81       	ldd	r24, Y+4	; 0x04
    243e:	80 33       	cpi	r24, 0x30	; 48
    2440:	71 f4       	brne	.+28     	; 0x245e <lcd_printf+0x228>
								mista_pred_carkou *= 10;
    2442:	8e 81       	ldd	r24, Y+6	; 0x06
    2444:	9f 81       	ldd	r25, Y+7	; 0x07
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	9c 01       	movw	r18, r24
    244c:	22 0f       	add	r18, r18
    244e:	33 1f       	adc	r19, r19
    2450:	22 0f       	add	r18, r18
    2452:	33 1f       	adc	r19, r19
    2454:	82 0f       	add	r24, r18
    2456:	93 1f       	adc	r25, r19
    2458:	9f 83       	std	Y+7, r25	; 0x07
    245a:	8e 83       	std	Y+6, r24	; 0x06
    245c:	6c c0       	rjmp	.+216    	; 0x2536 <lcd_printf+0x300>
							else
								nula = '0';
    245e:	80 e3       	ldi	r24, 0x30	; 48
    2460:	8c 83       	std	Y+4, r24	; 0x04
    2462:	69 c0       	rjmp	.+210    	; 0x2536 <lcd_printf+0x300>
						}
						else
						{
							mista_za_carkou = 0;
    2464:	19 86       	std	Y+9, r1	; 0x09
    2466:	18 86       	std	Y+8, r1	; 0x08
    2468:	66 c0       	rjmp	.+204    	; 0x2536 <lcd_printf+0x300>
						}

					}
					else if (str[j] >= '1' && str[j] <= '9')
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	28 8d       	ldd	r18, Y+24	; 0x18
    2472:	39 8d       	ldd	r19, Y+25	; 0x19
    2474:	82 0f       	add	r24, r18
    2476:	93 1f       	adc	r25, r19
    2478:	fc 01       	movw	r30, r24
    247a:	80 81       	ld	r24, Z
    247c:	81 33       	cpi	r24, 0x31	; 49
    247e:	08 f4       	brcc	.+2      	; 0x2482 <lcd_printf+0x24c>
    2480:	5a c0       	rjmp	.+180    	; 0x2536 <lcd_printf+0x300>
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	28 8d       	ldd	r18, Y+24	; 0x18
    248a:	39 8d       	ldd	r19, Y+25	; 0x19
    248c:	82 0f       	add	r24, r18
    248e:	93 1f       	adc	r25, r19
    2490:	fc 01       	movw	r30, r24
    2492:	80 81       	ld	r24, Z
    2494:	8a 33       	cpi	r24, 0x3A	; 58
    2496:	08 f0       	brcs	.+2      	; 0x249a <lcd_printf+0x264>
    2498:	4e c0       	rjmp	.+156    	; 0x2536 <lcd_printf+0x300>
					{
						if (desetina_carka == ',')
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	8c 32       	cpi	r24, 0x2C	; 44
    249e:	31 f5       	brne	.+76     	; 0x24ec <lcd_printf+0x2b6>
						{
							if (mista_za_carkou == -1)
    24a0:	88 85       	ldd	r24, Y+8	; 0x08
    24a2:	99 85       	ldd	r25, Y+9	; 0x09
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	11 f4       	brne	.+4      	; 0x24ac <lcd_printf+0x276>
								mista_za_carkou = 0;
    24a8:	19 86       	std	Y+9, r1	; 0x09
    24aa:	18 86       	std	Y+8, r1	; 0x08

							mista_za_carkou *= 10;
    24ac:	88 85       	ldd	r24, Y+8	; 0x08
    24ae:	99 85       	ldd	r25, Y+9	; 0x09
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	9c 01       	movw	r18, r24
    24b6:	22 0f       	add	r18, r18
    24b8:	33 1f       	adc	r19, r19
    24ba:	22 0f       	add	r18, r18
    24bc:	33 1f       	adc	r19, r19
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	99 87       	std	Y+9, r25	; 0x09
    24c4:	88 87       	std	Y+8, r24	; 0x08
							mista_za_carkou += str[j] - '0';
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	28 8d       	ldd	r18, Y+24	; 0x18
    24ce:	39 8d       	ldd	r19, Y+25	; 0x19
    24d0:	82 0f       	add	r24, r18
    24d2:	93 1f       	adc	r25, r19
    24d4:	fc 01       	movw	r30, r24
    24d6:	80 81       	ld	r24, Z
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	c0 97       	sbiw	r24, 0x30	; 48
    24de:	28 85       	ldd	r18, Y+8	; 0x08
    24e0:	39 85       	ldd	r19, Y+9	; 0x09
    24e2:	82 0f       	add	r24, r18
    24e4:	93 1f       	adc	r25, r19
    24e6:	99 87       	std	Y+9, r25	; 0x09
    24e8:	88 87       	std	Y+8, r24	; 0x08
    24ea:	25 c0       	rjmp	.+74     	; 0x2536 <lcd_printf+0x300>
						}
						else
						{
							if (mista_pred_carkou == -1)
    24ec:	8e 81       	ldd	r24, Y+6	; 0x06
    24ee:	9f 81       	ldd	r25, Y+7	; 0x07
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	11 f4       	brne	.+4      	; 0x24f8 <lcd_printf+0x2c2>
								mista_pred_carkou = 0;
    24f4:	1f 82       	std	Y+7, r1	; 0x07
    24f6:	1e 82       	std	Y+6, r1	; 0x06

							mista_pred_carkou *= 10;
    24f8:	8e 81       	ldd	r24, Y+6	; 0x06
    24fa:	9f 81       	ldd	r25, Y+7	; 0x07
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	9c 01       	movw	r18, r24
    2502:	22 0f       	add	r18, r18
    2504:	33 1f       	adc	r19, r19
    2506:	22 0f       	add	r18, r18
    2508:	33 1f       	adc	r19, r19
    250a:	82 0f       	add	r24, r18
    250c:	93 1f       	adc	r25, r19
    250e:	9f 83       	std	Y+7, r25	; 0x07
    2510:	8e 83       	std	Y+6, r24	; 0x06
							mista_pred_carkou += str[j] - '0';
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	88 2f       	mov	r24, r24
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	28 8d       	ldd	r18, Y+24	; 0x18
    251a:	39 8d       	ldd	r19, Y+25	; 0x19
    251c:	82 0f       	add	r24, r18
    251e:	93 1f       	adc	r25, r19
    2520:	fc 01       	movw	r30, r24
    2522:	80 81       	ld	r24, Z
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	c0 97       	sbiw	r24, 0x30	; 48
    252a:	2e 81       	ldd	r18, Y+6	; 0x06
    252c:	3f 81       	ldd	r19, Y+7	; 0x07
    252e:	82 0f       	add	r24, r18
    2530:	93 1f       	adc	r25, r19
    2532:	9f 83       	std	Y+7, r25	; 0x07
    2534:	8e 83       	std	Y+6, r24	; 0x06
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	8f 5f       	subi	r24, 0xFF	; 255
    253a:	8a 83       	std	Y+2, r24	; 0x02
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	28 8d       	ldd	r18, Y+24	; 0x18
    2544:	39 8d       	ldd	r19, Y+25	; 0x19
    2546:	82 0f       	add	r24, r18
    2548:	93 1f       	adc	r25, r19
    254a:	fc 01       	movw	r30, r24
    254c:	80 81       	ld	r24, Z
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    254e:	83 36       	cpi	r24, 0x63	; 99
    2550:	69 f1       	breq	.+90     	; 0x25ac <lcd_printf+0x376>
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	28 8d       	ldd	r18, Y+24	; 0x18
    255a:	39 8d       	ldd	r19, Y+25	; 0x19
    255c:	82 0f       	add	r24, r18
    255e:	93 1f       	adc	r25, r19
    2560:	fc 01       	movw	r30, r24
    2562:	80 81       	ld	r24, Z
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    2564:	88 34       	cpi	r24, 0x48	; 72
    2566:	11 f1       	breq	.+68     	; 0x25ac <lcd_printf+0x376>
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	88 2f       	mov	r24, r24
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	28 8d       	ldd	r18, Y+24	; 0x18
    2570:	39 8d       	ldd	r19, Y+25	; 0x19
    2572:	82 0f       	add	r24, r18
    2574:	93 1f       	adc	r25, r19
    2576:	fc 01       	movw	r30, r24
    2578:	80 81       	ld	r24, Z
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    257a:	84 36       	cpi	r24, 0x64	; 100
    257c:	b9 f0       	breq	.+46     	; 0x25ac <lcd_printf+0x376>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	88 2f       	mov	r24, r24
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	28 8d       	ldd	r18, Y+24	; 0x18
    2586:	39 8d       	ldd	r19, Y+25	; 0x19
    2588:	82 0f       	add	r24, r18
    258a:	93 1f       	adc	r25, r19
    258c:	fc 01       	movw	r30, r24
    258e:	80 81       	ld	r24, Z
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    2590:	86 36       	cpi	r24, 0x66	; 102
    2592:	61 f0       	breq	.+24     	; 0x25ac <lcd_printf+0x376>
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	28 8d       	ldd	r18, Y+24	; 0x18
    259c:	39 8d       	ldd	r19, Y+25	; 0x19
    259e:	82 0f       	add	r24, r18
    25a0:	93 1f       	adc	r25, r19
    25a2:	fc 01       	movw	r30, r24
    25a4:	80 81       	ld	r24, Z
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    25a6:	83 37       	cpi	r24, 0x73	; 115
    25a8:	09 f0       	breq	.+2      	; 0x25ac <lcd_printf+0x376>
    25aa:	13 cf       	rjmp	.-474    	; 0x23d2 <lcd_printf+0x19c>
						}
					}
				}

				// posuneme index procházení pole
				i = j;
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01

				// podle typu s nimi naložíme
				if (str[j] == 'c')
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	28 8d       	ldd	r18, Y+24	; 0x18
    25b8:	39 8d       	ldd	r19, Y+25	; 0x19
    25ba:	82 0f       	add	r24, r18
    25bc:	93 1f       	adc	r25, r19
    25be:	fc 01       	movw	r30, r24
    25c0:	80 81       	ld	r24, Z
    25c2:	83 36       	cpi	r24, 0x63	; 99
    25c4:	69 f4       	brne	.+26     	; 0x25e0 <lcd_printf+0x3aa>
				{
					lcd_put(va_arg(ap, int));
    25c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ca:	9c 01       	movw	r18, r24
    25cc:	2e 5f       	subi	r18, 0xFE	; 254
    25ce:	3f 4f       	sbci	r19, 0xFF	; 255
    25d0:	3f 87       	std	Y+15, r19	; 0x0f
    25d2:	2e 87       	std	Y+14, r18	; 0x0e
    25d4:	fc 01       	movw	r30, r24
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
    25de:	8e c0       	rjmp	.+284    	; 0x26fc <lcd_printf+0x4c6>
				}
				else if (str[j] == 'H')
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	28 8d       	ldd	r18, Y+24	; 0x18
    25e8:	39 8d       	ldd	r19, Y+25	; 0x19
    25ea:	82 0f       	add	r24, r18
    25ec:	93 1f       	adc	r25, r19
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 81       	ld	r24, Z
    25f2:	88 34       	cpi	r24, 0x48	; 72
    25f4:	69 f4       	brne	.+26     	; 0x2610 <lcd_printf+0x3da>
				{
					print_hex(va_arg(ap, uint16_t));
    25f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25fa:	9c 01       	movw	r18, r24
    25fc:	2e 5f       	subi	r18, 0xFE	; 254
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	3f 87       	std	Y+15, r19	; 0x0f
    2602:	2e 87       	std	Y+14, r18	; 0x0e
    2604:	fc 01       	movw	r30, r24
    2606:	80 81       	ld	r24, Z
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <print_hex>
    260e:	76 c0       	rjmp	.+236    	; 0x26fc <lcd_printf+0x4c6>
				}
				else if (str[j] == 'd')
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	28 8d       	ldd	r18, Y+24	; 0x18
    2618:	39 8d       	ldd	r19, Y+25	; 0x19
    261a:	82 0f       	add	r24, r18
    261c:	93 1f       	adc	r25, r19
    261e:	fc 01       	movw	r30, r24
    2620:	80 81       	ld	r24, Z
    2622:	84 36       	cpi	r24, 0x64	; 100
    2624:	a9 f4       	brne	.+42     	; 0x2650 <lcd_printf+0x41a>
				{
					tmp_int = va_arg(ap, int);
    2626:	8e 85       	ldd	r24, Y+14	; 0x0e
    2628:	9f 85       	ldd	r25, Y+15	; 0x0f
    262a:	9c 01       	movw	r18, r24
    262c:	2e 5f       	subi	r18, 0xFE	; 254
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	3f 87       	std	Y+15, r19	; 0x0f
    2632:	2e 87       	std	Y+14, r18	; 0x0e
    2634:	fc 01       	movw	r30, r24
    2636:	80 81       	ld	r24, Z
    2638:	91 81       	ldd	r25, Z+1	; 0x01
    263a:	9b 87       	std	Y+11, r25	; 0x0b
    263c:	8a 87       	std	Y+10, r24	; 0x0a
					print_int(tmp_int, znaminko, nula, mista_pred_carkou);
    263e:	2e 81       	ldd	r18, Y+6	; 0x06
    2640:	3f 81       	ldd	r19, Y+7	; 0x07
    2642:	8a 85       	ldd	r24, Y+10	; 0x0a
    2644:	9b 85       	ldd	r25, Y+11	; 0x0b
    2646:	4c 81       	ldd	r20, Y+4	; 0x04
    2648:	6b 81       	ldd	r22, Y+3	; 0x03
    264a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <print_int>
    264e:	56 c0       	rjmp	.+172    	; 0x26fc <lcd_printf+0x4c6>
				}
				else if (str[j] == 'f')
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	28 8d       	ldd	r18, Y+24	; 0x18
    2658:	39 8d       	ldd	r19, Y+25	; 0x19
    265a:	82 0f       	add	r24, r18
    265c:	93 1f       	adc	r25, r19
    265e:	fc 01       	movw	r30, r24
    2660:	80 81       	ld	r24, Z
    2662:	86 36       	cpi	r24, 0x66	; 102
    2664:	c9 f4       	brne	.+50     	; 0x2698 <lcd_printf+0x462>
				{
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
    2666:	8e 85       	ldd	r24, Y+14	; 0x0e
    2668:	9f 85       	ldd	r25, Y+15	; 0x0f
    266a:	9c 01       	movw	r18, r24
    266c:	2c 5f       	subi	r18, 0xFC	; 252
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	3f 87       	std	Y+15, r19	; 0x0f
    2672:	2e 87       	std	Y+14, r18	; 0x0e
    2674:	fc 01       	movw	r30, r24
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	a2 81       	ldd	r26, Z+2	; 0x02
    267c:	b3 81       	ldd	r27, Z+3	; 0x03
    267e:	48 85       	ldd	r20, Y+8	; 0x08
    2680:	59 85       	ldd	r21, Y+9	; 0x09
    2682:	2e 81       	ldd	r18, Y+6	; 0x06
    2684:	3f 81       	ldd	r19, Y+7	; 0x07
    2686:	7a 01       	movw	r14, r20
    2688:	89 01       	movw	r16, r18
    268a:	2c 81       	ldd	r18, Y+4	; 0x04
    268c:	4b 81       	ldd	r20, Y+3	; 0x03
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 68 10 	call	0x20d0	; 0x20d0 <print_double>
    2696:	32 c0       	rjmp	.+100    	; 0x26fc <lcd_printf+0x4c6>
				}
				else if (str[j] == 's')
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	28 8d       	ldd	r18, Y+24	; 0x18
    26a0:	39 8d       	ldd	r19, Y+25	; 0x19
    26a2:	82 0f       	add	r24, r18
    26a4:	93 1f       	adc	r25, r19
    26a6:	fc 01       	movw	r30, r24
    26a8:	80 81       	ld	r24, Z
    26aa:	83 37       	cpi	r24, 0x73	; 115
    26ac:	39 f5       	brne	.+78     	; 0x26fc <lcd_printf+0x4c6>
				{
					str_p = va_arg(ap, char *);
    26ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b2:	9c 01       	movw	r18, r24
    26b4:	2e 5f       	subi	r18, 0xFE	; 254
    26b6:	3f 4f       	sbci	r19, 0xFF	; 255
    26b8:	3f 87       	std	Y+15, r19	; 0x0f
    26ba:	2e 87       	std	Y+14, r18	; 0x0e
    26bc:	fc 01       	movw	r30, r24
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	9d 87       	std	Y+13, r25	; 0x0d
    26c4:	8c 87       	std	Y+12, r24	; 0x0c
					for (j=0; *(str_p + j) != '\0'; j++)
    26c6:	1a 82       	std	Y+2, r1	; 0x02
    26c8:	0e c0       	rjmp	.+28     	; 0x26e6 <lcd_printf+0x4b0>
						lcd_put(*(str_p + j));
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    26d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    26d4:	82 0f       	add	r24, r18
    26d6:	93 1f       	adc	r25, r19
    26d8:	fc 01       	movw	r30, r24
    26da:	80 81       	ld	r24, Z
    26dc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
				}
				else if (str[j] == 's')
				{
					str_p = va_arg(ap, char *);
					for (j=0; *(str_p + j) != '\0'; j++)
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	8f 5f       	subi	r24, 0xFF	; 255
    26e4:	8a 83       	std	Y+2, r24	; 0x02
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	88 2f       	mov	r24, r24
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    26f0:	82 0f       	add	r24, r18
    26f2:	93 1f       	adc	r25, r19
    26f4:	fc 01       	movw	r30, r24
    26f6:	80 81       	ld	r24, Z
    26f8:	88 23       	and	r24, r24
    26fa:	39 f7       	brne	.-50     	; 0x26ca <lcd_printf+0x494>
						lcd_put(*(str_p + j));
				}

				// vynulovní formátovacích proměnných
				znaminko = '\0';
    26fc:	1b 82       	std	Y+3, r1	; 0x03
				nula = '\0';
    26fe:	1c 82       	std	Y+4, r1	; 0x04
				desetina_carka = '\0';
    2700:	1d 82       	std	Y+5, r1	; 0x05
				mista_pred_carkou = -1;
    2702:	8f ef       	ldi	r24, 0xFF	; 255
    2704:	9f ef       	ldi	r25, 0xFF	; 255
    2706:	9f 83       	std	Y+7, r25	; 0x07
    2708:	8e 83       	std	Y+6, r24	; 0x06
				mista_za_carkou = -1;
    270a:	8f ef       	ldi	r24, 0xFF	; 255
    270c:	9f ef       	ldi	r25, 0xFF	; 255
    270e:	99 87       	std	Y+9, r25	; 0x09
    2710:	88 87       	std	Y+8, r24	; 0x08
    2712:	0b c0       	rjmp	.+22     	; 0x272a <lcd_printf+0x4f4>
			}
		}
		else
		{
			lcd_put(str[i]);
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	28 8d       	ldd	r18, Y+24	; 0x18
    271c:	39 8d       	ldd	r19, Y+25	; 0x19
    271e:	82 0f       	add	r24, r18
    2720:	93 1f       	adc	r25, r19
    2722:	fc 01       	movw	r30, r24
    2724:	80 81       	ld	r24, Z
    2726:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <lcd_put>
	 //va_list ap;
	 va_start(ap, str);



	for (i=0; str[i] != '\0'; i++)
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	8f 5f       	subi	r24, 0xFF	; 255
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	28 8d       	ldd	r18, Y+24	; 0x18
    2738:	39 8d       	ldd	r19, Y+25	; 0x19
    273a:	82 0f       	add	r24, r18
    273c:	93 1f       	adc	r25, r19
    273e:	fc 01       	movw	r30, r24
    2740:	80 81       	ld	r24, Z
    2742:	88 23       	and	r24, r24
    2744:	09 f0       	breq	.+2      	; 0x2748 <lcd_printf+0x512>
    2746:	96 cd       	rjmp	.-1236   	; 0x2274 <lcd_printf+0x3e>
		{
			lcd_put(str[i]);
		}
	}
	va_end(ap);
}
    2748:	00 00       	nop
    274a:	2f 96       	adiw	r28, 0x0f	; 15
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	f8 94       	cli
    2750:	de bf       	out	0x3e, r29	; 62
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	cd bf       	out	0x3d, r28	; 61
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	ff 90       	pop	r15
    2760:	ef 90       	pop	r14
    2762:	08 95       	ret

00002764 <ntc_init>:
#define R_REF	10e3
// ========================================================

// NTC initialization
void ntc_init(void)
{
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0) | 5;							// referention AVCC, measure on channel ADC5
    276c:	8c e7       	ldi	r24, 0x7C	; 124
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	25 e4       	ldi	r18, 0x45	; 69
    2772:	fc 01       	movw	r30, r24
    2774:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);	// ADEN - enable ADC, ACD clk = F_CPU/64
    2776:	8a e7       	ldi	r24, 0x7A	; 122
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	26 e8       	ldi	r18, 0x86	; 134
    277c:	fc 01       	movw	r30, r24
    277e:	20 83       	st	Z, r18
}
    2780:	00 00       	nop
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret

00002788 <ntc_measure>:

// NCT measure
int16_t ntc_measure(void)
{
    2788:	cf 92       	push	r12
    278a:	df 92       	push	r13
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	2e 97       	sbiw	r28, 0x0e	; 14
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
	int16_t adc, ntc_res, temp;
	double volt, tmp_log;
	
	ADCSRA |= (1<<ADSC);        // start conversion
    27a4:	8a e7       	ldi	r24, 0x7A	; 122
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	2a e7       	ldi	r18, 0x7A	; 122
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	f9 01       	movw	r30, r18
    27ae:	20 81       	ld	r18, Z
    27b0:	20 64       	ori	r18, 0x40	; 64
    27b2:	fc 01       	movw	r30, r24
    27b4:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));  // wait to end conversion
    27b6:	00 00       	nop
    27b8:	8a e7       	ldi	r24, 0x7A	; 122
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	fc 01       	movw	r30, r24
    27be:	80 81       	ld	r24, Z
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	80 74       	andi	r24, 0x40	; 64
    27c6:	99 27       	eor	r25, r25
    27c8:	89 2b       	or	r24, r25
    27ca:	b1 f7       	brne	.-20     	; 0x27b8 <ntc_measure+0x30>
	adc=ADC;					// value measurement
    27cc:	88 e7       	ldi	r24, 0x78	; 120
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	fc 01       	movw	r30, r24
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
	
	// convert to voltage
	volt = (V_REF/ADC_MAX) * ((double)adc);
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	09 2e       	mov	r0, r25
    27e0:	00 0c       	add	r0, r0
    27e2:	aa 0b       	sbc	r26, r26
    27e4:	bb 0b       	sbc	r27, r27
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 56 18 	call	0x30ac	; 0x30ac <__floatsisf>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	2a e0       	ldi	r18, 0x0A	; 10
    27f4:	38 e2       	ldi	r19, 0x28	; 40
    27f6:	40 ea       	ldi	r20, 0xA0	; 160
    27f8:	5b e3       	ldi	r21, 0x3B	; 59
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	8b 83       	std	Y+3, r24	; 0x03
    2808:	9c 83       	std	Y+4, r25	; 0x04
    280a:	ad 83       	std	Y+5, r26	; 0x05
    280c:	be 83       	std	Y+6, r27	; 0x06
	ntc_res = (-(volt * R_DIV) / V_REF) / ((volt/V_REF) - 1);
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e4       	ldi	r19, 0x40	; 64
    2812:	4c e1       	ldi	r20, 0x1C	; 28
    2814:	56 e4       	ldi	r21, 0x46	; 70
    2816:	6b 81       	ldd	r22, Y+3	; 0x03
    2818:	7c 81       	ldd	r23, Y+4	; 0x04
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	b0 58       	subi	r27, 0x80	; 128
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 ea       	ldi	r20, 0xA0	; 160
    282e:	50 e4       	ldi	r21, 0x40	; 64
    2830:	bc 01       	movw	r22, r24
    2832:	cd 01       	movw	r24, r26
    2834:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	6c 01       	movw	r12, r24
    283e:	7d 01       	movw	r14, r26
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 ea       	ldi	r20, 0xA0	; 160
    2846:	50 e4       	ldi	r21, 0x40	; 64
    2848:	6b 81       	ldd	r22, Y+3	; 0x03
    284a:	7c 81       	ldd	r23, Y+4	; 0x04
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e8       	ldi	r20, 0x80	; 128
    285e:	5f e3       	ldi	r21, 0x3F	; 63
    2860:	bc 01       	movw	r22, r24
    2862:	cd 01       	movw	r24, r26
    2864:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__subsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	9c 01       	movw	r18, r24
    286e:	ad 01       	movw	r20, r26
    2870:	c7 01       	movw	r24, r14
    2872:	b6 01       	movw	r22, r12
    2874:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	bc 01       	movw	r22, r24
    287e:	cd 01       	movw	r24, r26
    2880:	0e 94 1e 18 	call	0x303c	; 0x303c <__fixsfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	98 87       	std	Y+8, r25	; 0x08
    288a:	8f 83       	std	Y+7, r24	; 0x07
	
	tmp_log = log(ntc_res/R_REF);
    288c:	8f 81       	ldd	r24, Y+7	; 0x07
    288e:	98 85       	ldd	r25, Y+8	; 0x08
    2890:	09 2e       	mov	r0, r25
    2892:	00 0c       	add	r0, r0
    2894:	aa 0b       	sbc	r26, r26
    2896:	bb 0b       	sbc	r27, r27
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 56 18 	call	0x30ac	; 0x30ac <__floatsisf>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e4       	ldi	r19, 0x40	; 64
    28a8:	4c e1       	ldi	r20, 0x1C	; 28
    28aa:	56 e4       	ldi	r21, 0x46	; 70
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	0e 94 13 19 	call	0x3226	; 0x3226 <log>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	89 87       	std	Y+9, r24	; 0x09
    28c6:	9a 87       	std	Y+10, r25	; 0x0a
    28c8:	ab 87       	std	Y+11, r26	; 0x0b
    28ca:	bc 87       	std	Y+12, r27	; 0x0c
	temp = 1.0 / ( A1 + B1*tmp_log + C1*tmp_log*tmp_log + D1*tmp_log*tmp_log*tmp_log ) - 273.15;
    28cc:	21 ef       	ldi	r18, 0xF1	; 241
    28ce:	3b eb       	ldi	r19, 0xBB	; 187
    28d0:	46 e8       	ldi	r20, 0x86	; 134
    28d2:	59 e3       	ldi	r21, 0x39	; 57
    28d4:	69 85       	ldd	r22, Y+9	; 0x09
    28d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    28d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28da:	9c 85       	ldd	r25, Y+12	; 0x0c
    28dc:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	2d e0       	ldi	r18, 0x0D	; 13
    28e6:	3f ec       	ldi	r19, 0xCF	; 207
    28e8:	4b e5       	ldi	r20, 0x5B	; 91
    28ea:	5b e3       	ldi	r21, 0x3B	; 59
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__addsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	6c 01       	movw	r12, r24
    28fa:	7d 01       	movw	r14, r26
    28fc:	22 e8       	ldi	r18, 0x82	; 130
    28fe:	35 ed       	ldi	r19, 0xD5	; 213
    2900:	4f e2       	ldi	r20, 0x2F	; 47
    2902:	56 e3       	ldi	r21, 0x36	; 54
    2904:	69 85       	ldd	r22, Y+9	; 0x09
    2906:	7a 85       	ldd	r23, Y+10	; 0x0a
    2908:	8b 85       	ldd	r24, Y+11	; 0x0b
    290a:	9c 85       	ldd	r25, Y+12	; 0x0c
    290c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	29 85       	ldd	r18, Y+9	; 0x09
    2916:	3a 85       	ldd	r19, Y+10	; 0x0a
    2918:	4b 85       	ldd	r20, Y+11	; 0x0b
    291a:	5c 85       	ldd	r21, Y+12	; 0x0c
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9c 01       	movw	r18, r24
    292a:	ad 01       	movw	r20, r26
    292c:	c7 01       	movw	r24, r14
    292e:	b6 01       	movw	r22, r12
    2930:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__addsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	6c 01       	movw	r12, r24
    293a:	7d 01       	movw	r14, r26
    293c:	2a e6       	ldi	r18, 0x6A	; 106
    293e:	33 e1       	ldi	r19, 0x13	; 19
    2940:	49 e8       	ldi	r20, 0x89	; 137
    2942:	53 e3       	ldi	r21, 0x33	; 51
    2944:	69 85       	ldd	r22, Y+9	; 0x09
    2946:	7a 85       	ldd	r23, Y+10	; 0x0a
    2948:	8b 85       	ldd	r24, Y+11	; 0x0b
    294a:	9c 85       	ldd	r25, Y+12	; 0x0c
    294c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	29 85       	ldd	r18, Y+9	; 0x09
    2956:	3a 85       	ldd	r19, Y+10	; 0x0a
    2958:	4b 85       	ldd	r20, Y+11	; 0x0b
    295a:	5c 85       	ldd	r21, Y+12	; 0x0c
    295c:	bc 01       	movw	r22, r24
    295e:	cd 01       	movw	r24, r26
    2960:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	29 85       	ldd	r18, Y+9	; 0x09
    296a:	3a 85       	ldd	r19, Y+10	; 0x0a
    296c:	4b 85       	ldd	r20, Y+11	; 0x0b
    296e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9c 01       	movw	r18, r24
    297e:	ad 01       	movw	r20, r26
    2980:	c7 01       	movw	r24, r14
    2982:	b6 01       	movw	r22, r12
    2984:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__addsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9c 01       	movw	r18, r24
    298e:	ad 01       	movw	r20, r26
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	80 e8       	ldi	r24, 0x80	; 128
    2996:	9f e3       	ldi	r25, 0x3F	; 63
    2998:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	23 e3       	ldi	r18, 0x33	; 51
    29a2:	33 e9       	ldi	r19, 0x93	; 147
    29a4:	48 e8       	ldi	r20, 0x88	; 136
    29a6:	53 e4       	ldi	r21, 0x43	; 67
    29a8:	bc 01       	movw	r22, r24
    29aa:	cd 01       	movw	r24, r26
    29ac:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <__subsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 1e 18 	call	0x303c	; 0x303c <__fixsfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e 87       	std	Y+14, r25	; 0x0e
    29c2:	8d 87       	std	Y+13, r24	; 0x0d
	
	return temp;
    29c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c6:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    29c8:	2e 96       	adiw	r28, 0x0e	; 14
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	cf 90       	pop	r12
    29e0:	08 95       	ret

000029e2 <motor_init>:
#include "wyk_step_stick.h"

void motor_init(void)
{
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ENA_DDR |= MOTOR_ENA_PIN;
    29ea:	8a e2       	ldi	r24, 0x2A	; 42
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	2a e2       	ldi	r18, 0x2A	; 42
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	f9 01       	movw	r30, r18
    29f4:	20 81       	ld	r18, Z
    29f6:	20 68       	ori	r18, 0x80	; 128
    29f8:	fc 01       	movw	r30, r24
    29fa:	20 83       	st	Z, r18
	MOTOR_DIR_DDR |= MOTOR_DIR_PIN;
    29fc:	8a e2       	ldi	r24, 0x2A	; 42
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	2a e2       	ldi	r18, 0x2A	; 42
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	f9 01       	movw	r30, r18
    2a06:	20 81       	ld	r18, Z
    2a08:	20 62       	ori	r18, 0x20	; 32
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	20 83       	st	Z, r18
	MOTOR_STEP_DDR |= MOTOR_STEP_PIN;
    2a0e:	84 e2       	ldi	r24, 0x24	; 36
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	24 e2       	ldi	r18, 0x24	; 36
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	f9 01       	movw	r30, r18
    2a18:	20 81       	ld	r18, Z
    2a1a:	28 60       	ori	r18, 0x08	; 8
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	20 83       	st	Z, r18

	MOTOR_DRIVER_OFF;
    2a20:	8b e2       	ldi	r24, 0x2B	; 43
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	2b e2       	ldi	r18, 0x2B	; 43
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	f9 01       	movw	r30, r18
    2a2a:	20 81       	ld	r18, Z
    2a2c:	20 68       	ori	r18, 0x80	; 128
    2a2e:	fc 01       	movw	r30, r24
    2a30:	20 83       	st	Z, r18
			MOTOR_MS1_1;
			MOTOR_MS2_1;
			MOTOR_MS3_0;
			break;
		default:
			MOTOR_MS1_1;
    2a32:	85 e2       	ldi	r24, 0x25	; 37
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	25 e2       	ldi	r18, 0x25	; 37
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	f9 01       	movw	r30, r18
    2a3c:	20 81       	ld	r18, Z
    2a3e:	21 60       	ori	r18, 0x01	; 1
    2a40:	fc 01       	movw	r30, r24
    2a42:	20 83       	st	Z, r18
			MOTOR_MS2_1;
    2a44:	85 e2       	ldi	r24, 0x25	; 37
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	25 e2       	ldi	r18, 0x25	; 37
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	f9 01       	movw	r30, r18
    2a4e:	20 81       	ld	r18, Z
    2a50:	22 60       	ori	r18, 0x02	; 2
    2a52:	fc 01       	movw	r30, r24
    2a54:	20 83       	st	Z, r18
			MOTOR_MS3_1;
    2a56:	85 e2       	ldi	r24, 0x25	; 37
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	25 e2       	ldi	r18, 0x25	; 37
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	f9 01       	movw	r30, r18
    2a60:	20 81       	ld	r18, Z
    2a62:	24 60       	ori	r18, 0x04	; 4
    2a64:	fc 01       	movw	r30, r24
    2a66:	20 83       	st	Z, r18
	}

	

	TCCR2A = (1<<COM2A0) | (1<<WGM21);				// toggle OCR2A CTC mode
    2a68:	80 eb       	ldi	r24, 0xB0	; 176
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	22 e4       	ldi	r18, 0x42	; 66
    2a6e:	fc 01       	movw	r30, r24
    2a70:	20 83       	st	Z, r18
	TCCR2B = 0;										// clock off
    2a72:	81 eb       	ldi	r24, 0xB1	; 177
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	fc 01       	movw	r30, r24
    2a78:	10 82       	st	Z, r1
	OCR2A = 0;
    2a7a:	83 eb       	ldi	r24, 0xB3	; 179
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	fc 01       	movw	r30, r24
    2a80:	10 82       	st	Z, r1
	TCNT2 = 0;
    2a82:	82 eb       	ldi	r24, 0xB2	; 178
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	fc 01       	movw	r30, r24
    2a88:	10 82       	st	Z, r1
	MOTOR_DIR0;
    2a8a:	8b e2       	ldi	r24, 0x2B	; 43
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	2b e2       	ldi	r18, 0x2B	; 43
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	f9 01       	movw	r30, r18
    2a94:	20 81       	ld	r18, Z
    2a96:	2f 7d       	andi	r18, 0xDF	; 223
    2a98:	fc 01       	movw	r30, r24
    2a9a:	20 83       	st	Z, r18
}
    2a9c:	00 00       	nop
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	08 95       	ret

00002aa4 <motor_set_rpm>:

void motor_set_rpm(uint16_t rpm)					// rote per minute
{
    2aa4:	8f 92       	push	r8
    2aa6:	9f 92       	push	r9
    2aa8:	af 92       	push	r10
    2aaa:	bf 92       	push	r11
    2aac:	cf 92       	push	r12
    2aae:	df 92       	push	r13
    2ab0:	ef 92       	push	r14
    2ab2:	ff 92       	push	r15
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	6a 97       	sbiw	r28, 0x1a	; 26
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
    2ac8:	9a 8f       	std	Y+26, r25	; 0x1a
    2aca:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t buf;
	const uint32_t freq = F_CPU*60;
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	98 e3       	ldi	r25, 0x38	; 56
    2ad0:	ac e9       	ldi	r26, 0x9C	; 156
    2ad2:	bc e1       	ldi	r27, 0x1C	; 28
    2ad4:	8a 83       	std	Y+2, r24	; 0x02
    2ad6:	9b 83       	std	Y+3, r25	; 0x03
    2ad8:	ac 83       	std	Y+4, r26	; 0x04
    2ada:	bd 83       	std	Y+5, r27	; 0x05
	const uint16_t div[] = {1, 8, 32, 64, 128, 256, 1024};
    2adc:	8e e0       	ldi	r24, 0x0E	; 14
    2ade:	e5 eb       	ldi	r30, 0xB5	; 181
    2ae0:	f2 e0       	ldi	r31, 0x02	; 2
    2ae2:	de 01       	movw	r26, r28
    2ae4:	1b 96       	adiw	r26, 0x0b	; 11
    2ae6:	01 90       	ld	r0, Z+
    2ae8:	0d 92       	st	X+, r0
    2aea:	8a 95       	dec	r24
    2aec:	e1 f7       	brne	.-8      	; 0x2ae6 <motor_set_rpm+0x42>
	const uint8_t div_len = 7;
    2aee:	87 e0       	ldi	r24, 0x07	; 7
    2af0:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t i;

	if (rpm)
    2af2:	89 8d       	ldd	r24, Y+25	; 0x19
    2af4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2af6:	89 2b       	or	r24, r25
    2af8:	09 f4       	brne	.+2      	; 0x2afc <motor_set_rpm+0x58>
    2afa:	94 c0       	rjmp	.+296    	; 0x2c24 <motor_set_rpm+0x180>
	{
		for (i=0; i<div_len; i++)
    2afc:	19 82       	std	Y+1, r1	; 0x01
    2afe:	8c c0       	rjmp	.+280    	; 0x2c18 <motor_set_rpm+0x174>
		{
			buf = freq / ( ((uint32_t)rpm) * MOTOR_PERIOD * 2 * div[i] );
    2b00:	6a 81       	ldd	r22, Y+2	; 0x02
    2b02:	7b 81       	ldd	r23, Y+3	; 0x03
    2b04:	8c 81       	ldd	r24, Y+4	; 0x04
    2b06:	9d 81       	ldd	r25, Y+5	; 0x05
    2b08:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__floatunsisf>
    2b0c:	6b 01       	movw	r12, r22
    2b0e:	7c 01       	movw	r14, r24
    2b10:	89 8d       	ldd	r24, Y+25	; 0x19
    2b12:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b14:	9c 01       	movw	r18, r24
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	88 e6       	ldi	r24, 0x68	; 104
    2b1c:	91 e0       	ldi	r25, 0x01	; 1
    2b1e:	dc 01       	movw	r26, r24
    2b20:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__muluhisi3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__floatunsisf>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	26 e6       	ldi	r18, 0x66	; 102
    2b36:	36 e6       	ldi	r19, 0x66	; 102
    2b38:	46 ee       	ldi	r20, 0xE6	; 230
    2b3a:	5d e3       	ldi	r21, 0x3D	; 61
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	9c 01       	movw	r18, r24
    2b4a:	ad 01       	movw	r20, r26
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__addsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	4c 01       	movw	r8, r24
    2b5a:	5d 01       	movw	r10, r26
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	9e 01       	movw	r18, r28
    2b68:	2f 5f       	subi	r18, 0xFF	; 255
    2b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6c:	82 0f       	add	r24, r18
    2b6e:	93 1f       	adc	r25, r19
    2b70:	0a 96       	adiw	r24, 0x0a	; 10
    2b72:	fc 01       	movw	r30, r24
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	cc 01       	movw	r24, r24
    2b7a:	a0 e0       	ldi	r26, 0x00	; 0
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__floatunsisf>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9c 01       	movw	r18, r24
    2b8c:	ad 01       	movw	r20, r26
    2b8e:	c5 01       	movw	r24, r10
    2b90:	b4 01       	movw	r22, r8
    2b92:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9c 01       	movw	r18, r24
    2b9c:	ad 01       	movw	r20, r26
    2b9e:	c7 01       	movw	r24, r14
    2ba0:	b6 01       	movw	r22, r12
    2ba2:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <__divsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	8f 83       	std	Y+7, r24	; 0x07
    2bb8:	98 87       	std	Y+8, r25	; 0x08
    2bba:	a9 87       	std	Y+9, r26	; 0x09
    2bbc:	ba 87       	std	Y+10, r27	; 0x0a
			if (buf < 0xFF && buf > 0)
    2bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc0:	98 85       	ldd	r25, Y+8	; 0x08
    2bc2:	a9 85       	ldd	r26, Y+9	; 0x09
    2bc4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bc6:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc8:	91 05       	cpc	r25, r1
    2bca:	a1 05       	cpc	r26, r1
    2bcc:	b1 05       	cpc	r27, r1
    2bce:	08 f5       	brcc	.+66     	; 0x2c12 <motor_set_rpm+0x16e>
    2bd0:	8f 81       	ldd	r24, Y+7	; 0x07
    2bd2:	98 85       	ldd	r25, Y+8	; 0x08
    2bd4:	a9 85       	ldd	r26, Y+9	; 0x09
    2bd6:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bd8:	89 2b       	or	r24, r25
    2bda:	8a 2b       	or	r24, r26
    2bdc:	8b 2b       	or	r24, r27
    2bde:	c9 f0       	breq	.+50     	; 0x2c12 <motor_set_rpm+0x16e>
			{
				TCCR2B = i+1;						// clock/div[i]
    2be0:	81 eb       	ldi	r24, 0xB1	; 177
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	29 81       	ldd	r18, Y+1	; 0x01
    2be6:	2f 5f       	subi	r18, 0xFF	; 255
    2be8:	fc 01       	movw	r30, r24
    2bea:	20 83       	st	Z, r18
				OCR2A = (uint8_t )buf;
    2bec:	83 eb       	ldi	r24, 0xB3	; 179
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	2f 81       	ldd	r18, Y+7	; 0x07
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	20 83       	st	Z, r18
				TCNT2 = 0;
    2bf6:	82 eb       	ldi	r24, 0xB2	; 178
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	10 82       	st	Z, r1
				MOTOR_DRIVER_ON;
    2bfe:	8b e2       	ldi	r24, 0x2B	; 43
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	2b e2       	ldi	r18, 0x2B	; 43
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	f9 01       	movw	r30, r18
    2c08:	20 81       	ld	r18, Z
    2c0a:	2f 77       	andi	r18, 0x7F	; 127
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	20 83       	st	Z, r18
				break;
    2c10:	16 c0       	rjmp	.+44     	; 0x2c3e <motor_set_rpm+0x19a>

	uint8_t i;

	if (rpm)
	{
		for (i=0; i<div_len; i++)
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	8f 5f       	subi	r24, 0xFF	; 255
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	99 81       	ldd	r25, Y+1	; 0x01
    2c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1c:	98 17       	cp	r25, r24
    2c1e:	08 f4       	brcc	.+2      	; 0x2c22 <motor_set_rpm+0x17e>
    2c20:	6f cf       	rjmp	.-290    	; 0x2b00 <motor_set_rpm+0x5c>
    2c22:	0d c0       	rjmp	.+26     	; 0x2c3e <motor_set_rpm+0x19a>
			}
		}
	}
	else
	{
		TCCR2B = 0x00;
    2c24:	81 eb       	ldi	r24, 0xB1	; 177
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	fc 01       	movw	r30, r24
    2c2a:	10 82       	st	Z, r1
		MOTOR_DRIVER_OFF;
    2c2c:	8b e2       	ldi	r24, 0x2B	; 43
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	2b e2       	ldi	r18, 0x2B	; 43
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	f9 01       	movw	r30, r18
    2c36:	20 81       	ld	r18, Z
    2c38:	20 68       	ori	r18, 0x80	; 128
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	20 83       	st	Z, r18
	}
	actual_rmp = rpm;
    2c3e:	89 8d       	ldd	r24, Y+25	; 0x19
    2c40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c42:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <actual_rmp+0x1>
    2c46:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <actual_rmp>
}
    2c4a:	00 00       	nop
    2c4c:	6a 96       	adiw	r28, 0x1a	; 26
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	cf 90       	pop	r12
    2c64:	bf 90       	pop	r11
    2c66:	af 90       	pop	r10
    2c68:	9f 90       	pop	r9
    2c6a:	8f 90       	pop	r8
    2c6c:	08 95       	ret

00002c6e <motor_smoothly_rmp>:


void motor_smoothly_rmp(uint16_t rpm_start, uint16_t rpm_end)
{
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	65 97       	sbiw	r28, 0x15	; 21
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	9b 8b       	std	Y+19, r25	; 0x13
    2c84:	8a 8b       	std	Y+18, r24	; 0x12
    2c86:	7d 8b       	std	Y+21, r23	; 0x15
    2c88:	6c 8b       	std	Y+20, r22	; 0x14
	uint16_t rpm;
	int8_t step;
	
	if (rpm_start < rpm_end)
    2c8a:	2a 89       	ldd	r18, Y+18	; 0x12
    2c8c:	3b 89       	ldd	r19, Y+19	; 0x13
    2c8e:	8c 89       	ldd	r24, Y+20	; 0x14
    2c90:	9d 89       	ldd	r25, Y+21	; 0x15
    2c92:	28 17       	cp	r18, r24
    2c94:	39 07       	cpc	r19, r25
    2c96:	18 f4       	brcc	.+6      	; 0x2c9e <motor_smoothly_rmp+0x30>
	{
		step = 1;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	8b 83       	std	Y+3, r24	; 0x03
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <motor_smoothly_rmp+0x34>
	}
	else
	{
		step = -1;
    2c9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ca0:	8b 83       	std	Y+3, r24	; 0x03
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2ca2:	8a 89       	ldd	r24, Y+18	; 0x12
    2ca4:	9b 89       	ldd	r25, Y+19	; 0x13
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    2caa:	a5 c0       	rjmp	.+330    	; 0x2df6 <motor_smoothly_rmp+0x188>
	{
		user_profile.rpm = rpm;
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
    2cb4:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
		if (!(user_profile.rpm % 20))
    2cb8:	40 91 cb 02 	lds	r20, 0x02CB	; 0x8002cb <user_profile>
    2cbc:	50 91 cc 02 	lds	r21, 0x02CC	; 0x8002cc <user_profile+0x1>
    2cc0:	9a 01       	movw	r18, r20
    2cc2:	ad ec       	ldi	r26, 0xCD	; 205
    2cc4:	bc ec       	ldi	r27, 0xCC	; 204
    2cc6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    2cca:	92 95       	swap	r25
    2ccc:	82 95       	swap	r24
    2cce:	8f 70       	andi	r24, 0x0F	; 15
    2cd0:	89 27       	eor	r24, r25
    2cd2:	9f 70       	andi	r25, 0x0F	; 15
    2cd4:	89 27       	eor	r24, r25
    2cd6:	64 e1       	ldi	r22, 0x14	; 20
    2cd8:	68 9f       	mul	r22, r24
    2cda:	90 01       	movw	r18, r0
    2cdc:	69 9f       	mul	r22, r25
    2cde:	30 0d       	add	r19, r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	ca 01       	movw	r24, r20
    2ce4:	82 1b       	sub	r24, r18
    2ce6:	93 0b       	sbc	r25, r19
    2ce8:	89 2b       	or	r24, r25
    2cea:	19 f4       	brne	.+6      	; 0x2cf2 <motor_smoothly_rmp+0x84>
			TUI('s');
    2cec:	83 e7       	ldi	r24, 0x73	; 115
    2cee:	0e 94 13 03 	call	0x626	; 0x626 <TUI>
		motor_set_rpm(user_profile.rpm);
    2cf2:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
    2cf6:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
    2cfa:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <motor_set_rpm>
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a0 ef       	ldi	r26, 0xF0	; 240
    2d04:	b1 e4       	ldi	r27, 0x41	; 65
    2d06:	8c 83       	std	Y+4, r24	; 0x04
    2d08:	9d 83       	std	Y+5, r25	; 0x05
    2d0a:	ae 83       	std	Y+6, r26	; 0x06
    2d0c:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4a ef       	ldi	r20, 0xFA	; 250
    2d14:	54 e4       	ldi	r21, 0x44	; 68
    2d16:	6c 81       	ldd	r22, Y+4	; 0x04
    2d18:	7d 81       	ldd	r23, Y+5	; 0x05
    2d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	88 87       	std	Y+8, r24	; 0x08
    2d28:	99 87       	std	Y+9, r25	; 0x09
    2d2a:	aa 87       	std	Y+10, r26	; 0x0a
    2d2c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	68 85       	ldd	r22, Y+8	; 0x08
    2d38:	79 85       	ldd	r23, Y+9	; 0x09
    2d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d3e:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <__cmpsf2>
    2d42:	88 23       	and	r24, r24
    2d44:	2c f4       	brge	.+10     	; 0x2d50 <motor_smoothly_rmp+0xe2>
		__ticks = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9d 87       	std	Y+13, r25	; 0x0d
    2d4c:	8c 87       	std	Y+12, r24	; 0x0c
    2d4e:	3f c0       	rjmp	.+126    	; 0x2dce <motor_smoothly_rmp+0x160>
	else if (__tmp > 65535)
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	3f ef       	ldi	r19, 0xFF	; 255
    2d54:	4f e7       	ldi	r20, 0x7F	; 127
    2d56:	57 e4       	ldi	r21, 0x47	; 71
    2d58:	68 85       	ldd	r22, Y+8	; 0x08
    2d5a:	79 85       	ldd	r23, Y+9	; 0x09
    2d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d60:	0e 94 06 19 	call	0x320c	; 0x320c <__gesf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	4c f5       	brge	.+82     	; 0x2dba <motor_smoothly_rmp+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	6c 81       	ldd	r22, Y+4	; 0x04
    2d72:	7d 81       	ldd	r23, Y+5	; 0x05
    2d74:	8e 81       	ldd	r24, Y+6	; 0x06
    2d76:	9f 81       	ldd	r25, Y+7	; 0x07
    2d78:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9d 87       	std	Y+13, r25	; 0x0d
    2d8e:	8c 87       	std	Y+12, r24	; 0x0c
    2d90:	0f c0       	rjmp	.+30     	; 0x2db0 <motor_smoothly_rmp+0x142>
    2d92:	88 ec       	ldi	r24, 0xC8	; 200
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9f 87       	std	Y+15, r25	; 0x0f
    2d98:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d9a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d9c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <motor_smoothly_rmp+0x130>
    2da2:	9f 87       	std	Y+15, r25	; 0x0f
    2da4:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2da8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	9d 87       	std	Y+13, r25	; 0x0d
    2dae:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2db2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2db4:	89 2b       	or	r24, r25
    2db6:	69 f7       	brne	.-38     	; 0x2d92 <motor_smoothly_rmp+0x124>
    2db8:	14 c0       	rjmp	.+40     	; 0x2de2 <motor_smoothly_rmp+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dba:	68 85       	ldd	r22, Y+8	; 0x08
    2dbc:	79 85       	ldd	r23, Y+9	; 0x09
    2dbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dc2:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	9d 87       	std	Y+13, r25	; 0x0d
    2dcc:	8c 87       	std	Y+12, r24	; 0x0c
    2dce:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dd0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dd2:	99 8b       	std	Y+17, r25	; 0x11
    2dd4:	88 8b       	std	Y+16, r24	; 0x10
    2dd6:	88 89       	ldd	r24, Y+16	; 0x10
    2dd8:	99 89       	ldd	r25, Y+17	; 0x11
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <motor_smoothly_rmp+0x16c>
    2dde:	99 8b       	std	Y+17, r25	; 0x11
    2de0:	88 8b       	std	Y+16, r24	; 0x10
	else
	{
		step = -1;
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	08 2e       	mov	r0, r24
    2de6:	00 0c       	add	r0, r0
    2de8:	99 0b       	sbc	r25, r25
    2dea:	29 81       	ldd	r18, Y+1	; 0x01
    2dec:	3a 81       	ldd	r19, Y+2	; 0x02
    2dee:	82 0f       	add	r24, r18
    2df0:	93 1f       	adc	r25, r19
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	28 2f       	mov	r18, r24
    2dfa:	88 0f       	add	r24, r24
    2dfc:	33 0b       	sbc	r19, r19
    2dfe:	8c 89       	ldd	r24, Y+20	; 0x14
    2e00:	9d 89       	ldd	r25, Y+21	; 0x15
    2e02:	28 0f       	add	r18, r24
    2e04:	39 1f       	adc	r19, r25
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	28 17       	cp	r18, r24
    2e0c:	39 07       	cpc	r19, r25
    2e0e:	59 f0       	breq	.+22     	; 0x2e26 <motor_smoothly_rmp+0x1b8>
    2e10:	8c e3       	ldi	r24, 0x3C	; 60
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	fc 01       	movw	r30, r24
    2e16:	80 81       	ld	r24, Z
    2e18:	88 2f       	mov	r24, r24
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	81 70       	andi	r24, 0x01	; 1
    2e1e:	99 27       	eor	r25, r25
    2e20:	89 2b       	or	r24, r25
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <motor_smoothly_rmp+0x1b8>
    2e24:	43 cf       	rjmp	.-378    	; 0x2cac <motor_smoothly_rmp+0x3e>
		if (!(user_profile.rpm % 20))
			TUI('s');
		motor_set_rpm(user_profile.rpm);
		_delay_ms(30);
	}
	TUI('s');
    2e26:	83 e7       	ldi	r24, 0x73	; 115
    2e28:	0e 94 13 03 	call	0x626	; 0x626 <TUI>
}
    2e2c:	00 00       	nop
    2e2e:	65 96       	adiw	r28, 0x15	; 21
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	08 95       	ret

00002e40 <valve_init>:
#include "wyk_valve.h"

void valve_init(void)
{
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
	VALVE_DDR |= VALVE_PIN;
    2e48:	8a e2       	ldi	r24, 0x2A	; 42
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	2a e2       	ldi	r18, 0x2A	; 42
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	f9 01       	movw	r30, r18
    2e52:	20 81       	ld	r18, Z
    2e54:	22 60       	ori	r18, 0x02	; 2
    2e56:	fc 01       	movw	r30, r24
    2e58:	20 83       	st	Z, r18
	VALVE_OUT_0;
    2e5a:	8b e2       	ldi	r24, 0x2B	; 43
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	2b e2       	ldi	r18, 0x2B	; 43
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	f9 01       	movw	r30, r18
    2e64:	20 81       	ld	r18, Z
    2e66:	2d 7f       	andi	r18, 0xFD	; 253
    2e68:	fc 01       	movw	r30, r24
    2e6a:	20 83       	st	Z, r18
}
    2e6c:	00 00       	nop
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	08 95       	ret

00002e74 <__subsf3>:
    2e74:	50 58       	subi	r21, 0x80	; 128

00002e76 <__addsf3>:
    2e76:	bb 27       	eor	r27, r27
    2e78:	aa 27       	eor	r26, r26
    2e7a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__addsf3x>
    2e7e:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_round>
    2e82:	0e 94 be 18 	call	0x317c	; 0x317c <__fp_pscA>
    2e86:	38 f0       	brcs	.+14     	; 0x2e96 <__addsf3+0x20>
    2e88:	0e 94 c5 18 	call	0x318a	; 0x318a <__fp_pscB>
    2e8c:	20 f0       	brcs	.+8      	; 0x2e96 <__addsf3+0x20>
    2e8e:	39 f4       	brne	.+14     	; 0x2e9e <__addsf3+0x28>
    2e90:	9f 3f       	cpi	r25, 0xFF	; 255
    2e92:	19 f4       	brne	.+6      	; 0x2e9a <__addsf3+0x24>
    2e94:	26 f4       	brtc	.+8      	; 0x2e9e <__addsf3+0x28>
    2e96:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__fp_nan>
    2e9a:	0e f4       	brtc	.+2      	; 0x2e9e <__addsf3+0x28>
    2e9c:	e0 95       	com	r30
    2e9e:	e7 fb       	bst	r30, 7
    2ea0:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__fp_inf>

00002ea4 <__addsf3x>:
    2ea4:	e9 2f       	mov	r30, r25
    2ea6:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__fp_split3>
    2eaa:	58 f3       	brcs	.-42     	; 0x2e82 <__addsf3+0xc>
    2eac:	ba 17       	cp	r27, r26
    2eae:	62 07       	cpc	r22, r18
    2eb0:	73 07       	cpc	r23, r19
    2eb2:	84 07       	cpc	r24, r20
    2eb4:	95 07       	cpc	r25, r21
    2eb6:	20 f0       	brcs	.+8      	; 0x2ec0 <__addsf3x+0x1c>
    2eb8:	79 f4       	brne	.+30     	; 0x2ed8 <__addsf3x+0x34>
    2eba:	a6 f5       	brtc	.+104    	; 0x2f24 <__addsf3x+0x80>
    2ebc:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_zero>
    2ec0:	0e f4       	brtc	.+2      	; 0x2ec4 <__addsf3x+0x20>
    2ec2:	e0 95       	com	r30
    2ec4:	0b 2e       	mov	r0, r27
    2ec6:	ba 2f       	mov	r27, r26
    2ec8:	a0 2d       	mov	r26, r0
    2eca:	0b 01       	movw	r0, r22
    2ecc:	b9 01       	movw	r22, r18
    2ece:	90 01       	movw	r18, r0
    2ed0:	0c 01       	movw	r0, r24
    2ed2:	ca 01       	movw	r24, r20
    2ed4:	a0 01       	movw	r20, r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	ff 27       	eor	r31, r31
    2eda:	59 1b       	sub	r21, r25
    2edc:	99 f0       	breq	.+38     	; 0x2f04 <__addsf3x+0x60>
    2ede:	59 3f       	cpi	r21, 0xF9	; 249
    2ee0:	50 f4       	brcc	.+20     	; 0x2ef6 <__addsf3x+0x52>
    2ee2:	50 3e       	cpi	r21, 0xE0	; 224
    2ee4:	68 f1       	brcs	.+90     	; 0x2f40 <__addsf3x+0x9c>
    2ee6:	1a 16       	cp	r1, r26
    2ee8:	f0 40       	sbci	r31, 0x00	; 0
    2eea:	a2 2f       	mov	r26, r18
    2eec:	23 2f       	mov	r18, r19
    2eee:	34 2f       	mov	r19, r20
    2ef0:	44 27       	eor	r20, r20
    2ef2:	58 5f       	subi	r21, 0xF8	; 248
    2ef4:	f3 cf       	rjmp	.-26     	; 0x2edc <__addsf3x+0x38>
    2ef6:	46 95       	lsr	r20
    2ef8:	37 95       	ror	r19
    2efa:	27 95       	ror	r18
    2efc:	a7 95       	ror	r26
    2efe:	f0 40       	sbci	r31, 0x00	; 0
    2f00:	53 95       	inc	r21
    2f02:	c9 f7       	brne	.-14     	; 0x2ef6 <__addsf3x+0x52>
    2f04:	7e f4       	brtc	.+30     	; 0x2f24 <__addsf3x+0x80>
    2f06:	1f 16       	cp	r1, r31
    2f08:	ba 0b       	sbc	r27, r26
    2f0a:	62 0b       	sbc	r22, r18
    2f0c:	73 0b       	sbc	r23, r19
    2f0e:	84 0b       	sbc	r24, r20
    2f10:	ba f0       	brmi	.+46     	; 0x2f40 <__addsf3x+0x9c>
    2f12:	91 50       	subi	r25, 0x01	; 1
    2f14:	a1 f0       	breq	.+40     	; 0x2f3e <__addsf3x+0x9a>
    2f16:	ff 0f       	add	r31, r31
    2f18:	bb 1f       	adc	r27, r27
    2f1a:	66 1f       	adc	r22, r22
    2f1c:	77 1f       	adc	r23, r23
    2f1e:	88 1f       	adc	r24, r24
    2f20:	c2 f7       	brpl	.-16     	; 0x2f12 <__addsf3x+0x6e>
    2f22:	0e c0       	rjmp	.+28     	; 0x2f40 <__addsf3x+0x9c>
    2f24:	ba 0f       	add	r27, r26
    2f26:	62 1f       	adc	r22, r18
    2f28:	73 1f       	adc	r23, r19
    2f2a:	84 1f       	adc	r24, r20
    2f2c:	48 f4       	brcc	.+18     	; 0x2f40 <__addsf3x+0x9c>
    2f2e:	87 95       	ror	r24
    2f30:	77 95       	ror	r23
    2f32:	67 95       	ror	r22
    2f34:	b7 95       	ror	r27
    2f36:	f7 95       	ror	r31
    2f38:	9e 3f       	cpi	r25, 0xFE	; 254
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <__addsf3x+0x9a>
    2f3c:	b0 cf       	rjmp	.-160    	; 0x2e9e <__addsf3+0x28>
    2f3e:	93 95       	inc	r25
    2f40:	88 0f       	add	r24, r24
    2f42:	08 f0       	brcs	.+2      	; 0x2f46 <__addsf3x+0xa2>
    2f44:	99 27       	eor	r25, r25
    2f46:	ee 0f       	add	r30, r30
    2f48:	97 95       	ror	r25
    2f4a:	87 95       	ror	r24
    2f4c:	08 95       	ret

00002f4e <__cmpsf2>:
    2f4e:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_cmp>
    2f52:	08 f4       	brcc	.+2      	; 0x2f56 <__cmpsf2+0x8>
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	08 95       	ret

00002f58 <__divsf3>:
    2f58:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__divsf3x>
    2f5c:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_round>
    2f60:	0e 94 c5 18 	call	0x318a	; 0x318a <__fp_pscB>
    2f64:	58 f0       	brcs	.+22     	; 0x2f7c <__divsf3+0x24>
    2f66:	0e 94 be 18 	call	0x317c	; 0x317c <__fp_pscA>
    2f6a:	40 f0       	brcs	.+16     	; 0x2f7c <__divsf3+0x24>
    2f6c:	29 f4       	brne	.+10     	; 0x2f78 <__divsf3+0x20>
    2f6e:	5f 3f       	cpi	r21, 0xFF	; 255
    2f70:	29 f0       	breq	.+10     	; 0x2f7c <__divsf3+0x24>
    2f72:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__fp_inf>
    2f76:	51 11       	cpse	r21, r1
    2f78:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__fp_szero>
    2f7c:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__fp_nan>

00002f80 <__divsf3x>:
    2f80:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__fp_split3>
    2f84:	68 f3       	brcs	.-38     	; 0x2f60 <__divsf3+0x8>

00002f86 <__divsf3_pse>:
    2f86:	99 23       	and	r25, r25
    2f88:	b1 f3       	breq	.-20     	; 0x2f76 <__divsf3+0x1e>
    2f8a:	55 23       	and	r21, r21
    2f8c:	91 f3       	breq	.-28     	; 0x2f72 <__divsf3+0x1a>
    2f8e:	95 1b       	sub	r25, r21
    2f90:	55 0b       	sbc	r21, r21
    2f92:	bb 27       	eor	r27, r27
    2f94:	aa 27       	eor	r26, r26
    2f96:	62 17       	cp	r22, r18
    2f98:	73 07       	cpc	r23, r19
    2f9a:	84 07       	cpc	r24, r20
    2f9c:	38 f0       	brcs	.+14     	; 0x2fac <__divsf3_pse+0x26>
    2f9e:	9f 5f       	subi	r25, 0xFF	; 255
    2fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa2:	22 0f       	add	r18, r18
    2fa4:	33 1f       	adc	r19, r19
    2fa6:	44 1f       	adc	r20, r20
    2fa8:	aa 1f       	adc	r26, r26
    2faa:	a9 f3       	breq	.-22     	; 0x2f96 <__divsf3_pse+0x10>
    2fac:	35 d0       	rcall	.+106    	; 0x3018 <__divsf3_pse+0x92>
    2fae:	0e 2e       	mov	r0, r30
    2fb0:	3a f0       	brmi	.+14     	; 0x2fc0 <__divsf3_pse+0x3a>
    2fb2:	e0 e8       	ldi	r30, 0x80	; 128
    2fb4:	32 d0       	rcall	.+100    	; 0x301a <__divsf3_pse+0x94>
    2fb6:	91 50       	subi	r25, 0x01	; 1
    2fb8:	50 40       	sbci	r21, 0x00	; 0
    2fba:	e6 95       	lsr	r30
    2fbc:	00 1c       	adc	r0, r0
    2fbe:	ca f7       	brpl	.-14     	; 0x2fb2 <__divsf3_pse+0x2c>
    2fc0:	2b d0       	rcall	.+86     	; 0x3018 <__divsf3_pse+0x92>
    2fc2:	fe 2f       	mov	r31, r30
    2fc4:	29 d0       	rcall	.+82     	; 0x3018 <__divsf3_pse+0x92>
    2fc6:	66 0f       	add	r22, r22
    2fc8:	77 1f       	adc	r23, r23
    2fca:	88 1f       	adc	r24, r24
    2fcc:	bb 1f       	adc	r27, r27
    2fce:	26 17       	cp	r18, r22
    2fd0:	37 07       	cpc	r19, r23
    2fd2:	48 07       	cpc	r20, r24
    2fd4:	ab 07       	cpc	r26, r27
    2fd6:	b0 e8       	ldi	r27, 0x80	; 128
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <__divsf3_pse+0x56>
    2fda:	bb 0b       	sbc	r27, r27
    2fdc:	80 2d       	mov	r24, r0
    2fde:	bf 01       	movw	r22, r30
    2fe0:	ff 27       	eor	r31, r31
    2fe2:	93 58       	subi	r25, 0x83	; 131
    2fe4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe6:	3a f0       	brmi	.+14     	; 0x2ff6 <__divsf3_pse+0x70>
    2fe8:	9e 3f       	cpi	r25, 0xFE	; 254
    2fea:	51 05       	cpc	r21, r1
    2fec:	78 f0       	brcs	.+30     	; 0x300c <__divsf3_pse+0x86>
    2fee:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__fp_inf>
    2ff2:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__fp_szero>
    2ff6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ff8:	e4 f3       	brlt	.-8      	; 0x2ff2 <__divsf3_pse+0x6c>
    2ffa:	98 3e       	cpi	r25, 0xE8	; 232
    2ffc:	d4 f3       	brlt	.-12     	; 0x2ff2 <__divsf3_pse+0x6c>
    2ffe:	86 95       	lsr	r24
    3000:	77 95       	ror	r23
    3002:	67 95       	ror	r22
    3004:	b7 95       	ror	r27
    3006:	f7 95       	ror	r31
    3008:	9f 5f       	subi	r25, 0xFF	; 255
    300a:	c9 f7       	brne	.-14     	; 0x2ffe <__divsf3_pse+0x78>
    300c:	88 0f       	add	r24, r24
    300e:	91 1d       	adc	r25, r1
    3010:	96 95       	lsr	r25
    3012:	87 95       	ror	r24
    3014:	97 f9       	bld	r25, 7
    3016:	08 95       	ret
    3018:	e1 e0       	ldi	r30, 0x01	; 1
    301a:	66 0f       	add	r22, r22
    301c:	77 1f       	adc	r23, r23
    301e:	88 1f       	adc	r24, r24
    3020:	bb 1f       	adc	r27, r27
    3022:	62 17       	cp	r22, r18
    3024:	73 07       	cpc	r23, r19
    3026:	84 07       	cpc	r24, r20
    3028:	ba 07       	cpc	r27, r26
    302a:	20 f0       	brcs	.+8      	; 0x3034 <__divsf3_pse+0xae>
    302c:	62 1b       	sub	r22, r18
    302e:	73 0b       	sbc	r23, r19
    3030:	84 0b       	sbc	r24, r20
    3032:	ba 0b       	sbc	r27, r26
    3034:	ee 1f       	adc	r30, r30
    3036:	88 f7       	brcc	.-30     	; 0x301a <__divsf3_pse+0x94>
    3038:	e0 95       	com	r30
    303a:	08 95       	ret

0000303c <__fixsfsi>:
    303c:	0e 94 25 18 	call	0x304a	; 0x304a <__fixunssfsi>
    3040:	68 94       	set
    3042:	b1 11       	cpse	r27, r1
    3044:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__fp_szero>
    3048:	08 95       	ret

0000304a <__fixunssfsi>:
    304a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <__fp_splitA>
    304e:	88 f0       	brcs	.+34     	; 0x3072 <__fixunssfsi+0x28>
    3050:	9f 57       	subi	r25, 0x7F	; 127
    3052:	98 f0       	brcs	.+38     	; 0x307a <__fixunssfsi+0x30>
    3054:	b9 2f       	mov	r27, r25
    3056:	99 27       	eor	r25, r25
    3058:	b7 51       	subi	r27, 0x17	; 23
    305a:	b0 f0       	brcs	.+44     	; 0x3088 <__fixunssfsi+0x3e>
    305c:	e1 f0       	breq	.+56     	; 0x3096 <__fixunssfsi+0x4c>
    305e:	66 0f       	add	r22, r22
    3060:	77 1f       	adc	r23, r23
    3062:	88 1f       	adc	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	1a f0       	brmi	.+6      	; 0x306e <__fixunssfsi+0x24>
    3068:	ba 95       	dec	r27
    306a:	c9 f7       	brne	.-14     	; 0x305e <__fixunssfsi+0x14>
    306c:	14 c0       	rjmp	.+40     	; 0x3096 <__fixunssfsi+0x4c>
    306e:	b1 30       	cpi	r27, 0x01	; 1
    3070:	91 f0       	breq	.+36     	; 0x3096 <__fixunssfsi+0x4c>
    3072:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__fp_zero>
    3076:	b1 e0       	ldi	r27, 0x01	; 1
    3078:	08 95       	ret
    307a:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_zero>
    307e:	67 2f       	mov	r22, r23
    3080:	78 2f       	mov	r23, r24
    3082:	88 27       	eor	r24, r24
    3084:	b8 5f       	subi	r27, 0xF8	; 248
    3086:	39 f0       	breq	.+14     	; 0x3096 <__fixunssfsi+0x4c>
    3088:	b9 3f       	cpi	r27, 0xF9	; 249
    308a:	cc f3       	brlt	.-14     	; 0x307e <__fixunssfsi+0x34>
    308c:	86 95       	lsr	r24
    308e:	77 95       	ror	r23
    3090:	67 95       	ror	r22
    3092:	b3 95       	inc	r27
    3094:	d9 f7       	brne	.-10     	; 0x308c <__fixunssfsi+0x42>
    3096:	3e f4       	brtc	.+14     	; 0x30a6 <__fixunssfsi+0x5c>
    3098:	90 95       	com	r25
    309a:	80 95       	com	r24
    309c:	70 95       	com	r23
    309e:	61 95       	neg	r22
    30a0:	7f 4f       	sbci	r23, 0xFF	; 255
    30a2:	8f 4f       	sbci	r24, 0xFF	; 255
    30a4:	9f 4f       	sbci	r25, 0xFF	; 255
    30a6:	08 95       	ret

000030a8 <__floatunsisf>:
    30a8:	e8 94       	clt
    30aa:	09 c0       	rjmp	.+18     	; 0x30be <__floatsisf+0x12>

000030ac <__floatsisf>:
    30ac:	97 fb       	bst	r25, 7
    30ae:	3e f4       	brtc	.+14     	; 0x30be <__floatsisf+0x12>
    30b0:	90 95       	com	r25
    30b2:	80 95       	com	r24
    30b4:	70 95       	com	r23
    30b6:	61 95       	neg	r22
    30b8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ba:	8f 4f       	sbci	r24, 0xFF	; 255
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	99 23       	and	r25, r25
    30c0:	a9 f0       	breq	.+42     	; 0x30ec <__floatsisf+0x40>
    30c2:	f9 2f       	mov	r31, r25
    30c4:	96 e9       	ldi	r25, 0x96	; 150
    30c6:	bb 27       	eor	r27, r27
    30c8:	93 95       	inc	r25
    30ca:	f6 95       	lsr	r31
    30cc:	87 95       	ror	r24
    30ce:	77 95       	ror	r23
    30d0:	67 95       	ror	r22
    30d2:	b7 95       	ror	r27
    30d4:	f1 11       	cpse	r31, r1
    30d6:	f8 cf       	rjmp	.-16     	; 0x30c8 <__floatsisf+0x1c>
    30d8:	fa f4       	brpl	.+62     	; 0x3118 <__floatsisf+0x6c>
    30da:	bb 0f       	add	r27, r27
    30dc:	11 f4       	brne	.+4      	; 0x30e2 <__floatsisf+0x36>
    30de:	60 ff       	sbrs	r22, 0
    30e0:	1b c0       	rjmp	.+54     	; 0x3118 <__floatsisf+0x6c>
    30e2:	6f 5f       	subi	r22, 0xFF	; 255
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
    30e6:	8f 4f       	sbci	r24, 0xFF	; 255
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	16 c0       	rjmp	.+44     	; 0x3118 <__floatsisf+0x6c>
    30ec:	88 23       	and	r24, r24
    30ee:	11 f0       	breq	.+4      	; 0x30f4 <__floatsisf+0x48>
    30f0:	96 e9       	ldi	r25, 0x96	; 150
    30f2:	11 c0       	rjmp	.+34     	; 0x3116 <__floatsisf+0x6a>
    30f4:	77 23       	and	r23, r23
    30f6:	21 f0       	breq	.+8      	; 0x3100 <__floatsisf+0x54>
    30f8:	9e e8       	ldi	r25, 0x8E	; 142
    30fa:	87 2f       	mov	r24, r23
    30fc:	76 2f       	mov	r23, r22
    30fe:	05 c0       	rjmp	.+10     	; 0x310a <__floatsisf+0x5e>
    3100:	66 23       	and	r22, r22
    3102:	71 f0       	breq	.+28     	; 0x3120 <__floatsisf+0x74>
    3104:	96 e8       	ldi	r25, 0x86	; 134
    3106:	86 2f       	mov	r24, r22
    3108:	70 e0       	ldi	r23, 0x00	; 0
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	2a f0       	brmi	.+10     	; 0x3118 <__floatsisf+0x6c>
    310e:	9a 95       	dec	r25
    3110:	66 0f       	add	r22, r22
    3112:	77 1f       	adc	r23, r23
    3114:	88 1f       	adc	r24, r24
    3116:	da f7       	brpl	.-10     	; 0x310e <__floatsisf+0x62>
    3118:	88 0f       	add	r24, r24
    311a:	96 95       	lsr	r25
    311c:	87 95       	ror	r24
    311e:	97 f9       	bld	r25, 7
    3120:	08 95       	ret

00003122 <__fp_cmp>:
    3122:	99 0f       	add	r25, r25
    3124:	00 08       	sbc	r0, r0
    3126:	55 0f       	add	r21, r21
    3128:	aa 0b       	sbc	r26, r26
    312a:	e0 e8       	ldi	r30, 0x80	; 128
    312c:	fe ef       	ldi	r31, 0xFE	; 254
    312e:	16 16       	cp	r1, r22
    3130:	17 06       	cpc	r1, r23
    3132:	e8 07       	cpc	r30, r24
    3134:	f9 07       	cpc	r31, r25
    3136:	c0 f0       	brcs	.+48     	; 0x3168 <__fp_cmp+0x46>
    3138:	12 16       	cp	r1, r18
    313a:	13 06       	cpc	r1, r19
    313c:	e4 07       	cpc	r30, r20
    313e:	f5 07       	cpc	r31, r21
    3140:	98 f0       	brcs	.+38     	; 0x3168 <__fp_cmp+0x46>
    3142:	62 1b       	sub	r22, r18
    3144:	73 0b       	sbc	r23, r19
    3146:	84 0b       	sbc	r24, r20
    3148:	95 0b       	sbc	r25, r21
    314a:	39 f4       	brne	.+14     	; 0x315a <__fp_cmp+0x38>
    314c:	0a 26       	eor	r0, r26
    314e:	61 f0       	breq	.+24     	; 0x3168 <__fp_cmp+0x46>
    3150:	23 2b       	or	r18, r19
    3152:	24 2b       	or	r18, r20
    3154:	25 2b       	or	r18, r21
    3156:	21 f4       	brne	.+8      	; 0x3160 <__fp_cmp+0x3e>
    3158:	08 95       	ret
    315a:	0a 26       	eor	r0, r26
    315c:	09 f4       	brne	.+2      	; 0x3160 <__fp_cmp+0x3e>
    315e:	a1 40       	sbci	r26, 0x01	; 1
    3160:	a6 95       	lsr	r26
    3162:	8f ef       	ldi	r24, 0xFF	; 255
    3164:	81 1d       	adc	r24, r1
    3166:	81 1d       	adc	r24, r1
    3168:	08 95       	ret

0000316a <__fp_inf>:
    316a:	97 f9       	bld	r25, 7
    316c:	9f 67       	ori	r25, 0x7F	; 127
    316e:	80 e8       	ldi	r24, 0x80	; 128
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	08 95       	ret

00003176 <__fp_nan>:
    3176:	9f ef       	ldi	r25, 0xFF	; 255
    3178:	80 ec       	ldi	r24, 0xC0	; 192
    317a:	08 95       	ret

0000317c <__fp_pscA>:
    317c:	00 24       	eor	r0, r0
    317e:	0a 94       	dec	r0
    3180:	16 16       	cp	r1, r22
    3182:	17 06       	cpc	r1, r23
    3184:	18 06       	cpc	r1, r24
    3186:	09 06       	cpc	r0, r25
    3188:	08 95       	ret

0000318a <__fp_pscB>:
    318a:	00 24       	eor	r0, r0
    318c:	0a 94       	dec	r0
    318e:	12 16       	cp	r1, r18
    3190:	13 06       	cpc	r1, r19
    3192:	14 06       	cpc	r1, r20
    3194:	05 06       	cpc	r0, r21
    3196:	08 95       	ret

00003198 <__fp_round>:
    3198:	09 2e       	mov	r0, r25
    319a:	03 94       	inc	r0
    319c:	00 0c       	add	r0, r0
    319e:	11 f4       	brne	.+4      	; 0x31a4 <__fp_round+0xc>
    31a0:	88 23       	and	r24, r24
    31a2:	52 f0       	brmi	.+20     	; 0x31b8 <__fp_round+0x20>
    31a4:	bb 0f       	add	r27, r27
    31a6:	40 f4       	brcc	.+16     	; 0x31b8 <__fp_round+0x20>
    31a8:	bf 2b       	or	r27, r31
    31aa:	11 f4       	brne	.+4      	; 0x31b0 <__fp_round+0x18>
    31ac:	60 ff       	sbrs	r22, 0
    31ae:	04 c0       	rjmp	.+8      	; 0x31b8 <__fp_round+0x20>
    31b0:	6f 5f       	subi	r22, 0xFF	; 255
    31b2:	7f 4f       	sbci	r23, 0xFF	; 255
    31b4:	8f 4f       	sbci	r24, 0xFF	; 255
    31b6:	9f 4f       	sbci	r25, 0xFF	; 255
    31b8:	08 95       	ret

000031ba <__fp_split3>:
    31ba:	57 fd       	sbrc	r21, 7
    31bc:	90 58       	subi	r25, 0x80	; 128
    31be:	44 0f       	add	r20, r20
    31c0:	55 1f       	adc	r21, r21
    31c2:	59 f0       	breq	.+22     	; 0x31da <__fp_splitA+0x10>
    31c4:	5f 3f       	cpi	r21, 0xFF	; 255
    31c6:	71 f0       	breq	.+28     	; 0x31e4 <__fp_splitA+0x1a>
    31c8:	47 95       	ror	r20

000031ca <__fp_splitA>:
    31ca:	88 0f       	add	r24, r24
    31cc:	97 fb       	bst	r25, 7
    31ce:	99 1f       	adc	r25, r25
    31d0:	61 f0       	breq	.+24     	; 0x31ea <__fp_splitA+0x20>
    31d2:	9f 3f       	cpi	r25, 0xFF	; 255
    31d4:	79 f0       	breq	.+30     	; 0x31f4 <__fp_splitA+0x2a>
    31d6:	87 95       	ror	r24
    31d8:	08 95       	ret
    31da:	12 16       	cp	r1, r18
    31dc:	13 06       	cpc	r1, r19
    31de:	14 06       	cpc	r1, r20
    31e0:	55 1f       	adc	r21, r21
    31e2:	f2 cf       	rjmp	.-28     	; 0x31c8 <__fp_split3+0xe>
    31e4:	46 95       	lsr	r20
    31e6:	f1 df       	rcall	.-30     	; 0x31ca <__fp_splitA>
    31e8:	08 c0       	rjmp	.+16     	; 0x31fa <__fp_splitA+0x30>
    31ea:	16 16       	cp	r1, r22
    31ec:	17 06       	cpc	r1, r23
    31ee:	18 06       	cpc	r1, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	f1 cf       	rjmp	.-30     	; 0x31d6 <__fp_splitA+0xc>
    31f4:	86 95       	lsr	r24
    31f6:	71 05       	cpc	r23, r1
    31f8:	61 05       	cpc	r22, r1
    31fa:	08 94       	sec
    31fc:	08 95       	ret

000031fe <__fp_zero>:
    31fe:	e8 94       	clt

00003200 <__fp_szero>:
    3200:	bb 27       	eor	r27, r27
    3202:	66 27       	eor	r22, r22
    3204:	77 27       	eor	r23, r23
    3206:	cb 01       	movw	r24, r22
    3208:	97 f9       	bld	r25, 7
    320a:	08 95       	ret

0000320c <__gesf2>:
    320c:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_cmp>
    3210:	08 f4       	brcc	.+2      	; 0x3214 <__gesf2+0x8>
    3212:	8f ef       	ldi	r24, 0xFF	; 255
    3214:	08 95       	ret
    3216:	16 f0       	brts	.+4      	; 0x321c <__gesf2+0x10>
    3218:	0c 94 c8 19 	jmp	0x3390	; 0x3390 <__fp_mpack>
    321c:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__fp_nan>
    3220:	68 94       	set
    3222:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__fp_inf>

00003226 <log>:
    3226:	0e 94 e5 18 	call	0x31ca	; 0x31ca <__fp_splitA>
    322a:	a8 f3       	brcs	.-22     	; 0x3216 <__gesf2+0xa>
    322c:	99 23       	and	r25, r25
    322e:	c1 f3       	breq	.-16     	; 0x3220 <__gesf2+0x14>
    3230:	ae f3       	brts	.-22     	; 0x321c <__gesf2+0x10>
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	1f 93       	push	r17
    3238:	0f 93       	push	r16
    323a:	ff 92       	push	r15
    323c:	c9 2f       	mov	r28, r25
    323e:	dd 27       	eor	r29, r29
    3240:	88 23       	and	r24, r24
    3242:	2a f0       	brmi	.+10     	; 0x324e <log+0x28>
    3244:	21 97       	sbiw	r28, 0x01	; 1
    3246:	66 0f       	add	r22, r22
    3248:	77 1f       	adc	r23, r23
    324a:	88 1f       	adc	r24, r24
    324c:	da f7       	brpl	.-10     	; 0x3244 <log+0x1e>
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e8       	ldi	r20, 0x80	; 128
    3254:	5f eb       	ldi	r21, 0xBF	; 191
    3256:	9f e3       	ldi	r25, 0x3F	; 63
    3258:	88 39       	cpi	r24, 0x98	; 152
    325a:	20 f0       	brcs	.+8      	; 0x3264 <log+0x3e>
    325c:	80 3e       	cpi	r24, 0xE0	; 224
    325e:	38 f0       	brcs	.+14     	; 0x326e <log+0x48>
    3260:	21 96       	adiw	r28, 0x01	; 1
    3262:	8f 77       	andi	r24, 0x7F	; 127
    3264:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__addsf3>
    3268:	e8 e6       	ldi	r30, 0x68	; 104
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	04 c0       	rjmp	.+8      	; 0x3276 <log+0x50>
    326e:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <__addsf3>
    3272:	e5 e9       	ldi	r30, 0x95	; 149
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__fp_powser>
    327a:	8b 01       	movw	r16, r22
    327c:	be 01       	movw	r22, r28
    327e:	ec 01       	movw	r28, r24
    3280:	fb 2e       	mov	r15, r27
    3282:	6f 57       	subi	r22, 0x7F	; 127
    3284:	71 09       	sbc	r23, r1
    3286:	75 95       	asr	r23
    3288:	77 1f       	adc	r23, r23
    328a:	88 0b       	sbc	r24, r24
    328c:	99 0b       	sbc	r25, r25
    328e:	0e 94 56 18 	call	0x30ac	; 0x30ac <__floatsisf>
    3292:	28 e1       	ldi	r18, 0x18	; 24
    3294:	32 e7       	ldi	r19, 0x72	; 114
    3296:	41 e3       	ldi	r20, 0x31	; 49
    3298:	5f e3       	ldi	r21, 0x3F	; 63
    329a:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__mulsf3x>
    329e:	af 2d       	mov	r26, r15
    32a0:	98 01       	movw	r18, r16
    32a2:	ae 01       	movw	r20, r28
    32a4:	ff 90       	pop	r15
    32a6:	0f 91       	pop	r16
    32a8:	1f 91       	pop	r17
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__addsf3x>
    32b2:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_round>

000032b6 <__mulsf3>:
    32b6:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__mulsf3x>
    32ba:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__fp_round>
    32be:	0e 94 be 18 	call	0x317c	; 0x317c <__fp_pscA>
    32c2:	38 f0       	brcs	.+14     	; 0x32d2 <__mulsf3+0x1c>
    32c4:	0e 94 c5 18 	call	0x318a	; 0x318a <__fp_pscB>
    32c8:	20 f0       	brcs	.+8      	; 0x32d2 <__mulsf3+0x1c>
    32ca:	95 23       	and	r25, r21
    32cc:	11 f0       	breq	.+4      	; 0x32d2 <__mulsf3+0x1c>
    32ce:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__fp_inf>
    32d2:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__fp_nan>
    32d6:	11 24       	eor	r1, r1
    32d8:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__fp_szero>

000032dc <__mulsf3x>:
    32dc:	0e 94 dd 18 	call	0x31ba	; 0x31ba <__fp_split3>
    32e0:	70 f3       	brcs	.-36     	; 0x32be <__mulsf3+0x8>

000032e2 <__mulsf3_pse>:
    32e2:	95 9f       	mul	r25, r21
    32e4:	c1 f3       	breq	.-16     	; 0x32d6 <__mulsf3+0x20>
    32e6:	95 0f       	add	r25, r21
    32e8:	50 e0       	ldi	r21, 0x00	; 0
    32ea:	55 1f       	adc	r21, r21
    32ec:	62 9f       	mul	r22, r18
    32ee:	f0 01       	movw	r30, r0
    32f0:	72 9f       	mul	r23, r18
    32f2:	bb 27       	eor	r27, r27
    32f4:	f0 0d       	add	r31, r0
    32f6:	b1 1d       	adc	r27, r1
    32f8:	63 9f       	mul	r22, r19
    32fa:	aa 27       	eor	r26, r26
    32fc:	f0 0d       	add	r31, r0
    32fe:	b1 1d       	adc	r27, r1
    3300:	aa 1f       	adc	r26, r26
    3302:	64 9f       	mul	r22, r20
    3304:	66 27       	eor	r22, r22
    3306:	b0 0d       	add	r27, r0
    3308:	a1 1d       	adc	r26, r1
    330a:	66 1f       	adc	r22, r22
    330c:	82 9f       	mul	r24, r18
    330e:	22 27       	eor	r18, r18
    3310:	b0 0d       	add	r27, r0
    3312:	a1 1d       	adc	r26, r1
    3314:	62 1f       	adc	r22, r18
    3316:	73 9f       	mul	r23, r19
    3318:	b0 0d       	add	r27, r0
    331a:	a1 1d       	adc	r26, r1
    331c:	62 1f       	adc	r22, r18
    331e:	83 9f       	mul	r24, r19
    3320:	a0 0d       	add	r26, r0
    3322:	61 1d       	adc	r22, r1
    3324:	22 1f       	adc	r18, r18
    3326:	74 9f       	mul	r23, r20
    3328:	33 27       	eor	r19, r19
    332a:	a0 0d       	add	r26, r0
    332c:	61 1d       	adc	r22, r1
    332e:	23 1f       	adc	r18, r19
    3330:	84 9f       	mul	r24, r20
    3332:	60 0d       	add	r22, r0
    3334:	21 1d       	adc	r18, r1
    3336:	82 2f       	mov	r24, r18
    3338:	76 2f       	mov	r23, r22
    333a:	6a 2f       	mov	r22, r26
    333c:	11 24       	eor	r1, r1
    333e:	9f 57       	subi	r25, 0x7F	; 127
    3340:	50 40       	sbci	r21, 0x00	; 0
    3342:	9a f0       	brmi	.+38     	; 0x336a <__mulsf3_pse+0x88>
    3344:	f1 f0       	breq	.+60     	; 0x3382 <__mulsf3_pse+0xa0>
    3346:	88 23       	and	r24, r24
    3348:	4a f0       	brmi	.+18     	; 0x335c <__mulsf3_pse+0x7a>
    334a:	ee 0f       	add	r30, r30
    334c:	ff 1f       	adc	r31, r31
    334e:	bb 1f       	adc	r27, r27
    3350:	66 1f       	adc	r22, r22
    3352:	77 1f       	adc	r23, r23
    3354:	88 1f       	adc	r24, r24
    3356:	91 50       	subi	r25, 0x01	; 1
    3358:	50 40       	sbci	r21, 0x00	; 0
    335a:	a9 f7       	brne	.-22     	; 0x3346 <__mulsf3_pse+0x64>
    335c:	9e 3f       	cpi	r25, 0xFE	; 254
    335e:	51 05       	cpc	r21, r1
    3360:	80 f0       	brcs	.+32     	; 0x3382 <__mulsf3_pse+0xa0>
    3362:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__fp_inf>
    3366:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__fp_szero>
    336a:	5f 3f       	cpi	r21, 0xFF	; 255
    336c:	e4 f3       	brlt	.-8      	; 0x3366 <__mulsf3_pse+0x84>
    336e:	98 3e       	cpi	r25, 0xE8	; 232
    3370:	d4 f3       	brlt	.-12     	; 0x3366 <__mulsf3_pse+0x84>
    3372:	86 95       	lsr	r24
    3374:	77 95       	ror	r23
    3376:	67 95       	ror	r22
    3378:	b7 95       	ror	r27
    337a:	f7 95       	ror	r31
    337c:	e7 95       	ror	r30
    337e:	9f 5f       	subi	r25, 0xFF	; 255
    3380:	c1 f7       	brne	.-16     	; 0x3372 <__mulsf3_pse+0x90>
    3382:	fe 2b       	or	r31, r30
    3384:	88 0f       	add	r24, r24
    3386:	91 1d       	adc	r25, r1
    3388:	96 95       	lsr	r25
    338a:	87 95       	ror	r24
    338c:	97 f9       	bld	r25, 7
    338e:	08 95       	ret

00003390 <__fp_mpack>:
    3390:	9f 3f       	cpi	r25, 0xFF	; 255
    3392:	31 f0       	breq	.+12     	; 0x33a0 <__fp_mpack_finite+0xc>

00003394 <__fp_mpack_finite>:
    3394:	91 50       	subi	r25, 0x01	; 1
    3396:	20 f4       	brcc	.+8      	; 0x33a0 <__fp_mpack_finite+0xc>
    3398:	87 95       	ror	r24
    339a:	77 95       	ror	r23
    339c:	67 95       	ror	r22
    339e:	b7 95       	ror	r27
    33a0:	88 0f       	add	r24, r24
    33a2:	91 1d       	adc	r25, r1
    33a4:	96 95       	lsr	r25
    33a6:	87 95       	ror	r24
    33a8:	97 f9       	bld	r25, 7
    33aa:	08 95       	ret

000033ac <__fp_powser>:
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	1f 93       	push	r17
    33b2:	0f 93       	push	r16
    33b4:	ff 92       	push	r15
    33b6:	ef 92       	push	r14
    33b8:	df 92       	push	r13
    33ba:	7b 01       	movw	r14, r22
    33bc:	8c 01       	movw	r16, r24
    33be:	68 94       	set
    33c0:	06 c0       	rjmp	.+12     	; 0x33ce <__fp_powser+0x22>
    33c2:	da 2e       	mov	r13, r26
    33c4:	ef 01       	movw	r28, r30
    33c6:	0e 94 6e 19 	call	0x32dc	; 0x32dc <__mulsf3x>
    33ca:	fe 01       	movw	r30, r28
    33cc:	e8 94       	clt
    33ce:	a5 91       	lpm	r26, Z+
    33d0:	25 91       	lpm	r18, Z+
    33d2:	35 91       	lpm	r19, Z+
    33d4:	45 91       	lpm	r20, Z+
    33d6:	55 91       	lpm	r21, Z+
    33d8:	a6 f3       	brts	.-24     	; 0x33c2 <__fp_powser+0x16>
    33da:	ef 01       	movw	r28, r30
    33dc:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__addsf3x>
    33e0:	fe 01       	movw	r30, r28
    33e2:	97 01       	movw	r18, r14
    33e4:	a8 01       	movw	r20, r16
    33e6:	da 94       	dec	r13
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <__fp_powser+0x18>
    33ea:	df 90       	pop	r13
    33ec:	ef 90       	pop	r14
    33ee:	ff 90       	pop	r15
    33f0:	0f 91       	pop	r16
    33f2:	1f 91       	pop	r17
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	08 95       	ret

000033fa <__mulsi3>:
    33fa:	db 01       	movw	r26, r22
    33fc:	8f 93       	push	r24
    33fe:	9f 93       	push	r25
    3400:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__muluhisi3>
    3404:	bf 91       	pop	r27
    3406:	af 91       	pop	r26
    3408:	a2 9f       	mul	r26, r18
    340a:	80 0d       	add	r24, r0
    340c:	91 1d       	adc	r25, r1
    340e:	a3 9f       	mul	r26, r19
    3410:	90 0d       	add	r25, r0
    3412:	b2 9f       	mul	r27, r18
    3414:	90 0d       	add	r25, r0
    3416:	11 24       	eor	r1, r1
    3418:	08 95       	ret

0000341a <__udivmodhi4>:
    341a:	aa 1b       	sub	r26, r26
    341c:	bb 1b       	sub	r27, r27
    341e:	51 e1       	ldi	r21, 0x11	; 17
    3420:	07 c0       	rjmp	.+14     	; 0x3430 <__udivmodhi4_ep>

00003422 <__udivmodhi4_loop>:
    3422:	aa 1f       	adc	r26, r26
    3424:	bb 1f       	adc	r27, r27
    3426:	a6 17       	cp	r26, r22
    3428:	b7 07       	cpc	r27, r23
    342a:	10 f0       	brcs	.+4      	; 0x3430 <__udivmodhi4_ep>
    342c:	a6 1b       	sub	r26, r22
    342e:	b7 0b       	sbc	r27, r23

00003430 <__udivmodhi4_ep>:
    3430:	88 1f       	adc	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	5a 95       	dec	r21
    3436:	a9 f7       	brne	.-22     	; 0x3422 <__udivmodhi4_loop>
    3438:	80 95       	com	r24
    343a:	90 95       	com	r25
    343c:	bc 01       	movw	r22, r24
    343e:	cd 01       	movw	r24, r26
    3440:	08 95       	ret

00003442 <__divmodhi4>:
    3442:	97 fb       	bst	r25, 7
    3444:	07 2e       	mov	r0, r23
    3446:	16 f4       	brtc	.+4      	; 0x344c <__divmodhi4+0xa>
    3448:	00 94       	com	r0
    344a:	07 d0       	rcall	.+14     	; 0x345a <__divmodhi4_neg1>
    344c:	77 fd       	sbrc	r23, 7
    344e:	09 d0       	rcall	.+18     	; 0x3462 <__divmodhi4_neg2>
    3450:	0e 94 0d 1a 	call	0x341a	; 0x341a <__udivmodhi4>
    3454:	07 fc       	sbrc	r0, 7
    3456:	05 d0       	rcall	.+10     	; 0x3462 <__divmodhi4_neg2>
    3458:	3e f4       	brtc	.+14     	; 0x3468 <__divmodhi4_exit>

0000345a <__divmodhi4_neg1>:
    345a:	90 95       	com	r25
    345c:	81 95       	neg	r24
    345e:	9f 4f       	sbci	r25, 0xFF	; 255
    3460:	08 95       	ret

00003462 <__divmodhi4_neg2>:
    3462:	70 95       	com	r23
    3464:	61 95       	neg	r22
    3466:	7f 4f       	sbci	r23, 0xFF	; 255

00003468 <__divmodhi4_exit>:
    3468:	08 95       	ret

0000346a <__udivmodsi4>:
    346a:	a1 e2       	ldi	r26, 0x21	; 33
    346c:	1a 2e       	mov	r1, r26
    346e:	aa 1b       	sub	r26, r26
    3470:	bb 1b       	sub	r27, r27
    3472:	fd 01       	movw	r30, r26
    3474:	0d c0       	rjmp	.+26     	; 0x3490 <__udivmodsi4_ep>

00003476 <__udivmodsi4_loop>:
    3476:	aa 1f       	adc	r26, r26
    3478:	bb 1f       	adc	r27, r27
    347a:	ee 1f       	adc	r30, r30
    347c:	ff 1f       	adc	r31, r31
    347e:	a2 17       	cp	r26, r18
    3480:	b3 07       	cpc	r27, r19
    3482:	e4 07       	cpc	r30, r20
    3484:	f5 07       	cpc	r31, r21
    3486:	20 f0       	brcs	.+8      	; 0x3490 <__udivmodsi4_ep>
    3488:	a2 1b       	sub	r26, r18
    348a:	b3 0b       	sbc	r27, r19
    348c:	e4 0b       	sbc	r30, r20
    348e:	f5 0b       	sbc	r31, r21

00003490 <__udivmodsi4_ep>:
    3490:	66 1f       	adc	r22, r22
    3492:	77 1f       	adc	r23, r23
    3494:	88 1f       	adc	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	1a 94       	dec	r1
    349a:	69 f7       	brne	.-38     	; 0x3476 <__udivmodsi4_loop>
    349c:	60 95       	com	r22
    349e:	70 95       	com	r23
    34a0:	80 95       	com	r24
    34a2:	90 95       	com	r25
    34a4:	9b 01       	movw	r18, r22
    34a6:	ac 01       	movw	r20, r24
    34a8:	bd 01       	movw	r22, r26
    34aa:	cf 01       	movw	r24, r30
    34ac:	08 95       	ret

000034ae <__umulhisi3>:
    34ae:	a2 9f       	mul	r26, r18
    34b0:	b0 01       	movw	r22, r0
    34b2:	b3 9f       	mul	r27, r19
    34b4:	c0 01       	movw	r24, r0
    34b6:	a3 9f       	mul	r26, r19
    34b8:	70 0d       	add	r23, r0
    34ba:	81 1d       	adc	r24, r1
    34bc:	11 24       	eor	r1, r1
    34be:	91 1d       	adc	r25, r1
    34c0:	b2 9f       	mul	r27, r18
    34c2:	70 0d       	add	r23, r0
    34c4:	81 1d       	adc	r24, r1
    34c6:	11 24       	eor	r1, r1
    34c8:	91 1d       	adc	r25, r1
    34ca:	08 95       	ret

000034cc <__muluhisi3>:
    34cc:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__umulhisi3>
    34d0:	a5 9f       	mul	r26, r21
    34d2:	90 0d       	add	r25, r0
    34d4:	b4 9f       	mul	r27, r20
    34d6:	90 0d       	add	r25, r0
    34d8:	a4 9f       	mul	r26, r20
    34da:	80 0d       	add	r24, r0
    34dc:	91 1d       	adc	r25, r1
    34de:	11 24       	eor	r1, r1
    34e0:	08 95       	ret

000034e2 <eeprom_read_block>:
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22

000034e6 <eeprom_read_blraw>:
    34e6:	fc 01       	movw	r30, r24
    34e8:	f9 99       	sbic	0x1f, 1	; 31
    34ea:	fe cf       	rjmp	.-4      	; 0x34e8 <eeprom_read_blraw+0x2>
    34ec:	06 c0       	rjmp	.+12     	; 0x34fa <eeprom_read_blraw+0x14>
    34ee:	f2 bd       	out	0x22, r31	; 34
    34f0:	e1 bd       	out	0x21, r30	; 33
    34f2:	f8 9a       	sbi	0x1f, 0	; 31
    34f4:	31 96       	adiw	r30, 0x01	; 1
    34f6:	00 b4       	in	r0, 0x20	; 32
    34f8:	0d 92       	st	X+, r0
    34fa:	41 50       	subi	r20, 0x01	; 1
    34fc:	50 40       	sbci	r21, 0x00	; 0
    34fe:	b8 f7       	brcc	.-18     	; 0x34ee <eeprom_read_blraw+0x8>
    3500:	08 95       	ret

00003502 <eeprom_read_byte>:
    3502:	f9 99       	sbic	0x1f, 1	; 31
    3504:	fe cf       	rjmp	.-4      	; 0x3502 <eeprom_read_byte>
    3506:	92 bd       	out	0x22, r25	; 34
    3508:	81 bd       	out	0x21, r24	; 33
    350a:	f8 9a       	sbi	0x1f, 0	; 31
    350c:	99 27       	eor	r25, r25
    350e:	80 b5       	in	r24, 0x20	; 32
    3510:	08 95       	ret

00003512 <eeprom_update_block>:
    3512:	dc 01       	movw	r26, r24
    3514:	a4 0f       	add	r26, r20
    3516:	b5 1f       	adc	r27, r21
    3518:	41 50       	subi	r20, 0x01	; 1
    351a:	50 40       	sbci	r21, 0x00	; 0
    351c:	48 f0       	brcs	.+18     	; 0x3530 <eeprom_update_block+0x1e>
    351e:	cb 01       	movw	r24, r22
    3520:	84 0f       	add	r24, r20
    3522:	95 1f       	adc	r25, r21
    3524:	2e 91       	ld	r18, -X
    3526:	0e 94 9a 1a 	call	0x3534	; 0x3534 <eeprom_update_r18>
    352a:	41 50       	subi	r20, 0x01	; 1
    352c:	50 40       	sbci	r21, 0x00	; 0
    352e:	d0 f7       	brcc	.-12     	; 0x3524 <eeprom_update_block+0x12>
    3530:	08 95       	ret

00003532 <eeprom_update_byte>:
    3532:	26 2f       	mov	r18, r22

00003534 <eeprom_update_r18>:
    3534:	f9 99       	sbic	0x1f, 1	; 31
    3536:	fe cf       	rjmp	.-4      	; 0x3534 <eeprom_update_r18>
    3538:	92 bd       	out	0x22, r25	; 34
    353a:	81 bd       	out	0x21, r24	; 33
    353c:	f8 9a       	sbi	0x1f, 0	; 31
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	00 b4       	in	r0, 0x20	; 32
    3542:	02 16       	cp	r0, r18
    3544:	39 f0       	breq	.+14     	; 0x3554 <eeprom_update_r18+0x20>
    3546:	1f ba       	out	0x1f, r1	; 31
    3548:	20 bd       	out	0x20, r18	; 32
    354a:	0f b6       	in	r0, 0x3f	; 63
    354c:	f8 94       	cli
    354e:	fa 9a       	sbi	0x1f, 2	; 31
    3550:	f9 9a       	sbi	0x1f, 1	; 31
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	08 95       	ret

00003556 <_exit>:
    3556:	f8 94       	cli

00003558 <__stop_program>:
    3558:	ff cf       	rjmp	.-2      	; 0x3558 <__stop_program>
