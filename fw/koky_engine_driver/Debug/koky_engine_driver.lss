
koky_engine_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  000030de  00003192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030de  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002d4  008002d4  00003366  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00003366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003369  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000339c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a8  00000000  00000000  000033e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017dc  00000000  00000000  00003588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b20  00000000  00000000  00004d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b5f  00000000  00000000  00005884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004d4  00000000  00000000  000073e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008a0  00000000  00000000  000078b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0d  00000000  00000000  00008158  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  00008b65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ed       	ldi	r30, 0xDE	; 222
      7c:	f0 e3       	ldi	r31, 0x30	; 48
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3d       	cpi	r26, 0xD4	; 212
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a4 ed       	ldi	r26, 0xD4	; 212
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3e       	cpi	r26, 0xEA	; 234
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 25 01 	call	0x24a	; 0x24a <main>
      9e:	0c 94 6d 18 	jmp	0x30da	; 0x30da <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
#define ENC_B_PORT	PORTD
// ============================================================================


ISR(INT0_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
      ae:	0f 92       	push	r0
      b0:	11 24       	eor	r1, r1
      b2:	2f 93       	push	r18
      b4:	3f 93       	push	r19
      b6:	4f 93       	push	r20
      b8:	5f 93       	push	r21
      ba:	6f 93       	push	r22
      bc:	7f 93       	push	r23
      be:	8f 93       	push	r24
      c0:	9f 93       	push	r25
      c2:	af 93       	push	r26
      c4:	bf 93       	push	r27
      c6:	ef 93       	push	r30
      c8:	ff 93       	push	r31
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
	TUI_back_timer_clear();
      d2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TUI_back_timer_clear>
	TUI('b');
      d6:	82 e6       	ldi	r24, 0x62	; 98
      d8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TUI>
}
      dc:	00 00       	nop
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	ff 91       	pop	r31
      e4:	ef 91       	pop	r30
      e6:	bf 91       	pop	r27
      e8:	af 91       	pop	r26
      ea:	9f 91       	pop	r25
      ec:	8f 91       	pop	r24
      ee:	7f 91       	pop	r23
      f0:	6f 91       	pop	r22
      f2:	5f 91       	pop	r21
      f4:	4f 91       	pop	r20
      f6:	3f 91       	pop	r19
      f8:	2f 91       	pop	r18
      fa:	0f 90       	pop	r0
      fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     100:	0f 90       	pop	r0
     102:	1f 90       	pop	r1
     104:	18 95       	reti

00000106 <__vector_2>:

ISR(INT1_vect)
{
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	2f 93       	push	r18
     114:	3f 93       	push	r19
     116:	4f 93       	push	r20
     118:	5f 93       	push	r21
     11a:	6f 93       	push	r22
     11c:	7f 93       	push	r23
     11e:	8f 93       	push	r24
     120:	9f 93       	push	r25
     122:	af 93       	push	r26
     124:	bf 93       	push	r27
     126:	ef 93       	push	r30
     128:	ff 93       	push	r31
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	static uint8_t step = 0;
	static uint8_t dir = 0;

	TUI_back_timer_clear();
     132:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TUI_back_timer_clear>
	if (ENC_A_PIN & ENC_A)
     136:	89 e2       	ldi	r24, 0x29	; 41
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	fc 01       	movw	r30, r24
     13c:	80 81       	ld	r24, Z
     13e:	88 2f       	mov	r24, r24
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	80 71       	andi	r24, 0x10	; 16
     144:	99 27       	eor	r25, r25
     146:	89 2b       	or	r24, r25
     148:	b1 f0       	breq	.+44     	; 0x176 <__vector_2+0x70>
	{
		
		if (!dir)
     14a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     14e:	88 23       	and	r24, r24
     150:	69 f4       	brne	.+26     	; 0x16c <__vector_2+0x66>
		{
			step++;
     152:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <step.1878>
     156:	8f 5f       	subi	r24, 0xFF	; 255
     158:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <step.1878>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     15c:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <step.1878>
     160:	85 30       	cpi	r24, 0x05	; 5
     162:	f8 f0       	brcs	.+62     	; 0x1a2 <__vector_2+0x9c>
				TUI('-');
     164:	8d e2       	ldi	r24, 0x2D	; 45
     166:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     16a:	1b c0       	rjmp	.+54     	; 0x1a2 <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('-');
		}
		else
		{
			dir = 0;
     16c:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <__data_end>
			step = 0;
     170:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <step.1878>
		{
			dir = 1;
			step = 0;
		}
	}
}
     174:	16 c0       	rjmp	.+44     	; 0x1a2 <__vector_2+0x9c>
			step = 0;
		}
	}
	else
	{
		if (dir)
     176:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     17a:	88 23       	and	r24, r24
     17c:	69 f0       	breq	.+26     	; 0x198 <__vector_2+0x92>
		{
			step++;
     17e:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <step.1878>
     182:	8f 5f       	subi	r24, 0xFF	; 255
     184:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <step.1878>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     188:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <step.1878>
     18c:	85 30       	cpi	r24, 0x05	; 5
     18e:	48 f0       	brcs	.+18     	; 0x1a2 <__vector_2+0x9c>
				TUI('+');
     190:	8b e2       	ldi	r24, 0x2B	; 43
     192:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     196:	05 c0       	rjmp	.+10     	; 0x1a2 <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('+');
		}
		else
		{
			dir = 1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <__data_end>
			step = 0;
     19e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <step.1878>
		}
	}
}
     1a2:	00 00       	nop
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	ff 91       	pop	r31
     1aa:	ef 91       	pop	r30
     1ac:	bf 91       	pop	r27
     1ae:	af 91       	pop	r26
     1b0:	9f 91       	pop	r25
     1b2:	8f 91       	pop	r24
     1b4:	7f 91       	pop	r23
     1b6:	6f 91       	pop	r22
     1b8:	5f 91       	pop	r21
     1ba:	4f 91       	pop	r20
     1bc:	3f 91       	pop	r19
     1be:	2f 91       	pop	r18
     1c0:	0f 90       	pop	r0
     1c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     1c6:	0f 90       	pop	r0
     1c8:	1f 90       	pop	r1
     1ca:	18 95       	reti

000001cc <encoder_init>:

// encoder initialization
void encoder_init(void)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	cd b7       	in	r28, 0x3d	; 61
     1d2:	de b7       	in	r29, 0x3e	; 62
	// set button
	BTN_PORT |= BTN;		// pull-up
     1d4:	8b e2       	ldi	r24, 0x2B	; 43
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	2b e2       	ldi	r18, 0x2B	; 43
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	f9 01       	movw	r30, r18
     1de:	20 81       	ld	r18, Z
     1e0:	24 60       	ori	r18, 0x04	; 4
     1e2:	fc 01       	movw	r30, r24
     1e4:	20 83       	st	Z, r18
	EICRA = (1<<ISC01);		// falling edge
     1e6:	89 e6       	ldi	r24, 0x69	; 105
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	22 e0       	ldi	r18, 0x02	; 2
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);		// int enable from INT0
     1f0:	8d e3       	ldi	r24, 0x3D	; 61
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	fc 01       	movw	r30, r24
     1f8:	20 83       	st	Z, r18

	// set encoder	
	ENC_A_PORT |= ENC_A;	// pull-up
     1fa:	8b e2       	ldi	r24, 0x2B	; 43
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	2b e2       	ldi	r18, 0x2B	; 43
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	f9 01       	movw	r30, r18
     204:	20 81       	ld	r18, Z
     206:	20 61       	ori	r18, 0x10	; 16
     208:	fc 01       	movw	r30, r24
     20a:	20 83       	st	Z, r18
	ENC_B_PORT |= ENC_B;	// pull-up
     20c:	8b e2       	ldi	r24, 0x2B	; 43
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	2b e2       	ldi	r18, 0x2B	; 43
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	f9 01       	movw	r30, r18
     216:	20 81       	ld	r18, Z
     218:	28 60       	ori	r18, 0x08	; 8
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18

	EICRA |= (1<<ISC11);	// falling edge
     21e:	89 e6       	ldi	r24, 0x69	; 105
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	29 e6       	ldi	r18, 0x69	; 105
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	f9 01       	movw	r30, r18
     228:	20 81       	ld	r18, Z
     22a:	28 60       	ori	r18, 0x08	; 8
     22c:	fc 01       	movw	r30, r24
     22e:	20 83       	st	Z, r18
	EIMSK |= (1<<INT1);		// int enable from INT0
     230:	8d e3       	ldi	r24, 0x3D	; 61
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	2d e3       	ldi	r18, 0x3D	; 61
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	f9 01       	movw	r30, r18
     23a:	20 81       	ld	r18, Z
     23c:	22 60       	ori	r18, 0x02	; 2
     23e:	fc 01       	movw	r30, r24
     240:	20 83       	st	Z, r18
}
     242:	00 00       	nop
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <main>:

int main(void)
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00;
     252:	84 e2       	ldi	r24, 0x24	; 36
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	fc 01       	movw	r30, r24
     258:	10 82       	st	Z, r1
	DDRC = 0x00;
     25a:	87 e2       	ldi	r24, 0x27	; 39
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	fc 01       	movw	r30, r24
     260:	10 82       	st	Z, r1
	DDRD = 0x00;
     262:	8a e2       	ldi	r24, 0x2A	; 42
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	fc 01       	movw	r30, r24
     268:	10 82       	st	Z, r1

	PORTB = 0x00;
     26a:	85 e2       	ldi	r24, 0x25	; 37
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	fc 01       	movw	r30, r24
     270:	10 82       	st	Z, r1
	PORTC = 0x00;
     272:	88 e2       	ldi	r24, 0x28	; 40
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	10 82       	st	Z, r1
	PORTD = 0x00;
     27a:	8b e2       	ldi	r24, 0x2B	; 43
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	fc 01       	movw	r30, r24
     280:	10 82       	st	Z, r1

	motor_init();
     282:	0e 94 52 13 	call	0x26a4	; 0x26a4 <motor_init>
	encoder_init();
     286:	0e 94 e6 00 	call	0x1cc	; 0x1cc <encoder_init>
	lcd_init();
     28a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <lcd_init>

	sei();
     28e:	78 94       	sei

	TUI_inti();
     290:	0e 94 86 02 	call	0x50c	; 0x50c <TUI_inti>
	TUI('s');
     294:	83 e7       	ldi	r24, 0x73	; 115
     296:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TUI>
		
	for(;;)
    {
		;
    }
     29a:	ff cf       	rjmp	.-2      	; 0x29a <main+0x50>

0000029c <TUI_sec_timer_init>:
#define EEP_ADDR		(void *)0x10
#define eep_read()		eeprom_read_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))
#define eep_update()	eeprom_update_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))

void TUI_sec_timer_init(void)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	TUI_sec_timer_stop();
     2a4:	0e 94 75 01 	call	0x2ea	; 0x2ea <TUI_sec_timer_stop>
	TCCR1A = 0;
     2a8:	80 e8       	ldi	r24, 0x80	; 128
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	fc 01       	movw	r30, r24
     2ae:	10 82       	st	Z, r1
	OCR1A = F_CPU / 1024;							// TOP value for 1 sec
     2b0:	88 e8       	ldi	r24, 0x88	; 136
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	2d e8       	ldi	r18, 0x8D	; 141
     2b6:	3b e5       	ldi	r19, 0x5B	; 91
     2b8:	fc 01       	movw	r30, r24
     2ba:	31 83       	std	Z+1, r19	; 0x01
     2bc:	20 83       	st	Z, r18
	TIMSK1 = (1<<OCIE1A);							// compare IT enable
     2be:	8f e6       	ldi	r24, 0x6F	; 111
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	22 e0       	ldi	r18, 0x02	; 2
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
}
     2c8:	00 00       	nop
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <TUI_sec_timer_start>:
void TUI_sec_timer_start(void)
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);	// CTC mode clk/1024
     2d8:	81 e8       	ldi	r24, 0x81	; 129
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	2d e0       	ldi	r18, 0x0D	; 13
     2de:	fc 01       	movw	r30, r24
     2e0:	20 83       	st	Z, r18
}
     2e2:	00 00       	nop
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <TUI_sec_timer_stop>:
void TUI_sec_timer_stop(void)
{
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12);							// CTC mode clk = 0
     2f2:	81 e8       	ldi	r24, 0x81	; 129
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	28 e0       	ldi	r18, 0x08	; 8
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
}
     2fc:	00 00       	nop
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	2f 93       	push	r18
     312:	3f 93       	push	r19
     314:	4f 93       	push	r20
     316:	5f 93       	push	r21
     318:	6f 93       	push	r22
     31a:	7f 93       	push	r23
     31c:	8f 93       	push	r24
     31e:	9f 93       	push	r25
     320:	af 93       	push	r26
     322:	bf 93       	push	r27
     324:	ef 93       	push	r30
     326:	ff 93       	push	r31
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	if (machine_state == MACHINE_START)
     330:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <machine_state>
     334:	88 23       	and	r24, r24
     336:	a9 f5       	brne	.+106    	; 0x3a2 <__vector_11+0x9e>
	{
		if (user_profile.sec > 0)
     338:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     33c:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     340:	89 2b       	or	r24, r25
     342:	49 f0       	breq	.+18     	; 0x356 <__vector_11+0x52>
		{
			user_profile.sec--;
     344:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     348:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <user_profile+0x3>
     352:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <user_profile+0x2>
		}
		if (!user_profile.sec)
     356:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     35a:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     35e:	89 2b       	or	r24, r25
     360:	e9 f4       	brne	.+58     	; 0x39c <__vector_11+0x98>
		{
			motor_smoothly_rmp(user_profile.rpm, 0);
     362:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
     366:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	0e 94 98 14 	call	0x2930	; 0x2930 <motor_smoothly_rmp>
			TUI_sec_timer_stop();
     372:	0e 94 75 01 	call	0x2ea	; 0x2ea <TUI_sec_timer_stop>
			machine_state = MACHINE_STOP;
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <machine_state>
			user_profile = backup_profile;
     37c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     380:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     384:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     388:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     38c:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <user_profile>
     390:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <user_profile+0x1>
     394:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <user_profile+0x2>
     398:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <user_profile+0x3>
		}
		TUI('s');
     39c:	83 e7       	ldi	r24, 0x73	; 115
     39e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TUI>
	}
}
     3a2:	00 00       	nop
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	ff 91       	pop	r31
     3aa:	ef 91       	pop	r30
     3ac:	bf 91       	pop	r27
     3ae:	af 91       	pop	r26
     3b0:	9f 91       	pop	r25
     3b2:	8f 91       	pop	r24
     3b4:	7f 91       	pop	r23
     3b6:	6f 91       	pop	r22
     3b8:	5f 91       	pop	r21
     3ba:	4f 91       	pop	r20
     3bc:	3f 91       	pop	r19
     3be:	2f 91       	pop	r18
     3c0:	0f 90       	pop	r0
     3c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3c6:	0f 90       	pop	r0
     3c8:	1f 90       	pop	r1
     3ca:	18 95       	reti

000003cc <TUI_back_timer_init>:


void TUI_back_timer_init(void)
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;									// normal mode
     3d4:	84 e4       	ldi	r24, 0x44	; 68
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	10 82       	st	Z, r1
	TCCR0B = (1<<CS02) | (1<<CS00);				// clk/1024
     3dc:	85 e4       	ldi	r24, 0x45	; 69
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	25 e0       	ldi	r18, 0x05	; 5
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
	TIMSK0 = (1<<TOIE0);						// compare IT enable
     3e6:	8e e6       	ldi	r24, 0x6E	; 110
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
	TUI_back_timer_clear();
     3f0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TUI_back_timer_clear>
}
     3f4:	00 00       	nop
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <TUI_back_timer_clear>:
void TUI_back_timer_clear(void)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
	back_tick = 0;
     404:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <back_tick>
     408:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <back_tick+0x1>
     40c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <back_tick+0x2>
     410:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <back_tick+0x3>
	TCNT0 = 0;
     414:	86 e4       	ldi	r24, 0x46	; 70
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	10 82       	st	Z, r1
}
     41c:	00 00       	nop
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     42c:	0f 92       	push	r0
     42e:	11 24       	eor	r1, r1
     430:	2f 93       	push	r18
     432:	3f 93       	push	r19
     434:	4f 93       	push	r20
     436:	5f 93       	push	r21
     438:	6f 93       	push	r22
     43a:	7f 93       	push	r23
     43c:	8f 93       	push	r24
     43e:	9f 93       	push	r25
     440:	af 93       	push	r26
     442:	bf 93       	push	r27
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	1f 92       	push	r1
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
	const uint8_t sec_to_return = 3;
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	89 83       	std	Y+1, r24	; 0x01
	back_tick++;
     456:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <back_tick>
     45a:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <back_tick+0x1>
     45e:	a0 91 e1 02 	lds	r26, 0x02E1	; 0x8002e1 <back_tick+0x2>
     462:	b0 91 e2 02 	lds	r27, 0x02E2	; 0x8002e2 <back_tick+0x3>
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	a1 1d       	adc	r26, r1
     46a:	b1 1d       	adc	r27, r1
     46c:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <back_tick>
     470:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <back_tick+0x1>
     474:	a0 93 e1 02 	sts	0x02E1, r26	; 0x8002e1 <back_tick+0x2>
     478:	b0 93 e2 02 	sts	0x02E2, r27	; 0x8002e2 <back_tick+0x3>
	if (back_tick == ( (((uint32_t) sec_to_return) * ((uint32_t) F_CPU)) / (((uint32_t) 256) * ((uint32_t) 1024))) )
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	a0 e0       	ldi	r26, 0x00	; 0
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	9c 01       	movw	r18, r24
     488:	ad 01       	movw	r20, r26
     48a:	60 e0       	ldi	r22, 0x00	; 0
     48c:	76 e3       	ldi	r23, 0x36	; 54
     48e:	8e e6       	ldi	r24, 0x6E	; 110
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__mulsi3>
     496:	dc 01       	movw	r26, r24
     498:	cb 01       	movw	r24, r22
     49a:	9c 01       	movw	r18, r24
     49c:	ad 01       	movw	r20, r26
     49e:	01 2e       	mov	r0, r17
     4a0:	12 e1       	ldi	r17, 0x12	; 18
     4a2:	56 95       	lsr	r21
     4a4:	47 95       	ror	r20
     4a6:	37 95       	ror	r19
     4a8:	27 95       	ror	r18
     4aa:	1a 95       	dec	r17
     4ac:	d1 f7       	brne	.-12     	; 0x4a2 <__vector_16+0x7e>
     4ae:	10 2d       	mov	r17, r0
     4b0:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <back_tick>
     4b4:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <back_tick+0x1>
     4b8:	a0 91 e1 02 	lds	r26, 0x02E1	; 0x8002e1 <back_tick+0x2>
     4bc:	b0 91 e2 02 	lds	r27, 0x02E2	; 0x8002e2 <back_tick+0x3>
     4c0:	28 17       	cp	r18, r24
     4c2:	39 07       	cpc	r19, r25
     4c4:	4a 07       	cpc	r20, r26
     4c6:	5b 07       	cpc	r21, r27
     4c8:	59 f4       	brne	.+22     	; 0x4e0 <__vector_16+0xbc>
	{
		TUI_back_timer_clear();
     4ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <TUI_back_timer_clear>
		if (menu != MAIN_MENU)
     4ce:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <menu>
     4d2:	88 23       	and	r24, r24
     4d4:	29 f0       	breq	.+10     	; 0x4e0 <__vector_16+0xbc>
		{
			menu = MAIN_MENU;
     4d6:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <menu>
			TUI('s');
     4da:	83 e7       	ldi	r24, 0x73	; 115
     4dc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TUI>
		}
	}
}
     4e0:	00 00       	nop
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	ff 91       	pop	r31
     4ea:	ef 91       	pop	r30
     4ec:	bf 91       	pop	r27
     4ee:	af 91       	pop	r26
     4f0:	9f 91       	pop	r25
     4f2:	8f 91       	pop	r24
     4f4:	7f 91       	pop	r23
     4f6:	6f 91       	pop	r22
     4f8:	5f 91       	pop	r21
     4fa:	4f 91       	pop	r20
     4fc:	3f 91       	pop	r19
     4fe:	2f 91       	pop	r18
     500:	0f 90       	pop	r0
     502:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <TUI_inti>:

void TUI_inti(void)
{
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
	menu = MAIN_MENU;
     514:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <menu>
	machine_state = MACHINE_STOP;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <machine_state>
	actual_rmp = 0;
     51e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <actual_rmp+0x1>
     522:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <actual_rmp>

	TUI_sec_timer_init();
     526:	0e 94 4e 01 	call	0x29c	; 0x29c <TUI_sec_timer_init>
	TUI_back_timer_init();
     52a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TUI_back_timer_init>

	// EEPROM is empty
	if (eeprom_read_byte(EEP_ADDR) == 0xFF)
     52e:	80 e1       	ldi	r24, 0x10	; 16
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 43 18 	call	0x3086	; 0x3086 <eeprom_read_byte>
     536:	8f 3f       	cpi	r24, 0xFF	; 255
     538:	41 f4       	brne	.+16     	; 0x54a <TUI_inti+0x3e>
	{
		eep_update();
     53a:	4d e0       	ldi	r20, 0x0D	; 13
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	60 e1       	ldi	r22, 0x10	; 16
     540:	70 e0       	ldi	r23, 0x00	; 0
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 4b 18 	call	0x3096	; 0x3096 <eeprom_update_block>
	}
	eep_read();
     54a:	4d e0       	ldi	r20, 0x0D	; 13
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	60 e1       	ldi	r22, 0x10	; 16
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 33 18 	call	0x3066	; 0x3066 <eeprom_read_block>

	user_profile = eeprom_data.profile[eeprom_data.profile_id];
     55a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	88 0f       	add	r24, r24
     564:	99 1f       	adc	r25, r25
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	9e 4f       	sbci	r25, 0xFE	; 254
     56e:	fc 01       	movw	r30, r24
     570:	80 81       	ld	r24, Z
     572:	91 81       	ldd	r25, Z+1	; 0x01
     574:	a2 81       	ldd	r26, Z+2	; 0x02
     576:	b3 81       	ldd	r27, Z+3	; 0x03
     578:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <user_profile>
     57c:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <user_profile+0x1>
     580:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <user_profile+0x2>
     584:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <user_profile+0x3>
	backup_profile = user_profile;
     588:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
     58c:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
     590:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <user_profile+0x2>
     594:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <user_profile+0x3>
     598:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <backup_profile>
     59c:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <backup_profile+0x1>
     5a0:	a0 93 e5 02 	sts	0x02E5, r26	; 0x8002e5 <backup_profile+0x2>
     5a4:	b0 93 e6 02 	sts	0x02E6, r27	; 0x8002e6 <backup_profile+0x3>
}
     5a8:	00 00       	nop
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <TUI>:

void TUI(char action)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <TUI+0x6>
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <TUI+0x8>
     5b8:	1f 92       	push	r1
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	8d 83       	std	Y+5, r24	; 0x05
	static item_menu_select_t item_menu_secect = ITEM_MENU_SELECT_RPM;
	static load_menu_select_t load_menu_select = LOAD_MENU_SELECT_PROFILE1;
	static save_menu_select_t save_menu_select = SAVE_MENU_SELECT_PROFILE1;

	// nastaveni
	switch (menu)
     5c0:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <menu>
     5c4:	88 2f       	mov	r24, r24
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	82 30       	cpi	r24, 0x02	; 2
     5ca:	91 05       	cpc	r25, r1
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <TUI+0x20>
     5ce:	ee c0       	rjmp	.+476    	; 0x7ac <TUI+0x1fc>
     5d0:	83 30       	cpi	r24, 0x03	; 3
     5d2:	91 05       	cpc	r25, r1
     5d4:	34 f4       	brge	.+12     	; 0x5e2 <TUI+0x32>
     5d6:	00 97       	sbiw	r24, 0x00	; 0
     5d8:	81 f0       	breq	.+32     	; 0x5fa <TUI+0x4a>
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <TUI+0x30>
     5de:	84 c0       	rjmp	.+264    	; 0x6e8 <TUI+0x138>
     5e0:	28 c2       	rjmp	.+1104   	; 0xa32 <__stack+0x133>
     5e2:	84 30       	cpi	r24, 0x04	; 4
     5e4:	91 05       	cpc	r25, r1
     5e6:	09 f4       	brne	.+2      	; 0x5ea <TUI+0x3a>
     5e8:	69 c1       	rjmp	.+722    	; 0x8bc <TUI+0x30c>
     5ea:	84 30       	cpi	r24, 0x04	; 4
     5ec:	91 05       	cpc	r25, r1
     5ee:	0c f4       	brge	.+2      	; 0x5f2 <TUI+0x42>
     5f0:	21 c1       	rjmp	.+578    	; 0x834 <TUI+0x284>
     5f2:	05 97       	sbiw	r24, 0x05	; 5
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <TUI+0x48>
     5f6:	bf c1       	rjmp	.+894    	; 0x976 <__stack+0x77>
     5f8:	1c c2       	rjmp	.+1080   	; 0xa32 <__stack+0x133>
	{
		case MAIN_MENU:
			switch (action)
     5fa:	8d 81       	ldd	r24, Y+5	; 0x05
     5fc:	88 2f       	mov	r24, r24
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	8d 32       	cpi	r24, 0x2D	; 45
     602:	91 05       	cpc	r25, r1
     604:	31 f0       	breq	.+12     	; 0x612 <TUI+0x62>
     606:	82 36       	cpi	r24, 0x62	; 98
     608:	91 05       	cpc	r25, r1
     60a:	89 f0       	breq	.+34     	; 0x62e <TUI+0x7e>
     60c:	8b 97       	sbiw	r24, 0x2b	; 43
     60e:	09 f0       	breq	.+2      	; 0x612 <TUI+0x62>
					break;

				default:
					;
			}
			break;
     610:	10 c2       	rjmp	.+1056   	; 0xa32 <__stack+0x133>
			{
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
     612:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <machine_state>
     616:	88 23       	and	r24, r24
     618:	09 f4       	brne	.+2      	; 0x61c <TUI+0x6c>
     61a:	64 c0       	rjmp	.+200    	; 0x6e4 <TUI+0x134>
						break;
					main_menu_secelt = (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ? MAIN_MENU_SELECT_MENU : MAIN_MENU_SELECT_CONTOL;
     61c:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <main_menu_secelt.1906>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	99 23       	and	r25, r25
     624:	09 f0       	breq	.+2      	; 0x628 <TUI+0x78>
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <main_menu_secelt.1906>
					break;
     62c:	5c c0       	rjmp	.+184    	; 0x6e6 <TUI+0x136>

				// stisk tlacitka
				case 'b':
					if (main_menu_secelt == MAIN_MENU_SELECT_CONTOL)
     62e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <main_menu_secelt.1906>
     632:	88 23       	and	r24, r24
     634:	09 f0       	breq	.+2      	; 0x638 <TUI+0x88>
     636:	42 c0       	rjmp	.+132    	; 0x6bc <TUI+0x10c>
					{
						if (machine_state == MACHINE_STOP)
     638:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <machine_state>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	01 f5       	brne	.+64     	; 0x680 <TUI+0xd0>
						{
							machine_state = MACHINE_START;
     640:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <machine_state>
							backup_profile = user_profile;
     644:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
     648:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
     64c:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <user_profile+0x2>
     650:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <user_profile+0x3>
     654:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <backup_profile>
     658:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <backup_profile+0x1>
     65c:	a0 93 e5 02 	sts	0x02E5, r26	; 0x8002e5 <backup_profile+0x2>
     660:	b0 93 e6 02 	sts	0x02E6, r27	; 0x8002e6 <backup_profile+0x3>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);
     664:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <user_profile>
     668:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <user_profile+0x1>
     66c:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <actual_rmp>
     670:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <actual_rmp+0x1>
     674:	b9 01       	movw	r22, r18
     676:	0e 94 98 14 	call	0x2930	; 0x2930 <motor_smoothly_rmp>
							TUI_sec_timer_start();
     67a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <TUI_sec_timer_start>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     67e:	33 c0       	rjmp	.+102    	; 0x6e6 <TUI+0x136>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);
							TUI_sec_timer_start();
						}
						else
						{
							machine_state = MACHINE_STOP;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <machine_state>
							motor_smoothly_rmp(user_profile.rpm, 0);
     686:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
     68a:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	0e 94 98 14 	call	0x2930	; 0x2930 <motor_smoothly_rmp>
							TUI_sec_timer_stop();
     696:	0e 94 75 01 	call	0x2ea	; 0x2ea <TUI_sec_timer_stop>
							user_profile = backup_profile;
     69a:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     69e:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     6a2:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     6a6:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     6aa:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <user_profile>
     6ae:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <user_profile+0x1>
     6b2:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <user_profile+0x2>
     6b6:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <user_profile+0x3>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     6ba:	15 c0       	rjmp	.+42     	; 0x6e6 <TUI+0x136>
							user_profile = backup_profile;
						}
					}
					else
					{
						menu = ITEM_MENU;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <menu>
						backup_profile = user_profile;
     6c2:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
     6c6:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
     6ca:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <user_profile+0x2>
     6ce:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <user_profile+0x3>
     6d2:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <backup_profile>
     6d6:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <backup_profile+0x1>
     6da:	a0 93 e5 02 	sts	0x02E5, r26	; 0x8002e5 <backup_profile+0x2>
     6de:	b0 93 e6 02 	sts	0x02E6, r27	; 0x8002e6 <backup_profile+0x3>
					}
					break;
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <TUI+0x136>
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
						break;
     6e4:	00 00       	nop
					break;

				default:
					;
			}
			break;
     6e6:	a5 c1       	rjmp	.+842    	; 0xa32 <__stack+0x133>

		case ITEM_MENU:
			switch (action)
     6e8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	8d 32       	cpi	r24, 0x2D	; 45
     6f0:	91 05       	cpc	r25, r1
     6f2:	11 f1       	breq	.+68     	; 0x738 <TUI+0x188>
     6f4:	82 36       	cpi	r24, 0x62	; 98
     6f6:	91 05       	cpc	r25, r1
     6f8:	d9 f1       	breq	.+118    	; 0x770 <TUI+0x1c0>
     6fa:	8b 97       	sbiw	r24, 0x2b	; 43
     6fc:	09 f0       	breq	.+2      	; 0x700 <TUI+0x150>
					break;

				default:
					;
			}
			break;
     6fe:	99 c1       	rjmp	.+818    	; 0xa32 <__stack+0x133>

		case ITEM_MENU:
			switch (action)
			{
				case '+':
					switch (item_menu_secect)
     700:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <item_menu_secect.1907>
     704:	88 2f       	mov	r24, r24
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	91 05       	cpc	r25, r1
     70c:	49 f0       	breq	.+18     	; 0x720 <TUI+0x170>
     70e:	82 30       	cpi	r24, 0x02	; 2
     710:	91 05       	cpc	r25, r1
     712:	51 f0       	breq	.+20     	; 0x728 <TUI+0x178>
     714:	89 2b       	or	r24, r25
     716:	61 f4       	brne	.+24     	; 0x730 <TUI+0x180>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <item_menu_secect.1907>
							break;
     71e:	0b c0       	rjmp	.+22     	; 0x736 <TUI+0x186>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <item_menu_secect.1907>
							break;
     726:	07 c0       	rjmp	.+14     	; 0x736 <TUI+0x186>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <item_menu_secect.1907>
							break;
     72e:	03 c0       	rjmp	.+6      	; 0x736 <TUI+0x186>
						default:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     730:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <item_menu_secect.1907>
					}
					break;
     734:	3a c0       	rjmp	.+116    	; 0x7aa <TUI+0x1fa>
     736:	39 c0       	rjmp	.+114    	; 0x7aa <TUI+0x1fa>

				case  '-':
					switch (item_menu_secect)
     738:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <item_menu_secect.1907>
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	91 05       	cpc	r25, r1
     744:	49 f0       	breq	.+18     	; 0x758 <TUI+0x1a8>
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	91 05       	cpc	r25, r1
     74a:	49 f0       	breq	.+18     	; 0x75e <TUI+0x1ae>
     74c:	89 2b       	or	r24, r25
     74e:	59 f4       	brne	.+22     	; 0x766 <TUI+0x1b6>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <item_menu_secect.1907>
							break;
     756:	0b c0       	rjmp	.+22     	; 0x76e <TUI+0x1be>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     758:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <item_menu_secect.1907>
							break;
     75c:	08 c0       	rjmp	.+16     	; 0x76e <TUI+0x1be>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <item_menu_secect.1907>
							break;
     764:	04 c0       	rjmp	.+8      	; 0x76e <TUI+0x1be>
						default:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <item_menu_secect.1907>
					}
					break;
     76c:	1e c0       	rjmp	.+60     	; 0x7aa <TUI+0x1fa>
     76e:	1d c0       	rjmp	.+58     	; 0x7aa <TUI+0x1fa>

				case 'b':
					switch (item_menu_secect)
     770:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <item_menu_secect.1907>
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	91 05       	cpc	r25, r1
     77c:	49 f0       	breq	.+18     	; 0x790 <TUI+0x1e0>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	91 05       	cpc	r25, r1
     782:	51 f0       	breq	.+20     	; 0x798 <TUI+0x1e8>
     784:	89 2b       	or	r24, r25
     786:	61 f4       	brne	.+24     	; 0x7a0 <TUI+0x1f0>
					{
						case ITEM_MENU_SELECT_RPM:
							menu = RPM_MENU;
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <menu>
							break;
     78e:	0c c0       	rjmp	.+24     	; 0x7a8 <TUI+0x1f8>
						case ITEM_MENU_SELECT_TIME:
							menu = TIME_MENU;
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <menu>
							break;
     796:	08 c0       	rjmp	.+16     	; 0x7a8 <TUI+0x1f8>
						case ITEM_MENU_SELECT_LOAD:
							menu = LOAD_MENU;
     798:	84 e0       	ldi	r24, 0x04	; 4
     79a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <menu>
							break;
     79e:	04 c0       	rjmp	.+8      	; 0x7a8 <TUI+0x1f8>
						default:
							menu = SAVE_MENU;
     7a0:	85 e0       	ldi	r24, 0x05	; 5
     7a2:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <menu>
					}
					break;
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <TUI+0x1f8>
     7a8:	00 00       	nop

				default:
					;
			}
			break;
     7aa:	43 c1       	rjmp	.+646    	; 0xa32 <__stack+0x133>

		case RPM_MENU:
			switch (action)
     7ac:	8d 81       	ldd	r24, Y+5	; 0x05
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	8d 32       	cpi	r24, 0x2D	; 45
     7b4:	91 05       	cpc	r25, r1
     7b6:	b9 f0       	breq	.+46     	; 0x7e6 <TUI+0x236>
     7b8:	82 36       	cpi	r24, 0x62	; 98
     7ba:	91 05       	cpc	r25, r1
     7bc:	21 f1       	breq	.+72     	; 0x806 <TUI+0x256>
     7be:	8b 97       	sbiw	r24, 0x2b	; 43
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <TUI+0x214>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     7c2:	37 c1       	rjmp	.+622    	; 0xa32 <__stack+0x133>

		case RPM_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
     7c4:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     7c8:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     7cc:	8c 32       	cpi	r24, 0x2C	; 44
     7ce:	91 40       	sbci	r25, 0x01	; 1
     7d0:	68 f5       	brcc	.+90     	; 0x82c <TUI+0x27c>
						backup_profile.rpm++;
     7d2:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     7d6:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <backup_profile+0x1>
     7e0:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <backup_profile>
					break;
     7e4:	23 c0       	rjmp	.+70     	; 0x82c <TUI+0x27c>
				case '-':
					if (backup_profile.rpm > 0)
     7e6:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     7ea:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     7ee:	89 2b       	or	r24, r25
     7f0:	f9 f0       	breq	.+62     	; 0x830 <TUI+0x280>
						backup_profile.rpm--;
     7f2:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     7f6:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <backup_profile+0x1>
     800:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <backup_profile>
					break;
     804:	15 c0       	rjmp	.+42     	; 0x830 <TUI+0x280>
				case  'b':
					menu = MAIN_MENU;
     806:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <menu>
					user_profile = backup_profile;
     80a:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     80e:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     812:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     816:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     81a:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <user_profile>
     81e:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <user_profile+0x1>
     822:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <user_profile+0x2>
     826:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <user_profile+0x3>
					break;
     82a:	03 c0       	rjmp	.+6      	; 0x832 <TUI+0x282>
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
						backup_profile.rpm++;
					break;
     82c:	00 00       	nop
     82e:	01 c1       	rjmp	.+514    	; 0xa32 <__stack+0x133>
				case '-':
					if (backup_profile.rpm > 0)
						backup_profile.rpm--;
					break;
     830:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     832:	ff c0       	rjmp	.+510    	; 0xa32 <__stack+0x133>

		case TIME_MENU:
			switch (action)
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	8d 32       	cpi	r24, 0x2D	; 45
     83c:	91 05       	cpc	r25, r1
     83e:	b9 f0       	breq	.+46     	; 0x86e <TUI+0x2be>
     840:	82 36       	cpi	r24, 0x62	; 98
     842:	91 05       	cpc	r25, r1
     844:	21 f1       	breq	.+72     	; 0x88e <TUI+0x2de>
     846:	8b 97       	sbiw	r24, 0x2b	; 43
     848:	09 f0       	breq	.+2      	; 0x84c <TUI+0x29c>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     84a:	f3 c0       	rjmp	.+486    	; 0xa32 <__stack+0x133>

		case TIME_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
     84c:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     850:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     854:	80 3a       	cpi	r24, 0xA0	; 160
     856:	9c 48       	sbci	r25, 0x8C	; 140
     858:	68 f5       	brcc	.+90     	; 0x8b4 <TUI+0x304>
						backup_profile.sec+=60;
     85a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     85e:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     862:	cc 96       	adiw	r24, 0x3c	; 60
     864:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <backup_profile+0x3>
     868:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <backup_profile+0x2>
					break;
     86c:	23 c0       	rjmp	.+70     	; 0x8b4 <TUI+0x304>
				case '-':
					if (backup_profile.sec > 0)
     86e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     872:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     876:	89 2b       	or	r24, r25
     878:	f9 f0       	breq	.+62     	; 0x8b8 <TUI+0x308>
						backup_profile.sec-=60;
     87a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     87e:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     882:	cc 97       	sbiw	r24, 0x3c	; 60
     884:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <backup_profile+0x3>
     888:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <backup_profile+0x2>
					break;
     88c:	15 c0       	rjmp	.+42     	; 0x8b8 <TUI+0x308>
				case  'b':
					menu = MAIN_MENU;
     88e:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <menu>
					user_profile = backup_profile;
     892:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     896:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     89a:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     89e:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     8a2:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <user_profile>
     8a6:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <user_profile+0x1>
     8aa:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <user_profile+0x2>
     8ae:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <user_profile+0x3>
					break;
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <TUI+0x30a>
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
						backup_profile.sec+=60;
					break;
     8b4:	00 00       	nop
     8b6:	bd c0       	rjmp	.+378    	; 0xa32 <__stack+0x133>
				case '-':
					if (backup_profile.sec > 0)
						backup_profile.sec-=60;
					break;
     8b8:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     8ba:	bb c0       	rjmp	.+374    	; 0xa32 <__stack+0x133>

		case LOAD_MENU:
			switch (action)
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	88 2f       	mov	r24, r24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	8d 32       	cpi	r24, 0x2D	; 45
     8c4:	91 05       	cpc	r25, r1
     8c6:	d9 f0       	breq	.+54     	; 0x8fe <TUI+0x34e>
     8c8:	82 36       	cpi	r24, 0x62	; 98
     8ca:	91 05       	cpc	r25, r1
     8cc:	69 f1       	breq	.+90     	; 0x928 <__stack+0x29>
     8ce:	8b 97       	sbiw	r24, 0x2b	; 43
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <TUI+0x324>
					eep_update();
					break;
				default:
				;
			}
			break;
     8d2:	af c0       	rjmp	.+350    	; 0xa32 <__stack+0x133>

		case LOAD_MENU:
			switch (action)
			{
				case '+':
					switch (load_menu_select)
     8d4:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <load_menu_select.1908>
     8d8:	88 2f       	mov	r24, r24
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	19 f0       	breq	.+6      	; 0x8e6 <TUI+0x336>
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	29 f0       	breq	.+10     	; 0x8ee <TUI+0x33e>
     8e4:	08 c0       	rjmp	.+16     	; 0x8f6 <TUI+0x346>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <load_menu_select.1908>
							break;
     8ec:	07 c0       	rjmp	.+14     	; 0x8fc <TUI+0x34c>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <load_menu_select.1908>
							break;
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <TUI+0x34c>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     8f6:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <load_menu_select.1908>
					}
					break;
     8fa:	3c c0       	rjmp	.+120    	; 0x974 <__stack+0x75>
     8fc:	3b c0       	rjmp	.+118    	; 0x974 <__stack+0x75>
				case '-':
					switch (load_menu_select)
     8fe:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <load_menu_select.1908>
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	19 f0       	breq	.+6      	; 0x910 <__stack+0x11>
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	29 f0       	breq	.+10     	; 0x918 <__stack+0x19>
     90e:	07 c0       	rjmp	.+14     	; 0x91e <__stack+0x1f>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <load_menu_select.1908>
							break;
     916:	07 c0       	rjmp	.+14     	; 0x926 <__stack+0x27>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     918:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <load_menu_select.1908>
							break;
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0x27>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <load_menu_select.1908>
					}
					break;
     924:	27 c0       	rjmp	.+78     	; 0x974 <__stack+0x75>
     926:	26 c0       	rjmp	.+76     	; 0x974 <__stack+0x75>
				case  'b':
					menu = MAIN_MENU;
     928:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <menu>
					eeprom_data.profile_id = load_menu_select;
     92c:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <load_menu_select.1908>
     930:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					user_profile = eeprom_data.profile[eeprom_data.profile_id];
     934:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     938:	88 2f       	mov	r24, r24
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	8f 5f       	subi	r24, 0xFF	; 255
     946:	9e 4f       	sbci	r25, 0xFE	; 254
     948:	fc 01       	movw	r30, r24
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	a2 81       	ldd	r26, Z+2	; 0x02
     950:	b3 81       	ldd	r27, Z+3	; 0x03
     952:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <user_profile>
     956:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <user_profile+0x1>
     95a:	a0 93 dd 02 	sts	0x02DD, r26	; 0x8002dd <user_profile+0x2>
     95e:	b0 93 de 02 	sts	0x02DE, r27	; 0x8002de <user_profile+0x3>
					eep_update();
     962:	4d e0       	ldi	r20, 0x0D	; 13
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	60 e1       	ldi	r22, 0x10	; 16
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 4b 18 	call	0x3096	; 0x3096 <eeprom_update_block>
					break;
     972:	00 00       	nop
				default:
				;
			}
			break;
     974:	5e c0       	rjmp	.+188    	; 0xa32 <__stack+0x133>

		case SAVE_MENU:
			switch (action)
     976:	8d 81       	ldd	r24, Y+5	; 0x05
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	8d 32       	cpi	r24, 0x2D	; 45
     97e:	91 05       	cpc	r25, r1
     980:	d9 f0       	breq	.+54     	; 0x9b8 <__stack+0xb9>
     982:	82 36       	cpi	r24, 0x62	; 98
     984:	91 05       	cpc	r25, r1
     986:	69 f1       	breq	.+90     	; 0x9e2 <__stack+0xe3>
     988:	8b 97       	sbiw	r24, 0x2b	; 43
     98a:	09 f0       	breq	.+2      	; 0x98e <__stack+0x8f>
					eep_update();
					break;
				default:
				;
			}
			break;
     98c:	51 c0       	rjmp	.+162    	; 0xa30 <__stack+0x131>

		case SAVE_MENU:
			switch (action)
			{
				case '+':
					switch (save_menu_select)
     98e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <save_menu_select.1909>
     992:	88 2f       	mov	r24, r24
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	19 f0       	breq	.+6      	; 0x9a0 <__stack+0xa1>
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	29 f0       	breq	.+10     	; 0x9a8 <__stack+0xa9>
     99e:	08 c0       	rjmp	.+16     	; 0x9b0 <__stack+0xb1>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <save_menu_select.1909>
							break;
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__stack+0xb7>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <save_menu_select.1909>
							break;
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     9b0:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <save_menu_select.1909>
					}
					break;
     9b4:	3d c0       	rjmp	.+122    	; 0xa30 <__stack+0x131>
     9b6:	3c c0       	rjmp	.+120    	; 0xa30 <__stack+0x131>
				case '-':
					switch (save_menu_select)
     9b8:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <save_menu_select.1909>
     9bc:	88 2f       	mov	r24, r24
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	19 f0       	breq	.+6      	; 0x9ca <__stack+0xcb>
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	29 f0       	breq	.+10     	; 0x9d2 <__stack+0xd3>
     9c8:	07 c0       	rjmp	.+14     	; 0x9d8 <__stack+0xd9>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <save_menu_select.1909>
							break;
     9d0:	07 c0       	rjmp	.+14     	; 0x9e0 <__stack+0xe1>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     9d2:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <save_menu_select.1909>
							break;
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__stack+0xe1>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <save_menu_select.1909>
					}
					break;
     9de:	28 c0       	rjmp	.+80     	; 0xa30 <__stack+0x131>
     9e0:	27 c0       	rjmp	.+78     	; 0xa30 <__stack+0x131>
				case  'b':
					menu = MAIN_MENU;
     9e2:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <menu>
					eeprom_data.profile_id = save_menu_select;
     9e6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <save_menu_select.1909>
     9ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					eeprom_data.profile[eeprom_data.profile_id] = user_profile;
     9ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9f2:	88 2f       	mov	r24, r24
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	9c 01       	movw	r18, r24
     a00:	2f 5f       	subi	r18, 0xFF	; 255
     a02:	3e 4f       	sbci	r19, 0xFE	; 254
     a04:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
     a08:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
     a0c:	a0 91 dd 02 	lds	r26, 0x02DD	; 0x8002dd <user_profile+0x2>
     a10:	b0 91 de 02 	lds	r27, 0x02DE	; 0x8002de <user_profile+0x3>
     a14:	f9 01       	movw	r30, r18
     a16:	80 83       	st	Z, r24
     a18:	91 83       	std	Z+1, r25	; 0x01
     a1a:	a2 83       	std	Z+2, r26	; 0x02
     a1c:	b3 83       	std	Z+3, r27	; 0x03
					eep_update();
     a1e:	4d e0       	ldi	r20, 0x0D	; 13
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	60 e1       	ldi	r22, 0x10	; 16
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 4b 18 	call	0x3096	; 0x3096 <eeprom_update_block>
					break;
     a2e:	00 00       	nop
				default:
				;
			}
			break;
     a30:	00 00       	nop
		default:
			;
	}

	// zobrazeni
	switch (menu)
     a32:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <menu>
     a36:	88 2f       	mov	r24, r24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	91 05       	cpc	r25, r1
     a3e:	09 f4       	brne	.+2      	; 0xa42 <__stack+0x143>
     a40:	09 c2       	rjmp	.+1042   	; 0xe54 <__stack+0x555>
     a42:	83 30       	cpi	r24, 0x03	; 3
     a44:	91 05       	cpc	r25, r1
     a46:	34 f4       	brge	.+12     	; 0xa54 <__stack+0x155>
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	81 f0       	breq	.+32     	; 0xa6c <__stack+0x16d>
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	09 f4       	brne	.+2      	; 0xa52 <__stack+0x153>
     a50:	9c c1       	rjmp	.+824    	; 0xd8a <__stack+0x48b>
			break;

		default:
		;
	}
}
     a52:	b0 c4       	rjmp	.+2400   	; 0x13b4 <__stack+0xab5>
		default:
			;
	}

	// zobrazeni
	switch (menu)
     a54:	84 30       	cpi	r24, 0x04	; 4
     a56:	91 05       	cpc	r25, r1
     a58:	09 f4       	brne	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	be c2       	rjmp	.+1404   	; 0xfd8 <__stack+0x6d9>
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	91 05       	cpc	r25, r1
     a60:	0c f4       	brge	.+2      	; 0xa64 <__stack+0x165>
     a62:	37 c2       	rjmp	.+1134   	; 0xed2 <__stack+0x5d3>
     a64:	05 97       	sbiw	r24, 0x05	; 5
     a66:	09 f4       	brne	.+2      	; 0xa6a <__stack+0x16b>
     a68:	ae c3       	rjmp	.+1884   	; 0x11c6 <__stack+0x8c7>
			break;

		default:
		;
	}
}
     a6a:	a4 c4       	rjmp	.+2376   	; 0x13b4 <__stack+0xab5>
	// zobrazeni
	switch (menu)
	{
		case MAIN_MENU:

			if (user_profile.sec/3600)
     a6c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     a70:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     a74:	80 31       	cpi	r24, 0x10	; 16
     a76:	9e 40       	sbci	r25, 0x0E	; 14
     a78:	08 f4       	brcc	.+2      	; 0xa7c <__stack+0x17d>
     a7a:	5f c0       	rjmp	.+190    	; 0xb3a <__stack+0x23b>
				lcd_printf("\fCas:        %2d:%02d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     a7c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     a80:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     a84:	20 e1       	ldi	r18, 0x10	; 16
     a86:	3e e0       	ldi	r19, 0x0E	; 14
     a88:	b9 01       	movw	r22, r18
     a8a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     a8e:	ac 01       	movw	r20, r24
     a90:	9a 01       	movw	r18, r20
     a92:	a9 e8       	ldi	r26, 0x89	; 137
     a94:	b8 e8       	ldi	r27, 0x88	; 136
     a96:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
     a9a:	fc 01       	movw	r30, r24
     a9c:	f6 95       	lsr	r31
     a9e:	e7 95       	ror	r30
     aa0:	f2 95       	swap	r31
     aa2:	e2 95       	swap	r30
     aa4:	ef 70       	andi	r30, 0x0F	; 15
     aa6:	ef 27       	eor	r30, r31
     aa8:	ff 70       	andi	r31, 0x0F	; 15
     aaa:	ef 27       	eor	r30, r31
     aac:	2c e3       	ldi	r18, 0x3C	; 60
     aae:	2e 9f       	mul	r18, r30
     ab0:	c0 01       	movw	r24, r0
     ab2:	2f 9f       	mul	r18, r31
     ab4:	90 0d       	add	r25, r0
     ab6:	11 24       	eor	r1, r1
     ab8:	fa 01       	movw	r30, r20
     aba:	e8 1b       	sub	r30, r24
     abc:	f9 0b       	sbc	r31, r25
     abe:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     ac2:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     ac6:	20 e1       	ldi	r18, 0x10	; 16
     ac8:	3e e0       	ldi	r19, 0x0E	; 14
     aca:	b9 01       	movw	r22, r18
     acc:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     ad0:	9c 01       	movw	r18, r24
     ad2:	a9 e8       	ldi	r26, 0x89	; 137
     ad4:	b8 e8       	ldi	r27, 0x88	; 136
     ad6:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
     ada:	9c 01       	movw	r18, r24
     adc:	36 95       	lsr	r19
     ade:	27 95       	ror	r18
     ae0:	32 95       	swap	r19
     ae2:	22 95       	swap	r18
     ae4:	2f 70       	andi	r18, 0x0F	; 15
     ae6:	23 27       	eor	r18, r19
     ae8:	3f 70       	andi	r19, 0x0F	; 15
     aea:	23 27       	eor	r18, r19
     aec:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     af0:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     af4:	40 e1       	ldi	r20, 0x10	; 16
     af6:	5e e0       	ldi	r21, 0x0E	; 14
     af8:	ba 01       	movw	r22, r20
     afa:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     afe:	cb 01       	movw	r24, r22
     b00:	4f 2f       	mov	r20, r31
     b02:	4f 93       	push	r20
     b04:	4e 2f       	mov	r20, r30
     b06:	4f 93       	push	r20
     b08:	43 2f       	mov	r20, r19
     b0a:	4f 93       	push	r20
     b0c:	2f 93       	push	r18
     b0e:	29 2f       	mov	r18, r25
     b10:	2f 93       	push	r18
     b12:	8f 93       	push	r24
     b14:	8e e0       	ldi	r24, 0x0E	; 14
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	89 2f       	mov	r24, r25
     b1a:	8f 93       	push	r24
     b1c:	8e e0       	ldi	r24, 0x0E	; 14
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	8f 93       	push	r24
     b22:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     b26:	4d b7       	in	r20, 0x3d	; 61
     b28:	5e b7       	in	r21, 0x3e	; 62
     b2a:	48 5f       	subi	r20, 0xF8	; 248
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	0f b6       	in	r0, 0x3f	; 63
     b30:	f8 94       	cli
     b32:	de bf       	out	0x3e, r29	; 62
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	4d c0       	rjmp	.+154    	; 0xbd4 <__stack+0x2d5>
			else
				lcd_printf("\fCas:           %2d:%02d", (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     b3a:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     b3e:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     b42:	20 e1       	ldi	r18, 0x10	; 16
     b44:	3e e0       	ldi	r19, 0x0E	; 14
     b46:	b9 01       	movw	r22, r18
     b48:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     b4c:	ac 01       	movw	r20, r24
     b4e:	9a 01       	movw	r18, r20
     b50:	a9 e8       	ldi	r26, 0x89	; 137
     b52:	b8 e8       	ldi	r27, 0x88	; 136
     b54:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
     b58:	fc 01       	movw	r30, r24
     b5a:	f6 95       	lsr	r31
     b5c:	e7 95       	ror	r30
     b5e:	f2 95       	swap	r31
     b60:	e2 95       	swap	r30
     b62:	ef 70       	andi	r30, 0x0F	; 15
     b64:	ef 27       	eor	r30, r31
     b66:	ff 70       	andi	r31, 0x0F	; 15
     b68:	ef 27       	eor	r30, r31
     b6a:	2c e3       	ldi	r18, 0x3C	; 60
     b6c:	2e 9f       	mul	r18, r30
     b6e:	c0 01       	movw	r24, r0
     b70:	2f 9f       	mul	r18, r31
     b72:	90 0d       	add	r25, r0
     b74:	11 24       	eor	r1, r1
     b76:	fa 01       	movw	r30, r20
     b78:	e8 1b       	sub	r30, r24
     b7a:	f9 0b       	sbc	r31, r25
     b7c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     b80:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     b84:	20 e1       	ldi	r18, 0x10	; 16
     b86:	3e e0       	ldi	r19, 0x0E	; 14
     b88:	b9 01       	movw	r22, r18
     b8a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     b8e:	9c 01       	movw	r18, r24
     b90:	a9 e8       	ldi	r26, 0x89	; 137
     b92:	b8 e8       	ldi	r27, 0x88	; 136
     b94:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
     b98:	96 95       	lsr	r25
     b9a:	87 95       	ror	r24
     b9c:	92 95       	swap	r25
     b9e:	82 95       	swap	r24
     ba0:	8f 70       	andi	r24, 0x0F	; 15
     ba2:	89 27       	eor	r24, r25
     ba4:	9f 70       	andi	r25, 0x0F	; 15
     ba6:	89 27       	eor	r24, r25
     ba8:	2f 2f       	mov	r18, r31
     baa:	2f 93       	push	r18
     bac:	2e 2f       	mov	r18, r30
     bae:	2f 93       	push	r18
     bb0:	29 2f       	mov	r18, r25
     bb2:	2f 93       	push	r18
     bb4:	8f 93       	push	r24
     bb6:	89 e2       	ldi	r24, 0x29	; 41
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	89 2f       	mov	r24, r25
     bbc:	8f 93       	push	r24
     bbe:	89 e2       	ldi	r24, 0x29	; 41
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	8f 93       	push	r24
     bc4:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
			lcd_printf("\nOtacky:         %4d", user_profile.rpm);
     bd4:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
     bd8:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
     bdc:	29 2f       	mov	r18, r25
     bde:	2f 93       	push	r18
     be0:	8f 93       	push	r24
     be2:	82 e4       	ldi	r24, 0x42	; 66
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	89 2f       	mov	r24, r25
     be8:	8f 93       	push	r24
     bea:	82 e4       	ldi	r24, 0x42	; 66
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	8f 93       	push	r24
     bf0:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0

			switch (machine_state)
     bfc:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <machine_state>
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	41 f5       	brne	.+80     	; 0xc58 <__stack+0x359>
			{
				case MACHINE_STOP:
					lcd_printf("\n\n%cStart        %cMenu ", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, (main_menu_secelt == MAIN_MENU_SELECT_MENU) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     c08:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <main_menu_secelt.1906>
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	19 f4       	brne	.+6      	; 0xc16 <__stack+0x317>
     c10:	28 e0       	ldi	r18, 0x08	; 8
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <__stack+0x31b>
     c16:	20 e2       	ldi	r18, 0x20	; 32
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <main_menu_secelt.1906>
     c1e:	88 23       	and	r24, r24
     c20:	19 f4       	brne	.+6      	; 0xc28 <__stack+0x329>
     c22:	88 e0       	ldi	r24, 0x08	; 8
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <__stack+0x32d>
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	43 2f       	mov	r20, r19
     c2e:	4f 93       	push	r20
     c30:	2f 93       	push	r18
     c32:	29 2f       	mov	r18, r25
     c34:	2f 93       	push	r18
     c36:	8f 93       	push	r24
     c38:	87 e5       	ldi	r24, 0x57	; 87
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	89 2f       	mov	r24, r25
     c3e:	8f 93       	push	r24
     c40:	87 e5       	ldi	r24, 0x57	; 87
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	8f 93       	push	r24
     c46:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
					break;
     c56:	98 c0       	rjmp	.+304    	; 0xd88 <__stack+0x489>
				default:
					lcd_printf("\n");
     c58:	80 e7       	ldi	r24, 0x70	; 112
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	89 2f       	mov	r24, r25
     c5e:	8f 93       	push	r24
     c60:	80 e7       	ldi	r24, 0x70	; 112
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	8f 93       	push	r24
     c66:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
					// bar to end
					uint32_t bar;
					bar = backup_profile.sec - user_profile.sec;
     c6e:	20 91 e5 02 	lds	r18, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     c72:	30 91 e6 02 	lds	r19, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     c76:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     c7a:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     c7e:	f9 01       	movw	r30, r18
     c80:	e8 1b       	sub	r30, r24
     c82:	f9 0b       	sbc	r31, r25
     c84:	cf 01       	movw	r24, r30
     c86:	cc 01       	movw	r24, r24
     c88:	a0 e0       	ldi	r26, 0x00	; 0
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	89 83       	std	Y+1, r24	; 0x01
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	ab 83       	std	Y+3, r26	; 0x03
     c92:	bc 83       	std	Y+4, r27	; 0x04
					if (bar)	// div zero
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	ab 81       	ldd	r26, Y+3	; 0x03
     c9a:	bc 81       	ldd	r27, Y+4	; 0x04
     c9c:	89 2b       	or	r24, r25
     c9e:	8a 2b       	or	r24, r26
     ca0:	8b 2b       	or	r24, r27
     ca2:	09 f4       	brne	.+2      	; 0xca6 <__stack+0x3a7>
     ca4:	4f c0       	rjmp	.+158    	; 0xd44 <__stack+0x445>
					{
						bar *= 20;
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	ab 81       	ldd	r26, Y+3	; 0x03
     cac:	bc 81       	ldd	r27, Y+4	; 0x04
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	aa 1f       	adc	r26, r26
     cb4:	bb 1f       	adc	r27, r27
     cb6:	88 0f       	add	r24, r24
     cb8:	99 1f       	adc	r25, r25
     cba:	aa 1f       	adc	r26, r26
     cbc:	bb 1f       	adc	r27, r27
     cbe:	9c 01       	movw	r18, r24
     cc0:	ad 01       	movw	r20, r26
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	44 1f       	adc	r20, r20
     cc8:	55 1f       	adc	r21, r21
     cca:	22 0f       	add	r18, r18
     ccc:	33 1f       	adc	r19, r19
     cce:	44 1f       	adc	r20, r20
     cd0:	55 1f       	adc	r21, r21
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	a4 1f       	adc	r26, r20
     cd8:	b5 1f       	adc	r27, r21
     cda:	89 83       	std	Y+1, r24	; 0x01
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	ab 83       	std	Y+3, r26	; 0x03
     ce0:	bc 83       	std	Y+4, r27	; 0x04
						bar = bar / backup_profile.sec;
     ce2:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     ce6:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     cea:	9c 01       	movw	r18, r24
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	ab 81       	ldd	r26, Y+3	; 0x03
     cf6:	bc 81       	ldd	r27, Y+4	; 0x04
     cf8:	bc 01       	movw	r22, r24
     cfa:	cd 01       	movw	r24, r26
     cfc:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__udivmodsi4>
     d00:	da 01       	movw	r26, r20
     d02:	c9 01       	movw	r24, r18
     d04:	89 83       	std	Y+1, r24	; 0x01
     d06:	9a 83       	std	Y+2, r25	; 0x02
     d08:	ab 83       	std	Y+3, r26	; 0x03
     d0a:	bc 83       	std	Y+4, r27	; 0x04
					}
					for (; bar > 0; bar--)
     d0c:	1b c0       	rjmp	.+54     	; 0xd44 <__stack+0x445>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
     d0e:	1f 92       	push	r1
     d10:	89 e0       	ldi	r24, 0x09	; 9
     d12:	8f 93       	push	r24
     d14:	82 e7       	ldi	r24, 0x72	; 114
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	89 2f       	mov	r24, r25
     d1a:	8f 93       	push	r24
     d1c:	82 e7       	ldi	r24, 0x72	; 114
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	8f 93       	push	r24
     d22:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
					if (bar)	// div zero
					{
						bar *= 20;
						bar = bar / backup_profile.sec;
					}
					for (; bar > 0; bar--)
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	ab 81       	ldd	r26, Y+3	; 0x03
     d34:	bc 81       	ldd	r27, Y+4	; 0x04
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	a1 09       	sbc	r26, r1
     d3a:	b1 09       	sbc	r27, r1
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	ab 83       	std	Y+3, r26	; 0x03
     d42:	bc 83       	std	Y+4, r27	; 0x04
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	ab 81       	ldd	r26, Y+3	; 0x03
     d4a:	bc 81       	ldd	r27, Y+4	; 0x04
     d4c:	89 2b       	or	r24, r25
     d4e:	8a 2b       	or	r24, r26
     d50:	8b 2b       	or	r24, r27
     d52:	e9 f6       	brne	.-70     	; 0xd0e <__stack+0x40f>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
					}

					lcd_printf("\n%cStop", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     d54:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <main_menu_secelt.1906>
     d58:	88 23       	and	r24, r24
     d5a:	19 f4       	brne	.+6      	; 0xd62 <__stack+0x463>
     d5c:	88 e0       	ldi	r24, 0x08	; 8
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <__stack+0x467>
     d62:	80 e2       	ldi	r24, 0x20	; 32
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	29 2f       	mov	r18, r25
     d68:	2f 93       	push	r18
     d6a:	8f 93       	push	r24
     d6c:	85 e7       	ldi	r24, 0x75	; 117
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	89 2f       	mov	r24, r25
     d72:	8f 93       	push	r24
     d74:	85 e7       	ldi	r24, 0x75	; 117
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	8f 93       	push	r24
     d7a:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
					break;
     d86:	00 00       	nop
			}
			break;
     d88:	15 c3       	rjmp	.+1578   	; 0x13b4 <__stack+0xab5>

		case ITEM_MENU:
			lcd_printf("\f%cRychlost omylani", (item_menu_secect == ITEM_MENU_SELECT_RPM) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     d8a:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <item_menu_secect.1907>
     d8e:	88 23       	and	r24, r24
     d90:	19 f4       	brne	.+6      	; 0xd98 <__stack+0x499>
     d92:	88 e0       	ldi	r24, 0x08	; 8
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <__stack+0x49d>
     d98:	80 e2       	ldi	r24, 0x20	; 32
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	29 2f       	mov	r18, r25
     d9e:	2f 93       	push	r18
     da0:	8f 93       	push	r24
     da2:	8d e7       	ldi	r24, 0x7D	; 125
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	89 2f       	mov	r24, r25
     da8:	8f 93       	push	r24
     daa:	8d e7       	ldi	r24, 0x7D	; 125
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	8f 93       	push	r24
     db0:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
			lcd_printf("\n%cDelka omylani", (item_menu_secect == ITEM_MENU_SELECT_TIME) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     dbc:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <item_menu_secect.1907>
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	19 f4       	brne	.+6      	; 0xdca <__stack+0x4cb>
     dc4:	88 e0       	ldi	r24, 0x08	; 8
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <__stack+0x4cf>
     dca:	80 e2       	ldi	r24, 0x20	; 32
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	29 2f       	mov	r18, r25
     dd0:	2f 93       	push	r18
     dd2:	8f 93       	push	r24
     dd4:	81 e9       	ldi	r24, 0x91	; 145
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	89 2f       	mov	r24, r25
     dda:	8f 93       	push	r24
     ddc:	81 e9       	ldi	r24, 0x91	; 145
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	8f 93       	push	r24
     de2:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
			lcd_printf("\n%cNacist profil", (item_menu_secect == ITEM_MENU_SELECT_LOAD) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     dee:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <item_menu_secect.1907>
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	19 f4       	brne	.+6      	; 0xdfc <__stack+0x4fd>
     df6:	88 e0       	ldi	r24, 0x08	; 8
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <__stack+0x501>
     dfc:	80 e2       	ldi	r24, 0x20	; 32
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	29 2f       	mov	r18, r25
     e02:	2f 93       	push	r18
     e04:	8f 93       	push	r24
     e06:	82 ea       	ldi	r24, 0xA2	; 162
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	89 2f       	mov	r24, r25
     e0c:	8f 93       	push	r24
     e0e:	82 ea       	ldi	r24, 0xA2	; 162
     e10:	91 e0       	ldi	r25, 0x01	; 1
     e12:	8f 93       	push	r24
     e14:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
			lcd_printf("\n%cUlozit profil", (item_menu_secect == ITEM_MENU_SELECT_SAVE) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e20:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <item_menu_secect.1907>
     e24:	83 30       	cpi	r24, 0x03	; 3
     e26:	19 f4       	brne	.+6      	; 0xe2e <__stack+0x52f>
     e28:	88 e0       	ldi	r24, 0x08	; 8
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <__stack+0x533>
     e2e:	80 e2       	ldi	r24, 0x20	; 32
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	29 2f       	mov	r18, r25
     e34:	2f 93       	push	r18
     e36:	8f 93       	push	r24
     e38:	83 eb       	ldi	r24, 0xB3	; 179
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	89 2f       	mov	r24, r25
     e3e:	8f 93       	push	r24
     e40:	83 eb       	ldi	r24, 0xB3	; 179
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	8f 93       	push	r24
     e46:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
			break;
     e52:	b0 c2       	rjmp	.+1376   	; 0x13b4 <__stack+0xab5>

		case RPM_MENU:
			lcd_printf("\fNastaveni otacek");
     e54:	84 ec       	ldi	r24, 0xC4	; 196
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	89 2f       	mov	r24, r25
     e5a:	8f 93       	push	r24
     e5c:	84 ec       	ldi	r24, 0xC4	; 196
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	8f 93       	push	r24
     e62:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
			lcd_printf("\nza minutu");
     e6a:	86 ed       	ldi	r24, 0xD6	; 214
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	89 2f       	mov	r24, r25
     e70:	8f 93       	push	r24
     e72:	86 ed       	ldi	r24, 0xD6	; 214
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	8f 93       	push	r24
     e78:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
			lcd_printf("\nStara hodnota:%6d", user_profile.rpm);
     e80:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
     e84:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
     e88:	29 2f       	mov	r18, r25
     e8a:	2f 93       	push	r18
     e8c:	8f 93       	push	r24
     e8e:	81 ee       	ldi	r24, 0xE1	; 225
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	89 2f       	mov	r24, r25
     e94:	8f 93       	push	r24
     e96:	81 ee       	ldi	r24, 0xE1	; 225
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	8f 93       	push	r24
     e9c:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
			lcd_printf("\nNova  hodnota:%6d", backup_profile.rpm);
     ea8:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile>
     eac:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x1>
     eb0:	29 2f       	mov	r18, r25
     eb2:	2f 93       	push	r18
     eb4:	8f 93       	push	r24
     eb6:	84 ef       	ldi	r24, 0xF4	; 244
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	89 2f       	mov	r24, r25
     ebc:	8f 93       	push	r24
     ebe:	84 ef       	ldi	r24, 0xF4	; 244
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	8f 93       	push	r24
     ec4:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
			break;
     ed0:	71 c2       	rjmp	.+1250   	; 0x13b4 <__stack+0xab5>

		case TIME_MENU:
			lcd_printf("\fNastaveni delky");
     ed2:	87 e0       	ldi	r24, 0x07	; 7
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	89 2f       	mov	r24, r25
     ed8:	8f 93       	push	r24
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	8f 93       	push	r24
     ee0:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
			lcd_printf("\nomylani [HH:MM]");
     ee8:	88 e1       	ldi	r24, 0x18	; 24
     eea:	92 e0       	ldi	r25, 0x02	; 2
     eec:	89 2f       	mov	r24, r25
     eee:	8f 93       	push	r24
     ef0:	88 e1       	ldi	r24, 0x18	; 24
     ef2:	92 e0       	ldi	r25, 0x02	; 2
     ef4:	8f 93       	push	r24
     ef6:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
			lcd_printf("\nStary cas:     %2d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60);
     efe:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     f02:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     f06:	20 e1       	ldi	r18, 0x10	; 16
     f08:	3e e0       	ldi	r19, 0x0E	; 14
     f0a:	b9 01       	movw	r22, r18
     f0c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     f10:	9c 01       	movw	r18, r24
     f12:	a9 e8       	ldi	r26, 0x89	; 137
     f14:	b8 e8       	ldi	r27, 0x88	; 136
     f16:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
     f1a:	9c 01       	movw	r18, r24
     f1c:	36 95       	lsr	r19
     f1e:	27 95       	ror	r18
     f20:	32 95       	swap	r19
     f22:	22 95       	swap	r18
     f24:	2f 70       	andi	r18, 0x0F	; 15
     f26:	23 27       	eor	r18, r19
     f28:	3f 70       	andi	r19, 0x0F	; 15
     f2a:	23 27       	eor	r18, r19
     f2c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <user_profile+0x2>
     f30:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <user_profile+0x3>
     f34:	40 e1       	ldi	r20, 0x10	; 16
     f36:	5e e0       	ldi	r21, 0x0E	; 14
     f38:	ba 01       	movw	r22, r20
     f3a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     f3e:	cb 01       	movw	r24, r22
     f40:	43 2f       	mov	r20, r19
     f42:	4f 93       	push	r20
     f44:	2f 93       	push	r18
     f46:	29 2f       	mov	r18, r25
     f48:	2f 93       	push	r18
     f4a:	8f 93       	push	r24
     f4c:	89 e2       	ldi	r24, 0x29	; 41
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	89 2f       	mov	r24, r25
     f52:	8f 93       	push	r24
     f54:	89 e2       	ldi	r24, 0x29	; 41
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	8f 93       	push	r24
     f5a:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
			lcd_printf("\nNovy  cas:     %2d:%02d", backup_profile.sec/3600, (backup_profile.sec%3600)/60);
     f6a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     f6e:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     f72:	20 e1       	ldi	r18, 0x10	; 16
     f74:	3e e0       	ldi	r19, 0x0E	; 14
     f76:	b9 01       	movw	r22, r18
     f78:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     f7c:	9c 01       	movw	r18, r24
     f7e:	a9 e8       	ldi	r26, 0x89	; 137
     f80:	b8 e8       	ldi	r27, 0x88	; 136
     f82:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
     f86:	9c 01       	movw	r18, r24
     f88:	36 95       	lsr	r19
     f8a:	27 95       	ror	r18
     f8c:	32 95       	swap	r19
     f8e:	22 95       	swap	r18
     f90:	2f 70       	andi	r18, 0x0F	; 15
     f92:	23 27       	eor	r18, r19
     f94:	3f 70       	andi	r19, 0x0F	; 15
     f96:	23 27       	eor	r18, r19
     f98:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <backup_profile+0x2>
     f9c:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <backup_profile+0x3>
     fa0:	40 e1       	ldi	r20, 0x10	; 16
     fa2:	5e e0       	ldi	r21, 0x0E	; 14
     fa4:	ba 01       	movw	r22, r20
     fa6:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
     faa:	cb 01       	movw	r24, r22
     fac:	43 2f       	mov	r20, r19
     fae:	4f 93       	push	r20
     fb0:	2f 93       	push	r18
     fb2:	29 2f       	mov	r18, r25
     fb4:	2f 93       	push	r18
     fb6:	8f 93       	push	r24
     fb8:	82 e4       	ldi	r24, 0x42	; 66
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	89 2f       	mov	r24, r25
     fbe:	8f 93       	push	r24
     fc0:	82 e4       	ldi	r24, 0x42	; 66
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	8f 93       	push	r24
     fc6:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
			break;
     fd6:	ee c1       	rjmp	.+988    	; 0x13b4 <__stack+0xab5>

		case LOAD_MENU:
			lcd_printf("\fNacteni profilu");
     fd8:	8b e5       	ldi	r24, 0x5B	; 91
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	89 2f       	mov	r24, r25
     fde:	8f 93       	push	r24
     fe0:	8b e5       	ldi	r24, 0x5B	; 91
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	8f 93       	push	r24
     fe6:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
     fee:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
     ff2:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
     ff6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
     ffa:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
     ffe:	20 e1       	ldi	r18, 0x10	; 16
    1000:	3e e0       	ldi	r19, 0x0E	; 14
    1002:	b9 01       	movw	r22, r18
    1004:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    1008:	9c 01       	movw	r18, r24
    100a:	a9 e8       	ldi	r26, 0x89	; 137
    100c:	b8 e8       	ldi	r27, 0x88	; 136
    100e:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
    1012:	9c 01       	movw	r18, r24
    1014:	36 95       	lsr	r19
    1016:	27 95       	ror	r18
    1018:	32 95       	swap	r19
    101a:	22 95       	swap	r18
    101c:	2f 70       	andi	r18, 0x0F	; 15
    101e:	23 27       	eor	r18, r19
    1020:	3f 70       	andi	r19, 0x0F	; 15
    1022:	23 27       	eor	r18, r19
    1024:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    1028:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    102c:	40 e1       	ldi	r20, 0x10	; 16
    102e:	5e e0       	ldi	r21, 0x0E	; 14
    1030:	ba 01       	movw	r22, r20
    1032:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    1036:	cb 01       	movw	r24, r22
    1038:	ac 01       	movw	r20, r24
    103a:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <load_menu_select.1908>
    103e:	88 23       	and	r24, r24
    1040:	19 f4       	brne	.+6      	; 0x1048 <__stack+0x749>
    1042:	88 e0       	ldi	r24, 0x08	; 8
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <__stack+0x74d>
    1048:	80 e2       	ldi	r24, 0x20	; 32
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	6f 2f       	mov	r22, r31
    104e:	6f 93       	push	r22
    1050:	6e 2f       	mov	r22, r30
    1052:	6f 93       	push	r22
    1054:	63 2f       	mov	r22, r19
    1056:	6f 93       	push	r22
    1058:	2f 93       	push	r18
    105a:	25 2f       	mov	r18, r21
    105c:	2f 93       	push	r18
    105e:	24 2f       	mov	r18, r20
    1060:	2f 93       	push	r18
    1062:	29 2f       	mov	r18, r25
    1064:	2f 93       	push	r18
    1066:	8f 93       	push	r24
    1068:	8c e6       	ldi	r24, 0x6C	; 108
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	89 2f       	mov	r24, r25
    106e:	8f 93       	push	r24
    1070:	8c e6       	ldi	r24, 0x6C	; 108
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	8f 93       	push	r24
    1076:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
    107a:	4d b7       	in	r20, 0x3d	; 61
    107c:	5e b7       	in	r21, 0x3e	; 62
    107e:	46 5f       	subi	r20, 0xF6	; 246
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    108c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    1090:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1094:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1098:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    109c:	20 e1       	ldi	r18, 0x10	; 16
    109e:	3e e0       	ldi	r19, 0x0E	; 14
    10a0:	b9 01       	movw	r22, r18
    10a2:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    10a6:	9c 01       	movw	r18, r24
    10a8:	a9 e8       	ldi	r26, 0x89	; 137
    10aa:	b8 e8       	ldi	r27, 0x88	; 136
    10ac:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
    10b0:	9c 01       	movw	r18, r24
    10b2:	36 95       	lsr	r19
    10b4:	27 95       	ror	r18
    10b6:	32 95       	swap	r19
    10b8:	22 95       	swap	r18
    10ba:	2f 70       	andi	r18, 0x0F	; 15
    10bc:	23 27       	eor	r18, r19
    10be:	3f 70       	andi	r19, 0x0F	; 15
    10c0:	23 27       	eor	r18, r19
    10c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    10c6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    10ca:	40 e1       	ldi	r20, 0x10	; 16
    10cc:	5e e0       	ldi	r21, 0x0E	; 14
    10ce:	ba 01       	movw	r22, r20
    10d0:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    10d4:	cb 01       	movw	r24, r22
    10d6:	ac 01       	movw	r20, r24
    10d8:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <load_menu_select.1908>
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	19 f4       	brne	.+6      	; 0x10e6 <__stack+0x7e7>
    10e0:	88 e0       	ldi	r24, 0x08	; 8
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <__stack+0x7eb>
    10e6:	80 e2       	ldi	r24, 0x20	; 32
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	6f 2f       	mov	r22, r31
    10ec:	6f 93       	push	r22
    10ee:	6e 2f       	mov	r22, r30
    10f0:	6f 93       	push	r22
    10f2:	63 2f       	mov	r22, r19
    10f4:	6f 93       	push	r22
    10f6:	2f 93       	push	r18
    10f8:	25 2f       	mov	r18, r21
    10fa:	2f 93       	push	r18
    10fc:	24 2f       	mov	r18, r20
    10fe:	2f 93       	push	r18
    1100:	29 2f       	mov	r18, r25
    1102:	2f 93       	push	r18
    1104:	8f 93       	push	r24
    1106:	84 e8       	ldi	r24, 0x84	; 132
    1108:	92 e0       	ldi	r25, 0x02	; 2
    110a:	89 2f       	mov	r24, r25
    110c:	8f 93       	push	r24
    110e:	84 e8       	ldi	r24, 0x84	; 132
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	8f 93       	push	r24
    1114:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
    1118:	8d b7       	in	r24, 0x3d	; 61
    111a:	9e b7       	in	r25, 0x3e	; 62
    111c:	0a 96       	adiw	r24, 0x0a	; 10
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    1128:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    112c:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    1130:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1134:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    1138:	20 e1       	ldi	r18, 0x10	; 16
    113a:	3e e0       	ldi	r19, 0x0E	; 14
    113c:	b9 01       	movw	r22, r18
    113e:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    1142:	9c 01       	movw	r18, r24
    1144:	a9 e8       	ldi	r26, 0x89	; 137
    1146:	b8 e8       	ldi	r27, 0x88	; 136
    1148:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
    114c:	9c 01       	movw	r18, r24
    114e:	36 95       	lsr	r19
    1150:	27 95       	ror	r18
    1152:	32 95       	swap	r19
    1154:	22 95       	swap	r18
    1156:	2f 70       	andi	r18, 0x0F	; 15
    1158:	23 27       	eor	r18, r19
    115a:	3f 70       	andi	r19, 0x0F	; 15
    115c:	23 27       	eor	r18, r19
    115e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1162:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    1166:	40 e1       	ldi	r20, 0x10	; 16
    1168:	5e e0       	ldi	r21, 0x0E	; 14
    116a:	ba 01       	movw	r22, r20
    116c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    1170:	cb 01       	movw	r24, r22
    1172:	ac 01       	movw	r20, r24
    1174:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <load_menu_select.1908>
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	19 f4       	brne	.+6      	; 0x1182 <__stack+0x883>
    117c:	88 e0       	ldi	r24, 0x08	; 8
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <__stack+0x887>
    1182:	80 e2       	ldi	r24, 0x20	; 32
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	6f 2f       	mov	r22, r31
    1188:	6f 93       	push	r22
    118a:	6e 2f       	mov	r22, r30
    118c:	6f 93       	push	r22
    118e:	63 2f       	mov	r22, r19
    1190:	6f 93       	push	r22
    1192:	2f 93       	push	r18
    1194:	25 2f       	mov	r18, r21
    1196:	2f 93       	push	r18
    1198:	24 2f       	mov	r18, r20
    119a:	2f 93       	push	r18
    119c:	29 2f       	mov	r18, r25
    119e:	2f 93       	push	r18
    11a0:	8f 93       	push	r24
    11a2:	8c e9       	ldi	r24, 0x9C	; 156
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	89 2f       	mov	r24, r25
    11a8:	8f 93       	push	r24
    11aa:	8c e9       	ldi	r24, 0x9C	; 156
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	8f 93       	push	r24
    11b0:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
    11b4:	ed b7       	in	r30, 0x3d	; 61
    11b6:	fe b7       	in	r31, 0x3e	; 62
    11b8:	3a 96       	adiw	r30, 0x0a	; 10
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
			break;
    11c4:	f7 c0       	rjmp	.+494    	; 0x13b4 <__stack+0xab5>

		case SAVE_MENU:
			lcd_printf("\fUlozeni profilu");
    11c6:	84 eb       	ldi	r24, 0xB4	; 180
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	89 2f       	mov	r24, r25
    11cc:	8f 93       	push	r24
    11ce:	84 eb       	ldi	r24, 0xB4	; 180
    11d0:	92 e0       	ldi	r25, 0x02	; 2
    11d2:	8f 93       	push	r24
    11d4:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    11dc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    11e0:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    11e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    11e8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    11ec:	20 e1       	ldi	r18, 0x10	; 16
    11ee:	3e e0       	ldi	r19, 0x0E	; 14
    11f0:	b9 01       	movw	r22, r18
    11f2:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    11f6:	9c 01       	movw	r18, r24
    11f8:	a9 e8       	ldi	r26, 0x89	; 137
    11fa:	b8 e8       	ldi	r27, 0x88	; 136
    11fc:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
    1200:	9c 01       	movw	r18, r24
    1202:	36 95       	lsr	r19
    1204:	27 95       	ror	r18
    1206:	32 95       	swap	r19
    1208:	22 95       	swap	r18
    120a:	2f 70       	andi	r18, 0x0F	; 15
    120c:	23 27       	eor	r18, r19
    120e:	3f 70       	andi	r19, 0x0F	; 15
    1210:	23 27       	eor	r18, r19
    1212:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    1216:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    121a:	40 e1       	ldi	r20, 0x10	; 16
    121c:	5e e0       	ldi	r21, 0x0E	; 14
    121e:	ba 01       	movw	r22, r20
    1220:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    1224:	cb 01       	movw	r24, r22
    1226:	ac 01       	movw	r20, r24
    1228:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <save_menu_select.1909>
    122c:	88 23       	and	r24, r24
    122e:	19 f4       	brne	.+6      	; 0x1236 <__stack+0x937>
    1230:	88 e0       	ldi	r24, 0x08	; 8
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <__stack+0x93b>
    1236:	80 e2       	ldi	r24, 0x20	; 32
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	6f 2f       	mov	r22, r31
    123c:	6f 93       	push	r22
    123e:	6e 2f       	mov	r22, r30
    1240:	6f 93       	push	r22
    1242:	63 2f       	mov	r22, r19
    1244:	6f 93       	push	r22
    1246:	2f 93       	push	r18
    1248:	25 2f       	mov	r18, r21
    124a:	2f 93       	push	r18
    124c:	24 2f       	mov	r18, r20
    124e:	2f 93       	push	r18
    1250:	29 2f       	mov	r18, r25
    1252:	2f 93       	push	r18
    1254:	8f 93       	push	r24
    1256:	8c e6       	ldi	r24, 0x6C	; 108
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	89 2f       	mov	r24, r25
    125c:	8f 93       	push	r24
    125e:	8c e6       	ldi	r24, 0x6C	; 108
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	8f 93       	push	r24
    1264:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
    1268:	4d b7       	in	r20, 0x3d	; 61
    126a:	5e b7       	in	r21, 0x3e	; 62
    126c:	46 5f       	subi	r20, 0xF6	; 246
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    127a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    127e:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1282:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1286:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    128a:	20 e1       	ldi	r18, 0x10	; 16
    128c:	3e e0       	ldi	r19, 0x0E	; 14
    128e:	b9 01       	movw	r22, r18
    1290:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    1294:	9c 01       	movw	r18, r24
    1296:	a9 e8       	ldi	r26, 0x89	; 137
    1298:	b8 e8       	ldi	r27, 0x88	; 136
    129a:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
    129e:	9c 01       	movw	r18, r24
    12a0:	36 95       	lsr	r19
    12a2:	27 95       	ror	r18
    12a4:	32 95       	swap	r19
    12a6:	22 95       	swap	r18
    12a8:	2f 70       	andi	r18, 0x0F	; 15
    12aa:	23 27       	eor	r18, r19
    12ac:	3f 70       	andi	r19, 0x0F	; 15
    12ae:	23 27       	eor	r18, r19
    12b0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    12b4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    12b8:	40 e1       	ldi	r20, 0x10	; 16
    12ba:	5e e0       	ldi	r21, 0x0E	; 14
    12bc:	ba 01       	movw	r22, r20
    12be:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    12c2:	cb 01       	movw	r24, r22
    12c4:	ac 01       	movw	r20, r24
    12c6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <save_menu_select.1909>
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	19 f4       	brne	.+6      	; 0x12d4 <__stack+0x9d5>
    12ce:	88 e0       	ldi	r24, 0x08	; 8
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <__stack+0x9d9>
    12d4:	80 e2       	ldi	r24, 0x20	; 32
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	6f 2f       	mov	r22, r31
    12da:	6f 93       	push	r22
    12dc:	6e 2f       	mov	r22, r30
    12de:	6f 93       	push	r22
    12e0:	63 2f       	mov	r22, r19
    12e2:	6f 93       	push	r22
    12e4:	2f 93       	push	r18
    12e6:	25 2f       	mov	r18, r21
    12e8:	2f 93       	push	r18
    12ea:	24 2f       	mov	r18, r20
    12ec:	2f 93       	push	r18
    12ee:	29 2f       	mov	r18, r25
    12f0:	2f 93       	push	r18
    12f2:	8f 93       	push	r24
    12f4:	84 e8       	ldi	r24, 0x84	; 132
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	89 2f       	mov	r24, r25
    12fa:	8f 93       	push	r24
    12fc:	84 e8       	ldi	r24, 0x84	; 132
    12fe:	92 e0       	ldi	r25, 0x02	; 2
    1300:	8f 93       	push	r24
    1302:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
    1306:	8d b7       	in	r24, 0x3d	; 61
    1308:	9e b7       	in	r25, 0x3e	; 62
    130a:	0a 96       	adiw	r24, 0x0a	; 10
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    1316:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    131a:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    131e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1322:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    1326:	20 e1       	ldi	r18, 0x10	; 16
    1328:	3e e0       	ldi	r19, 0x0E	; 14
    132a:	b9 01       	movw	r22, r18
    132c:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    1330:	9c 01       	movw	r18, r24
    1332:	a9 e8       	ldi	r26, 0x89	; 137
    1334:	b8 e8       	ldi	r27, 0x88	; 136
    1336:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
    133a:	9c 01       	movw	r18, r24
    133c:	36 95       	lsr	r19
    133e:	27 95       	ror	r18
    1340:	32 95       	swap	r19
    1342:	22 95       	swap	r18
    1344:	2f 70       	andi	r18, 0x0F	; 15
    1346:	23 27       	eor	r18, r19
    1348:	3f 70       	andi	r19, 0x0F	; 15
    134a:	23 27       	eor	r18, r19
    134c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1350:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    1354:	40 e1       	ldi	r20, 0x10	; 16
    1356:	5e e0       	ldi	r21, 0x0E	; 14
    1358:	ba 01       	movw	r22, r20
    135a:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    135e:	cb 01       	movw	r24, r22
    1360:	ac 01       	movw	r20, r24
    1362:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <save_menu_select.1909>
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	19 f4       	brne	.+6      	; 0x1370 <__stack+0xa71>
    136a:	88 e0       	ldi	r24, 0x08	; 8
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <__stack+0xa75>
    1370:	80 e2       	ldi	r24, 0x20	; 32
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	6f 2f       	mov	r22, r31
    1376:	6f 93       	push	r22
    1378:	6e 2f       	mov	r22, r30
    137a:	6f 93       	push	r22
    137c:	63 2f       	mov	r22, r19
    137e:	6f 93       	push	r22
    1380:	2f 93       	push	r18
    1382:	25 2f       	mov	r18, r21
    1384:	2f 93       	push	r18
    1386:	24 2f       	mov	r18, r20
    1388:	2f 93       	push	r18
    138a:	29 2f       	mov	r18, r25
    138c:	2f 93       	push	r18
    138e:	8f 93       	push	r24
    1390:	8c e9       	ldi	r24, 0x9C	; 156
    1392:	92 e0       	ldi	r25, 0x02	; 2
    1394:	89 2f       	mov	r24, r25
    1396:	8f 93       	push	r24
    1398:	8c e9       	ldi	r24, 0x9C	; 156
    139a:	92 e0       	ldi	r25, 0x02	; 2
    139c:	8f 93       	push	r24
    139e:	0e 94 bb 10 	call	0x2176	; 0x2176 <lcd_printf>
    13a2:	ed b7       	in	r30, 0x3d	; 61
    13a4:	fe b7       	in	r31, 0x3e	; 62
    13a6:	3a 96       	adiw	r30, 0x0a	; 10
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
			break;
    13b2:	00 00       	nop

		default:
		;
	}
}
    13b4:	00 00       	nop
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <lcd_init>:
#include "wyk_lcd.h"

// inicializuje lcd
void lcd_init(void)
{
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	2e 97       	sbiw	r28, 0x0e	; 14
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
	LCD_RS_DDR |= LCD_RS;
    13da:	8a e2       	ldi	r24, 0x2A	; 42
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	2a e2       	ldi	r18, 0x2A	; 42
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	f9 01       	movw	r30, r18
    13e4:	20 81       	ld	r18, Z
    13e6:	21 60       	ori	r18, 0x01	; 1
    13e8:	fc 01       	movw	r30, r24
    13ea:	20 83       	st	Z, r18
	LCD_RS0;
    13ec:	8b e2       	ldi	r24, 0x2B	; 43
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	2b e2       	ldi	r18, 0x2B	; 43
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	f9 01       	movw	r30, r18
    13f6:	20 81       	ld	r18, Z
    13f8:	2e 7f       	andi	r18, 0xFE	; 254
    13fa:	fc 01       	movw	r30, r24
    13fc:	20 83       	st	Z, r18

	LCD_EN_DDR |= LCD_EN;
    13fe:	87 e2       	ldi	r24, 0x27	; 39
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	27 e2       	ldi	r18, 0x27	; 39
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	f9 01       	movw	r30, r18
    1408:	20 81       	ld	r18, Z
    140a:	20 61       	ori	r18, 0x10	; 16
    140c:	fc 01       	movw	r30, r24
    140e:	20 83       	st	Z, r18
	LCD_EN0;
    1410:	88 e2       	ldi	r24, 0x28	; 40
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	28 e2       	ldi	r18, 0x28	; 40
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	f9 01       	movw	r30, r18
    141a:	20 81       	ld	r18, Z
    141c:	2f 7e       	andi	r18, 0xEF	; 239
    141e:	fc 01       	movw	r30, r24
    1420:	20 83       	st	Z, r18

	LCD_D7_DDR |= LCD_D7;
    1422:	87 e2       	ldi	r24, 0x27	; 39
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	27 e2       	ldi	r18, 0x27	; 39
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	f9 01       	movw	r30, r18
    142c:	20 81       	ld	r18, Z
    142e:	21 60       	ori	r18, 0x01	; 1
    1430:	fc 01       	movw	r30, r24
    1432:	20 83       	st	Z, r18
	LCD_D6_DDR |= LCD_D6;
    1434:	87 e2       	ldi	r24, 0x27	; 39
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	27 e2       	ldi	r18, 0x27	; 39
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	f9 01       	movw	r30, r18
    143e:	20 81       	ld	r18, Z
    1440:	22 60       	ori	r18, 0x02	; 2
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
	LCD_D5_DDR |= LCD_D5;
    1446:	87 e2       	ldi	r24, 0x27	; 39
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	27 e2       	ldi	r18, 0x27	; 39
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	f9 01       	movw	r30, r18
    1450:	20 81       	ld	r18, Z
    1452:	24 60       	ori	r18, 0x04	; 4
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
	LCD_D4_DDR |= LCD_D4;
    1458:	87 e2       	ldi	r24, 0x27	; 39
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	27 e2       	ldi	r18, 0x27	; 39
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	f9 01       	movw	r30, r18
    1462:	20 81       	ld	r18, Z
    1464:	28 60       	ori	r18, 0x08	; 8
    1466:	fc 01       	movw	r30, r24
    1468:	20 83       	st	Z, r18

	LCD_D7_0;
    146a:	88 e2       	ldi	r24, 0x28	; 40
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	28 e2       	ldi	r18, 0x28	; 40
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	f9 01       	movw	r30, r18
    1474:	20 81       	ld	r18, Z
    1476:	2e 7f       	andi	r18, 0xFE	; 254
    1478:	fc 01       	movw	r30, r24
    147a:	20 83       	st	Z, r18
	LCD_D6_0;
    147c:	88 e2       	ldi	r24, 0x28	; 40
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	28 e2       	ldi	r18, 0x28	; 40
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	f9 01       	movw	r30, r18
    1486:	20 81       	ld	r18, Z
    1488:	2d 7f       	andi	r18, 0xFD	; 253
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18
	LCD_D5_0;
    148e:	88 e2       	ldi	r24, 0x28	; 40
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	28 e2       	ldi	r18, 0x28	; 40
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	f9 01       	movw	r30, r18
    1498:	20 81       	ld	r18, Z
    149a:	2b 7f       	andi	r18, 0xFB	; 251
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
	LCD_D4_0;
    14a0:	88 e2       	ldi	r24, 0x28	; 40
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	28 e2       	ldi	r18, 0x28	; 40
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	f9 01       	movw	r30, r18
    14aa:	20 81       	ld	r18, Z
    14ac:	27 7f       	andi	r18, 0xF7	; 247
    14ae:	fc 01       	movw	r30, r24
    14b0:	20 83       	st	Z, r18


	lcd_set_nibble(LCD_CMD_INIT>>4);
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 2a 0b 	call	0x1654	; 0x1654 <lcd_set_nibble>
	LCD_EN1;
    14ba:	88 e2       	ldi	r24, 0x28	; 40
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	28 e2       	ldi	r18, 0x28	; 40
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	f9 01       	movw	r30, r18
    14c4:	20 81       	ld	r18, Z
    14c6:	20 61       	ori	r18, 0x10	; 16
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 e0       	ldi	r26, 0x00	; 0
    14d2:	b0 e4       	ldi	r27, 0x40	; 64
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	9a 83       	std	Y+2, r25	; 0x02
    14d8:	ab 83       	std	Y+3, r26	; 0x03
    14da:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e8       	ldi	r19, 0x80	; 128
    14e0:	4b eb       	ldi	r20, 0xBB	; 187
    14e2:	55 e4       	ldi	r21, 0x45	; 69
    14e4:	69 81       	ldd	r22, Y+1	; 0x01
    14e6:	7a 81       	ldd	r23, Y+2	; 0x02
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	af 83       	std	Y+7, r26	; 0x07
    14fa:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	6d 81       	ldd	r22, Y+5	; 0x05
    1506:	7e 81       	ldd	r23, Y+6	; 0x06
    1508:	8f 81       	ldd	r24, Y+7	; 0x07
    150a:	98 85       	ldd	r25, Y+8	; 0x08
    150c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    1510:	88 23       	and	r24, r24
    1512:	2c f4       	brge	.+10     	; 0x151e <lcd_init+0x158>
		__ticks = 1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9a 87       	std	Y+10, r25	; 0x0a
    151a:	89 87       	std	Y+9, r24	; 0x09
    151c:	3f c0       	rjmp	.+126    	; 0x159c <lcd_init+0x1d6>
	else if (__tmp > 65535)
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	6d 81       	ldd	r22, Y+5	; 0x05
    1528:	7e 81       	ldd	r23, Y+6	; 0x06
    152a:	8f 81       	ldd	r24, Y+7	; 0x07
    152c:	98 85       	ldd	r25, Y+8	; 0x08
    152e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    1532:	18 16       	cp	r1, r24
    1534:	4c f5       	brge	.+82     	; 0x1588 <lcd_init+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	69 81       	ldd	r22, Y+1	; 0x01
    1540:	7a 81       	ldd	r23, Y+2	; 0x02
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	9c 81       	ldd	r25, Y+4	; 0x04
    1546:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9a 87       	std	Y+10, r25	; 0x0a
    155c:	89 87       	std	Y+9, r24	; 0x09
    155e:	0f c0       	rjmp	.+30     	; 0x157e <lcd_init+0x1b8>
    1560:	88 e5       	ldi	r24, 0x58	; 88
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	9c 87       	std	Y+12, r25	; 0x0c
    1566:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1568:	8b 85       	ldd	r24, Y+11	; 0x0b
    156a:	9c 85       	ldd	r25, Y+12	; 0x0c
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <lcd_init+0x1a6>
    1570:	9c 87       	std	Y+12, r25	; 0x0c
    1572:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1574:	89 85       	ldd	r24, Y+9	; 0x09
    1576:	9a 85       	ldd	r25, Y+10	; 0x0a
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	9a 87       	std	Y+10, r25	; 0x0a
    157c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	89 2b       	or	r24, r25
    1584:	69 f7       	brne	.-38     	; 0x1560 <lcd_init+0x19a>
    1586:	14 c0       	rjmp	.+40     	; 0x15b0 <lcd_init+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1588:	6d 81       	ldd	r22, Y+5	; 0x05
    158a:	7e 81       	ldd	r23, Y+6	; 0x06
    158c:	8f 81       	ldd	r24, Y+7	; 0x07
    158e:	98 85       	ldd	r25, Y+8	; 0x08
    1590:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9a 87       	std	Y+10, r25	; 0x0a
    159a:	89 87       	std	Y+9, r24	; 0x09
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	9e 87       	std	Y+14, r25	; 0x0e
    15a2:	8d 87       	std	Y+13, r24	; 0x0d
    15a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <lcd_init+0x1e2>
    15ac:	9e 87       	std	Y+14, r25	; 0x0e
    15ae:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
	LCD_EN0;
    15b0:	88 e2       	ldi	r24, 0x28	; 40
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	28 e2       	ldi	r18, 0x28	; 40
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	f9 01       	movw	r30, r18
    15ba:	20 81       	ld	r18, Z
    15bc:	2f 7e       	andi	r18, 0xEF	; 239
    15be:	fc 01       	movw	r30, r24
    15c0:	20 83       	st	Z, r18
	lcd_cmd(LCD_CMD_INIT);
    15c2:	88 e2       	ldi	r24, 0x28	; 40
    15c4:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
	lcd_cmd(LCD_CMD_CURS);
    15c8:	8c e0       	ldi	r24, 0x0C	; 12
    15ca:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
	lcd_cmd(LCD_CMD_CLR);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>

	// přidání vlastních znaků
	lcd_cmd(LCD_CMD_W_CGRAM);
    15d4:	80 e4       	ldi	r24, 0x40	; 64
    15d6:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
	// trojuhelnik
	lcd_put(0b00010000);
    15da:	80 e1       	ldi	r24, 0x10	; 16
    15dc:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011000);
    15e0:	88 e1       	ldi	r24, 0x18	; 24
    15e2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011100);
    15e6:	8c e1       	ldi	r24, 0x1C	; 28
    15e8:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011110);
    15ec:	8e e1       	ldi	r24, 0x1E	; 30
    15ee:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011100);
    15f2:	8c e1       	ldi	r24, 0x1C	; 28
    15f4:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011000);
    15f8:	88 e1       	ldi	r24, 0x18	; 24
    15fa:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00010000);
    15fe:	80 e1       	ldi	r24, 0x10	; 16
    1600:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00000000);
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	// bar
	lcd_put(0b00000000);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00000000);
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011111);
    1616:	8f e1       	ldi	r24, 0x1F	; 31
    1618:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011111);
    161c:	8f e1       	ldi	r24, 0x1F	; 31
    161e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011111);
    1622:	8f e1       	ldi	r24, 0x1F	; 31
    1624:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00011111);
    1628:	8f e1       	ldi	r24, 0x1F	; 31
    162a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00000000);
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	lcd_put(0b00000000);
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	
	// přepnutí na zápis do zobrazovací paměti
	lcd_cmd(LCD_CMD_W_DDRAM);
    163a:	80 e8       	ldi	r24, 0x80	; 128
    163c:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
}
    1640:	00 00       	nop
    1642:	2e 96       	adiw	r28, 0x0e	; 14
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <lcd_set_nibble>:

// posílat napřed msn a pak lsn
void lcd_set_nibble(uint8_t nibble)
{
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	1f 92       	push	r1
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	89 83       	std	Y+1, r24	; 0x01
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	88 70       	andi	r24, 0x08	; 8
    1668:	99 27       	eor	r25, r25
    166a:	89 2b       	or	r24, r25
    166c:	51 f0       	breq	.+20     	; 0x1682 <lcd_set_nibble+0x2e>
    166e:	88 e2       	ldi	r24, 0x28	; 40
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	28 e2       	ldi	r18, 0x28	; 40
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	f9 01       	movw	r30, r18
    1678:	20 81       	ld	r18, Z
    167a:	21 60       	ori	r18, 0x01	; 1
    167c:	fc 01       	movw	r30, r24
    167e:	20 83       	st	Z, r18
    1680:	09 c0       	rjmp	.+18     	; 0x1694 <lcd_set_nibble+0x40>
    1682:	88 e2       	ldi	r24, 0x28	; 40
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	28 e2       	ldi	r18, 0x28	; 40
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	f9 01       	movw	r30, r18
    168c:	20 81       	ld	r18, Z
    168e:	2e 7f       	andi	r18, 0xFE	; 254
    1690:	fc 01       	movw	r30, r24
    1692:	20 83       	st	Z, r18
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	88 2f       	mov	r24, r24
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	84 70       	andi	r24, 0x04	; 4
    169c:	99 27       	eor	r25, r25
    169e:	89 2b       	or	r24, r25
    16a0:	51 f0       	breq	.+20     	; 0x16b6 <lcd_set_nibble+0x62>
    16a2:	88 e2       	ldi	r24, 0x28	; 40
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	28 e2       	ldi	r18, 0x28	; 40
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	f9 01       	movw	r30, r18
    16ac:	20 81       	ld	r18, Z
    16ae:	22 60       	ori	r18, 0x02	; 2
    16b0:	fc 01       	movw	r30, r24
    16b2:	20 83       	st	Z, r18
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <lcd_set_nibble+0x74>
    16b6:	88 e2       	ldi	r24, 0x28	; 40
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	28 e2       	ldi	r18, 0x28	; 40
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	f9 01       	movw	r30, r18
    16c0:	20 81       	ld	r18, Z
    16c2:	2d 7f       	andi	r18, 0xFD	; 253
    16c4:	fc 01       	movw	r30, r24
    16c6:	20 83       	st	Z, r18
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	88 2f       	mov	r24, r24
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	82 70       	andi	r24, 0x02	; 2
    16d0:	99 27       	eor	r25, r25
    16d2:	89 2b       	or	r24, r25
    16d4:	51 f0       	breq	.+20     	; 0x16ea <lcd_set_nibble+0x96>
    16d6:	88 e2       	ldi	r24, 0x28	; 40
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	28 e2       	ldi	r18, 0x28	; 40
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	f9 01       	movw	r30, r18
    16e0:	20 81       	ld	r18, Z
    16e2:	24 60       	ori	r18, 0x04	; 4
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 83       	st	Z, r18
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <lcd_set_nibble+0xa8>
    16ea:	88 e2       	ldi	r24, 0x28	; 40
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	28 e2       	ldi	r18, 0x28	; 40
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	f9 01       	movw	r30, r18
    16f4:	20 81       	ld	r18, Z
    16f6:	2b 7f       	andi	r18, 0xFB	; 251
    16f8:	fc 01       	movw	r30, r24
    16fa:	20 83       	st	Z, r18
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	81 70       	andi	r24, 0x01	; 1
    1704:	99 27       	eor	r25, r25
    1706:	89 2b       	or	r24, r25
    1708:	51 f0       	breq	.+20     	; 0x171e <lcd_set_nibble+0xca>
    170a:	88 e2       	ldi	r24, 0x28	; 40
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	28 e2       	ldi	r18, 0x28	; 40
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	f9 01       	movw	r30, r18
    1714:	20 81       	ld	r18, Z
    1716:	28 60       	ori	r18, 0x08	; 8
    1718:	fc 01       	movw	r30, r24
    171a:	20 83       	st	Z, r18
}
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <lcd_set_nibble+0xdc>
void lcd_set_nibble(uint8_t nibble)
{
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    171e:	88 e2       	ldi	r24, 0x28	; 40
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	28 e2       	ldi	r18, 0x28	; 40
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	f9 01       	movw	r30, r18
    1728:	20 81       	ld	r18, Z
    172a:	27 7f       	andi	r18, 0xF7	; 247
    172c:	fc 01       	movw	r30, r24
    172e:	20 83       	st	Z, r18
}
    1730:	00 00       	nop
    1732:	0f 90       	pop	r0
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <lcd_cmd>:

// pošle lcd instrukci
void lcd_cmd(uint8_t cmd)
{
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	6d 97       	sbiw	r28, 0x1d	; 29
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_set_nibble(cmd>>4);
    1750:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1752:	82 95       	swap	r24
    1754:	8f 70       	andi	r24, 0x0F	; 15
    1756:	0e 94 2a 0b 	call	0x1654	; 0x1654 <lcd_set_nibble>
	LCD_EN1;
    175a:	88 e2       	ldi	r24, 0x28	; 40
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	28 e2       	ldi	r18, 0x28	; 40
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	f9 01       	movw	r30, r18
    1764:	20 81       	ld	r18, Z
    1766:	20 61       	ori	r18, 0x10	; 16
    1768:	fc 01       	movw	r30, r24
    176a:	20 83       	st	Z, r18
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e4       	ldi	r26, 0x40	; 64
    1772:	b0 e4       	ldi	r27, 0x40	; 64
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	ab 83       	std	Y+3, r26	; 0x03
    177a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e8       	ldi	r19, 0x80	; 128
    1780:	4b eb       	ldi	r20, 0xBB	; 187
    1782:	55 e4       	ldi	r21, 0x45	; 69
    1784:	69 81       	ldd	r22, Y+1	; 0x01
    1786:	7a 81       	ldd	r23, Y+2	; 0x02
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	9c 81       	ldd	r25, Y+4	; 0x04
    178c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	8b 8b       	std	Y+19, r24	; 0x13
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	ad 8b       	std	Y+21, r26	; 0x15
    179a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	6b 89       	ldd	r22, Y+19	; 0x13
    17a6:	7c 89       	ldd	r23, Y+20	; 0x14
    17a8:	8d 89       	ldd	r24, Y+21	; 0x15
    17aa:	9e 89       	ldd	r25, Y+22	; 0x16
    17ac:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <lcd_cmd+0x84>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	98 8f       	std	Y+24, r25	; 0x18
    17ba:	8f 8b       	std	Y+23, r24	; 0x17
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <lcd_cmd+0x102>
	else if (__tmp > 65535)
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	6b 89       	ldd	r22, Y+19	; 0x13
    17c8:	7c 89       	ldd	r23, Y+20	; 0x14
    17ca:	8d 89       	ldd	r24, Y+21	; 0x15
    17cc:	9e 89       	ldd	r25, Y+22	; 0x16
    17ce:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <lcd_cmd+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	69 81       	ldd	r22, Y+1	; 0x01
    17e0:	7a 81       	ldd	r23, Y+2	; 0x02
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	98 8f       	std	Y+24, r25	; 0x18
    17fc:	8f 8b       	std	Y+23, r24	; 0x17
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <lcd_cmd+0xe4>
    1800:	88 e5       	ldi	r24, 0x58	; 88
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	9a 8f       	std	Y+26, r25	; 0x1a
    1806:	89 8f       	std	Y+25, r24	; 0x19
    1808:	89 8d       	ldd	r24, Y+25	; 0x19
    180a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <lcd_cmd+0xd2>
    1810:	9a 8f       	std	Y+26, r25	; 0x1a
    1812:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8f 89       	ldd	r24, Y+23	; 0x17
    1816:	98 8d       	ldd	r25, Y+24	; 0x18
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	98 8f       	std	Y+24, r25	; 0x18
    181c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8f 89       	ldd	r24, Y+23	; 0x17
    1820:	98 8d       	ldd	r25, Y+24	; 0x18
    1822:	89 2b       	or	r24, r25
    1824:	69 f7       	brne	.-38     	; 0x1800 <lcd_cmd+0xc6>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <lcd_cmd+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	6b 89       	ldd	r22, Y+19	; 0x13
    182a:	7c 89       	ldd	r23, Y+20	; 0x14
    182c:	8d 89       	ldd	r24, Y+21	; 0x15
    182e:	9e 89       	ldd	r25, Y+22	; 0x16
    1830:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	98 8f       	std	Y+24, r25	; 0x18
    183a:	8f 8b       	std	Y+23, r24	; 0x17
    183c:	8f 89       	ldd	r24, Y+23	; 0x17
    183e:	98 8d       	ldd	r25, Y+24	; 0x18
    1840:	9c 8f       	std	Y+28, r25	; 0x1c
    1842:	8b 8f       	std	Y+27, r24	; 0x1b
    1844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <lcd_cmd+0x10e>
    184c:	9c 8f       	std	Y+28, r25	; 0x1c
    184e:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3);
	LCD_EN0;	
    1850:	88 e2       	ldi	r24, 0x28	; 40
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	28 e2       	ldi	r18, 0x28	; 40
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	f9 01       	movw	r30, r18
    185a:	20 81       	ld	r18, Z
    185c:	2f 7e       	andi	r18, 0xEF	; 239
    185e:	fc 01       	movw	r30, r24
    1860:	20 83       	st	Z, r18
	lcd_set_nibble(cmd);
    1862:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1864:	0e 94 2a 0b 	call	0x1654	; 0x1654 <lcd_set_nibble>
	LCD_EN1;
    1868:	88 e2       	ldi	r24, 0x28	; 40
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	28 e2       	ldi	r18, 0x28	; 40
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	f9 01       	movw	r30, r18
    1872:	20 81       	ld	r18, Z
    1874:	20 61       	ori	r18, 0x10	; 16
    1876:	fc 01       	movw	r30, r24
    1878:	20 83       	st	Z, r18
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e4       	ldi	r26, 0x40	; 64
    1880:	b0 e4       	ldi	r27, 0x40	; 64
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	af 83       	std	Y+7, r26	; 0x07
    1888:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e8       	ldi	r19, 0x80	; 128
    188e:	4b eb       	ldi	r20, 0xBB	; 187
    1890:	55 e4       	ldi	r21, 0x45	; 69
    1892:	6d 81       	ldd	r22, Y+5	; 0x05
    1894:	7e 81       	ldd	r23, Y+6	; 0x06
    1896:	8f 81       	ldd	r24, Y+7	; 0x07
    1898:	98 85       	ldd	r25, Y+8	; 0x08
    189a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	89 87       	std	Y+9, r24	; 0x09
    18a4:	9a 87       	std	Y+10, r25	; 0x0a
    18a6:	ab 87       	std	Y+11, r26	; 0x0b
    18a8:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e8       	ldi	r20, 0x80	; 128
    18b0:	5f e3       	ldi	r21, 0x3F	; 63
    18b2:	69 85       	ldd	r22, Y+9	; 0x09
    18b4:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    18ba:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <lcd_cmd+0x192>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9e 87       	std	Y+14, r25	; 0x0e
    18c8:	8d 87       	std	Y+13, r24	; 0x0d
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <lcd_cmd+0x210>
	else if (__tmp > 65535)
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	3f ef       	ldi	r19, 0xFF	; 255
    18d0:	4f e7       	ldi	r20, 0x7F	; 127
    18d2:	57 e4       	ldi	r21, 0x47	; 71
    18d4:	69 85       	ldd	r22, Y+9	; 0x09
    18d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    18d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    18da:	9c 85       	ldd	r25, Y+12	; 0x0c
    18dc:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <lcd_cmd+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	6d 81       	ldd	r22, Y+5	; 0x05
    18ee:	7e 81       	ldd	r23, Y+6	; 0x06
    18f0:	8f 81       	ldd	r24, Y+7	; 0x07
    18f2:	98 85       	ldd	r25, Y+8	; 0x08
    18f4:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9e 87       	std	Y+14, r25	; 0x0e
    190a:	8d 87       	std	Y+13, r24	; 0x0d
    190c:	0f c0       	rjmp	.+30     	; 0x192c <lcd_cmd+0x1f2>
    190e:	88 e5       	ldi	r24, 0x58	; 88
    1910:	92 e0       	ldi	r25, 0x02	; 2
    1912:	98 8b       	std	Y+16, r25	; 0x10
    1914:	8f 87       	std	Y+15, r24	; 0x0f
    1916:	8f 85       	ldd	r24, Y+15	; 0x0f
    1918:	98 89       	ldd	r25, Y+16	; 0x10
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <lcd_cmd+0x1e0>
    191e:	98 8b       	std	Y+16, r25	; 0x10
    1920:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	9e 85       	ldd	r25, Y+14	; 0x0e
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9e 87       	std	Y+14, r25	; 0x0e
    192a:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8d 85       	ldd	r24, Y+13	; 0x0d
    192e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1930:	89 2b       	or	r24, r25
    1932:	69 f7       	brne	.-38     	; 0x190e <lcd_cmd+0x1d4>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <lcd_cmd+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	69 85       	ldd	r22, Y+9	; 0x09
    1938:	7a 85       	ldd	r23, Y+10	; 0x0a
    193a:	8b 85       	ldd	r24, Y+11	; 0x0b
    193c:	9c 85       	ldd	r25, Y+12	; 0x0c
    193e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9e 87       	std	Y+14, r25	; 0x0e
    1948:	8d 87       	std	Y+13, r24	; 0x0d
    194a:	8d 85       	ldd	r24, Y+13	; 0x0d
    194c:	9e 85       	ldd	r25, Y+14	; 0x0e
    194e:	9a 8b       	std	Y+18, r25	; 0x12
    1950:	89 8b       	std	Y+17, r24	; 0x11
    1952:	89 89       	ldd	r24, Y+17	; 0x11
    1954:	9a 89       	ldd	r25, Y+18	; 0x12
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <lcd_cmd+0x21c>
    195a:	9a 8b       	std	Y+18, r25	; 0x12
    195c:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(3);
	LCD_EN0;
    195e:	88 e2       	ldi	r24, 0x28	; 40
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	28 e2       	ldi	r18, 0x28	; 40
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	f9 01       	movw	r30, r18
    1968:	20 81       	ld	r18, Z
    196a:	2f 7e       	andi	r18, 0xEF	; 239
    196c:	fc 01       	movw	r30, r24
    196e:	20 83       	st	Z, r18
}
    1970:	00 00       	nop
    1972:	6d 96       	adiw	r28, 0x1d	; 29
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <lcd_put>:

// pošle lcd znak
void lcd_put(char znak)
{
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	c1 54       	subi	r28, 0x41	; 65
    198e:	d1 09       	sbc	r29, r1
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	9e 01       	movw	r18, r28
    199c:	2f 5b       	subi	r18, 0xBF	; 191
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	f9 01       	movw	r30, r18
    19a2:	80 83       	st	Z, r24
	LCD_RS1;
    19a4:	8b e2       	ldi	r24, 0x2B	; 43
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	2b e2       	ldi	r18, 0x2B	; 43
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	f9 01       	movw	r30, r18
    19ae:	20 81       	ld	r18, Z
    19b0:	21 60       	ori	r18, 0x01	; 1
    19b2:	fc 01       	movw	r30, r24
    19b4:	20 83       	st	Z, r18
	lcd_set_nibble(znak>>4);
    19b6:	ce 01       	movw	r24, r28
    19b8:	8f 5b       	subi	r24, 0xBF	; 191
    19ba:	9f 4f       	sbci	r25, 0xFF	; 255
    19bc:	fc 01       	movw	r30, r24
    19be:	80 81       	ld	r24, Z
    19c0:	82 95       	swap	r24
    19c2:	8f 70       	andi	r24, 0x0F	; 15
    19c4:	0e 94 2a 0b 	call	0x1654	; 0x1654 <lcd_set_nibble>
	LCD_EN1;
    19c8:	88 e2       	ldi	r24, 0x28	; 40
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	28 e2       	ldi	r18, 0x28	; 40
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	f9 01       	movw	r30, r18
    19d2:	20 81       	ld	r18, Z
    19d4:	20 61       	ori	r18, 0x10	; 16
    19d6:	fc 01       	movw	r30, r24
    19d8:	20 83       	st	Z, r18
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 e2       	ldi	r26, 0x20	; 32
    19e0:	b2 e4       	ldi	r27, 0x42	; 66
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	ab 83       	std	Y+3, r26	; 0x03
    19e8:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	69 81       	ldd	r22, Y+1	; 0x01
    19f4:	7a 81       	ldd	r23, Y+2	; 0x02
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8d a3       	std	Y+37, r24	; 0x25
    1a04:	9e a3       	std	Y+38, r25	; 0x26
    1a06:	af a3       	std	Y+39, r26	; 0x27
    1a08:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 ec       	ldi	r20, 0xC0	; 192
    1a10:	50 e4       	ldi	r21, 0x40	; 64
    1a12:	69 81       	ldd	r22, Y+1	; 0x01
    1a14:	7a 81       	ldd	r23, Y+2	; 0x02
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	89 a7       	std	Y+41, r24	; 0x29
    1a24:	9a a7       	std	Y+42, r25	; 0x2a
    1a26:	ab a7       	std	Y+43, r26	; 0x2b
    1a28:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	6d a1       	ldd	r22, Y+37	; 0x25
    1a34:	7e a1       	ldd	r23, Y+38	; 0x26
    1a36:	8f a1       	ldd	r24, Y+39	; 0x27
    1a38:	98 a5       	ldd	r25, Y+40	; 0x28
    1a3a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	1c f4       	brge	.+6      	; 0x1a48 <lcd_put+0xc4>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	8d a7       	std	Y+45, r24	; 0x2d
    1a46:	b2 c0       	rjmp	.+356    	; 0x1bac <lcd_put+0x228>
	else if (__tmp2 > 65535)
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	69 a5       	ldd	r22, Y+41	; 0x29
    1a52:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	0c f0       	brlt	.+2      	; 0x1a62 <lcd_put+0xde>
    1a60:	7b c0       	rjmp	.+246    	; 0x1b58 <lcd_put+0x1d4>
	{
		_delay_ms(__us / 1000.0);
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	4a e7       	ldi	r20, 0x7A	; 122
    1a68:	54 e4       	ldi	r21, 0x44	; 68
    1a6a:	69 81       	ldd	r22, Y+1	; 0x01
    1a6c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8e a7       	std	Y+46, r24	; 0x2e
    1a7c:	9f a7       	std	Y+47, r25	; 0x2f
    1a7e:	a8 ab       	std	Y+48, r26	; 0x30
    1a80:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e8       	ldi	r19, 0x80	; 128
    1a86:	4b eb       	ldi	r20, 0xBB	; 187
    1a88:	55 e4       	ldi	r21, 0x45	; 69
    1a8a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a8c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a8e:	88 a9       	ldd	r24, Y+48	; 0x30
    1a90:	99 a9       	ldd	r25, Y+49	; 0x31
    1a92:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8a ab       	std	Y+50, r24	; 0x32
    1a9c:	9b ab       	std	Y+51, r25	; 0x33
    1a9e:	ac ab       	std	Y+52, r26	; 0x34
    1aa0:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	6a a9       	ldd	r22, Y+50	; 0x32
    1aac:	7b a9       	ldd	r23, Y+51	; 0x33
    1aae:	8c a9       	ldd	r24, Y+52	; 0x34
    1ab0:	9d a9       	ldd	r25, Y+53	; 0x35
    1ab2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <lcd_put+0x140>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9f ab       	std	Y+55, r25	; 0x37
    1ac0:	8e ab       	std	Y+54, r24	; 0x36
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <lcd_put+0x1be>
	else if (__tmp > 65535)
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	6a a9       	ldd	r22, Y+50	; 0x32
    1ace:	7b a9       	ldd	r23, Y+51	; 0x33
    1ad0:	8c a9       	ldd	r24, Y+52	; 0x34
    1ad2:	9d a9       	ldd	r25, Y+53	; 0x35
    1ad4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <lcd_put+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e2       	ldi	r20, 0x20	; 32
    1ae2:	51 e4       	ldi	r21, 0x41	; 65
    1ae4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ae6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ae8:	88 a9       	ldd	r24, Y+48	; 0x30
    1aea:	99 a9       	ldd	r25, Y+49	; 0x31
    1aec:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9f ab       	std	Y+55, r25	; 0x37
    1b02:	8e ab       	std	Y+54, r24	; 0x36
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <lcd_put+0x1a0>
    1b06:	88 e5       	ldi	r24, 0x58	; 88
    1b08:	92 e0       	ldi	r25, 0x02	; 2
    1b0a:	99 af       	std	Y+57, r25	; 0x39
    1b0c:	88 af       	std	Y+56, r24	; 0x38
    1b0e:	88 ad       	ldd	r24, Y+56	; 0x38
    1b10:	99 ad       	ldd	r25, Y+57	; 0x39
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <lcd_put+0x18e>
    1b16:	99 af       	std	Y+57, r25	; 0x39
    1b18:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8e a9       	ldd	r24, Y+54	; 0x36
    1b1c:	9f a9       	ldd	r25, Y+55	; 0x37
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9f ab       	std	Y+55, r25	; 0x37
    1b22:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8e a9       	ldd	r24, Y+54	; 0x36
    1b26:	9f a9       	ldd	r25, Y+55	; 0x37
    1b28:	89 2b       	or	r24, r25
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <lcd_put+0x182>
    1b2c:	3f c0       	rjmp	.+126    	; 0x1bac <lcd_put+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	6a a9       	ldd	r22, Y+50	; 0x32
    1b30:	7b a9       	ldd	r23, Y+51	; 0x33
    1b32:	8c a9       	ldd	r24, Y+52	; 0x34
    1b34:	9d a9       	ldd	r25, Y+53	; 0x35
    1b36:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9f ab       	std	Y+55, r25	; 0x37
    1b40:	8e ab       	std	Y+54, r24	; 0x36
    1b42:	8e a9       	ldd	r24, Y+54	; 0x36
    1b44:	9f a9       	ldd	r25, Y+55	; 0x37
    1b46:	9b af       	std	Y+59, r25	; 0x3b
    1b48:	8a af       	std	Y+58, r24	; 0x3a
    1b4a:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b4c:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <lcd_put+0x1ca>
    1b52:	9b af       	std	Y+59, r25	; 0x3b
    1b54:	8a af       	std	Y+58, r24	; 0x3a
    1b56:	2a c0       	rjmp	.+84     	; 0x1bac <lcd_put+0x228>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	53 e4       	ldi	r21, 0x43	; 67
    1b60:	6d a1       	ldd	r22, Y+37	; 0x25
    1b62:	7e a1       	ldd	r23, Y+38	; 0x26
    1b64:	8f a1       	ldd	r24, Y+39	; 0x27
    1b66:	98 a5       	ldd	r25, Y+40	; 0x28
    1b68:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	ac f4       	brge	.+42     	; 0x1b9a <lcd_put+0x216>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1b70:	69 a5       	ldd	r22, Y+41	; 0x29
    1b72:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b78:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9d af       	std	Y+61, r25	; 0x3d
    1b82:	8c af       	std	Y+60, r24	; 0x3c
    1b84:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b86:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b88:	9f af       	std	Y+63, r25	; 0x3f
    1b8a:	8e af       	std	Y+62, r24	; 0x3e
    1b8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <lcd_put+0x20c>
    1b94:	9f af       	std	Y+63, r25	; 0x3f
    1b96:	8e af       	std	Y+62, r24	; 0x3e
    1b98:	1c c0       	rjmp	.+56     	; 0x1bd2 <lcd_put+0x24e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b9a:	6d a1       	ldd	r22, Y+37	; 0x25
    1b9c:	7e a1       	ldd	r23, Y+38	; 0x26
    1b9e:	8f a1       	ldd	r24, Y+39	; 0x27
    1ba0:	98 a5       	ldd	r25, Y+40	; 0x28
    1ba2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	8d a7       	std	Y+45, r24	; 0x2d
    1bac:	2d a5       	ldd	r18, Y+45	; 0x2d
    1bae:	ce 01       	movw	r24, r28
    1bb0:	80 5c       	subi	r24, 0xC0	; 192
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bb8:	ce 01       	movw	r24, r28
    1bba:	80 5c       	subi	r24, 0xC0	; 192
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	2a 95       	dec	r18
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <lcd_put+0x240>
    1bc8:	ce 01       	movw	r24, r28
    1bca:	80 5c       	subi	r24, 0xC0	; 192
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	fc 01       	movw	r30, r24
    1bd0:	20 83       	st	Z, r18
	_delay_us(40);
	LCD_EN0;
    1bd2:	88 e2       	ldi	r24, 0x28	; 40
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	28 e2       	ldi	r18, 0x28	; 40
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	f9 01       	movw	r30, r18
    1bdc:	20 81       	ld	r18, Z
    1bde:	2f 7e       	andi	r18, 0xEF	; 239
    1be0:	fc 01       	movw	r30, r24
    1be2:	20 83       	st	Z, r18
	lcd_set_nibble(znak);
    1be4:	ce 01       	movw	r24, r28
    1be6:	8f 5b       	subi	r24, 0xBF	; 191
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	fc 01       	movw	r30, r24
    1bec:	80 81       	ld	r24, Z
    1bee:	0e 94 2a 0b 	call	0x1654	; 0x1654 <lcd_set_nibble>
	LCD_EN1;
    1bf2:	88 e2       	ldi	r24, 0x28	; 40
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	28 e2       	ldi	r18, 0x28	; 40
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	f9 01       	movw	r30, r18
    1bfc:	20 81       	ld	r18, Z
    1bfe:	20 61       	ori	r18, 0x10	; 16
    1c00:	fc 01       	movw	r30, r24
    1c02:	20 83       	st	Z, r18
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a0 e2       	ldi	r26, 0x20	; 32
    1c0a:	b2 e4       	ldi	r27, 0x42	; 66
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	af 83       	std	Y+7, r26	; 0x07
    1c12:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c1e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c20:	8f 81       	ldd	r24, Y+7	; 0x07
    1c22:	98 85       	ldd	r25, Y+8	; 0x08
    1c24:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	89 87       	std	Y+9, r24	; 0x09
    1c2e:	9a 87       	std	Y+10, r25	; 0x0a
    1c30:	ab 87       	std	Y+11, r26	; 0x0b
    1c32:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 ec       	ldi	r20, 0xC0	; 192
    1c3a:	50 e4       	ldi	r21, 0x40	; 64
    1c3c:	6d 81       	ldd	r22, Y+5	; 0x05
    1c3e:	7e 81       	ldd	r23, Y+6	; 0x06
    1c40:	8f 81       	ldd	r24, Y+7	; 0x07
    1c42:	98 85       	ldd	r25, Y+8	; 0x08
    1c44:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8d 87       	std	Y+13, r24	; 0x0d
    1c4e:	9e 87       	std	Y+14, r25	; 0x0e
    1c50:	af 87       	std	Y+15, r26	; 0x0f
    1c52:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	69 85       	ldd	r22, Y+9	; 0x09
    1c5e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c60:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c62:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c64:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    1c68:	88 23       	and	r24, r24
    1c6a:	1c f4       	brge	.+6      	; 0x1c72 <lcd_put+0x2ee>
		__ticks = 1;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	89 8b       	std	Y+17, r24	; 0x11
    1c70:	b2 c0       	rjmp	.+356    	; 0x1dd6 <lcd_put+0x452>
	else if (__tmp2 > 65535)
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c7c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c80:	98 89       	ldd	r25, Y+16	; 0x10
    1c82:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    1c86:	18 16       	cp	r1, r24
    1c88:	0c f0       	brlt	.+2      	; 0x1c8c <lcd_put+0x308>
    1c8a:	7b c0       	rjmp	.+246    	; 0x1d82 <lcd_put+0x3fe>
	{
		_delay_ms(__us / 1000.0);
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	4a e7       	ldi	r20, 0x7A	; 122
    1c92:	54 e4       	ldi	r21, 0x44	; 68
    1c94:	6d 81       	ldd	r22, Y+5	; 0x05
    1c96:	7e 81       	ldd	r23, Y+6	; 0x06
    1c98:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9a:	98 85       	ldd	r25, Y+8	; 0x08
    1c9c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	8a 8b       	std	Y+18, r24	; 0x12
    1ca6:	9b 8b       	std	Y+19, r25	; 0x13
    1ca8:	ac 8b       	std	Y+20, r26	; 0x14
    1caa:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e8       	ldi	r19, 0x80	; 128
    1cb0:	4b eb       	ldi	r20, 0xBB	; 187
    1cb2:	55 e4       	ldi	r21, 0x45	; 69
    1cb4:	6a 89       	ldd	r22, Y+18	; 0x12
    1cb6:	7b 89       	ldd	r23, Y+19	; 0x13
    1cb8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cba:	9d 89       	ldd	r25, Y+21	; 0x15
    1cbc:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8e 8b       	std	Y+22, r24	; 0x16
    1cc6:	9f 8b       	std	Y+23, r25	; 0x17
    1cc8:	a8 8f       	std	Y+24, r26	; 0x18
    1cca:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	6e 89       	ldd	r22, Y+22	; 0x16
    1cd6:	7f 89       	ldd	r23, Y+23	; 0x17
    1cd8:	88 8d       	ldd	r24, Y+24	; 0x18
    1cda:	99 8d       	ldd	r25, Y+25	; 0x19
    1cdc:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <lcd_put+0x36a>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9b 8f       	std	Y+27, r25	; 0x1b
    1cea:	8a 8f       	std	Y+26, r24	; 0x1a
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <lcd_put+0x3e8>
	else if (__tmp > 65535)
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	6e 89       	ldd	r22, Y+22	; 0x16
    1cf8:	7f 89       	ldd	r23, Y+23	; 0x17
    1cfa:	88 8d       	ldd	r24, Y+24	; 0x18
    1cfc:	99 8d       	ldd	r25, Y+25	; 0x19
    1cfe:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <lcd_put+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	6a 89       	ldd	r22, Y+18	; 0x12
    1d10:	7b 89       	ldd	r23, Y+19	; 0x13
    1d12:	8c 89       	ldd	r24, Y+20	; 0x14
    1d14:	9d 89       	ldd	r25, Y+21	; 0x15
    1d16:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9b 8f       	std	Y+27, r25	; 0x1b
    1d2c:	8a 8f       	std	Y+26, r24	; 0x1a
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <lcd_put+0x3ca>
    1d30:	88 e5       	ldi	r24, 0x58	; 88
    1d32:	92 e0       	ldi	r25, 0x02	; 2
    1d34:	9d 8f       	std	Y+29, r25	; 0x1d
    1d36:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <lcd_put+0x3b8>
    1d40:	9d 8f       	std	Y+29, r25	; 0x1d
    1d42:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d46:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9b 8f       	std	Y+27, r25	; 0x1b
    1d4c:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d50:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d52:	89 2b       	or	r24, r25
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <lcd_put+0x3ac>
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <lcd_put+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6e 89       	ldd	r22, Y+22	; 0x16
    1d5a:	7f 89       	ldd	r23, Y+23	; 0x17
    1d5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d5e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d60:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9b 8f       	std	Y+27, r25	; 0x1b
    1d6a:	8a 8f       	std	Y+26, r24	; 0x1a
    1d6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d70:	9f 8f       	std	Y+31, r25	; 0x1f
    1d72:	8e 8f       	std	Y+30, r24	; 0x1e
    1d74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <lcd_put+0x3f4>
    1d7c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d80:	2a c0       	rjmp	.+84     	; 0x1dd6 <lcd_put+0x452>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	53 e4       	ldi	r21, 0x43	; 67
    1d8a:	69 85       	ldd	r22, Y+9	; 0x09
    1d8c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d90:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d92:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	ac f4       	brge	.+42     	; 0x1dc4 <lcd_put+0x440>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1d9a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d9c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da0:	98 89       	ldd	r25, Y+16	; 0x10
    1da2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	99 a3       	std	Y+33, r25	; 0x21
    1dac:	88 a3       	std	Y+32, r24	; 0x20
    1dae:	88 a1       	ldd	r24, Y+32	; 0x20
    1db0:	99 a1       	ldd	r25, Y+33	; 0x21
    1db2:	9b a3       	std	Y+35, r25	; 0x23
    1db4:	8a a3       	std	Y+34, r24	; 0x22
    1db6:	8a a1       	ldd	r24, Y+34	; 0x22
    1db8:	9b a1       	ldd	r25, Y+35	; 0x23
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <lcd_put+0x436>
    1dbe:	9b a3       	std	Y+35, r25	; 0x23
    1dc0:	8a a3       	std	Y+34, r24	; 0x22
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <lcd_put+0x45e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dc4:	69 85       	ldd	r22, Y+9	; 0x09
    1dc6:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dca:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dcc:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	89 8b       	std	Y+17, r24	; 0x11
    1dd6:	89 89       	ldd	r24, Y+17	; 0x11
    1dd8:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dda:	8c a1       	ldd	r24, Y+36	; 0x24
    1ddc:	8a 95       	dec	r24
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <lcd_put+0x458>
    1de0:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(40);
	LCD_EN0;
    1de2:	88 e2       	ldi	r24, 0x28	; 40
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	28 e2       	ldi	r18, 0x28	; 40
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	f9 01       	movw	r30, r18
    1dec:	20 81       	ld	r18, Z
    1dee:	2f 7e       	andi	r18, 0xEF	; 239
    1df0:	fc 01       	movw	r30, r24
    1df2:	20 83       	st	Z, r18
	LCD_RS0;
    1df4:	8b e2       	ldi	r24, 0x2B	; 43
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	2b e2       	ldi	r18, 0x2B	; 43
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	20 81       	ld	r18, Z
    1e00:	2e 7f       	andi	r18, 0xFE	; 254
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 83       	st	Z, r18
}
    1e06:	00 00       	nop
    1e08:	cf 5b       	subi	r28, 0xBF	; 191
    1e0a:	df 4f       	sbci	r29, 0xFF	; 255
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	08 95       	ret

00001e1c <nible2hex>:

char nible2hex(uint8_t nible)
{
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	1f 92       	push	r1
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	89 83       	std	Y+1, r24	; 0x01
	if (nible < 10)
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	8a 30       	cpi	r24, 0x0A	; 10
    1e2c:	18 f4       	brcc	.+6      	; 0x1e34 <nible2hex+0x18>
		return '0' + nible;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	80 5d       	subi	r24, 0xD0	; 208
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <nible2hex+0x1c>
	else
		return 'A' + nible - 10;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	89 5c       	subi	r24, 0xC9	; 201
}
    1e38:	0f 90       	pop	r0
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <print_hex>:

// vytiskne číslo int 2B
void print_hex(uint16_t cislo)
{
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	00 d0       	rcall	.+0      	; 0x1e46 <print_hex+0x6>
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <print_hex+0x8>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <print_hex+0xa>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1e52:	1a 82       	std	Y+2, r1	; 0x02
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	1c c0       	rjmp	.+56     	; 0x1e90 <print_hex+0x50>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	89 2f       	mov	r24, r25
    1e5e:	99 27       	eor	r25, r25
    1e60:	82 95       	swap	r24
    1e62:	8f 70       	andi	r24, 0x0F	; 15
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
		cislo <<= 4;
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	82 95       	swap	r24
    1e6e:	92 95       	swap	r25
    1e70:	90 7f       	andi	r25, 0xF0	; 240
    1e72:	98 27       	eor	r25, r24
    1e74:	80 7f       	andi	r24, 0xF0	; 240
    1e76:	98 27       	eor	r25, r24
    1e78:	9e 83       	std	Y+6, r25	; 0x06
    1e7a:	8d 83       	std	Y+5, r24	; 0x05
		lcd_put(nible2hex(nible));
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <nible2hex>
    1e82:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
void print_hex(uint16_t cislo)
{
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	04 97       	sbiw	r24, 0x04	; 4
    1e96:	00 f3       	brcs	.-64     	; 0x1e58 <print_hex+0x18>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
		cislo <<= 4;
		lcd_put(nible2hex(nible));
	}
}
    1e98:	00 00       	nop
    1e9a:	26 96       	adiw	r28, 0x06	; 6
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	08 95       	ret

00001eac <print_int>:

// vytiskne číslo int 2B
void print_int(int cislo, char znaminko, char nula, int pocet_mist)
{
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	6b 97       	sbiw	r28, 0x1b	; 27
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	9f 8b       	std	Y+23, r25	; 0x17
    1ec2:	8e 8b       	std	Y+22, r24	; 0x16
    1ec4:	68 8f       	std	Y+24, r22	; 0x18
    1ec6:	49 8f       	std	Y+25, r20	; 0x19
    1ec8:	3b 8f       	std	Y+27, r19	; 0x1b
    1eca:	2a 8f       	std	Y+26, r18	; 0x1a
	int poc_cislo = cislo;
    1ecc:	8e 89       	ldd	r24, Y+22	; 0x16
    1ece:	9f 89       	ldd	r25, Y+23	; 0x17
    1ed0:	9d 83       	std	Y+5, r25	; 0x05
    1ed2:	8c 83       	std	Y+4, r24	; 0x04
	int8_t i, len = 16, state = 1;
    1ed4:	80 e1       	ldi	r24, 0x10	; 16
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	8b 83       	std	Y+3, r24	; 0x03
	char buf[16];

	// pokud máme vypsat před číslo znamínko
	if (znaminko)
    1edc:	88 8d       	ldd	r24, Y+24	; 0x18
    1ede:	88 23       	and	r24, r24
    1ee0:	49 f0       	breq	.+18     	; 0x1ef4 <print_int+0x48>
	{
		lcd_put((cislo >= 0) ? '+' : '-');
    1ee2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ee4:	9f 89       	ldd	r25, Y+23	; 0x17
    1ee6:	99 23       	and	r25, r25
    1ee8:	14 f0       	brlt	.+4      	; 0x1eee <print_int+0x42>
    1eea:	8b e2       	ldi	r24, 0x2B	; 43
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <print_int+0x44>
    1eee:	8d e2       	ldi	r24, 0x2D	; 45
    1ef0:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	}

	// pokud je vypnutá predikce nul
	if (nula)
    1ef4:	89 8d       	ldd	r24, Y+25	; 0x19
    1ef6:	88 23       	and	r24, r24
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <print_int+0x50>
		state = 0;
    1efa:	1b 82       	std	Y+3, r1	; 0x03


	// když je zadána délka čísla
	if (pocet_mist >= 0)
    1efc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1efe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f00:	99 23       	and	r25, r25
    1f02:	14 f0       	brlt	.+4      	; 0x1f08 <print_int+0x5c>
		len = pocet_mist;
    1f04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f06:	8a 83       	std	Y+2, r24	; 0x02

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;
    1f08:	8e 89       	ldd	r24, Y+22	; 0x16
    1f0a:	9f 89       	ldd	r25, Y+23	; 0x17
    1f0c:	99 23       	and	r25, r25
    1f0e:	1c f4       	brge	.+6      	; 0x1f16 <print_int+0x6a>
    1f10:	91 95       	neg	r25
    1f12:	81 95       	neg	r24
    1f14:	91 09       	sbc	r25, r1
    1f16:	9f 8b       	std	Y+23, r25	; 0x17
    1f18:	8e 8b       	std	Y+22, r24	; 0x16

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1f1a:	19 82       	std	Y+1, r1	; 0x01
    1f1c:	20 c0       	rjmp	.+64     	; 0x1f5e <print_int+0xb2>
	{
		buf[i] = '0' + cislo % 10;
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	88 0f       	add	r24, r24
    1f24:	33 0b       	sbc	r19, r19
    1f26:	8e 89       	ldd	r24, Y+22	; 0x16
    1f28:	9f 89       	ldd	r25, Y+23	; 0x17
    1f2a:	4a e0       	ldi	r20, 0x0A	; 10
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	ba 01       	movw	r22, r20
    1f30:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__divmodhi4>
    1f34:	40 e3       	ldi	r20, 0x30	; 48
    1f36:	48 0f       	add	r20, r24
    1f38:	ce 01       	movw	r24, r28
    1f3a:	06 96       	adiw	r24, 0x06	; 6
    1f3c:	82 0f       	add	r24, r18
    1f3e:	93 1f       	adc	r25, r19
    1f40:	fc 01       	movw	r30, r24
    1f42:	40 83       	st	Z, r20
		cislo /= 10;
    1f44:	8e 89       	ldd	r24, Y+22	; 0x16
    1f46:	9f 89       	ldd	r25, Y+23	; 0x17
    1f48:	2a e0       	ldi	r18, 0x0A	; 10
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	b9 01       	movw	r22, r18
    1f4e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__divmodhi4>
    1f52:	cb 01       	movw	r24, r22
    1f54:	9f 8b       	std	Y+23, r25	; 0x17
    1f56:	8e 8b       	std	Y+22, r24	; 0x16

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	8f 5f       	subi	r24, 0xFF	; 255
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	99 81       	ldd	r25, Y+1	; 0x01
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	98 17       	cp	r25, r24
    1f64:	e4 f2       	brlt	.-72     	; 0x1f1e <print_int+0x72>
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	81 50       	subi	r24, 0x01	; 1
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	3d c0       	rjmp	.+122    	; 0x1fe8 <print_int+0x13c>
	{
		if (buf[i] == '0' && state)
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	08 2e       	mov	r0, r24
    1f72:	00 0c       	add	r0, r0
    1f74:	99 0b       	sbc	r25, r25
    1f76:	9e 01       	movw	r18, r28
    1f78:	2a 5f       	subi	r18, 0xFA	; 250
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	82 0f       	add	r24, r18
    1f7e:	93 1f       	adc	r25, r19
    1f80:	fc 01       	movw	r30, r24
    1f82:	80 81       	ld	r24, Z
    1f84:	80 33       	cpi	r24, 0x30	; 48
    1f86:	e9 f4       	brne	.+58     	; 0x1fc2 <print_int+0x116>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	88 23       	and	r24, r24
    1f8c:	d1 f0       	breq	.+52     	; 0x1fc2 <print_int+0x116>
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    1f8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	29 f1       	breq	.+74     	; 0x1fe0 <print_int+0x134>
    1f96:	8c 81       	ldd	r24, Y+4	; 0x04
    1f98:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9a:	89 2b       	or	r24, r25
    1f9c:	71 f4       	brne	.+28     	; 0x1fba <print_int+0x10e>
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	08 2e       	mov	r0, r24
    1fa2:	00 0c       	add	r0, r0
    1fa4:	99 0b       	sbc	r25, r25
    1fa6:	9c 01       	movw	r18, r24
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	3f 4f       	sbci	r19, 0xFF	; 255
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	08 2e       	mov	r0, r24
    1fb0:	00 0c       	add	r0, r0
    1fb2:	99 0b       	sbc	r25, r25
    1fb4:	28 17       	cp	r18, r24
    1fb6:	39 07       	cpc	r19, r25
    1fb8:	99 f0       	breq	.+38     	; 0x1fe0 <print_int+0x134>
			{
				lcd_put(' ');
    1fba:	80 e2       	ldi	r24, 0x20	; 32
    1fbc:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <print_int+0x134>
				lcd_put(' ');
			}
		}
		else
		{
			state = 0;
    1fc2:	1b 82       	std	Y+3, r1	; 0x03
			lcd_put(buf[i]);
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	08 2e       	mov	r0, r24
    1fc8:	00 0c       	add	r0, r0
    1fca:	99 0b       	sbc	r25, r25
    1fcc:	9e 01       	movw	r18, r28
    1fce:	2a 5f       	subi	r18, 0xFA	; 250
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	82 0f       	add	r24, r18
    1fd4:	93 1f       	adc	r25, r19
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	80 81       	ld	r24, Z
    1fda:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <print_int+0x136>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    1fe0:	00 00       	nop
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	81 50       	subi	r24, 0x01	; 1
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	88 23       	and	r24, r24
    1fec:	0c f0       	brlt	.+2      	; 0x1ff0 <print_int+0x144>
    1fee:	bf cf       	rjmp	.-130    	; 0x1f6e <print_int+0xc2>
			state = 0;
			lcd_put(buf[i]);
		}

	}
	if (state)
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	88 23       	and	r24, r24
    1ff4:	19 f0       	breq	.+6      	; 0x1ffc <print_int+0x150>
	{
		lcd_put('0');
    1ff6:	80 e3       	ldi	r24, 0x30	; 48
    1ff8:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	}
}
    1ffc:	00 00       	nop
    1ffe:	6b 96       	adiw	r28, 0x1b	; 27
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	08 95       	ret

00002010 <print_double>:

// vytiskne double
void print_double(double cislo, char znaminko, char nula, int mista_pred_carkou, int mista_za_carkou)
{
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	61 97       	sbiw	r28, 0x11	; 17
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	68 87       	std	Y+8, r22	; 0x08
    202e:	79 87       	std	Y+9, r23	; 0x09
    2030:	8a 87       	std	Y+10, r24	; 0x0a
    2032:	9b 87       	std	Y+11, r25	; 0x0b
    2034:	4c 87       	std	Y+12, r20	; 0x0c
    2036:	2d 87       	std	Y+13, r18	; 0x0d
    2038:	1f 87       	std	Y+15, r17	; 0x0f
    203a:	0e 87       	std	Y+14, r16	; 0x0e
    203c:	f9 8a       	std	Y+17, r15	; 0x11
    203e:	e8 8a       	std	Y+16, r14	; 0x10
	int i, cela, desetinna;
	char znam = '+';
    2040:	8b e2       	ldi	r24, 0x2B	; 43
    2042:	8b 83       	std	Y+3, r24	; 0x03

	if (mista_za_carkou == -1)
    2044:	88 89       	ldd	r24, Y+16	; 0x10
    2046:	99 89       	ldd	r25, Y+17	; 0x11
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	21 f4       	brne	.+8      	; 0x2054 <print_double+0x44>
		mista_za_carkou = 3;
    204c:	83 e0       	ldi	r24, 0x03	; 3
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	99 8b       	std	Y+17, r25	; 0x11
    2052:	88 8b       	std	Y+16, r24	; 0x10

	if (cislo < 0)
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	a9 01       	movw	r20, r18
    205a:	68 85       	ldd	r22, Y+8	; 0x08
    205c:	79 85       	ldd	r23, Y+9	; 0x09
    205e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2060:	9b 85       	ldd	r25, Y+11	; 0x0b
    2062:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    2066:	88 23       	and	r24, r24
    2068:	5c f4       	brge	.+22     	; 0x2080 <print_double+0x70>
	{
		cislo *= -1;
    206a:	88 85       	ldd	r24, Y+8	; 0x08
    206c:	99 85       	ldd	r25, Y+9	; 0x09
    206e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2070:	bb 85       	ldd	r27, Y+11	; 0x0b
    2072:	b0 58       	subi	r27, 0x80	; 128
    2074:	88 87       	std	Y+8, r24	; 0x08
    2076:	99 87       	std	Y+9, r25	; 0x09
    2078:	aa 87       	std	Y+10, r26	; 0x0a
    207a:	bb 87       	std	Y+11, r27	; 0x0b
		znam = '-';
    207c:	8d e2       	ldi	r24, 0x2D	; 45
    207e:	8b 83       	std	Y+3, r24	; 0x03
	}

	cela = (int) cislo;
    2080:	68 85       	ldd	r22, Y+8	; 0x08
    2082:	79 85       	ldd	r23, Y+9	; 0x09
    2084:	8a 85       	ldd	r24, Y+10	; 0x0a
    2086:	9b 85       	ldd	r25, Y+11	; 0x0b
    2088:	0e 94 65 16 	call	0x2cca	; 0x2cca <__fixsfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9d 83       	std	Y+5, r25	; 0x05
    2092:	8c 83       	std	Y+4, r24	; 0x04
	cislo -= cela;
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	9d 81       	ldd	r25, Y+5	; 0x05
    2098:	09 2e       	mov	r0, r25
    209a:	00 0c       	add	r0, r0
    209c:	aa 0b       	sbc	r26, r26
    209e:	bb 0b       	sbc	r27, r27
    20a0:	bc 01       	movw	r22, r24
    20a2:	cd 01       	movw	r24, r26
    20a4:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__floatsisf>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9c 01       	movw	r18, r24
    20ae:	ad 01       	movw	r20, r26
    20b0:	68 85       	ldd	r22, Y+8	; 0x08
    20b2:	79 85       	ldd	r23, Y+9	; 0x09
    20b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__subsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	88 87       	std	Y+8, r24	; 0x08
    20c2:	99 87       	std	Y+9, r25	; 0x09
    20c4:	aa 87       	std	Y+10, r26	; 0x0a
    20c6:	bb 87       	std	Y+11, r27	; 0x0b

	for (i=0; i < mista_za_carkou; i++)
    20c8:	1a 82       	std	Y+2, r1	; 0x02
    20ca:	19 82       	std	Y+1, r1	; 0x01
    20cc:	15 c0       	rjmp	.+42     	; 0x20f8 <print_double+0xe8>
		cislo *= 10;
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	68 85       	ldd	r22, Y+8	; 0x08
    20d8:	79 85       	ldd	r23, Y+9	; 0x09
    20da:	8a 85       	ldd	r24, Y+10	; 0x0a
    20dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20de:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	88 87       	std	Y+8, r24	; 0x08
    20e8:	99 87       	std	Y+9, r25	; 0x09
    20ea:	aa 87       	std	Y+10, r26	; 0x0a
    20ec:	bb 87       	std	Y+11, r27	; 0x0b
	}

	cela = (int) cislo;
	cislo -= cela;

	for (i=0; i < mista_za_carkou; i++)
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	9a 81       	ldd	r25, Y+2	; 0x02
    20f2:	01 96       	adiw	r24, 0x01	; 1
    20f4:	9a 83       	std	Y+2, r25	; 0x02
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	29 81       	ldd	r18, Y+1	; 0x01
    20fa:	3a 81       	ldd	r19, Y+2	; 0x02
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	99 89       	ldd	r25, Y+17	; 0x11
    2100:	28 17       	cp	r18, r24
    2102:	39 07       	cpc	r19, r25
    2104:	24 f3       	brlt	.-56     	; 0x20ce <print_double+0xbe>
		cislo *= 10;

	desetinna = (int) cislo;
    2106:	68 85       	ldd	r22, Y+8	; 0x08
    2108:	79 85       	ldd	r23, Y+9	; 0x09
    210a:	8a 85       	ldd	r24, Y+10	; 0x0a
    210c:	9b 85       	ldd	r25, Y+11	; 0x0b
    210e:	0e 94 65 16 	call	0x2cca	; 0x2cca <__fixsfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9f 83       	std	Y+7, r25	; 0x07
    2118:	8e 83       	std	Y+6, r24	; 0x06
	cela = (znam == '-') ? -1 * cela : cela;
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	8d 32       	cpi	r24, 0x2D	; 45
    211e:	31 f4       	brne	.+12     	; 0x212c <print_double+0x11c>
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	91 95       	neg	r25
    2126:	81 95       	neg	r24
    2128:	91 09       	sbc	r25, r1
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <print_double+0x120>
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	9d 81       	ldd	r25, Y+5	; 0x05
    2130:	9d 83       	std	Y+5, r25	; 0x05
    2132:	8c 83       	std	Y+4, r24	; 0x04

	print_int(cela, znaminko, nula, mista_pred_carkou);
    2134:	2e 85       	ldd	r18, Y+14	; 0x0e
    2136:	3f 85       	ldd	r19, Y+15	; 0x0f
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	4d 85       	ldd	r20, Y+13	; 0x0d
    213e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2140:	0e 94 56 0f 	call	0x1eac	; 0x1eac <print_int>
	lcd_put(',');
    2144:	8c e2       	ldi	r24, 0x2C	; 44
    2146:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	print_int(desetinna, '\0', '0', mista_za_carkou);
    214a:	28 89       	ldd	r18, Y+16	; 0x10
    214c:	39 89       	ldd	r19, Y+17	; 0x11
    214e:	8e 81       	ldd	r24, Y+6	; 0x06
    2150:	9f 81       	ldd	r25, Y+7	; 0x07
    2152:	40 e3       	ldi	r20, 0x30	; 48
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	0e 94 56 0f 	call	0x1eac	; 0x1eac <print_int>

}
    215a:	00 00       	nop
    215c:	61 96       	adiw	r28, 0x11	; 17
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	0f 91       	pop	r16
    2170:	ff 90       	pop	r15
    2172:	ef 90       	pop	r14
    2174:	08 95       	ret

00002176 <lcd_printf>:

// printf funkce
void lcd_printf(char str[], ...)
{
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	2f 97       	sbiw	r28, 0x0f	; 15
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61

	uint8_t i, j;
	char *str_p;
	int tmp_int;

	char znaminko = '\0';
    2192:	1b 82       	std	Y+3, r1	; 0x03
	char nula = '\0';
    2194:	1c 82       	std	Y+4, r1	; 0x04
	char desetina_carka = '\0';
    2196:	1d 82       	std	Y+5, r1	; 0x05
	int mista_pred_carkou = -1;
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	9f ef       	ldi	r25, 0xFF	; 255
    219c:	9f 83       	std	Y+7, r25	; 0x07
    219e:	8e 83       	std	Y+6, r24	; 0x06
	int mista_za_carkou = -1;
    21a0:	8f ef       	ldi	r24, 0xFF	; 255
    21a2:	9f ef       	ldi	r25, 0xFF	; 255
    21a4:	99 87       	std	Y+9, r25	; 0x09
    21a6:	88 87       	std	Y+8, r24	; 0x08



	 __gnuc_va_list ap;
	 //va_list ap;
	 va_start(ap, str);
    21a8:	ce 01       	movw	r24, r28
    21aa:	4a 96       	adiw	r24, 0x1a	; 26
    21ac:	9f 87       	std	Y+15, r25	; 0x0f
    21ae:	8e 87       	std	Y+14, r24	; 0x0e



	for (i=0; str[i] != '\0'; i++)
    21b0:	19 82       	std	Y+1, r1	; 0x01
    21b2:	5e c2       	rjmp	.+1212   	; 0x2670 <lcd_printf+0x4fa>
	{
		// nová stránka
		if (str[i] == '\f')
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	28 8d       	ldd	r18, Y+24	; 0x18
    21bc:	39 8d       	ldd	r19, Y+25	; 0x19
    21be:	82 0f       	add	r24, r18
    21c0:	93 1f       	adc	r25, r19
    21c2:	fc 01       	movw	r30, r24
    21c4:	80 81       	ld	r24, Z
    21c6:	8c 30       	cpi	r24, 0x0C	; 12
    21c8:	51 f4       	brne	.+20     	; 0x21de <lcd_printf+0x68>
		{
			line = 1;
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
			lcd_cmd(LCD_CMD_CLR);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
			lcd_cmd(LCD_CMD_W_DDRAM);
    21d6:	80 e8       	ldi	r24, 0x80	; 128
    21d8:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
    21dc:	46 c2       	rjmp	.+1164   	; 0x266a <lcd_printf+0x4f4>
		}
		// nový řádek
		else if (str[i] == '\n')
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	28 8d       	ldd	r18, Y+24	; 0x18
    21e6:	39 8d       	ldd	r19, Y+25	; 0x19
    21e8:	82 0f       	add	r24, r18
    21ea:	93 1f       	adc	r25, r19
    21ec:	fc 01       	movw	r30, r24
    21ee:	80 81       	ld	r24, Z
    21f0:	8a 30       	cpi	r24, 0x0A	; 10
    21f2:	71 f5       	brne	.+92     	; 0x2250 <lcd_printf+0xda>
		{
			// jestli jsme na 1.
			if (line == 1)
    21f4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    21f8:	81 30       	cpi	r24, 0x01	; 1
    21fa:	49 f4       	brne	.+18     	; 0x220e <lcd_printf+0x98>
			{
				line++;
    21fc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2200:	8f 5f       	subi	r24, 0xFF	; 255
    2202:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40); // go 2 line
    2206:	80 ec       	ldi	r24, 0xC0	; 192
    2208:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
    220c:	2e c2       	rjmp	.+1116   	; 0x266a <lcd_printf+0x4f4>
			}
			// jestli jsme na 2.
			else if (line == 2)
    220e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2212:	82 30       	cpi	r24, 0x02	; 2
    2214:	49 f4       	brne	.+18     	; 0x2228 <lcd_printf+0xb2>
			{
				line++;
    2216:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x14); // go 3 line
    2220:	84 e9       	ldi	r24, 0x94	; 148
    2222:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
    2226:	21 c2       	rjmp	.+1090   	; 0x266a <lcd_printf+0x4f4>
			}
			// jestli jsme na 3.
			else if (line == 3)
    2228:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    222c:	83 30       	cpi	r24, 0x03	; 3
    222e:	49 f4       	brne	.+18     	; 0x2242 <lcd_printf+0xcc>
			{
				line++;
    2230:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2234:	8f 5f       	subi	r24, 0xFF	; 255
    2236:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x54); // go 4 line
    223a:	84 ed       	ldi	r24, 0xD4	; 212
    223c:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
    2240:	14 c2       	rjmp	.+1064   	; 0x266a <lcd_printf+0x4f4>
			}
			// jestli jsme na 4.
			else
			{
				line = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x00); // go 1 line
    2248:	80 e8       	ldi	r24, 0x80	; 128
    224a:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
    224e:	0d c2       	rjmp	.+1050   	; 0x266a <lcd_printf+0x4f4>
			}
		}
		// návrat vozíku
		else if (str[i] == '\r')
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	28 8d       	ldd	r18, Y+24	; 0x18
    2258:	39 8d       	ldd	r19, Y+25	; 0x19
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	fc 01       	movw	r30, r24
    2260:	80 81       	ld	r24, Z
    2262:	8d 30       	cpi	r24, 0x0D	; 13
    2264:	61 f4       	brne	.+24     	; 0x227e <lcd_printf+0x108>
		{
			// pokud jsme na 2. řádku
			if (line)
    2266:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    226a:	88 23       	and	r24, r24
    226c:	21 f0       	breq	.+8      	; 0x2276 <lcd_printf+0x100>
			{
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40);
    226e:	80 ec       	ldi	r24, 0xC0	; 192
    2270:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
    2274:	fa c1       	rjmp	.+1012   	; 0x266a <lcd_printf+0x4f4>
			}
			// jestli jsme na 1.
			else
			{
				lcd_cmd(LCD_CMD_W_DDRAM);
    2276:	80 e8       	ldi	r24, 0x80	; 128
    2278:	0e 94 9d 0b 	call	0x173a	; 0x173a <lcd_cmd>
    227c:	f6 c1       	rjmp	.+1004   	; 0x266a <lcd_printf+0x4f4>
			}
		}
		// tabulátor
		else if (str[i] == '\t')
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	88 2f       	mov	r24, r24
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	28 8d       	ldd	r18, Y+24	; 0x18
    2286:	39 8d       	ldd	r19, Y+25	; 0x19
    2288:	82 0f       	add	r24, r18
    228a:	93 1f       	adc	r25, r19
    228c:	fc 01       	movw	r30, r24
    228e:	80 81       	ld	r24, Z
    2290:	89 30       	cpi	r24, 0x09	; 9
    2292:	69 f4       	brne	.+26     	; 0x22ae <lcd_printf+0x138>
		{
			lcd_put(' ');
    2294:	80 e2       	ldi	r24, 0x20	; 32
    2296:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
			lcd_put(' ');
    229a:	80 e2       	ldi	r24, 0x20	; 32
    229c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
			lcd_put(' ');
    22a0:	80 e2       	ldi	r24, 0x20	; 32
    22a2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
			lcd_put(' ');
    22a6:	80 e2       	ldi	r24, 0x20	; 32
    22a8:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
    22ac:	de c1       	rjmp	.+956    	; 0x266a <lcd_printf+0x4f4>
		}
		// znak lomeno
		else if (str[i] == '\\')
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	28 8d       	ldd	r18, Y+24	; 0x18
    22b6:	39 8d       	ldd	r19, Y+25	; 0x19
    22b8:	82 0f       	add	r24, r18
    22ba:	93 1f       	adc	r25, r19
    22bc:	fc 01       	movw	r30, r24
    22be:	80 81       	ld	r24, Z
    22c0:	8c 35       	cpi	r24, 0x5C	; 92
    22c2:	21 f4       	brne	.+8      	; 0x22cc <lcd_printf+0x156>
		{
			lcd_put(0xA4);
    22c4:	84 ea       	ldi	r24, 0xA4	; 164
    22c6:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
    22ca:	cf c1       	rjmp	.+926    	; 0x266a <lcd_printf+0x4f4>
		}
		else if (str[i] == '%')
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	28 8d       	ldd	r18, Y+24	; 0x18
    22d4:	39 8d       	ldd	r19, Y+25	; 0x19
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	fc 01       	movw	r30, r24
    22dc:	80 81       	ld	r24, Z
    22de:	85 32       	cpi	r24, 0x25	; 37
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <lcd_printf+0x16e>
    22e2:	b8 c1       	rjmp	.+880    	; 0x2654 <lcd_printf+0x4de>
		{
			// pokud jde o znak %
			if (str[i+1] == '%')
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	28 8d       	ldd	r18, Y+24	; 0x18
    22ee:	39 8d       	ldd	r19, Y+25	; 0x19
    22f0:	82 0f       	add	r24, r18
    22f2:	93 1f       	adc	r25, r19
    22f4:	fc 01       	movw	r30, r24
    22f6:	80 81       	ld	r24, Z
    22f8:	85 32       	cpi	r24, 0x25	; 37
    22fa:	39 f4       	brne	.+14     	; 0x230a <lcd_printf+0x194>
			{
				i++;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	8f 5f       	subi	r24, 0xFF	; 255
    2300:	89 83       	std	Y+1, r24	; 0x01
				lcd_put('%');
    2302:	85 e2       	ldi	r24, 0x25	; 37
    2304:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
    2308:	b0 c1       	rjmp	.+864    	; 0x266a <lcd_printf+0x4f4>
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8a 83       	std	Y+2, r24	; 0x02
    2310:	b5 c0       	rjmp	.+362    	; 0x247c <lcd_printf+0x306>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
				{
					if (str[j] == '+' || str[j] == '-')
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	28 8d       	ldd	r18, Y+24	; 0x18
    231a:	39 8d       	ldd	r19, Y+25	; 0x19
    231c:	82 0f       	add	r24, r18
    231e:	93 1f       	adc	r25, r19
    2320:	fc 01       	movw	r30, r24
    2322:	80 81       	ld	r24, Z
    2324:	8b 32       	cpi	r24, 0x2B	; 43
    2326:	59 f0       	breq	.+22     	; 0x233e <lcd_printf+0x1c8>
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	88 2f       	mov	r24, r24
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	28 8d       	ldd	r18, Y+24	; 0x18
    2330:	39 8d       	ldd	r19, Y+25	; 0x19
    2332:	82 0f       	add	r24, r18
    2334:	93 1f       	adc	r25, r19
    2336:	fc 01       	movw	r30, r24
    2338:	80 81       	ld	r24, Z
    233a:	8d 32       	cpi	r24, 0x2D	; 45
    233c:	19 f4       	brne	.+6      	; 0x2344 <lcd_printf+0x1ce>
					{
						znaminko = '+';
    233e:	8b e2       	ldi	r24, 0x2B	; 43
    2340:	8b 83       	std	Y+3, r24	; 0x03
    2342:	99 c0       	rjmp	.+306    	; 0x2476 <lcd_printf+0x300>
					}
					else if (str[j] == '.')
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	28 8d       	ldd	r18, Y+24	; 0x18
    234c:	39 8d       	ldd	r19, Y+25	; 0x19
    234e:	82 0f       	add	r24, r18
    2350:	93 1f       	adc	r25, r19
    2352:	fc 01       	movw	r30, r24
    2354:	80 81       	ld	r24, Z
    2356:	8e 32       	cpi	r24, 0x2E	; 46
    2358:	19 f4       	brne	.+6      	; 0x2360 <lcd_printf+0x1ea>
					{
						desetina_carka = ',';
    235a:	8c e2       	ldi	r24, 0x2C	; 44
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	8b c0       	rjmp	.+278    	; 0x2476 <lcd_printf+0x300>
					}
					else if (str[j] == '0')
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	28 8d       	ldd	r18, Y+24	; 0x18
    2368:	39 8d       	ldd	r19, Y+25	; 0x19
    236a:	82 0f       	add	r24, r18
    236c:	93 1f       	adc	r25, r19
    236e:	fc 01       	movw	r30, r24
    2370:	80 81       	ld	r24, Z
    2372:	80 33       	cpi	r24, 0x30	; 48
    2374:	d1 f4       	brne	.+52     	; 0x23aa <lcd_printf+0x234>
					{
						if (desetina_carka == '\0')
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	88 23       	and	r24, r24
    237a:	a1 f4       	brne	.+40     	; 0x23a4 <lcd_printf+0x22e>
						{
							if (nula == '0')
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	80 33       	cpi	r24, 0x30	; 48
    2380:	71 f4       	brne	.+28     	; 0x239e <lcd_printf+0x228>
								mista_pred_carkou *= 10;
    2382:	8e 81       	ldd	r24, Y+6	; 0x06
    2384:	9f 81       	ldd	r25, Y+7	; 0x07
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	9c 01       	movw	r18, r24
    238c:	22 0f       	add	r18, r18
    238e:	33 1f       	adc	r19, r19
    2390:	22 0f       	add	r18, r18
    2392:	33 1f       	adc	r19, r19
    2394:	82 0f       	add	r24, r18
    2396:	93 1f       	adc	r25, r19
    2398:	9f 83       	std	Y+7, r25	; 0x07
    239a:	8e 83       	std	Y+6, r24	; 0x06
    239c:	6c c0       	rjmp	.+216    	; 0x2476 <lcd_printf+0x300>
							else
								nula = '0';
    239e:	80 e3       	ldi	r24, 0x30	; 48
    23a0:	8c 83       	std	Y+4, r24	; 0x04
    23a2:	69 c0       	rjmp	.+210    	; 0x2476 <lcd_printf+0x300>
						}
						else
						{
							mista_za_carkou = 0;
    23a4:	19 86       	std	Y+9, r1	; 0x09
    23a6:	18 86       	std	Y+8, r1	; 0x08
    23a8:	66 c0       	rjmp	.+204    	; 0x2476 <lcd_printf+0x300>
						}

					}
					else if (str[j] >= '1' && str[j] <= '9')
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	88 2f       	mov	r24, r24
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	28 8d       	ldd	r18, Y+24	; 0x18
    23b2:	39 8d       	ldd	r19, Y+25	; 0x19
    23b4:	82 0f       	add	r24, r18
    23b6:	93 1f       	adc	r25, r19
    23b8:	fc 01       	movw	r30, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	81 33       	cpi	r24, 0x31	; 49
    23be:	08 f4       	brcc	.+2      	; 0x23c2 <lcd_printf+0x24c>
    23c0:	5a c0       	rjmp	.+180    	; 0x2476 <lcd_printf+0x300>
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	28 8d       	ldd	r18, Y+24	; 0x18
    23ca:	39 8d       	ldd	r19, Y+25	; 0x19
    23cc:	82 0f       	add	r24, r18
    23ce:	93 1f       	adc	r25, r19
    23d0:	fc 01       	movw	r30, r24
    23d2:	80 81       	ld	r24, Z
    23d4:	8a 33       	cpi	r24, 0x3A	; 58
    23d6:	08 f0       	brcs	.+2      	; 0x23da <lcd_printf+0x264>
    23d8:	4e c0       	rjmp	.+156    	; 0x2476 <lcd_printf+0x300>
					{
						if (desetina_carka == ',')
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	8c 32       	cpi	r24, 0x2C	; 44
    23de:	31 f5       	brne	.+76     	; 0x242c <lcd_printf+0x2b6>
						{
							if (mista_za_carkou == -1)
    23e0:	88 85       	ldd	r24, Y+8	; 0x08
    23e2:	99 85       	ldd	r25, Y+9	; 0x09
    23e4:	01 96       	adiw	r24, 0x01	; 1
    23e6:	11 f4       	brne	.+4      	; 0x23ec <lcd_printf+0x276>
								mista_za_carkou = 0;
    23e8:	19 86       	std	Y+9, r1	; 0x09
    23ea:	18 86       	std	Y+8, r1	; 0x08

							mista_za_carkou *= 10;
    23ec:	88 85       	ldd	r24, Y+8	; 0x08
    23ee:	99 85       	ldd	r25, Y+9	; 0x09
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	9c 01       	movw	r18, r24
    23f6:	22 0f       	add	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	22 0f       	add	r18, r18
    23fc:	33 1f       	adc	r19, r19
    23fe:	82 0f       	add	r24, r18
    2400:	93 1f       	adc	r25, r19
    2402:	99 87       	std	Y+9, r25	; 0x09
    2404:	88 87       	std	Y+8, r24	; 0x08
							mista_za_carkou += str[j] - '0';
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	28 8d       	ldd	r18, Y+24	; 0x18
    240e:	39 8d       	ldd	r19, Y+25	; 0x19
    2410:	82 0f       	add	r24, r18
    2412:	93 1f       	adc	r25, r19
    2414:	fc 01       	movw	r30, r24
    2416:	80 81       	ld	r24, Z
    2418:	88 2f       	mov	r24, r24
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	c0 97       	sbiw	r24, 0x30	; 48
    241e:	28 85       	ldd	r18, Y+8	; 0x08
    2420:	39 85       	ldd	r19, Y+9	; 0x09
    2422:	82 0f       	add	r24, r18
    2424:	93 1f       	adc	r25, r19
    2426:	99 87       	std	Y+9, r25	; 0x09
    2428:	88 87       	std	Y+8, r24	; 0x08
    242a:	25 c0       	rjmp	.+74     	; 0x2476 <lcd_printf+0x300>
						}
						else
						{
							if (mista_pred_carkou == -1)
    242c:	8e 81       	ldd	r24, Y+6	; 0x06
    242e:	9f 81       	ldd	r25, Y+7	; 0x07
    2430:	01 96       	adiw	r24, 0x01	; 1
    2432:	11 f4       	brne	.+4      	; 0x2438 <lcd_printf+0x2c2>
								mista_pred_carkou = 0;
    2434:	1f 82       	std	Y+7, r1	; 0x07
    2436:	1e 82       	std	Y+6, r1	; 0x06

							mista_pred_carkou *= 10;
    2438:	8e 81       	ldd	r24, Y+6	; 0x06
    243a:	9f 81       	ldd	r25, Y+7	; 0x07
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	9c 01       	movw	r18, r24
    2442:	22 0f       	add	r18, r18
    2444:	33 1f       	adc	r19, r19
    2446:	22 0f       	add	r18, r18
    2448:	33 1f       	adc	r19, r19
    244a:	82 0f       	add	r24, r18
    244c:	93 1f       	adc	r25, r19
    244e:	9f 83       	std	Y+7, r25	; 0x07
    2450:	8e 83       	std	Y+6, r24	; 0x06
							mista_pred_carkou += str[j] - '0';
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	28 8d       	ldd	r18, Y+24	; 0x18
    245a:	39 8d       	ldd	r19, Y+25	; 0x19
    245c:	82 0f       	add	r24, r18
    245e:	93 1f       	adc	r25, r19
    2460:	fc 01       	movw	r30, r24
    2462:	80 81       	ld	r24, Z
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	c0 97       	sbiw	r24, 0x30	; 48
    246a:	2e 81       	ldd	r18, Y+6	; 0x06
    246c:	3f 81       	ldd	r19, Y+7	; 0x07
    246e:	82 0f       	add	r24, r18
    2470:	93 1f       	adc	r25, r19
    2472:	9f 83       	std	Y+7, r25	; 0x07
    2474:	8e 83       	std	Y+6, r24	; 0x06
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	8a 83       	std	Y+2, r24	; 0x02
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	88 2f       	mov	r24, r24
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	28 8d       	ldd	r18, Y+24	; 0x18
    2484:	39 8d       	ldd	r19, Y+25	; 0x19
    2486:	82 0f       	add	r24, r18
    2488:	93 1f       	adc	r25, r19
    248a:	fc 01       	movw	r30, r24
    248c:	80 81       	ld	r24, Z
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    248e:	83 36       	cpi	r24, 0x63	; 99
    2490:	69 f1       	breq	.+90     	; 0x24ec <lcd_printf+0x376>
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2492:	8a 81       	ldd	r24, Y+2	; 0x02
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	28 8d       	ldd	r18, Y+24	; 0x18
    249a:	39 8d       	ldd	r19, Y+25	; 0x19
    249c:	82 0f       	add	r24, r18
    249e:	93 1f       	adc	r25, r19
    24a0:	fc 01       	movw	r30, r24
    24a2:	80 81       	ld	r24, Z
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    24a4:	88 34       	cpi	r24, 0x48	; 72
    24a6:	11 f1       	breq	.+68     	; 0x24ec <lcd_printf+0x376>
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	28 8d       	ldd	r18, Y+24	; 0x18
    24b0:	39 8d       	ldd	r19, Y+25	; 0x19
    24b2:	82 0f       	add	r24, r18
    24b4:	93 1f       	adc	r25, r19
    24b6:	fc 01       	movw	r30, r24
    24b8:	80 81       	ld	r24, Z
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    24ba:	84 36       	cpi	r24, 0x64	; 100
    24bc:	b9 f0       	breq	.+46     	; 0x24ec <lcd_printf+0x376>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	28 8d       	ldd	r18, Y+24	; 0x18
    24c6:	39 8d       	ldd	r19, Y+25	; 0x19
    24c8:	82 0f       	add	r24, r18
    24ca:	93 1f       	adc	r25, r19
    24cc:	fc 01       	movw	r30, r24
    24ce:	80 81       	ld	r24, Z
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    24d0:	86 36       	cpi	r24, 0x66	; 102
    24d2:	61 f0       	breq	.+24     	; 0x24ec <lcd_printf+0x376>
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	28 8d       	ldd	r18, Y+24	; 0x18
    24dc:	39 8d       	ldd	r19, Y+25	; 0x19
    24de:	82 0f       	add	r24, r18
    24e0:	93 1f       	adc	r25, r19
    24e2:	fc 01       	movw	r30, r24
    24e4:	80 81       	ld	r24, Z
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    24e6:	83 37       	cpi	r24, 0x73	; 115
    24e8:	09 f0       	breq	.+2      	; 0x24ec <lcd_printf+0x376>
    24ea:	13 cf       	rjmp	.-474    	; 0x2312 <lcd_printf+0x19c>
						}
					}
				}

				// posuneme index procházení pole
				i = j;
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	89 83       	std	Y+1, r24	; 0x01

				// podle typu s nimi naložíme
				if (str[j] == 'c')
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	28 8d       	ldd	r18, Y+24	; 0x18
    24f8:	39 8d       	ldd	r19, Y+25	; 0x19
    24fa:	82 0f       	add	r24, r18
    24fc:	93 1f       	adc	r25, r19
    24fe:	fc 01       	movw	r30, r24
    2500:	80 81       	ld	r24, Z
    2502:	83 36       	cpi	r24, 0x63	; 99
    2504:	69 f4       	brne	.+26     	; 0x2520 <lcd_printf+0x3aa>
				{
					lcd_put(va_arg(ap, int));
    2506:	8e 85       	ldd	r24, Y+14	; 0x0e
    2508:	9f 85       	ldd	r25, Y+15	; 0x0f
    250a:	9c 01       	movw	r18, r24
    250c:	2e 5f       	subi	r18, 0xFE	; 254
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	3f 87       	std	Y+15, r19	; 0x0f
    2512:	2e 87       	std	Y+14, r18	; 0x0e
    2514:	fc 01       	movw	r30, r24
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
    251e:	8e c0       	rjmp	.+284    	; 0x263c <lcd_printf+0x4c6>
				}
				else if (str[j] == 'H')
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	28 8d       	ldd	r18, Y+24	; 0x18
    2528:	39 8d       	ldd	r19, Y+25	; 0x19
    252a:	82 0f       	add	r24, r18
    252c:	93 1f       	adc	r25, r19
    252e:	fc 01       	movw	r30, r24
    2530:	80 81       	ld	r24, Z
    2532:	88 34       	cpi	r24, 0x48	; 72
    2534:	69 f4       	brne	.+26     	; 0x2550 <lcd_printf+0x3da>
				{
					print_hex(va_arg(ap, uint16_t));
    2536:	8e 85       	ldd	r24, Y+14	; 0x0e
    2538:	9f 85       	ldd	r25, Y+15	; 0x0f
    253a:	9c 01       	movw	r18, r24
    253c:	2e 5f       	subi	r18, 0xFE	; 254
    253e:	3f 4f       	sbci	r19, 0xFF	; 255
    2540:	3f 87       	std	Y+15, r19	; 0x0f
    2542:	2e 87       	std	Y+14, r18	; 0x0e
    2544:	fc 01       	movw	r30, r24
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <print_hex>
    254e:	76 c0       	rjmp	.+236    	; 0x263c <lcd_printf+0x4c6>
				}
				else if (str[j] == 'd')
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	88 2f       	mov	r24, r24
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	28 8d       	ldd	r18, Y+24	; 0x18
    2558:	39 8d       	ldd	r19, Y+25	; 0x19
    255a:	82 0f       	add	r24, r18
    255c:	93 1f       	adc	r25, r19
    255e:	fc 01       	movw	r30, r24
    2560:	80 81       	ld	r24, Z
    2562:	84 36       	cpi	r24, 0x64	; 100
    2564:	a9 f4       	brne	.+42     	; 0x2590 <lcd_printf+0x41a>
				{
					tmp_int = va_arg(ap, int);
    2566:	8e 85       	ldd	r24, Y+14	; 0x0e
    2568:	9f 85       	ldd	r25, Y+15	; 0x0f
    256a:	9c 01       	movw	r18, r24
    256c:	2e 5f       	subi	r18, 0xFE	; 254
    256e:	3f 4f       	sbci	r19, 0xFF	; 255
    2570:	3f 87       	std	Y+15, r19	; 0x0f
    2572:	2e 87       	std	Y+14, r18	; 0x0e
    2574:	fc 01       	movw	r30, r24
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	9b 87       	std	Y+11, r25	; 0x0b
    257c:	8a 87       	std	Y+10, r24	; 0x0a
					print_int(tmp_int, znaminko, nula, mista_pred_carkou);
    257e:	2e 81       	ldd	r18, Y+6	; 0x06
    2580:	3f 81       	ldd	r19, Y+7	; 0x07
    2582:	8a 85       	ldd	r24, Y+10	; 0x0a
    2584:	9b 85       	ldd	r25, Y+11	; 0x0b
    2586:	4c 81       	ldd	r20, Y+4	; 0x04
    2588:	6b 81       	ldd	r22, Y+3	; 0x03
    258a:	0e 94 56 0f 	call	0x1eac	; 0x1eac <print_int>
    258e:	56 c0       	rjmp	.+172    	; 0x263c <lcd_printf+0x4c6>
				}
				else if (str[j] == 'f')
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	88 2f       	mov	r24, r24
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	28 8d       	ldd	r18, Y+24	; 0x18
    2598:	39 8d       	ldd	r19, Y+25	; 0x19
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	fc 01       	movw	r30, r24
    25a0:	80 81       	ld	r24, Z
    25a2:	86 36       	cpi	r24, 0x66	; 102
    25a4:	c9 f4       	brne	.+50     	; 0x25d8 <lcd_printf+0x462>
				{
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
    25a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    25aa:	9c 01       	movw	r18, r24
    25ac:	2c 5f       	subi	r18, 0xFC	; 252
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	3f 87       	std	Y+15, r19	; 0x0f
    25b2:	2e 87       	std	Y+14, r18	; 0x0e
    25b4:	fc 01       	movw	r30, r24
    25b6:	80 81       	ld	r24, Z
    25b8:	91 81       	ldd	r25, Z+1	; 0x01
    25ba:	a2 81       	ldd	r26, Z+2	; 0x02
    25bc:	b3 81       	ldd	r27, Z+3	; 0x03
    25be:	48 85       	ldd	r20, Y+8	; 0x08
    25c0:	59 85       	ldd	r21, Y+9	; 0x09
    25c2:	2e 81       	ldd	r18, Y+6	; 0x06
    25c4:	3f 81       	ldd	r19, Y+7	; 0x07
    25c6:	7a 01       	movw	r14, r20
    25c8:	89 01       	movw	r16, r18
    25ca:	2c 81       	ldd	r18, Y+4	; 0x04
    25cc:	4b 81       	ldd	r20, Y+3	; 0x03
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 08 10 	call	0x2010	; 0x2010 <print_double>
    25d6:	32 c0       	rjmp	.+100    	; 0x263c <lcd_printf+0x4c6>
				}
				else if (str[j] == 's')
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	28 8d       	ldd	r18, Y+24	; 0x18
    25e0:	39 8d       	ldd	r19, Y+25	; 0x19
    25e2:	82 0f       	add	r24, r18
    25e4:	93 1f       	adc	r25, r19
    25e6:	fc 01       	movw	r30, r24
    25e8:	80 81       	ld	r24, Z
    25ea:	83 37       	cpi	r24, 0x73	; 115
    25ec:	39 f5       	brne	.+78     	; 0x263c <lcd_printf+0x4c6>
				{
					str_p = va_arg(ap, char *);
    25ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f2:	9c 01       	movw	r18, r24
    25f4:	2e 5f       	subi	r18, 0xFE	; 254
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	3f 87       	std	Y+15, r19	; 0x0f
    25fa:	2e 87       	std	Y+14, r18	; 0x0e
    25fc:	fc 01       	movw	r30, r24
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	9d 87       	std	Y+13, r25	; 0x0d
    2604:	8c 87       	std	Y+12, r24	; 0x0c
					for (j=0; *(str_p + j) != '\0'; j++)
    2606:	1a 82       	std	Y+2, r1	; 0x02
    2608:	0e c0       	rjmp	.+28     	; 0x2626 <lcd_printf+0x4b0>
						lcd_put(*(str_p + j));
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	2c 85       	ldd	r18, Y+12	; 0x0c
    2612:	3d 85       	ldd	r19, Y+13	; 0x0d
    2614:	82 0f       	add	r24, r18
    2616:	93 1f       	adc	r25, r19
    2618:	fc 01       	movw	r30, r24
    261a:	80 81       	ld	r24, Z
    261c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
				}
				else if (str[j] == 's')
				{
					str_p = va_arg(ap, char *);
					for (j=0; *(str_p + j) != '\0'; j++)
    2620:	8a 81       	ldd	r24, Y+2	; 0x02
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	8a 83       	std	Y+2, r24	; 0x02
    2626:	8a 81       	ldd	r24, Y+2	; 0x02
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	2c 85       	ldd	r18, Y+12	; 0x0c
    262e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	fc 01       	movw	r30, r24
    2636:	80 81       	ld	r24, Z
    2638:	88 23       	and	r24, r24
    263a:	39 f7       	brne	.-50     	; 0x260a <lcd_printf+0x494>
						lcd_put(*(str_p + j));
				}

				// vynulovní formátovacích proměnných
				znaminko = '\0';
    263c:	1b 82       	std	Y+3, r1	; 0x03
				nula = '\0';
    263e:	1c 82       	std	Y+4, r1	; 0x04
				desetina_carka = '\0';
    2640:	1d 82       	std	Y+5, r1	; 0x05
				mista_pred_carkou = -1;
    2642:	8f ef       	ldi	r24, 0xFF	; 255
    2644:	9f ef       	ldi	r25, 0xFF	; 255
    2646:	9f 83       	std	Y+7, r25	; 0x07
    2648:	8e 83       	std	Y+6, r24	; 0x06
				mista_za_carkou = -1;
    264a:	8f ef       	ldi	r24, 0xFF	; 255
    264c:	9f ef       	ldi	r25, 0xFF	; 255
    264e:	99 87       	std	Y+9, r25	; 0x09
    2650:	88 87       	std	Y+8, r24	; 0x08
    2652:	0b c0       	rjmp	.+22     	; 0x266a <lcd_printf+0x4f4>
			}
		}
		else
		{
			lcd_put(str[i]);
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	88 2f       	mov	r24, r24
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	28 8d       	ldd	r18, Y+24	; 0x18
    265c:	39 8d       	ldd	r19, Y+25	; 0x19
    265e:	82 0f       	add	r24, r18
    2660:	93 1f       	adc	r25, r19
    2662:	fc 01       	movw	r30, r24
    2664:	80 81       	ld	r24, Z
    2666:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_put>
	 //va_list ap;
	 va_start(ap, str);



	for (i=0; str[i] != '\0'; i++)
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	8f 5f       	subi	r24, 0xFF	; 255
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	28 8d       	ldd	r18, Y+24	; 0x18
    2678:	39 8d       	ldd	r19, Y+25	; 0x19
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	fc 01       	movw	r30, r24
    2680:	80 81       	ld	r24, Z
    2682:	88 23       	and	r24, r24
    2684:	09 f0       	breq	.+2      	; 0x2688 <lcd_printf+0x512>
    2686:	96 cd       	rjmp	.-1236   	; 0x21b4 <lcd_printf+0x3e>
		{
			lcd_put(str[i]);
		}
	}
	va_end(ap);
}
    2688:	00 00       	nop
    268a:	2f 96       	adiw	r28, 0x0f	; 15
    268c:	0f b6       	in	r0, 0x3f	; 63
    268e:	f8 94       	cli
    2690:	de bf       	out	0x3e, r29	; 62
    2692:	0f be       	out	0x3f, r0	; 63
    2694:	cd bf       	out	0x3d, r28	; 61
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	ff 90       	pop	r15
    26a0:	ef 90       	pop	r14
    26a2:	08 95       	ret

000026a4 <motor_init>:
#include "wyk_step_stick.h"

void motor_init(void)
{
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ENA_DDR |= MOTOR_ENA_PIN;
    26ac:	8a e2       	ldi	r24, 0x2A	; 42
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	2a e2       	ldi	r18, 0x2A	; 42
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	f9 01       	movw	r30, r18
    26b6:	20 81       	ld	r18, Z
    26b8:	20 68       	ori	r18, 0x80	; 128
    26ba:	fc 01       	movw	r30, r24
    26bc:	20 83       	st	Z, r18
	MOTOR_DIR_DDR |= MOTOR_DIR_PIN;
    26be:	8a e2       	ldi	r24, 0x2A	; 42
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	2a e2       	ldi	r18, 0x2A	; 42
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	f9 01       	movw	r30, r18
    26c8:	20 81       	ld	r18, Z
    26ca:	20 62       	ori	r18, 0x20	; 32
    26cc:	fc 01       	movw	r30, r24
    26ce:	20 83       	st	Z, r18
	MOTOR_STEP_DDR |= MOTOR_STEP_PIN;
    26d0:	84 e2       	ldi	r24, 0x24	; 36
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	24 e2       	ldi	r18, 0x24	; 36
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	f9 01       	movw	r30, r18
    26da:	20 81       	ld	r18, Z
    26dc:	28 60       	ori	r18, 0x08	; 8
    26de:	fc 01       	movw	r30, r24
    26e0:	20 83       	st	Z, r18

	MOTOR_DRIVER_OFF;
    26e2:	8b e2       	ldi	r24, 0x2B	; 43
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	2b e2       	ldi	r18, 0x2B	; 43
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	f9 01       	movw	r30, r18
    26ec:	20 81       	ld	r18, Z
    26ee:	20 68       	ori	r18, 0x80	; 128
    26f0:	fc 01       	movw	r30, r24
    26f2:	20 83       	st	Z, r18
			MOTOR_MS1_1;
			MOTOR_MS2_1;
			MOTOR_MS3_0;
			break;
		default:
			MOTOR_MS1_1;
    26f4:	85 e2       	ldi	r24, 0x25	; 37
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	25 e2       	ldi	r18, 0x25	; 37
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	f9 01       	movw	r30, r18
    26fe:	20 81       	ld	r18, Z
    2700:	21 60       	ori	r18, 0x01	; 1
    2702:	fc 01       	movw	r30, r24
    2704:	20 83       	st	Z, r18
			MOTOR_MS2_1;
    2706:	85 e2       	ldi	r24, 0x25	; 37
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	25 e2       	ldi	r18, 0x25	; 37
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	f9 01       	movw	r30, r18
    2710:	20 81       	ld	r18, Z
    2712:	22 60       	ori	r18, 0x02	; 2
    2714:	fc 01       	movw	r30, r24
    2716:	20 83       	st	Z, r18
			MOTOR_MS3_1;
    2718:	85 e2       	ldi	r24, 0x25	; 37
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	25 e2       	ldi	r18, 0x25	; 37
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	f9 01       	movw	r30, r18
    2722:	20 81       	ld	r18, Z
    2724:	24 60       	ori	r18, 0x04	; 4
    2726:	fc 01       	movw	r30, r24
    2728:	20 83       	st	Z, r18
	}

	

	TCCR2A = (1<<COM2A0) | (1<<WGM21);				// toggle OCR2A CTC mode
    272a:	80 eb       	ldi	r24, 0xB0	; 176
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	22 e4       	ldi	r18, 0x42	; 66
    2730:	fc 01       	movw	r30, r24
    2732:	20 83       	st	Z, r18
	TCCR2B = 0;										// clock off
    2734:	81 eb       	ldi	r24, 0xB1	; 177
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	fc 01       	movw	r30, r24
    273a:	10 82       	st	Z, r1
	OCR2A = 0;
    273c:	83 eb       	ldi	r24, 0xB3	; 179
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	fc 01       	movw	r30, r24
    2742:	10 82       	st	Z, r1
	TCNT2 = 0;
    2744:	82 eb       	ldi	r24, 0xB2	; 178
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	fc 01       	movw	r30, r24
    274a:	10 82       	st	Z, r1
	MOTOR_DIR0;
    274c:	8b e2       	ldi	r24, 0x2B	; 43
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	2b e2       	ldi	r18, 0x2B	; 43
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	f9 01       	movw	r30, r18
    2756:	20 81       	ld	r18, Z
    2758:	2f 7d       	andi	r18, 0xDF	; 223
    275a:	fc 01       	movw	r30, r24
    275c:	20 83       	st	Z, r18
}
    275e:	00 00       	nop
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	08 95       	ret

00002766 <motor_set_rpm>:

void motor_set_rpm(uint16_t rpm)					// rote per minute
{
    2766:	8f 92       	push	r8
    2768:	9f 92       	push	r9
    276a:	af 92       	push	r10
    276c:	bf 92       	push	r11
    276e:	cf 92       	push	r12
    2770:	df 92       	push	r13
    2772:	ef 92       	push	r14
    2774:	ff 92       	push	r15
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	6a 97       	sbiw	r28, 0x1a	; 26
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	9a 8f       	std	Y+26, r25	; 0x1a
    278c:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t buf;
	const uint32_t freq = F_CPU*60;
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	98 ea       	ldi	r25, 0xA8	; 168
    2792:	a4 ed       	ldi	r26, 0xD4	; 212
    2794:	b5 e5       	ldi	r27, 0x55	; 85
    2796:	8a 83       	std	Y+2, r24	; 0x02
    2798:	9b 83       	std	Y+3, r25	; 0x03
    279a:	ac 83       	std	Y+4, r26	; 0x04
    279c:	bd 83       	std	Y+5, r27	; 0x05
	const uint16_t div[] = {1, 8, 32, 64, 128, 256, 1024};
    279e:	8e e0       	ldi	r24, 0x0E	; 14
    27a0:	e5 ec       	ldi	r30, 0xC5	; 197
    27a2:	f2 e0       	ldi	r31, 0x02	; 2
    27a4:	de 01       	movw	r26, r28
    27a6:	1b 96       	adiw	r26, 0x0b	; 11
    27a8:	01 90       	ld	r0, Z+
    27aa:	0d 92       	st	X+, r0
    27ac:	8a 95       	dec	r24
    27ae:	e1 f7       	brne	.-8      	; 0x27a8 <motor_set_rpm+0x42>
	const uint8_t div_len = 7;
    27b0:	87 e0       	ldi	r24, 0x07	; 7
    27b2:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t i;

	if (rpm)
    27b4:	89 8d       	ldd	r24, Y+25	; 0x19
    27b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27b8:	89 2b       	or	r24, r25
    27ba:	09 f4       	brne	.+2      	; 0x27be <motor_set_rpm+0x58>
    27bc:	94 c0       	rjmp	.+296    	; 0x28e6 <motor_set_rpm+0x180>
	{
		for (i=0; i<div_len; i++)
    27be:	19 82       	std	Y+1, r1	; 0x01
    27c0:	8c c0       	rjmp	.+280    	; 0x28da <motor_set_rpm+0x174>
		{
			buf = freq / ( ((uint32_t)rpm) * MOTOR_PERIOD * 2 * div[i] );
    27c2:	6a 81       	ldd	r22, Y+2	; 0x02
    27c4:	7b 81       	ldd	r23, Y+3	; 0x03
    27c6:	8c 81       	ldd	r24, Y+4	; 0x04
    27c8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ca:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
    27ce:	6b 01       	movw	r12, r22
    27d0:	7c 01       	movw	r14, r24
    27d2:	89 8d       	ldd	r24, Y+25	; 0x19
    27d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27d6:	9c 01       	movw	r18, r24
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	50 e0       	ldi	r21, 0x00	; 0
    27dc:	88 e6       	ldi	r24, 0x68	; 104
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	dc 01       	movw	r26, r24
    27e2:	0e 94 28 18 	call	0x3050	; 0x3050 <__muluhisi3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	26 e6       	ldi	r18, 0x66	; 102
    27f8:	36 e6       	ldi	r19, 0x66	; 102
    27fa:	46 ee       	ldi	r20, 0xE6	; 230
    27fc:	5d e3       	ldi	r21, 0x3D	; 61
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9c 01       	movw	r18, r24
    280c:	ad 01       	movw	r20, r26
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__addsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	4c 01       	movw	r8, r24
    281c:	5d 01       	movw	r10, r26
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	88 2f       	mov	r24, r24
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	9e 01       	movw	r18, r28
    282a:	2f 5f       	subi	r18, 0xFF	; 255
    282c:	3f 4f       	sbci	r19, 0xFF	; 255
    282e:	82 0f       	add	r24, r18
    2830:	93 1f       	adc	r25, r19
    2832:	0a 96       	adiw	r24, 0x0a	; 10
    2834:	fc 01       	movw	r30, r24
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	cc 01       	movw	r24, r24
    283c:	a0 e0       	ldi	r26, 0x00	; 0
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__floatunsisf>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9c 01       	movw	r18, r24
    284e:	ad 01       	movw	r20, r26
    2850:	c5 01       	movw	r24, r10
    2852:	b4 01       	movw	r22, r8
    2854:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9c 01       	movw	r18, r24
    285e:	ad 01       	movw	r20, r26
    2860:	c7 01       	movw	r24, r14
    2862:	b6 01       	movw	r22, r12
    2864:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	8f 83       	std	Y+7, r24	; 0x07
    287a:	98 87       	std	Y+8, r25	; 0x08
    287c:	a9 87       	std	Y+9, r26	; 0x09
    287e:	ba 87       	std	Y+10, r27	; 0x0a
			if (buf < 0xFF && buf > 0)
    2880:	8f 81       	ldd	r24, Y+7	; 0x07
    2882:	98 85       	ldd	r25, Y+8	; 0x08
    2884:	a9 85       	ldd	r26, Y+9	; 0x09
    2886:	ba 85       	ldd	r27, Y+10	; 0x0a
    2888:	8f 3f       	cpi	r24, 0xFF	; 255
    288a:	91 05       	cpc	r25, r1
    288c:	a1 05       	cpc	r26, r1
    288e:	b1 05       	cpc	r27, r1
    2890:	08 f5       	brcc	.+66     	; 0x28d4 <motor_set_rpm+0x16e>
    2892:	8f 81       	ldd	r24, Y+7	; 0x07
    2894:	98 85       	ldd	r25, Y+8	; 0x08
    2896:	a9 85       	ldd	r26, Y+9	; 0x09
    2898:	ba 85       	ldd	r27, Y+10	; 0x0a
    289a:	89 2b       	or	r24, r25
    289c:	8a 2b       	or	r24, r26
    289e:	8b 2b       	or	r24, r27
    28a0:	c9 f0       	breq	.+50     	; 0x28d4 <motor_set_rpm+0x16e>
			{
				TCCR2B = i+1;						// clock/div[i]
    28a2:	81 eb       	ldi	r24, 0xB1	; 177
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	29 81       	ldd	r18, Y+1	; 0x01
    28a8:	2f 5f       	subi	r18, 0xFF	; 255
    28aa:	fc 01       	movw	r30, r24
    28ac:	20 83       	st	Z, r18
				OCR2A = (uint8_t )buf;
    28ae:	83 eb       	ldi	r24, 0xB3	; 179
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	2f 81       	ldd	r18, Y+7	; 0x07
    28b4:	fc 01       	movw	r30, r24
    28b6:	20 83       	st	Z, r18
				TCNT2 = 0;
    28b8:	82 eb       	ldi	r24, 0xB2	; 178
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	fc 01       	movw	r30, r24
    28be:	10 82       	st	Z, r1
				MOTOR_DRIVER_ON;
    28c0:	8b e2       	ldi	r24, 0x2B	; 43
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	2b e2       	ldi	r18, 0x2B	; 43
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	f9 01       	movw	r30, r18
    28ca:	20 81       	ld	r18, Z
    28cc:	2f 77       	andi	r18, 0x7F	; 127
    28ce:	fc 01       	movw	r30, r24
    28d0:	20 83       	st	Z, r18
				break;
    28d2:	16 c0       	rjmp	.+44     	; 0x2900 <motor_set_rpm+0x19a>

	uint8_t i;

	if (rpm)
	{
		for (i=0; i<div_len; i++)
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	8f 5f       	subi	r24, 0xFF	; 255
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	99 81       	ldd	r25, Y+1	; 0x01
    28dc:	8e 81       	ldd	r24, Y+6	; 0x06
    28de:	98 17       	cp	r25, r24
    28e0:	08 f4       	brcc	.+2      	; 0x28e4 <motor_set_rpm+0x17e>
    28e2:	6f cf       	rjmp	.-290    	; 0x27c2 <motor_set_rpm+0x5c>
    28e4:	0d c0       	rjmp	.+26     	; 0x2900 <motor_set_rpm+0x19a>
			}
		}
	}
	else
	{
		TCCR2B = 0x00;
    28e6:	81 eb       	ldi	r24, 0xB1	; 177
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	fc 01       	movw	r30, r24
    28ec:	10 82       	st	Z, r1
		MOTOR_DRIVER_OFF;
    28ee:	8b e2       	ldi	r24, 0x2B	; 43
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	2b e2       	ldi	r18, 0x2B	; 43
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	f9 01       	movw	r30, r18
    28f8:	20 81       	ld	r18, Z
    28fa:	20 68       	ori	r18, 0x80	; 128
    28fc:	fc 01       	movw	r30, r24
    28fe:	20 83       	st	Z, r18
	}
	actual_rmp = rpm;
    2900:	89 8d       	ldd	r24, Y+25	; 0x19
    2902:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2904:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <actual_rmp+0x1>
    2908:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <actual_rmp>
}
    290c:	00 00       	nop
    290e:	6a 96       	adiw	r28, 0x1a	; 26
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	ff 90       	pop	r15
    2920:	ef 90       	pop	r14
    2922:	df 90       	pop	r13
    2924:	cf 90       	pop	r12
    2926:	bf 90       	pop	r11
    2928:	af 90       	pop	r10
    292a:	9f 90       	pop	r9
    292c:	8f 90       	pop	r8
    292e:	08 95       	ret

00002930 <motor_smoothly_rmp>:


void motor_smoothly_rmp(uint16_t rpm_start, uint16_t rpm_end)
{
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	65 97       	sbiw	r28, 0x15	; 21
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	9b 8b       	std	Y+19, r25	; 0x13
    2946:	8a 8b       	std	Y+18, r24	; 0x12
    2948:	7d 8b       	std	Y+21, r23	; 0x15
    294a:	6c 8b       	std	Y+20, r22	; 0x14
	uint16_t rpm;
	int8_t step;
	
	if (rpm_start < rpm_end)
    294c:	2a 89       	ldd	r18, Y+18	; 0x12
    294e:	3b 89       	ldd	r19, Y+19	; 0x13
    2950:	8c 89       	ldd	r24, Y+20	; 0x14
    2952:	9d 89       	ldd	r25, Y+21	; 0x15
    2954:	28 17       	cp	r18, r24
    2956:	39 07       	cpc	r19, r25
    2958:	18 f4       	brcc	.+6      	; 0x2960 <motor_smoothly_rmp+0x30>
	{
		step = 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	8b 83       	std	Y+3, r24	; 0x03
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <motor_smoothly_rmp+0x34>
	}
	else
	{
		step = -1;
    2960:	8f ef       	ldi	r24, 0xFF	; 255
    2962:	8b 83       	std	Y+3, r24	; 0x03
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2964:	8a 89       	ldd	r24, Y+18	; 0x12
    2966:	9b 89       	ldd	r25, Y+19	; 0x13
    2968:	9a 83       	std	Y+2, r25	; 0x02
    296a:	89 83       	std	Y+1, r24	; 0x01
    296c:	a5 c0       	rjmp	.+330    	; 0x2ab8 <motor_smoothly_rmp+0x188>
	{
		user_profile.rpm = rpm;
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	9a 81       	ldd	r25, Y+2	; 0x02
    2972:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <user_profile+0x1>
    2976:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <user_profile>
		if (!(user_profile.rpm % 20))
    297a:	40 91 db 02 	lds	r20, 0x02DB	; 0x8002db <user_profile>
    297e:	50 91 dc 02 	lds	r21, 0x02DC	; 0x8002dc <user_profile+0x1>
    2982:	9a 01       	movw	r18, r20
    2984:	ad ec       	ldi	r26, 0xCD	; 205
    2986:	bc ec       	ldi	r27, 0xCC	; 204
    2988:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
    298c:	92 95       	swap	r25
    298e:	82 95       	swap	r24
    2990:	8f 70       	andi	r24, 0x0F	; 15
    2992:	89 27       	eor	r24, r25
    2994:	9f 70       	andi	r25, 0x0F	; 15
    2996:	89 27       	eor	r24, r25
    2998:	64 e1       	ldi	r22, 0x14	; 20
    299a:	68 9f       	mul	r22, r24
    299c:	90 01       	movw	r18, r0
    299e:	69 9f       	mul	r22, r25
    29a0:	30 0d       	add	r19, r0
    29a2:	11 24       	eor	r1, r1
    29a4:	ca 01       	movw	r24, r20
    29a6:	82 1b       	sub	r24, r18
    29a8:	93 0b       	sbc	r25, r19
    29aa:	89 2b       	or	r24, r25
    29ac:	19 f4       	brne	.+6      	; 0x29b4 <motor_smoothly_rmp+0x84>
			TUI('s');
    29ae:	83 e7       	ldi	r24, 0x73	; 115
    29b0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TUI>
		motor_set_rpm(user_profile.rpm);
    29b4:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile>
    29b8:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x1>
    29bc:	0e 94 b3 13 	call	0x2766	; 0x2766 <motor_set_rpm>
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	a0 ef       	ldi	r26, 0xF0	; 240
    29c6:	b1 e4       	ldi	r27, 0x41	; 65
    29c8:	8c 83       	std	Y+4, r24	; 0x04
    29ca:	9d 83       	std	Y+5, r25	; 0x05
    29cc:	ae 83       	std	Y+6, r26	; 0x06
    29ce:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e8       	ldi	r19, 0x80	; 128
    29d4:	4b eb       	ldi	r20, 0xBB	; 187
    29d6:	55 e4       	ldi	r21, 0x45	; 69
    29d8:	6c 81       	ldd	r22, Y+4	; 0x04
    29da:	7d 81       	ldd	r23, Y+5	; 0x05
    29dc:	8e 81       	ldd	r24, Y+6	; 0x06
    29de:	9f 81       	ldd	r25, Y+7	; 0x07
    29e0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	88 87       	std	Y+8, r24	; 0x08
    29ea:	99 87       	std	Y+9, r25	; 0x09
    29ec:	aa 87       	std	Y+10, r26	; 0x0a
    29ee:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	68 85       	ldd	r22, Y+8	; 0x08
    29fa:	79 85       	ldd	r23, Y+9	; 0x09
    29fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    29fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a00:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <__cmpsf2>
    2a04:	88 23       	and	r24, r24
    2a06:	2c f4       	brge	.+10     	; 0x2a12 <motor_smoothly_rmp+0xe2>
		__ticks = 1;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9d 87       	std	Y+13, r25	; 0x0d
    2a0e:	8c 87       	std	Y+12, r24	; 0x0c
    2a10:	3f c0       	rjmp	.+126    	; 0x2a90 <motor_smoothly_rmp+0x160>
	else if (__tmp > 65535)
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	3f ef       	ldi	r19, 0xFF	; 255
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	68 85       	ldd	r22, Y+8	; 0x08
    2a1c:	79 85       	ldd	r23, Y+9	; 0x09
    2a1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a22:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__gesf2>
    2a26:	18 16       	cp	r1, r24
    2a28:	4c f5       	brge	.+82     	; 0x2a7c <motor_smoothly_rmp+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	6c 81       	ldd	r22, Y+4	; 0x04
    2a34:	7d 81       	ldd	r23, Y+5	; 0x05
    2a36:	8e 81       	ldd	r24, Y+6	; 0x06
    2a38:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	bc 01       	movw	r22, r24
    2a44:	cd 01       	movw	r24, r26
    2a46:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	9d 87       	std	Y+13, r25	; 0x0d
    2a50:	8c 87       	std	Y+12, r24	; 0x0c
    2a52:	0f c0       	rjmp	.+30     	; 0x2a72 <motor_smoothly_rmp+0x142>
    2a54:	88 e5       	ldi	r24, 0x58	; 88
    2a56:	92 e0       	ldi	r25, 0x02	; 2
    2a58:	9f 87       	std	Y+15, r25	; 0x0f
    2a5a:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <motor_smoothly_rmp+0x130>
    2a64:	9f 87       	std	Y+15, r25	; 0x0f
    2a66:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	9d 87       	std	Y+13, r25	; 0x0d
    2a70:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a74:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a76:	89 2b       	or	r24, r25
    2a78:	69 f7       	brne	.-38     	; 0x2a54 <motor_smoothly_rmp+0x124>
    2a7a:	14 c0       	rjmp	.+40     	; 0x2aa4 <motor_smoothly_rmp+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a7c:	68 85       	ldd	r22, Y+8	; 0x08
    2a7e:	79 85       	ldd	r23, Y+9	; 0x09
    2a80:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a82:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a84:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9d 87       	std	Y+13, r25	; 0x0d
    2a8e:	8c 87       	std	Y+12, r24	; 0x0c
    2a90:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a92:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a94:	99 8b       	std	Y+17, r25	; 0x11
    2a96:	88 8b       	std	Y+16, r24	; 0x10
    2a98:	88 89       	ldd	r24, Y+16	; 0x10
    2a9a:	99 89       	ldd	r25, Y+17	; 0x11
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <motor_smoothly_rmp+0x16c>
    2aa0:	99 8b       	std	Y+17, r25	; 0x11
    2aa2:	88 8b       	std	Y+16, r24	; 0x10
	else
	{
		step = -1;
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	08 2e       	mov	r0, r24
    2aa8:	00 0c       	add	r0, r0
    2aaa:	99 0b       	sbc	r25, r25
    2aac:	29 81       	ldd	r18, Y+1	; 0x01
    2aae:	3a 81       	ldd	r19, Y+2	; 0x02
    2ab0:	82 0f       	add	r24, r18
    2ab2:	93 1f       	adc	r25, r19
    2ab4:	9a 83       	std	Y+2, r25	; 0x02
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	28 2f       	mov	r18, r24
    2abc:	88 0f       	add	r24, r24
    2abe:	33 0b       	sbc	r19, r19
    2ac0:	8c 89       	ldd	r24, Y+20	; 0x14
    2ac2:	9d 89       	ldd	r25, Y+21	; 0x15
    2ac4:	28 0f       	add	r18, r24
    2ac6:	39 1f       	adc	r19, r25
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	28 17       	cp	r18, r24
    2ace:	39 07       	cpc	r19, r25
    2ad0:	59 f0       	breq	.+22     	; 0x2ae8 <motor_smoothly_rmp+0x1b8>
    2ad2:	8c e3       	ldi	r24, 0x3C	; 60
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	80 81       	ld	r24, Z
    2ada:	88 2f       	mov	r24, r24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	81 70       	andi	r24, 0x01	; 1
    2ae0:	99 27       	eor	r25, r25
    2ae2:	89 2b       	or	r24, r25
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <motor_smoothly_rmp+0x1b8>
    2ae6:	43 cf       	rjmp	.-378    	; 0x296e <motor_smoothly_rmp+0x3e>
		if (!(user_profile.rpm % 20))
			TUI('s');
		motor_set_rpm(user_profile.rpm);
		_delay_ms(30);
	}
	TUI('s');
    2ae8:	83 e7       	ldi	r24, 0x73	; 115
    2aea:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TUI>
}
    2aee:	00 00       	nop
    2af0:	65 96       	adiw	r28, 0x15	; 21
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	df 91       	pop	r29
    2afe:	cf 91       	pop	r28
    2b00:	08 95       	ret

00002b02 <__subsf3>:
    2b02:	50 58       	subi	r21, 0x80	; 128

00002b04 <__addsf3>:
    2b04:	bb 27       	eor	r27, r27
    2b06:	aa 27       	eor	r26, r26
    2b08:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__addsf3x>
    2b0c:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2b10:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2b14:	38 f0       	brcs	.+14     	; 0x2b24 <__addsf3+0x20>
    2b16:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2b1a:	20 f0       	brcs	.+8      	; 0x2b24 <__addsf3+0x20>
    2b1c:	39 f4       	brne	.+14     	; 0x2b2c <__addsf3+0x28>
    2b1e:	9f 3f       	cpi	r25, 0xFF	; 255
    2b20:	19 f4       	brne	.+6      	; 0x2b28 <__addsf3+0x24>
    2b22:	26 f4       	brtc	.+8      	; 0x2b2c <__addsf3+0x28>
    2b24:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>
    2b28:	0e f4       	brtc	.+2      	; 0x2b2c <__addsf3+0x28>
    2b2a:	e0 95       	com	r30
    2b2c:	e7 fb       	bst	r30, 7
    2b2e:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>

00002b32 <__addsf3x>:
    2b32:	e9 2f       	mov	r30, r25
    2b34:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2b38:	58 f3       	brcs	.-42     	; 0x2b10 <__addsf3+0xc>
    2b3a:	ba 17       	cp	r27, r26
    2b3c:	62 07       	cpc	r22, r18
    2b3e:	73 07       	cpc	r23, r19
    2b40:	84 07       	cpc	r24, r20
    2b42:	95 07       	cpc	r25, r21
    2b44:	20 f0       	brcs	.+8      	; 0x2b4e <__addsf3x+0x1c>
    2b46:	79 f4       	brne	.+30     	; 0x2b66 <__addsf3x+0x34>
    2b48:	a6 f5       	brtc	.+104    	; 0x2bb2 <__addsf3x+0x80>
    2b4a:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__fp_zero>
    2b4e:	0e f4       	brtc	.+2      	; 0x2b52 <__addsf3x+0x20>
    2b50:	e0 95       	com	r30
    2b52:	0b 2e       	mov	r0, r27
    2b54:	ba 2f       	mov	r27, r26
    2b56:	a0 2d       	mov	r26, r0
    2b58:	0b 01       	movw	r0, r22
    2b5a:	b9 01       	movw	r22, r18
    2b5c:	90 01       	movw	r18, r0
    2b5e:	0c 01       	movw	r0, r24
    2b60:	ca 01       	movw	r24, r20
    2b62:	a0 01       	movw	r20, r0
    2b64:	11 24       	eor	r1, r1
    2b66:	ff 27       	eor	r31, r31
    2b68:	59 1b       	sub	r21, r25
    2b6a:	99 f0       	breq	.+38     	; 0x2b92 <__addsf3x+0x60>
    2b6c:	59 3f       	cpi	r21, 0xF9	; 249
    2b6e:	50 f4       	brcc	.+20     	; 0x2b84 <__addsf3x+0x52>
    2b70:	50 3e       	cpi	r21, 0xE0	; 224
    2b72:	68 f1       	brcs	.+90     	; 0x2bce <__addsf3x+0x9c>
    2b74:	1a 16       	cp	r1, r26
    2b76:	f0 40       	sbci	r31, 0x00	; 0
    2b78:	a2 2f       	mov	r26, r18
    2b7a:	23 2f       	mov	r18, r19
    2b7c:	34 2f       	mov	r19, r20
    2b7e:	44 27       	eor	r20, r20
    2b80:	58 5f       	subi	r21, 0xF8	; 248
    2b82:	f3 cf       	rjmp	.-26     	; 0x2b6a <__addsf3x+0x38>
    2b84:	46 95       	lsr	r20
    2b86:	37 95       	ror	r19
    2b88:	27 95       	ror	r18
    2b8a:	a7 95       	ror	r26
    2b8c:	f0 40       	sbci	r31, 0x00	; 0
    2b8e:	53 95       	inc	r21
    2b90:	c9 f7       	brne	.-14     	; 0x2b84 <__addsf3x+0x52>
    2b92:	7e f4       	brtc	.+30     	; 0x2bb2 <__addsf3x+0x80>
    2b94:	1f 16       	cp	r1, r31
    2b96:	ba 0b       	sbc	r27, r26
    2b98:	62 0b       	sbc	r22, r18
    2b9a:	73 0b       	sbc	r23, r19
    2b9c:	84 0b       	sbc	r24, r20
    2b9e:	ba f0       	brmi	.+46     	; 0x2bce <__addsf3x+0x9c>
    2ba0:	91 50       	subi	r25, 0x01	; 1
    2ba2:	a1 f0       	breq	.+40     	; 0x2bcc <__addsf3x+0x9a>
    2ba4:	ff 0f       	add	r31, r31
    2ba6:	bb 1f       	adc	r27, r27
    2ba8:	66 1f       	adc	r22, r22
    2baa:	77 1f       	adc	r23, r23
    2bac:	88 1f       	adc	r24, r24
    2bae:	c2 f7       	brpl	.-16     	; 0x2ba0 <__addsf3x+0x6e>
    2bb0:	0e c0       	rjmp	.+28     	; 0x2bce <__addsf3x+0x9c>
    2bb2:	ba 0f       	add	r27, r26
    2bb4:	62 1f       	adc	r22, r18
    2bb6:	73 1f       	adc	r23, r19
    2bb8:	84 1f       	adc	r24, r20
    2bba:	48 f4       	brcc	.+18     	; 0x2bce <__addsf3x+0x9c>
    2bbc:	87 95       	ror	r24
    2bbe:	77 95       	ror	r23
    2bc0:	67 95       	ror	r22
    2bc2:	b7 95       	ror	r27
    2bc4:	f7 95       	ror	r31
    2bc6:	9e 3f       	cpi	r25, 0xFE	; 254
    2bc8:	08 f0       	brcs	.+2      	; 0x2bcc <__addsf3x+0x9a>
    2bca:	b0 cf       	rjmp	.-160    	; 0x2b2c <__addsf3+0x28>
    2bcc:	93 95       	inc	r25
    2bce:	88 0f       	add	r24, r24
    2bd0:	08 f0       	brcs	.+2      	; 0x2bd4 <__addsf3x+0xa2>
    2bd2:	99 27       	eor	r25, r25
    2bd4:	ee 0f       	add	r30, r30
    2bd6:	97 95       	ror	r25
    2bd8:	87 95       	ror	r24
    2bda:	08 95       	ret

00002bdc <__cmpsf2>:
    2bdc:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_cmp>
    2be0:	08 f4       	brcc	.+2      	; 0x2be4 <__cmpsf2+0x8>
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	08 95       	ret

00002be6 <__divsf3>:
    2be6:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__divsf3x>
    2bea:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2bee:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2bf2:	58 f0       	brcs	.+22     	; 0x2c0a <__divsf3+0x24>
    2bf4:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2bf8:	40 f0       	brcs	.+16     	; 0x2c0a <__divsf3+0x24>
    2bfa:	29 f4       	brne	.+10     	; 0x2c06 <__divsf3+0x20>
    2bfc:	5f 3f       	cpi	r21, 0xFF	; 255
    2bfe:	29 f0       	breq	.+10     	; 0x2c0a <__divsf3+0x24>
    2c00:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2c04:	51 11       	cpse	r21, r1
    2c06:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2c0a:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>

00002c0e <__divsf3x>:
    2c0e:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2c12:	68 f3       	brcs	.-38     	; 0x2bee <__divsf3+0x8>

00002c14 <__divsf3_pse>:
    2c14:	99 23       	and	r25, r25
    2c16:	b1 f3       	breq	.-20     	; 0x2c04 <__divsf3+0x1e>
    2c18:	55 23       	and	r21, r21
    2c1a:	91 f3       	breq	.-28     	; 0x2c00 <__divsf3+0x1a>
    2c1c:	95 1b       	sub	r25, r21
    2c1e:	55 0b       	sbc	r21, r21
    2c20:	bb 27       	eor	r27, r27
    2c22:	aa 27       	eor	r26, r26
    2c24:	62 17       	cp	r22, r18
    2c26:	73 07       	cpc	r23, r19
    2c28:	84 07       	cpc	r24, r20
    2c2a:	38 f0       	brcs	.+14     	; 0x2c3a <__divsf3_pse+0x26>
    2c2c:	9f 5f       	subi	r25, 0xFF	; 255
    2c2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c30:	22 0f       	add	r18, r18
    2c32:	33 1f       	adc	r19, r19
    2c34:	44 1f       	adc	r20, r20
    2c36:	aa 1f       	adc	r26, r26
    2c38:	a9 f3       	breq	.-22     	; 0x2c24 <__divsf3_pse+0x10>
    2c3a:	35 d0       	rcall	.+106    	; 0x2ca6 <__divsf3_pse+0x92>
    2c3c:	0e 2e       	mov	r0, r30
    2c3e:	3a f0       	brmi	.+14     	; 0x2c4e <__divsf3_pse+0x3a>
    2c40:	e0 e8       	ldi	r30, 0x80	; 128
    2c42:	32 d0       	rcall	.+100    	; 0x2ca8 <__divsf3_pse+0x94>
    2c44:	91 50       	subi	r25, 0x01	; 1
    2c46:	50 40       	sbci	r21, 0x00	; 0
    2c48:	e6 95       	lsr	r30
    2c4a:	00 1c       	adc	r0, r0
    2c4c:	ca f7       	brpl	.-14     	; 0x2c40 <__divsf3_pse+0x2c>
    2c4e:	2b d0       	rcall	.+86     	; 0x2ca6 <__divsf3_pse+0x92>
    2c50:	fe 2f       	mov	r31, r30
    2c52:	29 d0       	rcall	.+82     	; 0x2ca6 <__divsf3_pse+0x92>
    2c54:	66 0f       	add	r22, r22
    2c56:	77 1f       	adc	r23, r23
    2c58:	88 1f       	adc	r24, r24
    2c5a:	bb 1f       	adc	r27, r27
    2c5c:	26 17       	cp	r18, r22
    2c5e:	37 07       	cpc	r19, r23
    2c60:	48 07       	cpc	r20, r24
    2c62:	ab 07       	cpc	r26, r27
    2c64:	b0 e8       	ldi	r27, 0x80	; 128
    2c66:	09 f0       	breq	.+2      	; 0x2c6a <__divsf3_pse+0x56>
    2c68:	bb 0b       	sbc	r27, r27
    2c6a:	80 2d       	mov	r24, r0
    2c6c:	bf 01       	movw	r22, r30
    2c6e:	ff 27       	eor	r31, r31
    2c70:	93 58       	subi	r25, 0x83	; 131
    2c72:	5f 4f       	sbci	r21, 0xFF	; 255
    2c74:	3a f0       	brmi	.+14     	; 0x2c84 <__divsf3_pse+0x70>
    2c76:	9e 3f       	cpi	r25, 0xFE	; 254
    2c78:	51 05       	cpc	r21, r1
    2c7a:	78 f0       	brcs	.+30     	; 0x2c9a <__divsf3_pse+0x86>
    2c7c:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2c80:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2c84:	5f 3f       	cpi	r21, 0xFF	; 255
    2c86:	e4 f3       	brlt	.-8      	; 0x2c80 <__divsf3_pse+0x6c>
    2c88:	98 3e       	cpi	r25, 0xE8	; 232
    2c8a:	d4 f3       	brlt	.-12     	; 0x2c80 <__divsf3_pse+0x6c>
    2c8c:	86 95       	lsr	r24
    2c8e:	77 95       	ror	r23
    2c90:	67 95       	ror	r22
    2c92:	b7 95       	ror	r27
    2c94:	f7 95       	ror	r31
    2c96:	9f 5f       	subi	r25, 0xFF	; 255
    2c98:	c9 f7       	brne	.-14     	; 0x2c8c <__divsf3_pse+0x78>
    2c9a:	88 0f       	add	r24, r24
    2c9c:	91 1d       	adc	r25, r1
    2c9e:	96 95       	lsr	r25
    2ca0:	87 95       	ror	r24
    2ca2:	97 f9       	bld	r25, 7
    2ca4:	08 95       	ret
    2ca6:	e1 e0       	ldi	r30, 0x01	; 1
    2ca8:	66 0f       	add	r22, r22
    2caa:	77 1f       	adc	r23, r23
    2cac:	88 1f       	adc	r24, r24
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	62 17       	cp	r22, r18
    2cb2:	73 07       	cpc	r23, r19
    2cb4:	84 07       	cpc	r24, r20
    2cb6:	ba 07       	cpc	r27, r26
    2cb8:	20 f0       	brcs	.+8      	; 0x2cc2 <__divsf3_pse+0xae>
    2cba:	62 1b       	sub	r22, r18
    2cbc:	73 0b       	sbc	r23, r19
    2cbe:	84 0b       	sbc	r24, r20
    2cc0:	ba 0b       	sbc	r27, r26
    2cc2:	ee 1f       	adc	r30, r30
    2cc4:	88 f7       	brcc	.-30     	; 0x2ca8 <__divsf3_pse+0x94>
    2cc6:	e0 95       	com	r30
    2cc8:	08 95       	ret

00002cca <__fixsfsi>:
    2cca:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <__fixunssfsi>
    2cce:	68 94       	set
    2cd0:	b1 11       	cpse	r27, r1
    2cd2:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2cd6:	08 95       	ret

00002cd8 <__fixunssfsi>:
    2cd8:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <__fp_splitA>
    2cdc:	88 f0       	brcs	.+34     	; 0x2d00 <__fixunssfsi+0x28>
    2cde:	9f 57       	subi	r25, 0x7F	; 127
    2ce0:	98 f0       	brcs	.+38     	; 0x2d08 <__fixunssfsi+0x30>
    2ce2:	b9 2f       	mov	r27, r25
    2ce4:	99 27       	eor	r25, r25
    2ce6:	b7 51       	subi	r27, 0x17	; 23
    2ce8:	b0 f0       	brcs	.+44     	; 0x2d16 <__fixunssfsi+0x3e>
    2cea:	e1 f0       	breq	.+56     	; 0x2d24 <__fixunssfsi+0x4c>
    2cec:	66 0f       	add	r22, r22
    2cee:	77 1f       	adc	r23, r23
    2cf0:	88 1f       	adc	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	1a f0       	brmi	.+6      	; 0x2cfc <__fixunssfsi+0x24>
    2cf6:	ba 95       	dec	r27
    2cf8:	c9 f7       	brne	.-14     	; 0x2cec <__fixunssfsi+0x14>
    2cfa:	14 c0       	rjmp	.+40     	; 0x2d24 <__fixunssfsi+0x4c>
    2cfc:	b1 30       	cpi	r27, 0x01	; 1
    2cfe:	91 f0       	breq	.+36     	; 0x2d24 <__fixunssfsi+0x4c>
    2d00:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <__fp_zero>
    2d04:	b1 e0       	ldi	r27, 0x01	; 1
    2d06:	08 95       	ret
    2d08:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__fp_zero>
    2d0c:	67 2f       	mov	r22, r23
    2d0e:	78 2f       	mov	r23, r24
    2d10:	88 27       	eor	r24, r24
    2d12:	b8 5f       	subi	r27, 0xF8	; 248
    2d14:	39 f0       	breq	.+14     	; 0x2d24 <__fixunssfsi+0x4c>
    2d16:	b9 3f       	cpi	r27, 0xF9	; 249
    2d18:	cc f3       	brlt	.-14     	; 0x2d0c <__fixunssfsi+0x34>
    2d1a:	86 95       	lsr	r24
    2d1c:	77 95       	ror	r23
    2d1e:	67 95       	ror	r22
    2d20:	b3 95       	inc	r27
    2d22:	d9 f7       	brne	.-10     	; 0x2d1a <__fixunssfsi+0x42>
    2d24:	3e f4       	brtc	.+14     	; 0x2d34 <__fixunssfsi+0x5c>
    2d26:	90 95       	com	r25
    2d28:	80 95       	com	r24
    2d2a:	70 95       	com	r23
    2d2c:	61 95       	neg	r22
    2d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d30:	8f 4f       	sbci	r24, 0xFF	; 255
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	08 95       	ret

00002d36 <__floatunsisf>:
    2d36:	e8 94       	clt
    2d38:	09 c0       	rjmp	.+18     	; 0x2d4c <__floatsisf+0x12>

00002d3a <__floatsisf>:
    2d3a:	97 fb       	bst	r25, 7
    2d3c:	3e f4       	brtc	.+14     	; 0x2d4c <__floatsisf+0x12>
    2d3e:	90 95       	com	r25
    2d40:	80 95       	com	r24
    2d42:	70 95       	com	r23
    2d44:	61 95       	neg	r22
    2d46:	7f 4f       	sbci	r23, 0xFF	; 255
    2d48:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4c:	99 23       	and	r25, r25
    2d4e:	a9 f0       	breq	.+42     	; 0x2d7a <__floatsisf+0x40>
    2d50:	f9 2f       	mov	r31, r25
    2d52:	96 e9       	ldi	r25, 0x96	; 150
    2d54:	bb 27       	eor	r27, r27
    2d56:	93 95       	inc	r25
    2d58:	f6 95       	lsr	r31
    2d5a:	87 95       	ror	r24
    2d5c:	77 95       	ror	r23
    2d5e:	67 95       	ror	r22
    2d60:	b7 95       	ror	r27
    2d62:	f1 11       	cpse	r31, r1
    2d64:	f8 cf       	rjmp	.-16     	; 0x2d56 <__floatsisf+0x1c>
    2d66:	fa f4       	brpl	.+62     	; 0x2da6 <__floatsisf+0x6c>
    2d68:	bb 0f       	add	r27, r27
    2d6a:	11 f4       	brne	.+4      	; 0x2d70 <__floatsisf+0x36>
    2d6c:	60 ff       	sbrs	r22, 0
    2d6e:	1b c0       	rjmp	.+54     	; 0x2da6 <__floatsisf+0x6c>
    2d70:	6f 5f       	subi	r22, 0xFF	; 255
    2d72:	7f 4f       	sbci	r23, 0xFF	; 255
    2d74:	8f 4f       	sbci	r24, 0xFF	; 255
    2d76:	9f 4f       	sbci	r25, 0xFF	; 255
    2d78:	16 c0       	rjmp	.+44     	; 0x2da6 <__floatsisf+0x6c>
    2d7a:	88 23       	and	r24, r24
    2d7c:	11 f0       	breq	.+4      	; 0x2d82 <__floatsisf+0x48>
    2d7e:	96 e9       	ldi	r25, 0x96	; 150
    2d80:	11 c0       	rjmp	.+34     	; 0x2da4 <__floatsisf+0x6a>
    2d82:	77 23       	and	r23, r23
    2d84:	21 f0       	breq	.+8      	; 0x2d8e <__floatsisf+0x54>
    2d86:	9e e8       	ldi	r25, 0x8E	; 142
    2d88:	87 2f       	mov	r24, r23
    2d8a:	76 2f       	mov	r23, r22
    2d8c:	05 c0       	rjmp	.+10     	; 0x2d98 <__floatsisf+0x5e>
    2d8e:	66 23       	and	r22, r22
    2d90:	71 f0       	breq	.+28     	; 0x2dae <__floatsisf+0x74>
    2d92:	96 e8       	ldi	r25, 0x86	; 134
    2d94:	86 2f       	mov	r24, r22
    2d96:	70 e0       	ldi	r23, 0x00	; 0
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	2a f0       	brmi	.+10     	; 0x2da6 <__floatsisf+0x6c>
    2d9c:	9a 95       	dec	r25
    2d9e:	66 0f       	add	r22, r22
    2da0:	77 1f       	adc	r23, r23
    2da2:	88 1f       	adc	r24, r24
    2da4:	da f7       	brpl	.-10     	; 0x2d9c <__floatsisf+0x62>
    2da6:	88 0f       	add	r24, r24
    2da8:	96 95       	lsr	r25
    2daa:	87 95       	ror	r24
    2dac:	97 f9       	bld	r25, 7
    2dae:	08 95       	ret

00002db0 <__fp_cmp>:
    2db0:	99 0f       	add	r25, r25
    2db2:	00 08       	sbc	r0, r0
    2db4:	55 0f       	add	r21, r21
    2db6:	aa 0b       	sbc	r26, r26
    2db8:	e0 e8       	ldi	r30, 0x80	; 128
    2dba:	fe ef       	ldi	r31, 0xFE	; 254
    2dbc:	16 16       	cp	r1, r22
    2dbe:	17 06       	cpc	r1, r23
    2dc0:	e8 07       	cpc	r30, r24
    2dc2:	f9 07       	cpc	r31, r25
    2dc4:	c0 f0       	brcs	.+48     	; 0x2df6 <__fp_cmp+0x46>
    2dc6:	12 16       	cp	r1, r18
    2dc8:	13 06       	cpc	r1, r19
    2dca:	e4 07       	cpc	r30, r20
    2dcc:	f5 07       	cpc	r31, r21
    2dce:	98 f0       	brcs	.+38     	; 0x2df6 <__fp_cmp+0x46>
    2dd0:	62 1b       	sub	r22, r18
    2dd2:	73 0b       	sbc	r23, r19
    2dd4:	84 0b       	sbc	r24, r20
    2dd6:	95 0b       	sbc	r25, r21
    2dd8:	39 f4       	brne	.+14     	; 0x2de8 <__fp_cmp+0x38>
    2dda:	0a 26       	eor	r0, r26
    2ddc:	61 f0       	breq	.+24     	; 0x2df6 <__fp_cmp+0x46>
    2dde:	23 2b       	or	r18, r19
    2de0:	24 2b       	or	r18, r20
    2de2:	25 2b       	or	r18, r21
    2de4:	21 f4       	brne	.+8      	; 0x2dee <__fp_cmp+0x3e>
    2de6:	08 95       	ret
    2de8:	0a 26       	eor	r0, r26
    2dea:	09 f4       	brne	.+2      	; 0x2dee <__fp_cmp+0x3e>
    2dec:	a1 40       	sbci	r26, 0x01	; 1
    2dee:	a6 95       	lsr	r26
    2df0:	8f ef       	ldi	r24, 0xFF	; 255
    2df2:	81 1d       	adc	r24, r1
    2df4:	81 1d       	adc	r24, r1
    2df6:	08 95       	ret

00002df8 <__fp_inf>:
    2df8:	97 f9       	bld	r25, 7
    2dfa:	9f 67       	ori	r25, 0x7F	; 127
    2dfc:	80 e8       	ldi	r24, 0x80	; 128
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	08 95       	ret

00002e04 <__fp_nan>:
    2e04:	9f ef       	ldi	r25, 0xFF	; 255
    2e06:	80 ec       	ldi	r24, 0xC0	; 192
    2e08:	08 95       	ret

00002e0a <__fp_pscA>:
    2e0a:	00 24       	eor	r0, r0
    2e0c:	0a 94       	dec	r0
    2e0e:	16 16       	cp	r1, r22
    2e10:	17 06       	cpc	r1, r23
    2e12:	18 06       	cpc	r1, r24
    2e14:	09 06       	cpc	r0, r25
    2e16:	08 95       	ret

00002e18 <__fp_pscB>:
    2e18:	00 24       	eor	r0, r0
    2e1a:	0a 94       	dec	r0
    2e1c:	12 16       	cp	r1, r18
    2e1e:	13 06       	cpc	r1, r19
    2e20:	14 06       	cpc	r1, r20
    2e22:	05 06       	cpc	r0, r21
    2e24:	08 95       	ret

00002e26 <__fp_round>:
    2e26:	09 2e       	mov	r0, r25
    2e28:	03 94       	inc	r0
    2e2a:	00 0c       	add	r0, r0
    2e2c:	11 f4       	brne	.+4      	; 0x2e32 <__fp_round+0xc>
    2e2e:	88 23       	and	r24, r24
    2e30:	52 f0       	brmi	.+20     	; 0x2e46 <__fp_round+0x20>
    2e32:	bb 0f       	add	r27, r27
    2e34:	40 f4       	brcc	.+16     	; 0x2e46 <__fp_round+0x20>
    2e36:	bf 2b       	or	r27, r31
    2e38:	11 f4       	brne	.+4      	; 0x2e3e <__fp_round+0x18>
    2e3a:	60 ff       	sbrs	r22, 0
    2e3c:	04 c0       	rjmp	.+8      	; 0x2e46 <__fp_round+0x20>
    2e3e:	6f 5f       	subi	r22, 0xFF	; 255
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	8f 4f       	sbci	r24, 0xFF	; 255
    2e44:	9f 4f       	sbci	r25, 0xFF	; 255
    2e46:	08 95       	ret

00002e48 <__fp_split3>:
    2e48:	57 fd       	sbrc	r21, 7
    2e4a:	90 58       	subi	r25, 0x80	; 128
    2e4c:	44 0f       	add	r20, r20
    2e4e:	55 1f       	adc	r21, r21
    2e50:	59 f0       	breq	.+22     	; 0x2e68 <__fp_splitA+0x10>
    2e52:	5f 3f       	cpi	r21, 0xFF	; 255
    2e54:	71 f0       	breq	.+28     	; 0x2e72 <__fp_splitA+0x1a>
    2e56:	47 95       	ror	r20

00002e58 <__fp_splitA>:
    2e58:	88 0f       	add	r24, r24
    2e5a:	97 fb       	bst	r25, 7
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <__fp_splitA+0x20>
    2e60:	9f 3f       	cpi	r25, 0xFF	; 255
    2e62:	79 f0       	breq	.+30     	; 0x2e82 <__fp_splitA+0x2a>
    2e64:	87 95       	ror	r24
    2e66:	08 95       	ret
    2e68:	12 16       	cp	r1, r18
    2e6a:	13 06       	cpc	r1, r19
    2e6c:	14 06       	cpc	r1, r20
    2e6e:	55 1f       	adc	r21, r21
    2e70:	f2 cf       	rjmp	.-28     	; 0x2e56 <__fp_split3+0xe>
    2e72:	46 95       	lsr	r20
    2e74:	f1 df       	rcall	.-30     	; 0x2e58 <__fp_splitA>
    2e76:	08 c0       	rjmp	.+16     	; 0x2e88 <__fp_splitA+0x30>
    2e78:	16 16       	cp	r1, r22
    2e7a:	17 06       	cpc	r1, r23
    2e7c:	18 06       	cpc	r1, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	f1 cf       	rjmp	.-30     	; 0x2e64 <__fp_splitA+0xc>
    2e82:	86 95       	lsr	r24
    2e84:	71 05       	cpc	r23, r1
    2e86:	61 05       	cpc	r22, r1
    2e88:	08 94       	sec
    2e8a:	08 95       	ret

00002e8c <__fp_zero>:
    2e8c:	e8 94       	clt

00002e8e <__fp_szero>:
    2e8e:	bb 27       	eor	r27, r27
    2e90:	66 27       	eor	r22, r22
    2e92:	77 27       	eor	r23, r23
    2e94:	cb 01       	movw	r24, r22
    2e96:	97 f9       	bld	r25, 7
    2e98:	08 95       	ret

00002e9a <__gesf2>:
    2e9a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <__fp_cmp>
    2e9e:	08 f4       	brcc	.+2      	; 0x2ea2 <__gesf2+0x8>
    2ea0:	8f ef       	ldi	r24, 0xFF	; 255
    2ea2:	08 95       	ret

00002ea4 <__mulsf3>:
    2ea4:	0e 94 65 17 	call	0x2eca	; 0x2eca <__mulsf3x>
    2ea8:	0c 94 13 17 	jmp	0x2e26	; 0x2e26 <__fp_round>
    2eac:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fp_pscA>
    2eb0:	38 f0       	brcs	.+14     	; 0x2ec0 <__mulsf3+0x1c>
    2eb2:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <__fp_pscB>
    2eb6:	20 f0       	brcs	.+8      	; 0x2ec0 <__mulsf3+0x1c>
    2eb8:	95 23       	and	r25, r21
    2eba:	11 f0       	breq	.+4      	; 0x2ec0 <__mulsf3+0x1c>
    2ebc:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2ec0:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__fp_nan>
    2ec4:	11 24       	eor	r1, r1
    2ec6:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>

00002eca <__mulsf3x>:
    2eca:	0e 94 24 17 	call	0x2e48	; 0x2e48 <__fp_split3>
    2ece:	70 f3       	brcs	.-36     	; 0x2eac <__mulsf3+0x8>

00002ed0 <__mulsf3_pse>:
    2ed0:	95 9f       	mul	r25, r21
    2ed2:	c1 f3       	breq	.-16     	; 0x2ec4 <__mulsf3+0x20>
    2ed4:	95 0f       	add	r25, r21
    2ed6:	50 e0       	ldi	r21, 0x00	; 0
    2ed8:	55 1f       	adc	r21, r21
    2eda:	62 9f       	mul	r22, r18
    2edc:	f0 01       	movw	r30, r0
    2ede:	72 9f       	mul	r23, r18
    2ee0:	bb 27       	eor	r27, r27
    2ee2:	f0 0d       	add	r31, r0
    2ee4:	b1 1d       	adc	r27, r1
    2ee6:	63 9f       	mul	r22, r19
    2ee8:	aa 27       	eor	r26, r26
    2eea:	f0 0d       	add	r31, r0
    2eec:	b1 1d       	adc	r27, r1
    2eee:	aa 1f       	adc	r26, r26
    2ef0:	64 9f       	mul	r22, r20
    2ef2:	66 27       	eor	r22, r22
    2ef4:	b0 0d       	add	r27, r0
    2ef6:	a1 1d       	adc	r26, r1
    2ef8:	66 1f       	adc	r22, r22
    2efa:	82 9f       	mul	r24, r18
    2efc:	22 27       	eor	r18, r18
    2efe:	b0 0d       	add	r27, r0
    2f00:	a1 1d       	adc	r26, r1
    2f02:	62 1f       	adc	r22, r18
    2f04:	73 9f       	mul	r23, r19
    2f06:	b0 0d       	add	r27, r0
    2f08:	a1 1d       	adc	r26, r1
    2f0a:	62 1f       	adc	r22, r18
    2f0c:	83 9f       	mul	r24, r19
    2f0e:	a0 0d       	add	r26, r0
    2f10:	61 1d       	adc	r22, r1
    2f12:	22 1f       	adc	r18, r18
    2f14:	74 9f       	mul	r23, r20
    2f16:	33 27       	eor	r19, r19
    2f18:	a0 0d       	add	r26, r0
    2f1a:	61 1d       	adc	r22, r1
    2f1c:	23 1f       	adc	r18, r19
    2f1e:	84 9f       	mul	r24, r20
    2f20:	60 0d       	add	r22, r0
    2f22:	21 1d       	adc	r18, r1
    2f24:	82 2f       	mov	r24, r18
    2f26:	76 2f       	mov	r23, r22
    2f28:	6a 2f       	mov	r22, r26
    2f2a:	11 24       	eor	r1, r1
    2f2c:	9f 57       	subi	r25, 0x7F	; 127
    2f2e:	50 40       	sbci	r21, 0x00	; 0
    2f30:	9a f0       	brmi	.+38     	; 0x2f58 <__mulsf3_pse+0x88>
    2f32:	f1 f0       	breq	.+60     	; 0x2f70 <__mulsf3_pse+0xa0>
    2f34:	88 23       	and	r24, r24
    2f36:	4a f0       	brmi	.+18     	; 0x2f4a <__mulsf3_pse+0x7a>
    2f38:	ee 0f       	add	r30, r30
    2f3a:	ff 1f       	adc	r31, r31
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	66 1f       	adc	r22, r22
    2f40:	77 1f       	adc	r23, r23
    2f42:	88 1f       	adc	r24, r24
    2f44:	91 50       	subi	r25, 0x01	; 1
    2f46:	50 40       	sbci	r21, 0x00	; 0
    2f48:	a9 f7       	brne	.-22     	; 0x2f34 <__mulsf3_pse+0x64>
    2f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f4c:	51 05       	cpc	r21, r1
    2f4e:	80 f0       	brcs	.+32     	; 0x2f70 <__mulsf3_pse+0xa0>
    2f50:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__fp_inf>
    2f54:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__fp_szero>
    2f58:	5f 3f       	cpi	r21, 0xFF	; 255
    2f5a:	e4 f3       	brlt	.-8      	; 0x2f54 <__mulsf3_pse+0x84>
    2f5c:	98 3e       	cpi	r25, 0xE8	; 232
    2f5e:	d4 f3       	brlt	.-12     	; 0x2f54 <__mulsf3_pse+0x84>
    2f60:	86 95       	lsr	r24
    2f62:	77 95       	ror	r23
    2f64:	67 95       	ror	r22
    2f66:	b7 95       	ror	r27
    2f68:	f7 95       	ror	r31
    2f6a:	e7 95       	ror	r30
    2f6c:	9f 5f       	subi	r25, 0xFF	; 255
    2f6e:	c1 f7       	brne	.-16     	; 0x2f60 <__mulsf3_pse+0x90>
    2f70:	fe 2b       	or	r31, r30
    2f72:	88 0f       	add	r24, r24
    2f74:	91 1d       	adc	r25, r1
    2f76:	96 95       	lsr	r25
    2f78:	87 95       	ror	r24
    2f7a:	97 f9       	bld	r25, 7
    2f7c:	08 95       	ret

00002f7e <__mulsi3>:
    2f7e:	db 01       	movw	r26, r22
    2f80:	8f 93       	push	r24
    2f82:	9f 93       	push	r25
    2f84:	0e 94 28 18 	call	0x3050	; 0x3050 <__muluhisi3>
    2f88:	bf 91       	pop	r27
    2f8a:	af 91       	pop	r26
    2f8c:	a2 9f       	mul	r26, r18
    2f8e:	80 0d       	add	r24, r0
    2f90:	91 1d       	adc	r25, r1
    2f92:	a3 9f       	mul	r26, r19
    2f94:	90 0d       	add	r25, r0
    2f96:	b2 9f       	mul	r27, r18
    2f98:	90 0d       	add	r25, r0
    2f9a:	11 24       	eor	r1, r1
    2f9c:	08 95       	ret

00002f9e <__udivmodhi4>:
    2f9e:	aa 1b       	sub	r26, r26
    2fa0:	bb 1b       	sub	r27, r27
    2fa2:	51 e1       	ldi	r21, 0x11	; 17
    2fa4:	07 c0       	rjmp	.+14     	; 0x2fb4 <__udivmodhi4_ep>

00002fa6 <__udivmodhi4_loop>:
    2fa6:	aa 1f       	adc	r26, r26
    2fa8:	bb 1f       	adc	r27, r27
    2faa:	a6 17       	cp	r26, r22
    2fac:	b7 07       	cpc	r27, r23
    2fae:	10 f0       	brcs	.+4      	; 0x2fb4 <__udivmodhi4_ep>
    2fb0:	a6 1b       	sub	r26, r22
    2fb2:	b7 0b       	sbc	r27, r23

00002fb4 <__udivmodhi4_ep>:
    2fb4:	88 1f       	adc	r24, r24
    2fb6:	99 1f       	adc	r25, r25
    2fb8:	5a 95       	dec	r21
    2fba:	a9 f7       	brne	.-22     	; 0x2fa6 <__udivmodhi4_loop>
    2fbc:	80 95       	com	r24
    2fbe:	90 95       	com	r25
    2fc0:	bc 01       	movw	r22, r24
    2fc2:	cd 01       	movw	r24, r26
    2fc4:	08 95       	ret

00002fc6 <__divmodhi4>:
    2fc6:	97 fb       	bst	r25, 7
    2fc8:	07 2e       	mov	r0, r23
    2fca:	16 f4       	brtc	.+4      	; 0x2fd0 <__divmodhi4+0xa>
    2fcc:	00 94       	com	r0
    2fce:	07 d0       	rcall	.+14     	; 0x2fde <__divmodhi4_neg1>
    2fd0:	77 fd       	sbrc	r23, 7
    2fd2:	09 d0       	rcall	.+18     	; 0x2fe6 <__divmodhi4_neg2>
    2fd4:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__udivmodhi4>
    2fd8:	07 fc       	sbrc	r0, 7
    2fda:	05 d0       	rcall	.+10     	; 0x2fe6 <__divmodhi4_neg2>
    2fdc:	3e f4       	brtc	.+14     	; 0x2fec <__divmodhi4_exit>

00002fde <__divmodhi4_neg1>:
    2fde:	90 95       	com	r25
    2fe0:	81 95       	neg	r24
    2fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    2fe4:	08 95       	ret

00002fe6 <__divmodhi4_neg2>:
    2fe6:	70 95       	com	r23
    2fe8:	61 95       	neg	r22
    2fea:	7f 4f       	sbci	r23, 0xFF	; 255

00002fec <__divmodhi4_exit>:
    2fec:	08 95       	ret

00002fee <__udivmodsi4>:
    2fee:	a1 e2       	ldi	r26, 0x21	; 33
    2ff0:	1a 2e       	mov	r1, r26
    2ff2:	aa 1b       	sub	r26, r26
    2ff4:	bb 1b       	sub	r27, r27
    2ff6:	fd 01       	movw	r30, r26
    2ff8:	0d c0       	rjmp	.+26     	; 0x3014 <__udivmodsi4_ep>

00002ffa <__udivmodsi4_loop>:
    2ffa:	aa 1f       	adc	r26, r26
    2ffc:	bb 1f       	adc	r27, r27
    2ffe:	ee 1f       	adc	r30, r30
    3000:	ff 1f       	adc	r31, r31
    3002:	a2 17       	cp	r26, r18
    3004:	b3 07       	cpc	r27, r19
    3006:	e4 07       	cpc	r30, r20
    3008:	f5 07       	cpc	r31, r21
    300a:	20 f0       	brcs	.+8      	; 0x3014 <__udivmodsi4_ep>
    300c:	a2 1b       	sub	r26, r18
    300e:	b3 0b       	sbc	r27, r19
    3010:	e4 0b       	sbc	r30, r20
    3012:	f5 0b       	sbc	r31, r21

00003014 <__udivmodsi4_ep>:
    3014:	66 1f       	adc	r22, r22
    3016:	77 1f       	adc	r23, r23
    3018:	88 1f       	adc	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	1a 94       	dec	r1
    301e:	69 f7       	brne	.-38     	; 0x2ffa <__udivmodsi4_loop>
    3020:	60 95       	com	r22
    3022:	70 95       	com	r23
    3024:	80 95       	com	r24
    3026:	90 95       	com	r25
    3028:	9b 01       	movw	r18, r22
    302a:	ac 01       	movw	r20, r24
    302c:	bd 01       	movw	r22, r26
    302e:	cf 01       	movw	r24, r30
    3030:	08 95       	ret

00003032 <__umulhisi3>:
    3032:	a2 9f       	mul	r26, r18
    3034:	b0 01       	movw	r22, r0
    3036:	b3 9f       	mul	r27, r19
    3038:	c0 01       	movw	r24, r0
    303a:	a3 9f       	mul	r26, r19
    303c:	70 0d       	add	r23, r0
    303e:	81 1d       	adc	r24, r1
    3040:	11 24       	eor	r1, r1
    3042:	91 1d       	adc	r25, r1
    3044:	b2 9f       	mul	r27, r18
    3046:	70 0d       	add	r23, r0
    3048:	81 1d       	adc	r24, r1
    304a:	11 24       	eor	r1, r1
    304c:	91 1d       	adc	r25, r1
    304e:	08 95       	ret

00003050 <__muluhisi3>:
    3050:	0e 94 19 18 	call	0x3032	; 0x3032 <__umulhisi3>
    3054:	a5 9f       	mul	r26, r21
    3056:	90 0d       	add	r25, r0
    3058:	b4 9f       	mul	r27, r20
    305a:	90 0d       	add	r25, r0
    305c:	a4 9f       	mul	r26, r20
    305e:	80 0d       	add	r24, r0
    3060:	91 1d       	adc	r25, r1
    3062:	11 24       	eor	r1, r1
    3064:	08 95       	ret

00003066 <eeprom_read_block>:
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22

0000306a <eeprom_read_blraw>:
    306a:	fc 01       	movw	r30, r24
    306c:	f9 99       	sbic	0x1f, 1	; 31
    306e:	fe cf       	rjmp	.-4      	; 0x306c <eeprom_read_blraw+0x2>
    3070:	06 c0       	rjmp	.+12     	; 0x307e <eeprom_read_blraw+0x14>
    3072:	f2 bd       	out	0x22, r31	; 34
    3074:	e1 bd       	out	0x21, r30	; 33
    3076:	f8 9a       	sbi	0x1f, 0	; 31
    3078:	31 96       	adiw	r30, 0x01	; 1
    307a:	00 b4       	in	r0, 0x20	; 32
    307c:	0d 92       	st	X+, r0
    307e:	41 50       	subi	r20, 0x01	; 1
    3080:	50 40       	sbci	r21, 0x00	; 0
    3082:	b8 f7       	brcc	.-18     	; 0x3072 <eeprom_read_blraw+0x8>
    3084:	08 95       	ret

00003086 <eeprom_read_byte>:
    3086:	f9 99       	sbic	0x1f, 1	; 31
    3088:	fe cf       	rjmp	.-4      	; 0x3086 <eeprom_read_byte>
    308a:	92 bd       	out	0x22, r25	; 34
    308c:	81 bd       	out	0x21, r24	; 33
    308e:	f8 9a       	sbi	0x1f, 0	; 31
    3090:	99 27       	eor	r25, r25
    3092:	80 b5       	in	r24, 0x20	; 32
    3094:	08 95       	ret

00003096 <eeprom_update_block>:
    3096:	dc 01       	movw	r26, r24
    3098:	a4 0f       	add	r26, r20
    309a:	b5 1f       	adc	r27, r21
    309c:	41 50       	subi	r20, 0x01	; 1
    309e:	50 40       	sbci	r21, 0x00	; 0
    30a0:	48 f0       	brcs	.+18     	; 0x30b4 <eeprom_update_block+0x1e>
    30a2:	cb 01       	movw	r24, r22
    30a4:	84 0f       	add	r24, r20
    30a6:	95 1f       	adc	r25, r21
    30a8:	2e 91       	ld	r18, -X
    30aa:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <eeprom_update_r18>
    30ae:	41 50       	subi	r20, 0x01	; 1
    30b0:	50 40       	sbci	r21, 0x00	; 0
    30b2:	d0 f7       	brcc	.-12     	; 0x30a8 <eeprom_update_block+0x12>
    30b4:	08 95       	ret

000030b6 <eeprom_update_byte>:
    30b6:	26 2f       	mov	r18, r22

000030b8 <eeprom_update_r18>:
    30b8:	f9 99       	sbic	0x1f, 1	; 31
    30ba:	fe cf       	rjmp	.-4      	; 0x30b8 <eeprom_update_r18>
    30bc:	92 bd       	out	0x22, r25	; 34
    30be:	81 bd       	out	0x21, r24	; 33
    30c0:	f8 9a       	sbi	0x1f, 0	; 31
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	00 b4       	in	r0, 0x20	; 32
    30c6:	02 16       	cp	r0, r18
    30c8:	39 f0       	breq	.+14     	; 0x30d8 <eeprom_update_r18+0x20>
    30ca:	1f ba       	out	0x1f, r1	; 31
    30cc:	20 bd       	out	0x20, r18	; 32
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	fa 9a       	sbi	0x1f, 2	; 31
    30d4:	f9 9a       	sbi	0x1f, 1	; 31
    30d6:	0f be       	out	0x3f, r0	; 63
    30d8:	08 95       	ret

000030da <_exit>:
    30da:	f8 94       	cli

000030dc <__stop_program>:
    30dc:	ff cf       	rjmp	.-2      	; 0x30dc <__stop_program>
