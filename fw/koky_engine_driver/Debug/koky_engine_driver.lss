
koky_engine_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  000034ec  000035a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034ec  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002c4  008002c4  00003764  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00003764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00003767  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003798  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001d0  00000000  00000000  000037d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018e1  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bab  00000000  00000000  00005289  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001c6b  00000000  00000000  00005e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000053c  00000000  00000000  00007aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008de  00000000  00000000  00007fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ac3  00000000  00000000  000088ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  0000937d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_2>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_11>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_16>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__fuse+0xff7dfbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__fuse+0xff7dfa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <TUI+0x2ac>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	ec ee       	ldi	r30, 0xEC	; 236
      d6:	f4 e3       	ldi	r31, 0x34	; 52
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a4 3c       	cpi	r26, 0xC4	; 196
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	22 e0       	ldi	r18, 0x02	; 2
      e6:	a4 ec       	ldi	r26, 0xC4	; 196
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	aa 3d       	cpi	r26, 0xDA	; 218
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
      f8:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <__vector_1>:
#define ENC_B_PORT	PORTD
// ============================================================================


ISR(INT0_vect)
{
     100:	1f 92       	push	r1
     102:	0f 92       	push	r0
     104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	2f 93       	push	r18
     10e:	3f 93       	push	r19
     110:	4f 93       	push	r20
     112:	5f 93       	push	r21
     114:	6f 93       	push	r22
     116:	7f 93       	push	r23
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	af 93       	push	r26
     11e:	bf 93       	push	r27
     120:	ef 93       	push	r30
     122:	ff 93       	push	r31
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
	TUI_back_timer_clear();
     12c:	0e 94 2e 02 	call	0x45c	; 0x45c <TUI_back_timer_clear>
	TUI('b');
     130:	82 e6       	ldi	r24, 0x62	; 98
     132:	0e 94 08 03 	call	0x610	; 0x610 <TUI>
}
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	ff 91       	pop	r31
     13e:	ef 91       	pop	r30
     140:	bf 91       	pop	r27
     142:	af 91       	pop	r26
     144:	9f 91       	pop	r25
     146:	8f 91       	pop	r24
     148:	7f 91       	pop	r23
     14a:	6f 91       	pop	r22
     14c:	5f 91       	pop	r21
     14e:	4f 91       	pop	r20
     150:	3f 91       	pop	r19
     152:	2f 91       	pop	r18
     154:	0f 90       	pop	r0
     156:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <__vector_2>:

ISR(INT1_vect)
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	2f 93       	push	r18
     16e:	3f 93       	push	r19
     170:	4f 93       	push	r20
     172:	5f 93       	push	r21
     174:	6f 93       	push	r22
     176:	7f 93       	push	r23
     178:	8f 93       	push	r24
     17a:	9f 93       	push	r25
     17c:	af 93       	push	r26
     17e:	bf 93       	push	r27
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t step = 0;
	static uint8_t dir = 0;

	TUI_back_timer_clear();
     18c:	0e 94 2e 02 	call	0x45c	; 0x45c <TUI_back_timer_clear>
	if (ENC_A_PIN & ENC_A)
     190:	89 e2       	ldi	r24, 0x29	; 41
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	80 81       	ld	r24, Z
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 71       	andi	r24, 0x10	; 16
     19e:	99 27       	eor	r25, r25
     1a0:	89 2b       	or	r24, r25
     1a2:	b1 f0       	breq	.+44     	; 0x1d0 <__vector_2+0x70>
	{
		
		if (!dir)
     1a4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1a8:	88 23       	and	r24, r24
     1aa:	69 f4       	brne	.+26     	; 0x1c6 <__vector_2+0x66>
		{
			step++;
     1ac:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1882>
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <step.1882>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1b6:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1882>
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	f8 f0       	brcs	.+62     	; 0x1fc <__vector_2+0x9c>
				TUI('-');
     1be:	8d e2       	ldi	r24, 0x2D	; 45
     1c0:	0e 94 08 03 	call	0x610	; 0x610 <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1c4:	1b c0       	rjmp	.+54     	; 0x1fc <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('-');
		}
		else
		{
			dir = 0;
     1c6:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
			step = 0;
     1ca:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <step.1882>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1ce:	16 c0       	rjmp	.+44     	; 0x1fc <__vector_2+0x9c>
			step = 0;
		}
	}
	else
	{
		if (dir)
     1d0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1d4:	88 23       	and	r24, r24
     1d6:	69 f0       	breq	.+26     	; 0x1f2 <__vector_2+0x92>
		{
			step++;
     1d8:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1882>
     1dc:	8f 5f       	subi	r24, 0xFF	; 255
     1de:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <step.1882>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1e2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1882>
     1e6:	85 30       	cpi	r24, 0x05	; 5
     1e8:	48 f0       	brcs	.+18     	; 0x1fc <__vector_2+0x9c>
				TUI('+');
     1ea:	8b e2       	ldi	r24, 0x2B	; 43
     1ec:	0e 94 08 03 	call	0x610	; 0x610 <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('+');
		}
		else
		{
			dir = 1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
			step = 0;
     1f8:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <step.1882>
		}
	}
}
     1fc:	00 00       	nop
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	3f 91       	pop	r19
     218:	2f 91       	pop	r18
     21a:	0f 90       	pop	r0
     21c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <encoder_init>:

// encoder initialization
void encoder_init(void)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
	// set button
	BTN_PORT |= BTN;		// pull-up
     22e:	8b e2       	ldi	r24, 0x2B	; 43
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	2b e2       	ldi	r18, 0x2B	; 43
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	f9 01       	movw	r30, r18
     238:	20 81       	ld	r18, Z
     23a:	24 60       	ori	r18, 0x04	; 4
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
	EICRA = (1<<ISC01);		// falling edge
     240:	89 e6       	ldi	r24, 0x69	; 105
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	22 e0       	ldi	r18, 0x02	; 2
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);		// int enable from INT0
     24a:	8d e3       	ldi	r24, 0x3D	; 61
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	fc 01       	movw	r30, r24
     252:	20 83       	st	Z, r18

	// set encoder	
	ENC_A_PORT |= ENC_A;	// pull-up
     254:	8b e2       	ldi	r24, 0x2B	; 43
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	2b e2       	ldi	r18, 0x2B	; 43
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	20 81       	ld	r18, Z
     260:	20 61       	ori	r18, 0x10	; 16
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
	ENC_B_PORT |= ENC_B;	// pull-up
     266:	8b e2       	ldi	r24, 0x2B	; 43
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	2b e2       	ldi	r18, 0x2B	; 43
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	f9 01       	movw	r30, r18
     270:	20 81       	ld	r18, Z
     272:	28 60       	ori	r18, 0x08	; 8
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18

	EICRA |= (1<<ISC11);	// falling edge
     278:	89 e6       	ldi	r24, 0x69	; 105
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	29 e6       	ldi	r18, 0x69	; 105
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	28 60       	ori	r18, 0x08	; 8
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
	EIMSK |= (1<<INT1);		// int enable from INT0
     28a:	8d e3       	ldi	r24, 0x3D	; 61
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2d e3       	ldi	r18, 0x3D	; 61
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	22 60       	ori	r18, 0x02	; 2
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
}
     29c:	00 00       	nop
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <main>:

int main(void)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00;
     2ac:	84 e2       	ldi	r24, 0x24	; 36
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	10 82       	st	Z, r1
	DDRC = 0x00;
     2b4:	87 e2       	ldi	r24, 0x27	; 39
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
	DDRD = 0x00;
     2bc:	8a e2       	ldi	r24, 0x2A	; 42
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	10 82       	st	Z, r1

	PORTB = 0x00;
     2c4:	85 e2       	ldi	r24, 0x25	; 37
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	10 82       	st	Z, r1
	PORTC = 0x00;
     2cc:	88 e2       	ldi	r24, 0x28	; 40
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	fc 01       	movw	r30, r24
     2d2:	10 82       	st	Z, r1
	PORTD = 0x00;
     2d4:	8b e2       	ldi	r24, 0x2B	; 43
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	fc 01       	movw	r30, r24
     2da:	10 82       	st	Z, r1

	motor_init();
     2dc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <motor_init>
	encoder_init();
     2e0:	0e 94 13 01 	call	0x226	; 0x226 <encoder_init>
	lcd_init();
     2e4:	0e 94 26 0a 	call	0x144c	; 0x144c <lcd_init>
	ntc_init();
     2e8:	0e 94 95 13 	call	0x272a	; 0x272a <ntc_init>

	sei();
     2ec:	78 94       	sei

	TUI_inti();
     2ee:	0e 94 b6 02 	call	0x56c	; 0x56c <TUI_inti>
	TUI('s');
     2f2:	83 e7       	ldi	r24, 0x73	; 115
     2f4:	0e 94 08 03 	call	0x610	; 0x610 <TUI>
		
	for(;;)
    {
		asm("nop");
     2f8:	00 00       	nop
    }
     2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <main+0x54>

000002fc <TUI_sec_timer_init>:
#define EEP_ADDR		(void *)0x10
#define eep_read()		eeprom_read_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))
#define eep_update()	eeprom_update_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))

void TUI_sec_timer_init(void)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
	TUI_sec_timer_stop();
     304:	0e 94 a7 01 	call	0x34e	; 0x34e <TUI_sec_timer_stop>
	TCCR1A = 0;
     308:	80 e8       	ldi	r24, 0x80	; 128
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	fc 01       	movw	r30, r24
     30e:	10 82       	st	Z, r1
	OCR1A = F_CPU / 1024;							// TOP value for 1 sec
     310:	88 e8       	ldi	r24, 0x88	; 136
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	2d e8       	ldi	r18, 0x8D	; 141
     316:	3b e5       	ldi	r19, 0x5B	; 91
     318:	fc 01       	movw	r30, r24
     31a:	31 83       	std	Z+1, r19	; 0x01
     31c:	20 83       	st	Z, r18
	TIMSK1 = (1<<OCIE1A);							// compare IT enable
     31e:	8f e6       	ldi	r24, 0x6F	; 111
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	22 e0       	ldi	r18, 0x02	; 2
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
	TUI_sec_timer_start();
     328:	0e 94 9a 01 	call	0x334	; 0x334 <TUI_sec_timer_start>
}
     32c:	00 00       	nop
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <TUI_sec_timer_start>:
void TUI_sec_timer_start(void)
{
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);	// CTC mode clk/1024
     33c:	81 e8       	ldi	r24, 0x81	; 129
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	2d e0       	ldi	r18, 0x0D	; 13
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
}
     346:	00 00       	nop
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <TUI_sec_timer_stop>:
void TUI_sec_timer_stop(void)
{
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12);							// CTC mode clk = 0
     356:	81 e8       	ldi	r24, 0x81	; 129
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	28 e0       	ldi	r18, 0x08	; 8
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
}
     360:	00 00       	nop
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
     368:	1f 92       	push	r1
     36a:	0f 92       	push	r0
     36c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     370:	0f 92       	push	r0
     372:	11 24       	eor	r1, r1
     374:	2f 93       	push	r18
     376:	3f 93       	push	r19
     378:	4f 93       	push	r20
     37a:	5f 93       	push	r21
     37c:	6f 93       	push	r22
     37e:	7f 93       	push	r23
     380:	8f 93       	push	r24
     382:	9f 93       	push	r25
     384:	af 93       	push	r26
     386:	bf 93       	push	r27
     388:	ef 93       	push	r30
     38a:	ff 93       	push	r31
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
	if (machine_state == MACHINE_START)
     394:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     398:	88 23       	and	r24, r24
     39a:	81 f5       	brne	.+96     	; 0x3fc <__vector_11+0x94>
	{
		if (user_profile.sec > 0)
     39c:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3a0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3a4:	89 2b       	or	r24, r25
     3a6:	49 f0       	breq	.+18     	; 0x3ba <__vector_11+0x52>
		{
			user_profile.sec--;
     3a8:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3ac:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <user_profile+0x3>
     3b6:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <user_profile+0x2>
		}
		if (!user_profile.sec)
     3ba:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3be:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3c2:	89 2b       	or	r24, r25
     3c4:	d9 f4       	brne	.+54     	; 0x3fc <__vector_11+0x94>
		{
			motor_smoothly_rmp(user_profile.rpm, 0);
     3c6:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     3ca:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <motor_smoothly_rmp>
			machine_state = MACHINE_STOP;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
			user_profile = backup_profile;
     3dc:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     3e0:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     3e4:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     3e8:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     3ec:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     3f0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     3f4:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     3f8:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
		}
	}
	TUI('s');
     3fc:	83 e7       	ldi	r24, 0x73	; 115
     3fe:	0e 94 08 03 	call	0x610	; 0x610 <TUI>
}
     402:	00 00       	nop
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	ff 91       	pop	r31
     40a:	ef 91       	pop	r30
     40c:	bf 91       	pop	r27
     40e:	af 91       	pop	r26
     410:	9f 91       	pop	r25
     412:	8f 91       	pop	r24
     414:	7f 91       	pop	r23
     416:	6f 91       	pop	r22
     418:	5f 91       	pop	r21
     41a:	4f 91       	pop	r20
     41c:	3f 91       	pop	r19
     41e:	2f 91       	pop	r18
     420:	0f 90       	pop	r0
     422:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <TUI_back_timer_init>:


void TUI_back_timer_init(void)
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;									// normal mode
     434:	84 e4       	ldi	r24, 0x44	; 68
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	fc 01       	movw	r30, r24
     43a:	10 82       	st	Z, r1
	TCCR0B = (1<<CS02) | (1<<CS00);				// clk/1024
     43c:	85 e4       	ldi	r24, 0x45	; 69
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	25 e0       	ldi	r18, 0x05	; 5
     442:	fc 01       	movw	r30, r24
     444:	20 83       	st	Z, r18
	TIMSK0 = (1<<TOIE0);						// compare IT enable
     446:	8e e6       	ldi	r24, 0x6E	; 110
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	21 e0       	ldi	r18, 0x01	; 1
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
	TUI_back_timer_clear();
     450:	0e 94 2e 02 	call	0x45c	; 0x45c <TUI_back_timer_clear>
}
     454:	00 00       	nop
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <TUI_back_timer_clear>:
void TUI_back_timer_clear(void)
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
	back_tick = 0;
     464:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <back_tick>
     468:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <back_tick+0x1>
     46c:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <back_tick+0x2>
     470:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <back_tick+0x3>
	TCNT0 = 0;
     474:	86 e4       	ldi	r24, 0x46	; 70
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	fc 01       	movw	r30, r24
     47a:	10 82       	st	Z, r1
}
     47c:	00 00       	nop
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     48c:	0f 92       	push	r0
     48e:	11 24       	eor	r1, r1
     490:	2f 93       	push	r18
     492:	3f 93       	push	r19
     494:	4f 93       	push	r20
     496:	5f 93       	push	r21
     498:	6f 93       	push	r22
     49a:	7f 93       	push	r23
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	af 93       	push	r26
     4a2:	bf 93       	push	r27
     4a4:	ef 93       	push	r30
     4a6:	ff 93       	push	r31
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	1f 92       	push	r1
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
	const uint8_t sec_to_return = 3;
     4b2:	83 e0       	ldi	r24, 0x03	; 3
     4b4:	89 83       	std	Y+1, r24	; 0x01
	back_tick++;
     4b6:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <back_tick>
     4ba:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <back_tick+0x1>
     4be:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <back_tick+0x2>
     4c2:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <back_tick+0x3>
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	a1 1d       	adc	r26, r1
     4ca:	b1 1d       	adc	r27, r1
     4cc:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <back_tick>
     4d0:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <back_tick+0x1>
     4d4:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <back_tick+0x2>
     4d8:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <back_tick+0x3>
	if (back_tick == ( (((uint32_t) sec_to_return) * ((uint32_t) F_CPU)) / (((uint32_t) 256) * ((uint32_t) 1024))) )
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	a0 e0       	ldi	r26, 0x00	; 0
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	9c 01       	movw	r18, r24
     4e8:	ad 01       	movw	r20, r26
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	76 e3       	ldi	r23, 0x36	; 54
     4ee:	8e e6       	ldi	r24, 0x6E	; 110
     4f0:	91 e0       	ldi	r25, 0x01	; 1
     4f2:	0e 94 c6 19 	call	0x338c	; 0x338c <__mulsi3>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	9c 01       	movw	r18, r24
     4fc:	ad 01       	movw	r20, r26
     4fe:	01 2e       	mov	r0, r17
     500:	12 e1       	ldi	r17, 0x12	; 18
     502:	56 95       	lsr	r21
     504:	47 95       	ror	r20
     506:	37 95       	ror	r19
     508:	27 95       	ror	r18
     50a:	1a 95       	dec	r17
     50c:	d1 f7       	brne	.-12     	; 0x502 <__vector_16+0x7e>
     50e:	10 2d       	mov	r17, r0
     510:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <back_tick>
     514:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <back_tick+0x1>
     518:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <back_tick+0x2>
     51c:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <back_tick+0x3>
     520:	28 17       	cp	r18, r24
     522:	39 07       	cpc	r19, r25
     524:	4a 07       	cpc	r20, r26
     526:	5b 07       	cpc	r21, r27
     528:	59 f4       	brne	.+22     	; 0x540 <__vector_16+0xbc>
	{
		TUI_back_timer_clear();
     52a:	0e 94 2e 02 	call	0x45c	; 0x45c <TUI_back_timer_clear>
		if (menu != MAIN_MENU)
     52e:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     532:	88 23       	and	r24, r24
     534:	29 f0       	breq	.+10     	; 0x540 <__vector_16+0xbc>
		{
			menu = MAIN_MENU;
     536:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
			TUI('s');
     53a:	83 e7       	ldi	r24, 0x73	; 115
     53c:	0e 94 08 03 	call	0x610	; 0x610 <TUI>
		}
	}
}
     540:	00 00       	nop
     542:	0f 90       	pop	r0
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	ff 91       	pop	r31
     54a:	ef 91       	pop	r30
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	0f 90       	pop	r0
     562:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <TUI_inti>:

void TUI_inti(void)
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
	menu = MAIN_MENU;
     574:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
	machine_state = MACHINE_STOP;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
	actual_rmp = 0;
     57e:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <actual_rmp+0x1>
     582:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <actual_rmp>

	TUI_sec_timer_init();
     586:	0e 94 7e 01 	call	0x2fc	; 0x2fc <TUI_sec_timer_init>
	TUI_back_timer_init();
     58a:	0e 94 16 02 	call	0x42c	; 0x42c <TUI_back_timer_init>

	// EEPROM is empty
	if (eeprom_read_byte(EEP_ADDR) == 0xFF)
     58e:	80 e1       	ldi	r24, 0x10	; 16
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 4a 1a 	call	0x3494	; 0x3494 <eeprom_read_byte>
     596:	8f 3f       	cpi	r24, 0xFF	; 255
     598:	41 f4       	brne	.+16     	; 0x5aa <TUI_inti+0x3e>
	{
		eep_update();
     59a:	4d e0       	ldi	r20, 0x0D	; 13
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	60 e1       	ldi	r22, 0x10	; 16
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <eeprom_update_block>
	}
	eep_read();
     5aa:	4d e0       	ldi	r20, 0x0D	; 13
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	60 e1       	ldi	r22, 0x10	; 16
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 3a 1a 	call	0x3474	; 0x3474 <eeprom_read_block>

	user_profile = eeprom_data.profile[eeprom_data.profile_id];
     5ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	8f 5f       	subi	r24, 0xFF	; 255
     5cc:	9e 4f       	sbci	r25, 0xFE	; 254
     5ce:	fc 01       	movw	r30, r24
     5d0:	80 81       	ld	r24, Z
     5d2:	91 81       	ldd	r25, Z+1	; 0x01
     5d4:	a2 81       	ldd	r26, Z+2	; 0x02
     5d6:	b3 81       	ldd	r27, Z+3	; 0x03
     5d8:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     5dc:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     5e0:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     5e4:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
	backup_profile = user_profile;
     5e8:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     5ec:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     5f0:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     5f4:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     5f8:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     5fc:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     600:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     604:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
}
     608:	00 00       	nop
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <TUI>:

void TUI(char action)
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	00 d0       	rcall	.+0      	; 0x616 <TUI+0x6>
     616:	00 d0       	rcall	.+0      	; 0x618 <TUI+0x8>
     618:	1f 92       	push	r1
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	8d 83       	std	Y+5, r24	; 0x05
	static item_menu_select_t item_menu_secect = ITEM_MENU_SELECT_RPM;
	static load_menu_select_t load_menu_select = LOAD_MENU_SELECT_PROFILE1;
	static save_menu_select_t save_menu_select = SAVE_MENU_SELECT_PROFILE1;

	// nastaveni
	switch (menu)
     620:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     624:	88 2f       	mov	r24, r24
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	91 05       	cpc	r25, r1
     62c:	09 f4       	brne	.+2      	; 0x630 <TUI+0x20>
     62e:	ea c0       	rjmp	.+468    	; 0x804 <TUI+0x1f4>
     630:	83 30       	cpi	r24, 0x03	; 3
     632:	91 05       	cpc	r25, r1
     634:	34 f4       	brge	.+12     	; 0x642 <TUI+0x32>
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	81 f0       	breq	.+32     	; 0x65a <TUI+0x4a>
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	09 f4       	brne	.+2      	; 0x640 <TUI+0x30>
     63e:	80 c0       	rjmp	.+256    	; 0x740 <TUI+0x130>
     640:	24 c2       	rjmp	.+1096   	; 0xa8a <__stack+0x18b>
     642:	84 30       	cpi	r24, 0x04	; 4
     644:	91 05       	cpc	r25, r1
     646:	09 f4       	brne	.+2      	; 0x64a <TUI+0x3a>
     648:	65 c1       	rjmp	.+714    	; 0x914 <__stack+0x15>
     64a:	84 30       	cpi	r24, 0x04	; 4
     64c:	91 05       	cpc	r25, r1
     64e:	0c f4       	brge	.+2      	; 0x652 <TUI+0x42>
     650:	1d c1       	rjmp	.+570    	; 0x88c <TUI+0x27c>
     652:	05 97       	sbiw	r24, 0x05	; 5
     654:	09 f4       	brne	.+2      	; 0x658 <TUI+0x48>
     656:	bb c1       	rjmp	.+886    	; 0x9ce <__stack+0xcf>
     658:	18 c2       	rjmp	.+1072   	; 0xa8a <__stack+0x18b>
	{
		case MAIN_MENU:
			switch (action)
     65a:	8d 81       	ldd	r24, Y+5	; 0x05
     65c:	88 2f       	mov	r24, r24
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	8d 32       	cpi	r24, 0x2D	; 45
     662:	91 05       	cpc	r25, r1
     664:	31 f0       	breq	.+12     	; 0x672 <TUI+0x62>
     666:	82 36       	cpi	r24, 0x62	; 98
     668:	91 05       	cpc	r25, r1
     66a:	89 f0       	breq	.+34     	; 0x68e <TUI+0x7e>
     66c:	8b 97       	sbiw	r24, 0x2b	; 43
     66e:	09 f0       	breq	.+2      	; 0x672 <TUI+0x62>
					break;

				default:
					;
			}
			break;
     670:	0c c2       	rjmp	.+1048   	; 0xa8a <__stack+0x18b>
			{
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
     672:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     676:	88 23       	and	r24, r24
     678:	09 f4       	brne	.+2      	; 0x67c <TUI+0x6c>
     67a:	60 c0       	rjmp	.+192    	; 0x73c <TUI+0x12c>
						break;
					main_menu_secelt = (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ? MAIN_MENU_SELECT_MENU : MAIN_MENU_SELECT_CONTOL;
     67c:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <main_menu_secelt.1910>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	99 23       	and	r25, r25
     684:	09 f0       	breq	.+2      	; 0x688 <TUI+0x78>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <main_menu_secelt.1910>
					break;
     68c:	58 c0       	rjmp	.+176    	; 0x73e <TUI+0x12e>

				// stisk tlacitka
				case 'b':
					if (main_menu_secelt == MAIN_MENU_SELECT_CONTOL)
     68e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1910>
     692:	88 23       	and	r24, r24
     694:	09 f0       	breq	.+2      	; 0x698 <TUI+0x88>
     696:	3e c0       	rjmp	.+124    	; 0x714 <TUI+0x104>
					{
						if (machine_state == MACHINE_STOP)
     698:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	f1 f4       	brne	.+60     	; 0x6dc <TUI+0xcc>
						{
							machine_state = MACHINE_START;
     6a0:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <machine_state>
							backup_profile = user_profile;
     6a4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     6a8:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     6ac:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     6b0:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     6b4:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     6b8:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     6bc:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     6c0:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);							
     6c4:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <user_profile>
     6c8:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <user_profile+0x1>
     6cc:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <actual_rmp>
     6d0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <actual_rmp+0x1>
     6d4:	b9 01       	movw	r22, r18
     6d6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <motor_smoothly_rmp>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     6da:	31 c0       	rjmp	.+98     	; 0x73e <TUI+0x12e>
							backup_profile = user_profile;
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);							
						}
						else
						{
							machine_state = MACHINE_STOP;
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
							motor_smoothly_rmp(user_profile.rpm, 0);							
     6e2:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     6e6:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <motor_smoothly_rmp>
							user_profile = backup_profile;
     6f2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     6f6:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     6fa:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     6fe:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     702:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     706:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     70a:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     70e:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     712:	15 c0       	rjmp	.+42     	; 0x73e <TUI+0x12e>
							user_profile = backup_profile;
						}
					}
					else
					{
						menu = ITEM_MENU;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
						backup_profile = user_profile;
     71a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     71e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     722:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     726:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     72a:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     72e:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     732:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     736:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
					}
					break;
     73a:	01 c0       	rjmp	.+2      	; 0x73e <TUI+0x12e>
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
						break;
     73c:	00 00       	nop
					break;

				default:
					;
			}
			break;
     73e:	a5 c1       	rjmp	.+842    	; 0xa8a <__stack+0x18b>

		case ITEM_MENU:
			switch (action)
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	88 2f       	mov	r24, r24
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	8d 32       	cpi	r24, 0x2D	; 45
     748:	91 05       	cpc	r25, r1
     74a:	11 f1       	breq	.+68     	; 0x790 <TUI+0x180>
     74c:	82 36       	cpi	r24, 0x62	; 98
     74e:	91 05       	cpc	r25, r1
     750:	d9 f1       	breq	.+118    	; 0x7c8 <TUI+0x1b8>
     752:	8b 97       	sbiw	r24, 0x2b	; 43
     754:	09 f0       	breq	.+2      	; 0x758 <TUI+0x148>
					break;

				default:
					;
			}
			break;
     756:	99 c1       	rjmp	.+818    	; 0xa8a <__stack+0x18b>

		case ITEM_MENU:
			switch (action)
			{
				case '+':
					switch (item_menu_secect)
     758:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1911>
     75c:	88 2f       	mov	r24, r24
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	91 05       	cpc	r25, r1
     764:	49 f0       	breq	.+18     	; 0x778 <TUI+0x168>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	91 05       	cpc	r25, r1
     76a:	51 f0       	breq	.+20     	; 0x780 <TUI+0x170>
     76c:	89 2b       	or	r24, r25
     76e:	61 f4       	brne	.+24     	; 0x788 <TUI+0x178>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1911>
							break;
     776:	0b c0       	rjmp	.+22     	; 0x78e <TUI+0x17e>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1911>
							break;
     77e:	07 c0       	rjmp	.+14     	; 0x78e <TUI+0x17e>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1911>
							break;
     786:	03 c0       	rjmp	.+6      	; 0x78e <TUI+0x17e>
						default:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     788:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <item_menu_secect.1911>
					}
					break;
     78c:	3a c0       	rjmp	.+116    	; 0x802 <TUI+0x1f2>
     78e:	39 c0       	rjmp	.+114    	; 0x802 <TUI+0x1f2>

				case  '-':
					switch (item_menu_secect)
     790:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1911>
     794:	88 2f       	mov	r24, r24
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	91 05       	cpc	r25, r1
     79c:	49 f0       	breq	.+18     	; 0x7b0 <TUI+0x1a0>
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	91 05       	cpc	r25, r1
     7a2:	49 f0       	breq	.+18     	; 0x7b6 <TUI+0x1a6>
     7a4:	89 2b       	or	r24, r25
     7a6:	59 f4       	brne	.+22     	; 0x7be <TUI+0x1ae>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1911>
							break;
     7ae:	0b c0       	rjmp	.+22     	; 0x7c6 <TUI+0x1b6>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     7b0:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <item_menu_secect.1911>
							break;
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <TUI+0x1b6>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1911>
							break;
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <TUI+0x1b6>
						default:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1911>
					}
					break;
     7c4:	1e c0       	rjmp	.+60     	; 0x802 <TUI+0x1f2>
     7c6:	1d c0       	rjmp	.+58     	; 0x802 <TUI+0x1f2>

				case 'b':
					switch (item_menu_secect)
     7c8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1911>
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	91 05       	cpc	r25, r1
     7d4:	49 f0       	breq	.+18     	; 0x7e8 <TUI+0x1d8>
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	91 05       	cpc	r25, r1
     7da:	51 f0       	breq	.+20     	; 0x7f0 <TUI+0x1e0>
     7dc:	89 2b       	or	r24, r25
     7de:	61 f4       	brne	.+24     	; 0x7f8 <TUI+0x1e8>
					{
						case ITEM_MENU_SELECT_RPM:
							menu = RPM_MENU;
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     7e6:	0c c0       	rjmp	.+24     	; 0x800 <TUI+0x1f0>
						case ITEM_MENU_SELECT_TIME:
							menu = TIME_MENU;
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     7ee:	08 c0       	rjmp	.+16     	; 0x800 <TUI+0x1f0>
						case ITEM_MENU_SELECT_LOAD:
							menu = LOAD_MENU;
     7f0:	84 e0       	ldi	r24, 0x04	; 4
     7f2:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     7f6:	04 c0       	rjmp	.+8      	; 0x800 <TUI+0x1f0>
						default:
							menu = SAVE_MENU;
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
					}
					break;
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <TUI+0x1f0>
     800:	00 00       	nop

				default:
					;
			}
			break;
     802:	43 c1       	rjmp	.+646    	; 0xa8a <__stack+0x18b>

		case RPM_MENU:
			switch (action)
     804:	8d 81       	ldd	r24, Y+5	; 0x05
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	8d 32       	cpi	r24, 0x2D	; 45
     80c:	91 05       	cpc	r25, r1
     80e:	b9 f0       	breq	.+46     	; 0x83e <TUI+0x22e>
     810:	82 36       	cpi	r24, 0x62	; 98
     812:	91 05       	cpc	r25, r1
     814:	21 f1       	breq	.+72     	; 0x85e <TUI+0x24e>
     816:	8b 97       	sbiw	r24, 0x2b	; 43
     818:	09 f0       	breq	.+2      	; 0x81c <TUI+0x20c>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     81a:	37 c1       	rjmp	.+622    	; 0xa8a <__stack+0x18b>

		case RPM_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
     81c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     820:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     824:	8c 32       	cpi	r24, 0x2C	; 44
     826:	91 40       	sbci	r25, 0x01	; 1
     828:	68 f5       	brcc	.+90     	; 0x884 <TUI+0x274>
						backup_profile.rpm++;
     82a:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     82e:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     838:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
					break;
     83c:	23 c0       	rjmp	.+70     	; 0x884 <TUI+0x274>
				case '-':
					if (backup_profile.rpm > 0)
     83e:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     842:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     846:	89 2b       	or	r24, r25
     848:	f9 f0       	breq	.+62     	; 0x888 <TUI+0x278>
						backup_profile.rpm--;
     84a:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     84e:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     858:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
					break;
     85c:	15 c0       	rjmp	.+42     	; 0x888 <TUI+0x278>
				case  'b':
					menu = MAIN_MENU;
     85e:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					user_profile = backup_profile;
     862:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     866:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     86a:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     86e:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     872:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     876:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     87a:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     87e:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					break;
     882:	03 c0       	rjmp	.+6      	; 0x88a <TUI+0x27a>
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
						backup_profile.rpm++;
					break;
     884:	00 00       	nop
     886:	01 c1       	rjmp	.+514    	; 0xa8a <__stack+0x18b>
				case '-':
					if (backup_profile.rpm > 0)
						backup_profile.rpm--;
					break;
     888:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     88a:	ff c0       	rjmp	.+510    	; 0xa8a <__stack+0x18b>

		case TIME_MENU:
			switch (action)
     88c:	8d 81       	ldd	r24, Y+5	; 0x05
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	8d 32       	cpi	r24, 0x2D	; 45
     894:	91 05       	cpc	r25, r1
     896:	b9 f0       	breq	.+46     	; 0x8c6 <TUI+0x2b6>
     898:	82 36       	cpi	r24, 0x62	; 98
     89a:	91 05       	cpc	r25, r1
     89c:	21 f1       	breq	.+72     	; 0x8e6 <TUI+0x2d6>
     89e:	8b 97       	sbiw	r24, 0x2b	; 43
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <TUI+0x294>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     8a2:	f3 c0       	rjmp	.+486    	; 0xa8a <__stack+0x18b>

		case TIME_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
     8a4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8a8:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8ac:	80 3a       	cpi	r24, 0xA0	; 160
     8ae:	9c 48       	sbci	r25, 0x8C	; 140
     8b0:	68 f5       	brcc	.+90     	; 0x90c <__stack+0xd>
						backup_profile.sec+=60;
     8b2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8b6:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8ba:	cc 96       	adiw	r24, 0x3c	; 60
     8bc:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <backup_profile+0x3>
     8c0:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <backup_profile+0x2>
					break;
     8c4:	23 c0       	rjmp	.+70     	; 0x90c <__stack+0xd>
				case '-':
					if (backup_profile.sec > 0)
     8c6:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8ca:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8ce:	89 2b       	or	r24, r25
     8d0:	f9 f0       	breq	.+62     	; 0x910 <__stack+0x11>
						backup_profile.sec-=60;
     8d2:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8d6:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8da:	cc 97       	sbiw	r24, 0x3c	; 60
     8dc:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <backup_profile+0x3>
     8e0:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <backup_profile+0x2>
					break;
     8e4:	15 c0       	rjmp	.+42     	; 0x910 <__stack+0x11>
				case  'b':
					menu = MAIN_MENU;
     8e6:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					user_profile = backup_profile;
     8ea:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     8ee:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     8f2:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8f6:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8fa:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     8fe:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     902:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     906:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					break;
     90a:	03 c0       	rjmp	.+6      	; 0x912 <__stack+0x13>
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
						backup_profile.sec+=60;
					break;
     90c:	00 00       	nop
     90e:	bd c0       	rjmp	.+378    	; 0xa8a <__stack+0x18b>
				case '-':
					if (backup_profile.sec > 0)
						backup_profile.sec-=60;
					break;
     910:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     912:	bb c0       	rjmp	.+374    	; 0xa8a <__stack+0x18b>

		case LOAD_MENU:
			switch (action)
     914:	8d 81       	ldd	r24, Y+5	; 0x05
     916:	88 2f       	mov	r24, r24
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	8d 32       	cpi	r24, 0x2D	; 45
     91c:	91 05       	cpc	r25, r1
     91e:	d9 f0       	breq	.+54     	; 0x956 <__stack+0x57>
     920:	82 36       	cpi	r24, 0x62	; 98
     922:	91 05       	cpc	r25, r1
     924:	69 f1       	breq	.+90     	; 0x980 <__stack+0x81>
     926:	8b 97       	sbiw	r24, 0x2b	; 43
     928:	09 f0       	breq	.+2      	; 0x92c <__stack+0x2d>
					eep_update();
					break;
				default:
				;
			}
			break;
     92a:	af c0       	rjmp	.+350    	; 0xa8a <__stack+0x18b>

		case LOAD_MENU:
			switch (action)
			{
				case '+':
					switch (load_menu_select)
     92c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1912>
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	00 97       	sbiw	r24, 0x00	; 0
     936:	19 f0       	breq	.+6      	; 0x93e <__stack+0x3f>
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	29 f0       	breq	.+10     	; 0x946 <__stack+0x47>
     93c:	08 c0       	rjmp	.+16     	; 0x94e <__stack+0x4f>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1912>
							break;
     944:	07 c0       	rjmp	.+14     	; 0x954 <__stack+0x55>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1912>
							break;
     94c:	03 c0       	rjmp	.+6      	; 0x954 <__stack+0x55>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     94e:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <load_menu_select.1912>
					}
					break;
     952:	3c c0       	rjmp	.+120    	; 0x9cc <__stack+0xcd>
     954:	3b c0       	rjmp	.+118    	; 0x9cc <__stack+0xcd>
				case '-':
					switch (load_menu_select)
     956:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1912>
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	00 97       	sbiw	r24, 0x00	; 0
     960:	19 f0       	breq	.+6      	; 0x968 <__stack+0x69>
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	29 f0       	breq	.+10     	; 0x970 <__stack+0x71>
     966:	07 c0       	rjmp	.+14     	; 0x976 <__stack+0x77>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1912>
							break;
     96e:	07 c0       	rjmp	.+14     	; 0x97e <__stack+0x7f>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     970:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <load_menu_select.1912>
							break;
     974:	04 c0       	rjmp	.+8      	; 0x97e <__stack+0x7f>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1912>
					}
					break;
     97c:	27 c0       	rjmp	.+78     	; 0x9cc <__stack+0xcd>
     97e:	26 c0       	rjmp	.+76     	; 0x9cc <__stack+0xcd>
				case  'b':
					menu = MAIN_MENU;
     980:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					eeprom_data.profile_id = load_menu_select;
     984:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1912>
     988:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					user_profile = eeprom_data.profile[eeprom_data.profile_id];
     98c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	9e 4f       	sbci	r25, 0xFE	; 254
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	a2 81       	ldd	r26, Z+2	; 0x02
     9a8:	b3 81       	ldd	r27, Z+3	; 0x03
     9aa:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     9ae:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     9b2:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     9b6:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					eep_update();
     9ba:	4d e0       	ldi	r20, 0x0D	; 13
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	60 e1       	ldi	r22, 0x10	; 16
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <eeprom_update_block>
					break;
     9ca:	00 00       	nop
				default:
				;
			}
			break;
     9cc:	5e c0       	rjmp	.+188    	; 0xa8a <__stack+0x18b>

		case SAVE_MENU:
			switch (action)
     9ce:	8d 81       	ldd	r24, Y+5	; 0x05
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	8d 32       	cpi	r24, 0x2D	; 45
     9d6:	91 05       	cpc	r25, r1
     9d8:	d9 f0       	breq	.+54     	; 0xa10 <__stack+0x111>
     9da:	82 36       	cpi	r24, 0x62	; 98
     9dc:	91 05       	cpc	r25, r1
     9de:	69 f1       	breq	.+90     	; 0xa3a <__stack+0x13b>
     9e0:	8b 97       	sbiw	r24, 0x2b	; 43
     9e2:	09 f0       	breq	.+2      	; 0x9e6 <__stack+0xe7>
					eep_update();
					break;
				default:
				;
			}
			break;
     9e4:	51 c0       	rjmp	.+162    	; 0xa88 <__stack+0x189>

		case SAVE_MENU:
			switch (action)
			{
				case '+':
					switch (save_menu_select)
     9e6:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1913>
     9ea:	88 2f       	mov	r24, r24
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	19 f0       	breq	.+6      	; 0x9f8 <__stack+0xf9>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	29 f0       	breq	.+10     	; 0xa00 <__stack+0x101>
     9f6:	08 c0       	rjmp	.+16     	; 0xa08 <__stack+0x109>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1913>
							break;
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <__stack+0x10f>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1913>
							break;
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <__stack+0x10f>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     a08:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <save_menu_select.1913>
					}
					break;
     a0c:	3d c0       	rjmp	.+122    	; 0xa88 <__stack+0x189>
     a0e:	3c c0       	rjmp	.+120    	; 0xa88 <__stack+0x189>
				case '-':
					switch (save_menu_select)
     a10:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1913>
     a14:	88 2f       	mov	r24, r24
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	00 97       	sbiw	r24, 0x00	; 0
     a1a:	19 f0       	breq	.+6      	; 0xa22 <__stack+0x123>
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	29 f0       	breq	.+10     	; 0xa2a <__stack+0x12b>
     a20:	07 c0       	rjmp	.+14     	; 0xa30 <__stack+0x131>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1913>
							break;
     a28:	07 c0       	rjmp	.+14     	; 0xa38 <__stack+0x139>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     a2a:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <save_menu_select.1913>
							break;
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__stack+0x139>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1913>
					}
					break;
     a36:	28 c0       	rjmp	.+80     	; 0xa88 <__stack+0x189>
     a38:	27 c0       	rjmp	.+78     	; 0xa88 <__stack+0x189>
				case  'b':
					menu = MAIN_MENU;
     a3a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					eeprom_data.profile_id = save_menu_select;
     a3e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1913>
     a42:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					eeprom_data.profile[eeprom_data.profile_id] = user_profile;
     a46:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a4a:	88 2f       	mov	r24, r24
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	9c 01       	movw	r18, r24
     a58:	2f 5f       	subi	r18, 0xFF	; 255
     a5a:	3e 4f       	sbci	r19, 0xFE	; 254
     a5c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     a60:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     a64:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     a68:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     a6c:	f9 01       	movw	r30, r18
     a6e:	80 83       	st	Z, r24
     a70:	91 83       	std	Z+1, r25	; 0x01
     a72:	a2 83       	std	Z+2, r26	; 0x02
     a74:	b3 83       	std	Z+3, r27	; 0x03
					eep_update();
     a76:	4d e0       	ldi	r20, 0x0D	; 13
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	60 e1       	ldi	r22, 0x10	; 16
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <eeprom_update_block>
					break;
     a86:	00 00       	nop
				default:
				;
			}
			break;
     a88:	00 00       	nop
		default:
			;
	}

	// zobrazeni
	switch (menu)
     a8a:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     a8e:	88 2f       	mov	r24, r24
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	82 30       	cpi	r24, 0x02	; 2
     a94:	91 05       	cpc	r25, r1
     a96:	09 f4       	brne	.+2      	; 0xa9a <__stack+0x19b>
     a98:	20 c2       	rjmp	.+1088   	; 0xeda <__stack+0x5db>
     a9a:	83 30       	cpi	r24, 0x03	; 3
     a9c:	91 05       	cpc	r25, r1
     a9e:	34 f4       	brge	.+12     	; 0xaac <__stack+0x1ad>
     aa0:	00 97       	sbiw	r24, 0x00	; 0
     aa2:	81 f0       	breq	.+32     	; 0xac4 <__stack+0x1c5>
     aa4:	01 97       	sbiw	r24, 0x01	; 1
     aa6:	09 f4       	brne	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	b3 c1       	rjmp	.+870    	; 0xe10 <__stack+0x511>
			break;

		default:
		;
	}
}
     aaa:	c7 c4       	rjmp	.+2446   	; 0x143a <__stack+0xb3b>
		default:
			;
	}

	// zobrazeni
	switch (menu)
     aac:	84 30       	cpi	r24, 0x04	; 4
     aae:	91 05       	cpc	r25, r1
     ab0:	09 f4       	brne	.+2      	; 0xab4 <__stack+0x1b5>
     ab2:	d5 c2       	rjmp	.+1450   	; 0x105e <__stack+0x75f>
     ab4:	84 30       	cpi	r24, 0x04	; 4
     ab6:	91 05       	cpc	r25, r1
     ab8:	0c f4       	brge	.+2      	; 0xabc <__stack+0x1bd>
     aba:	4e c2       	rjmp	.+1180   	; 0xf58 <__stack+0x659>
     abc:	05 97       	sbiw	r24, 0x05	; 5
     abe:	09 f4       	brne	.+2      	; 0xac2 <__stack+0x1c3>
     ac0:	c5 c3       	rjmp	.+1930   	; 0x124c <__stack+0x94d>
			break;

		default:
		;
	}
}
     ac2:	bb c4       	rjmp	.+2422   	; 0x143a <__stack+0xb3b>
	// zobrazeni
	switch (menu)
	{
		case MAIN_MENU:

			if (user_profile.sec/3600)
     ac4:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     ac8:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     acc:	80 31       	cpi	r24, 0x10	; 16
     ace:	9e 40       	sbci	r25, 0x0E	; 14
     ad0:	08 f4       	brcc	.+2      	; 0xad4 <__stack+0x1d5>
     ad2:	5f c0       	rjmp	.+190    	; 0xb92 <__stack+0x293>
				lcd_printf("\f%02d:%02d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     ad4:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     ad8:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     adc:	20 e1       	ldi	r18, 0x10	; 16
     ade:	3e e0       	ldi	r19, 0x0E	; 14
     ae0:	b9 01       	movw	r22, r18
     ae2:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
     ae6:	ac 01       	movw	r20, r24
     ae8:	9a 01       	movw	r18, r20
     aea:	a9 e8       	ldi	r26, 0x89	; 137
     aec:	b8 e8       	ldi	r27, 0x88	; 136
     aee:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
     af2:	fc 01       	movw	r30, r24
     af4:	f6 95       	lsr	r31
     af6:	e7 95       	ror	r30
     af8:	f2 95       	swap	r31
     afa:	e2 95       	swap	r30
     afc:	ef 70       	andi	r30, 0x0F	; 15
     afe:	ef 27       	eor	r30, r31
     b00:	ff 70       	andi	r31, 0x0F	; 15
     b02:	ef 27       	eor	r30, r31
     b04:	2c e3       	ldi	r18, 0x3C	; 60
     b06:	2e 9f       	mul	r18, r30
     b08:	c0 01       	movw	r24, r0
     b0a:	2f 9f       	mul	r18, r31
     b0c:	90 0d       	add	r25, r0
     b0e:	11 24       	eor	r1, r1
     b10:	fa 01       	movw	r30, r20
     b12:	e8 1b       	sub	r30, r24
     b14:	f9 0b       	sbc	r31, r25
     b16:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b1a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b1e:	20 e1       	ldi	r18, 0x10	; 16
     b20:	3e e0       	ldi	r19, 0x0E	; 14
     b22:	b9 01       	movw	r22, r18
     b24:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
     b28:	9c 01       	movw	r18, r24
     b2a:	a9 e8       	ldi	r26, 0x89	; 137
     b2c:	b8 e8       	ldi	r27, 0x88	; 136
     b2e:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
     b32:	9c 01       	movw	r18, r24
     b34:	36 95       	lsr	r19
     b36:	27 95       	ror	r18
     b38:	32 95       	swap	r19
     b3a:	22 95       	swap	r18
     b3c:	2f 70       	andi	r18, 0x0F	; 15
     b3e:	23 27       	eor	r18, r19
     b40:	3f 70       	andi	r19, 0x0F	; 15
     b42:	23 27       	eor	r18, r19
     b44:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b48:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b4c:	40 e1       	ldi	r20, 0x10	; 16
     b4e:	5e e0       	ldi	r21, 0x0E	; 14
     b50:	ba 01       	movw	r22, r20
     b52:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
     b56:	cb 01       	movw	r24, r22
     b58:	4f 2f       	mov	r20, r31
     b5a:	4f 93       	push	r20
     b5c:	4e 2f       	mov	r20, r30
     b5e:	4f 93       	push	r20
     b60:	43 2f       	mov	r20, r19
     b62:	4f 93       	push	r20
     b64:	2f 93       	push	r18
     b66:	29 2f       	mov	r18, r25
     b68:	2f 93       	push	r18
     b6a:	8f 93       	push	r24
     b6c:	8e e0       	ldi	r24, 0x0E	; 14
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	89 2f       	mov	r24, r25
     b72:	8f 93       	push	r24
     b74:	8e e0       	ldi	r24, 0x0E	; 14
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	8f 93       	push	r24
     b7a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     b7e:	4d b7       	in	r20, 0x3d	; 61
     b80:	5e b7       	in	r21, 0x3e	; 62
     b82:	48 5f       	subi	r20, 0xF8	; 248
     b84:	5f 4f       	sbci	r21, 0xFF	; 255
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	4d c0       	rjmp	.+154    	; 0xc2c <__stack+0x32d>
			else
				lcd_printf("\f%02d:%02d   ", (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     b92:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b96:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b9a:	20 e1       	ldi	r18, 0x10	; 16
     b9c:	3e e0       	ldi	r19, 0x0E	; 14
     b9e:	b9 01       	movw	r22, r18
     ba0:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
     ba4:	ac 01       	movw	r20, r24
     ba6:	9a 01       	movw	r18, r20
     ba8:	a9 e8       	ldi	r26, 0x89	; 137
     baa:	b8 e8       	ldi	r27, 0x88	; 136
     bac:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
     bb0:	fc 01       	movw	r30, r24
     bb2:	f6 95       	lsr	r31
     bb4:	e7 95       	ror	r30
     bb6:	f2 95       	swap	r31
     bb8:	e2 95       	swap	r30
     bba:	ef 70       	andi	r30, 0x0F	; 15
     bbc:	ef 27       	eor	r30, r31
     bbe:	ff 70       	andi	r31, 0x0F	; 15
     bc0:	ef 27       	eor	r30, r31
     bc2:	2c e3       	ldi	r18, 0x3C	; 60
     bc4:	2e 9f       	mul	r18, r30
     bc6:	c0 01       	movw	r24, r0
     bc8:	2f 9f       	mul	r18, r31
     bca:	90 0d       	add	r25, r0
     bcc:	11 24       	eor	r1, r1
     bce:	fa 01       	movw	r30, r20
     bd0:	e8 1b       	sub	r30, r24
     bd2:	f9 0b       	sbc	r31, r25
     bd4:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     bd8:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     bdc:	20 e1       	ldi	r18, 0x10	; 16
     bde:	3e e0       	ldi	r19, 0x0E	; 14
     be0:	b9 01       	movw	r22, r18
     be2:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
     be6:	9c 01       	movw	r18, r24
     be8:	a9 e8       	ldi	r26, 0x89	; 137
     bea:	b8 e8       	ldi	r27, 0x88	; 136
     bec:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
     bf0:	96 95       	lsr	r25
     bf2:	87 95       	ror	r24
     bf4:	92 95       	swap	r25
     bf6:	82 95       	swap	r24
     bf8:	8f 70       	andi	r24, 0x0F	; 15
     bfa:	89 27       	eor	r24, r25
     bfc:	9f 70       	andi	r25, 0x0F	; 15
     bfe:	89 27       	eor	r24, r25
     c00:	2f 2f       	mov	r18, r31
     c02:	2f 93       	push	r18
     c04:	2e 2f       	mov	r18, r30
     c06:	2f 93       	push	r18
     c08:	29 2f       	mov	r18, r25
     c0a:	2f 93       	push	r18
     c0c:	8f 93       	push	r24
     c0e:	8e e1       	ldi	r24, 0x1E	; 30
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	89 2f       	mov	r24, r25
     c14:	8f 93       	push	r24
     c16:	8e e1       	ldi	r24, 0x1E	; 30
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	8f 93       	push	r24
     c1c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
			lcd_printf("       %3d%cC", ntc_measure(), 223);
     c2c:	0e 94 a7 13 	call	0x274e	; 0x274e <ntc_measure>
     c30:	1f 92       	push	r1
     c32:	2f ed       	ldi	r18, 0xDF	; 223
     c34:	2f 93       	push	r18
     c36:	29 2f       	mov	r18, r25
     c38:	2f 93       	push	r18
     c3a:	8f 93       	push	r24
     c3c:	8c e2       	ldi	r24, 0x2C	; 44
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	89 2f       	mov	r24, r25
     c42:	8f 93       	push	r24
     c44:	8c e2       	ldi	r24, 0x2C	; 44
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	8f 93       	push	r24
     c4a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
			lcd_printf("\n        %4d", user_profile.rpm);
     c5a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     c5e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     c62:	29 2f       	mov	r18, r25
     c64:	2f 93       	push	r18
     c66:	8f 93       	push	r24
     c68:	8a e3       	ldi	r24, 0x3A	; 58
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	89 2f       	mov	r24, r25
     c6e:	8f 93       	push	r24
     c70:	8a e3       	ldi	r24, 0x3A	; 58
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	8f 93       	push	r24
     c76:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0

			switch (machine_state)
     c82:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	41 f5       	brne	.+80     	; 0xcde <__stack+0x3df>
			{
				case MACHINE_STOP:
					lcd_printf("\n\n%cStart        %cMenu ", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, (main_menu_secelt == MAIN_MENU_SELECT_MENU) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     c8e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1910>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	19 f4       	brne	.+6      	; 0xc9c <__stack+0x39d>
     c96:	28 e0       	ldi	r18, 0x08	; 8
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <__stack+0x3a1>
     c9c:	20 e2       	ldi	r18, 0x20	; 32
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1910>
     ca4:	88 23       	and	r24, r24
     ca6:	19 f4       	brne	.+6      	; 0xcae <__stack+0x3af>
     ca8:	88 e0       	ldi	r24, 0x08	; 8
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <__stack+0x3b3>
     cae:	80 e2       	ldi	r24, 0x20	; 32
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	43 2f       	mov	r20, r19
     cb4:	4f 93       	push	r20
     cb6:	2f 93       	push	r18
     cb8:	29 2f       	mov	r18, r25
     cba:	2f 93       	push	r18
     cbc:	8f 93       	push	r24
     cbe:	87 e4       	ldi	r24, 0x47	; 71
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	89 2f       	mov	r24, r25
     cc4:	8f 93       	push	r24
     cc6:	87 e4       	ldi	r24, 0x47	; 71
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	8f 93       	push	r24
     ccc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
					break;
     cdc:	98 c0       	rjmp	.+304    	; 0xe0e <__stack+0x50f>
				default:
					lcd_printf("\n");
     cde:	80 e6       	ldi	r24, 0x60	; 96
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	89 2f       	mov	r24, r25
     ce4:	8f 93       	push	r24
     ce6:	80 e6       	ldi	r24, 0x60	; 96
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	8f 93       	push	r24
     cec:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
					// bar to end
					uint32_t bar;
					bar = backup_profile.sec - user_profile.sec;
     cf4:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     cf8:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     cfc:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     d00:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     d04:	f9 01       	movw	r30, r18
     d06:	e8 1b       	sub	r30, r24
     d08:	f9 0b       	sbc	r31, r25
     d0a:	cf 01       	movw	r24, r30
     d0c:	cc 01       	movw	r24, r24
     d0e:	a0 e0       	ldi	r26, 0x00	; 0
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	ab 83       	std	Y+3, r26	; 0x03
     d18:	bc 83       	std	Y+4, r27	; 0x04
					if (bar)	// div zero
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	ab 81       	ldd	r26, Y+3	; 0x03
     d20:	bc 81       	ldd	r27, Y+4	; 0x04
     d22:	89 2b       	or	r24, r25
     d24:	8a 2b       	or	r24, r26
     d26:	8b 2b       	or	r24, r27
     d28:	09 f4       	brne	.+2      	; 0xd2c <__stack+0x42d>
     d2a:	4f c0       	rjmp	.+158    	; 0xdca <__stack+0x4cb>
					{
						bar *= 20;
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	ab 81       	ldd	r26, Y+3	; 0x03
     d32:	bc 81       	ldd	r27, Y+4	; 0x04
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	aa 1f       	adc	r26, r26
     d3a:	bb 1f       	adc	r27, r27
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	aa 1f       	adc	r26, r26
     d42:	bb 1f       	adc	r27, r27
     d44:	9c 01       	movw	r18, r24
     d46:	ad 01       	movw	r20, r26
     d48:	22 0f       	add	r18, r18
     d4a:	33 1f       	adc	r19, r19
     d4c:	44 1f       	adc	r20, r20
     d4e:	55 1f       	adc	r21, r21
     d50:	22 0f       	add	r18, r18
     d52:	33 1f       	adc	r19, r19
     d54:	44 1f       	adc	r20, r20
     d56:	55 1f       	adc	r21, r21
     d58:	82 0f       	add	r24, r18
     d5a:	93 1f       	adc	r25, r19
     d5c:	a4 1f       	adc	r26, r20
     d5e:	b5 1f       	adc	r27, r21
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	9a 83       	std	Y+2, r25	; 0x02
     d64:	ab 83       	std	Y+3, r26	; 0x03
     d66:	bc 83       	std	Y+4, r27	; 0x04
						bar = bar / backup_profile.sec;
     d68:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     d6c:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     d70:	9c 01       	movw	r18, r24
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	ab 81       	ldd	r26, Y+3	; 0x03
     d7c:	bc 81       	ldd	r27, Y+4	; 0x04
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__udivmodsi4>
     d86:	da 01       	movw	r26, r20
     d88:	c9 01       	movw	r24, r18
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	ab 83       	std	Y+3, r26	; 0x03
     d90:	bc 83       	std	Y+4, r27	; 0x04
					}
					for (; bar > 0; bar--)
     d92:	1b c0       	rjmp	.+54     	; 0xdca <__stack+0x4cb>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
     d94:	1f 92       	push	r1
     d96:	89 e0       	ldi	r24, 0x09	; 9
     d98:	8f 93       	push	r24
     d9a:	82 e6       	ldi	r24, 0x62	; 98
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	89 2f       	mov	r24, r25
     da0:	8f 93       	push	r24
     da2:	82 e6       	ldi	r24, 0x62	; 98
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	8f 93       	push	r24
     da8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
					if (bar)	// div zero
					{
						bar *= 20;
						bar = bar / backup_profile.sec;
					}
					for (; bar > 0; bar--)
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	ab 81       	ldd	r26, Y+3	; 0x03
     dba:	bc 81       	ldd	r27, Y+4	; 0x04
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	a1 09       	sbc	r26, r1
     dc0:	b1 09       	sbc	r27, r1
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	ab 83       	std	Y+3, r26	; 0x03
     dc8:	bc 83       	std	Y+4, r27	; 0x04
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	ab 81       	ldd	r26, Y+3	; 0x03
     dd0:	bc 81       	ldd	r27, Y+4	; 0x04
     dd2:	89 2b       	or	r24, r25
     dd4:	8a 2b       	or	r24, r26
     dd6:	8b 2b       	or	r24, r27
     dd8:	e9 f6       	brne	.-70     	; 0xd94 <__stack+0x495>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
					}

					lcd_printf("\n%cStop", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     dda:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1910>
     dde:	88 23       	and	r24, r24
     de0:	19 f4       	brne	.+6      	; 0xde8 <__stack+0x4e9>
     de2:	88 e0       	ldi	r24, 0x08	; 8
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <__stack+0x4ed>
     de8:	80 e2       	ldi	r24, 0x20	; 32
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	29 2f       	mov	r18, r25
     dee:	2f 93       	push	r18
     df0:	8f 93       	push	r24
     df2:	85 e6       	ldi	r24, 0x65	; 101
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	89 2f       	mov	r24, r25
     df8:	8f 93       	push	r24
     dfa:	85 e6       	ldi	r24, 0x65	; 101
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	8f 93       	push	r24
     e00:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
					break;
     e0c:	00 00       	nop
			}
			break;
     e0e:	15 c3       	rjmp	.+1578   	; 0x143a <__stack+0xb3b>

		case ITEM_MENU:
			lcd_printf("\f%cRychlost omylani", (item_menu_secect == ITEM_MENU_SELECT_RPM) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e10:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1911>
     e14:	88 23       	and	r24, r24
     e16:	19 f4       	brne	.+6      	; 0xe1e <__stack+0x51f>
     e18:	88 e0       	ldi	r24, 0x08	; 8
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <__stack+0x523>
     e1e:	80 e2       	ldi	r24, 0x20	; 32
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	29 2f       	mov	r18, r25
     e24:	2f 93       	push	r18
     e26:	8f 93       	push	r24
     e28:	8d e6       	ldi	r24, 0x6D	; 109
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	89 2f       	mov	r24, r25
     e2e:	8f 93       	push	r24
     e30:	8d e6       	ldi	r24, 0x6D	; 109
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	8f 93       	push	r24
     e36:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
			lcd_printf("\n%cDelka omylani", (item_menu_secect == ITEM_MENU_SELECT_TIME) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e42:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1911>
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	19 f4       	brne	.+6      	; 0xe50 <__stack+0x551>
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <__stack+0x555>
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	29 2f       	mov	r18, r25
     e56:	2f 93       	push	r18
     e58:	8f 93       	push	r24
     e5a:	81 e8       	ldi	r24, 0x81	; 129
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	89 2f       	mov	r24, r25
     e60:	8f 93       	push	r24
     e62:	81 e8       	ldi	r24, 0x81	; 129
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	8f 93       	push	r24
     e68:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
			lcd_printf("\n%cNacist profil", (item_menu_secect == ITEM_MENU_SELECT_LOAD) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e74:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1911>
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	19 f4       	brne	.+6      	; 0xe82 <__stack+0x583>
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <__stack+0x587>
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	29 2f       	mov	r18, r25
     e88:	2f 93       	push	r18
     e8a:	8f 93       	push	r24
     e8c:	82 e9       	ldi	r24, 0x92	; 146
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	89 2f       	mov	r24, r25
     e92:	8f 93       	push	r24
     e94:	82 e9       	ldi	r24, 0x92	; 146
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	8f 93       	push	r24
     e9a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
			lcd_printf("\n%cUlozit profil", (item_menu_secect == ITEM_MENU_SELECT_SAVE) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     ea6:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1911>
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	19 f4       	brne	.+6      	; 0xeb4 <__stack+0x5b5>
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <__stack+0x5b9>
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	29 2f       	mov	r18, r25
     eba:	2f 93       	push	r18
     ebc:	8f 93       	push	r24
     ebe:	83 ea       	ldi	r24, 0xA3	; 163
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	89 2f       	mov	r24, r25
     ec4:	8f 93       	push	r24
     ec6:	83 ea       	ldi	r24, 0xA3	; 163
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	8f 93       	push	r24
     ecc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
			break;
     ed8:	b0 c2       	rjmp	.+1376   	; 0x143a <__stack+0xb3b>

		case RPM_MENU:
			lcd_printf("\fNastaveni otacek");
     eda:	84 eb       	ldi	r24, 0xB4	; 180
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	89 2f       	mov	r24, r25
     ee0:	8f 93       	push	r24
     ee2:	84 eb       	ldi	r24, 0xB4	; 180
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	8f 93       	push	r24
     ee8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
			lcd_printf("\nza minutu");
     ef0:	86 ec       	ldi	r24, 0xC6	; 198
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	89 2f       	mov	r24, r25
     ef6:	8f 93       	push	r24
     ef8:	86 ec       	ldi	r24, 0xC6	; 198
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	8f 93       	push	r24
     efe:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
			lcd_printf("\nStara hodnota:%6d", user_profile.rpm);
     f06:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     f0a:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     f0e:	29 2f       	mov	r18, r25
     f10:	2f 93       	push	r18
     f12:	8f 93       	push	r24
     f14:	81 ed       	ldi	r24, 0xD1	; 209
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	89 2f       	mov	r24, r25
     f1a:	8f 93       	push	r24
     f1c:	81 ed       	ldi	r24, 0xD1	; 209
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	8f 93       	push	r24
     f22:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
			lcd_printf("\nNova  hodnota:%6d", backup_profile.rpm);
     f2e:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     f32:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     f36:	29 2f       	mov	r18, r25
     f38:	2f 93       	push	r18
     f3a:	8f 93       	push	r24
     f3c:	84 ee       	ldi	r24, 0xE4	; 228
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	89 2f       	mov	r24, r25
     f42:	8f 93       	push	r24
     f44:	84 ee       	ldi	r24, 0xE4	; 228
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	8f 93       	push	r24
     f4a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
			break;
     f56:	71 c2       	rjmp	.+1250   	; 0x143a <__stack+0xb3b>

		case TIME_MENU:
			lcd_printf("\fNastaveni delky");
     f58:	87 ef       	ldi	r24, 0xF7	; 247
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	89 2f       	mov	r24, r25
     f5e:	8f 93       	push	r24
     f60:	87 ef       	ldi	r24, 0xF7	; 247
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	8f 93       	push	r24
     f66:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
			lcd_printf("\nomylani [HH:MM]");
     f6e:	88 e0       	ldi	r24, 0x08	; 8
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	89 2f       	mov	r24, r25
     f74:	8f 93       	push	r24
     f76:	88 e0       	ldi	r24, 0x08	; 8
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	8f 93       	push	r24
     f7c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
			lcd_printf("\nStary cas:     %2d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60);
     f84:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     f88:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     f8c:	20 e1       	ldi	r18, 0x10	; 16
     f8e:	3e e0       	ldi	r19, 0x0E	; 14
     f90:	b9 01       	movw	r22, r18
     f92:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
     f96:	9c 01       	movw	r18, r24
     f98:	a9 e8       	ldi	r26, 0x89	; 137
     f9a:	b8 e8       	ldi	r27, 0x88	; 136
     f9c:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
     fa0:	9c 01       	movw	r18, r24
     fa2:	36 95       	lsr	r19
     fa4:	27 95       	ror	r18
     fa6:	32 95       	swap	r19
     fa8:	22 95       	swap	r18
     faa:	2f 70       	andi	r18, 0x0F	; 15
     fac:	23 27       	eor	r18, r19
     fae:	3f 70       	andi	r19, 0x0F	; 15
     fb0:	23 27       	eor	r18, r19
     fb2:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     fb6:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     fba:	40 e1       	ldi	r20, 0x10	; 16
     fbc:	5e e0       	ldi	r21, 0x0E	; 14
     fbe:	ba 01       	movw	r22, r20
     fc0:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
     fc4:	cb 01       	movw	r24, r22
     fc6:	43 2f       	mov	r20, r19
     fc8:	4f 93       	push	r20
     fca:	2f 93       	push	r18
     fcc:	29 2f       	mov	r18, r25
     fce:	2f 93       	push	r18
     fd0:	8f 93       	push	r24
     fd2:	89 e1       	ldi	r24, 0x19	; 25
     fd4:	92 e0       	ldi	r25, 0x02	; 2
     fd6:	89 2f       	mov	r24, r25
     fd8:	8f 93       	push	r24
     fda:	89 e1       	ldi	r24, 0x19	; 25
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	8f 93       	push	r24
     fe0:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
			lcd_printf("\nNovy  cas:     %2d:%02d", backup_profile.sec/3600, (backup_profile.sec%3600)/60);
     ff0:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     ff4:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     ff8:	20 e1       	ldi	r18, 0x10	; 16
     ffa:	3e e0       	ldi	r19, 0x0E	; 14
     ffc:	b9 01       	movw	r22, r18
     ffe:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    1002:	9c 01       	movw	r18, r24
    1004:	a9 e8       	ldi	r26, 0x89	; 137
    1006:	b8 e8       	ldi	r27, 0x88	; 136
    1008:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    100c:	9c 01       	movw	r18, r24
    100e:	36 95       	lsr	r19
    1010:	27 95       	ror	r18
    1012:	32 95       	swap	r19
    1014:	22 95       	swap	r18
    1016:	2f 70       	andi	r18, 0x0F	; 15
    1018:	23 27       	eor	r18, r19
    101a:	3f 70       	andi	r19, 0x0F	; 15
    101c:	23 27       	eor	r18, r19
    101e:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
    1022:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
    1026:	40 e1       	ldi	r20, 0x10	; 16
    1028:	5e e0       	ldi	r21, 0x0E	; 14
    102a:	ba 01       	movw	r22, r20
    102c:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    1030:	cb 01       	movw	r24, r22
    1032:	43 2f       	mov	r20, r19
    1034:	4f 93       	push	r20
    1036:	2f 93       	push	r18
    1038:	29 2f       	mov	r18, r25
    103a:	2f 93       	push	r18
    103c:	8f 93       	push	r24
    103e:	82 e3       	ldi	r24, 0x32	; 50
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	89 2f       	mov	r24, r25
    1044:	8f 93       	push	r24
    1046:	82 e3       	ldi	r24, 0x32	; 50
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	8f 93       	push	r24
    104c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
			break;
    105c:	ee c1       	rjmp	.+988    	; 0x143a <__stack+0xb3b>

		case LOAD_MENU:
			lcd_printf("\fNacteni profilu");
    105e:	8b e4       	ldi	r24, 0x4B	; 75
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	89 2f       	mov	r24, r25
    1064:	8f 93       	push	r24
    1066:	8b e4       	ldi	r24, 0x4B	; 75
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	8f 93       	push	r24
    106c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    1074:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    1078:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    107c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    1080:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    1084:	20 e1       	ldi	r18, 0x10	; 16
    1086:	3e e0       	ldi	r19, 0x0E	; 14
    1088:	b9 01       	movw	r22, r18
    108a:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    108e:	9c 01       	movw	r18, r24
    1090:	a9 e8       	ldi	r26, 0x89	; 137
    1092:	b8 e8       	ldi	r27, 0x88	; 136
    1094:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    1098:	9c 01       	movw	r18, r24
    109a:	36 95       	lsr	r19
    109c:	27 95       	ror	r18
    109e:	32 95       	swap	r19
    10a0:	22 95       	swap	r18
    10a2:	2f 70       	andi	r18, 0x0F	; 15
    10a4:	23 27       	eor	r18, r19
    10a6:	3f 70       	andi	r19, 0x0F	; 15
    10a8:	23 27       	eor	r18, r19
    10aa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    10ae:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    10b2:	40 e1       	ldi	r20, 0x10	; 16
    10b4:	5e e0       	ldi	r21, 0x0E	; 14
    10b6:	ba 01       	movw	r22, r20
    10b8:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    10bc:	cb 01       	movw	r24, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1912>
    10c4:	88 23       	and	r24, r24
    10c6:	19 f4       	brne	.+6      	; 0x10ce <__stack+0x7cf>
    10c8:	88 e0       	ldi	r24, 0x08	; 8
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <__stack+0x7d3>
    10ce:	80 e2       	ldi	r24, 0x20	; 32
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	6f 2f       	mov	r22, r31
    10d4:	6f 93       	push	r22
    10d6:	6e 2f       	mov	r22, r30
    10d8:	6f 93       	push	r22
    10da:	63 2f       	mov	r22, r19
    10dc:	6f 93       	push	r22
    10de:	2f 93       	push	r18
    10e0:	25 2f       	mov	r18, r21
    10e2:	2f 93       	push	r18
    10e4:	24 2f       	mov	r18, r20
    10e6:	2f 93       	push	r18
    10e8:	29 2f       	mov	r18, r25
    10ea:	2f 93       	push	r18
    10ec:	8f 93       	push	r24
    10ee:	8c e5       	ldi	r24, 0x5C	; 92
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	89 2f       	mov	r24, r25
    10f4:	8f 93       	push	r24
    10f6:	8c e5       	ldi	r24, 0x5C	; 92
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	8f 93       	push	r24
    10fc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    1100:	4d b7       	in	r20, 0x3d	; 61
    1102:	5e b7       	in	r21, 0x3e	; 62
    1104:	46 5f       	subi	r20, 0xF6	; 246
    1106:	5f 4f       	sbci	r21, 0xFF	; 255
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    1112:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    1116:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    111a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    111e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1122:	20 e1       	ldi	r18, 0x10	; 16
    1124:	3e e0       	ldi	r19, 0x0E	; 14
    1126:	b9 01       	movw	r22, r18
    1128:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    112c:	9c 01       	movw	r18, r24
    112e:	a9 e8       	ldi	r26, 0x89	; 137
    1130:	b8 e8       	ldi	r27, 0x88	; 136
    1132:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    1136:	9c 01       	movw	r18, r24
    1138:	36 95       	lsr	r19
    113a:	27 95       	ror	r18
    113c:	32 95       	swap	r19
    113e:	22 95       	swap	r18
    1140:	2f 70       	andi	r18, 0x0F	; 15
    1142:	23 27       	eor	r18, r19
    1144:	3f 70       	andi	r19, 0x0F	; 15
    1146:	23 27       	eor	r18, r19
    1148:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    114c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1150:	40 e1       	ldi	r20, 0x10	; 16
    1152:	5e e0       	ldi	r21, 0x0E	; 14
    1154:	ba 01       	movw	r22, r20
    1156:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    115a:	cb 01       	movw	r24, r22
    115c:	ac 01       	movw	r20, r24
    115e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1912>
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	19 f4       	brne	.+6      	; 0x116c <__stack+0x86d>
    1166:	88 e0       	ldi	r24, 0x08	; 8
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <__stack+0x871>
    116c:	80 e2       	ldi	r24, 0x20	; 32
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	6f 2f       	mov	r22, r31
    1172:	6f 93       	push	r22
    1174:	6e 2f       	mov	r22, r30
    1176:	6f 93       	push	r22
    1178:	63 2f       	mov	r22, r19
    117a:	6f 93       	push	r22
    117c:	2f 93       	push	r18
    117e:	25 2f       	mov	r18, r21
    1180:	2f 93       	push	r18
    1182:	24 2f       	mov	r18, r20
    1184:	2f 93       	push	r18
    1186:	29 2f       	mov	r18, r25
    1188:	2f 93       	push	r18
    118a:	8f 93       	push	r24
    118c:	84 e7       	ldi	r24, 0x74	; 116
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	89 2f       	mov	r24, r25
    1192:	8f 93       	push	r24
    1194:	84 e7       	ldi	r24, 0x74	; 116
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	8f 93       	push	r24
    119a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    119e:	8d b7       	in	r24, 0x3d	; 61
    11a0:	9e b7       	in	r25, 0x3e	; 62
    11a2:	0a 96       	adiw	r24, 0x0a	; 10
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    11ae:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    11b2:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    11b6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    11ba:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    11be:	20 e1       	ldi	r18, 0x10	; 16
    11c0:	3e e0       	ldi	r19, 0x0E	; 14
    11c2:	b9 01       	movw	r22, r18
    11c4:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    11c8:	9c 01       	movw	r18, r24
    11ca:	a9 e8       	ldi	r26, 0x89	; 137
    11cc:	b8 e8       	ldi	r27, 0x88	; 136
    11ce:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    11d2:	9c 01       	movw	r18, r24
    11d4:	36 95       	lsr	r19
    11d6:	27 95       	ror	r18
    11d8:	32 95       	swap	r19
    11da:	22 95       	swap	r18
    11dc:	2f 70       	andi	r18, 0x0F	; 15
    11de:	23 27       	eor	r18, r19
    11e0:	3f 70       	andi	r19, 0x0F	; 15
    11e2:	23 27       	eor	r18, r19
    11e4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    11e8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    11ec:	40 e1       	ldi	r20, 0x10	; 16
    11ee:	5e e0       	ldi	r21, 0x0E	; 14
    11f0:	ba 01       	movw	r22, r20
    11f2:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    11f6:	cb 01       	movw	r24, r22
    11f8:	ac 01       	movw	r20, r24
    11fa:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1912>
    11fe:	82 30       	cpi	r24, 0x02	; 2
    1200:	19 f4       	brne	.+6      	; 0x1208 <__stack+0x909>
    1202:	88 e0       	ldi	r24, 0x08	; 8
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 c0       	rjmp	.+4      	; 0x120c <__stack+0x90d>
    1208:	80 e2       	ldi	r24, 0x20	; 32
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	6f 2f       	mov	r22, r31
    120e:	6f 93       	push	r22
    1210:	6e 2f       	mov	r22, r30
    1212:	6f 93       	push	r22
    1214:	63 2f       	mov	r22, r19
    1216:	6f 93       	push	r22
    1218:	2f 93       	push	r18
    121a:	25 2f       	mov	r18, r21
    121c:	2f 93       	push	r18
    121e:	24 2f       	mov	r18, r20
    1220:	2f 93       	push	r18
    1222:	29 2f       	mov	r18, r25
    1224:	2f 93       	push	r18
    1226:	8f 93       	push	r24
    1228:	8c e8       	ldi	r24, 0x8C	; 140
    122a:	92 e0       	ldi	r25, 0x02	; 2
    122c:	89 2f       	mov	r24, r25
    122e:	8f 93       	push	r24
    1230:	8c e8       	ldi	r24, 0x8C	; 140
    1232:	92 e0       	ldi	r25, 0x02	; 2
    1234:	8f 93       	push	r24
    1236:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    123a:	ed b7       	in	r30, 0x3d	; 61
    123c:	fe b7       	in	r31, 0x3e	; 62
    123e:	3a 96       	adiw	r30, 0x0a	; 10
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
			break;
    124a:	f7 c0       	rjmp	.+494    	; 0x143a <__stack+0xb3b>

		case SAVE_MENU:
			lcd_printf("\fUlozeni profilu");
    124c:	84 ea       	ldi	r24, 0xA4	; 164
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	89 2f       	mov	r24, r25
    1252:	8f 93       	push	r24
    1254:	84 ea       	ldi	r24, 0xA4	; 164
    1256:	92 e0       	ldi	r25, 0x02	; 2
    1258:	8f 93       	push	r24
    125a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    1262:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    1266:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    126a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    126e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    1272:	20 e1       	ldi	r18, 0x10	; 16
    1274:	3e e0       	ldi	r19, 0x0E	; 14
    1276:	b9 01       	movw	r22, r18
    1278:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    127c:	9c 01       	movw	r18, r24
    127e:	a9 e8       	ldi	r26, 0x89	; 137
    1280:	b8 e8       	ldi	r27, 0x88	; 136
    1282:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    1286:	9c 01       	movw	r18, r24
    1288:	36 95       	lsr	r19
    128a:	27 95       	ror	r18
    128c:	32 95       	swap	r19
    128e:	22 95       	swap	r18
    1290:	2f 70       	andi	r18, 0x0F	; 15
    1292:	23 27       	eor	r18, r19
    1294:	3f 70       	andi	r19, 0x0F	; 15
    1296:	23 27       	eor	r18, r19
    1298:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    129c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    12a0:	40 e1       	ldi	r20, 0x10	; 16
    12a2:	5e e0       	ldi	r21, 0x0E	; 14
    12a4:	ba 01       	movw	r22, r20
    12a6:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    12aa:	cb 01       	movw	r24, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1913>
    12b2:	88 23       	and	r24, r24
    12b4:	19 f4       	brne	.+6      	; 0x12bc <__stack+0x9bd>
    12b6:	88 e0       	ldi	r24, 0x08	; 8
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <__stack+0x9c1>
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	6f 2f       	mov	r22, r31
    12c2:	6f 93       	push	r22
    12c4:	6e 2f       	mov	r22, r30
    12c6:	6f 93       	push	r22
    12c8:	63 2f       	mov	r22, r19
    12ca:	6f 93       	push	r22
    12cc:	2f 93       	push	r18
    12ce:	25 2f       	mov	r18, r21
    12d0:	2f 93       	push	r18
    12d2:	24 2f       	mov	r18, r20
    12d4:	2f 93       	push	r18
    12d6:	29 2f       	mov	r18, r25
    12d8:	2f 93       	push	r18
    12da:	8f 93       	push	r24
    12dc:	8c e5       	ldi	r24, 0x5C	; 92
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	89 2f       	mov	r24, r25
    12e2:	8f 93       	push	r24
    12e4:	8c e5       	ldi	r24, 0x5C	; 92
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	8f 93       	push	r24
    12ea:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    12ee:	4d b7       	in	r20, 0x3d	; 61
    12f0:	5e b7       	in	r21, 0x3e	; 62
    12f2:	46 5f       	subi	r20, 0xF6	; 246
    12f4:	5f 4f       	sbci	r21, 0xFF	; 255
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    1300:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    1304:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1308:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    130c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1310:	20 e1       	ldi	r18, 0x10	; 16
    1312:	3e e0       	ldi	r19, 0x0E	; 14
    1314:	b9 01       	movw	r22, r18
    1316:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    131a:	9c 01       	movw	r18, r24
    131c:	a9 e8       	ldi	r26, 0x89	; 137
    131e:	b8 e8       	ldi	r27, 0x88	; 136
    1320:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    1324:	9c 01       	movw	r18, r24
    1326:	36 95       	lsr	r19
    1328:	27 95       	ror	r18
    132a:	32 95       	swap	r19
    132c:	22 95       	swap	r18
    132e:	2f 70       	andi	r18, 0x0F	; 15
    1330:	23 27       	eor	r18, r19
    1332:	3f 70       	andi	r19, 0x0F	; 15
    1334:	23 27       	eor	r18, r19
    1336:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    133a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    133e:	40 e1       	ldi	r20, 0x10	; 16
    1340:	5e e0       	ldi	r21, 0x0E	; 14
    1342:	ba 01       	movw	r22, r20
    1344:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    1348:	cb 01       	movw	r24, r22
    134a:	ac 01       	movw	r20, r24
    134c:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1913>
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	19 f4       	brne	.+6      	; 0x135a <__stack+0xa5b>
    1354:	88 e0       	ldi	r24, 0x08	; 8
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <__stack+0xa5f>
    135a:	80 e2       	ldi	r24, 0x20	; 32
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	6f 2f       	mov	r22, r31
    1360:	6f 93       	push	r22
    1362:	6e 2f       	mov	r22, r30
    1364:	6f 93       	push	r22
    1366:	63 2f       	mov	r22, r19
    1368:	6f 93       	push	r22
    136a:	2f 93       	push	r18
    136c:	25 2f       	mov	r18, r21
    136e:	2f 93       	push	r18
    1370:	24 2f       	mov	r18, r20
    1372:	2f 93       	push	r18
    1374:	29 2f       	mov	r18, r25
    1376:	2f 93       	push	r18
    1378:	8f 93       	push	r24
    137a:	84 e7       	ldi	r24, 0x74	; 116
    137c:	92 e0       	ldi	r25, 0x02	; 2
    137e:	89 2f       	mov	r24, r25
    1380:	8f 93       	push	r24
    1382:	84 e7       	ldi	r24, 0x74	; 116
    1384:	92 e0       	ldi	r25, 0x02	; 2
    1386:	8f 93       	push	r24
    1388:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    138c:	8d b7       	in	r24, 0x3d	; 61
    138e:	9e b7       	in	r25, 0x3e	; 62
    1390:	0a 96       	adiw	r24, 0x0a	; 10
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	f8 94       	cli
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    139c:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    13a0:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    13a4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    13a8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    13ac:	20 e1       	ldi	r18, 0x10	; 16
    13ae:	3e e0       	ldi	r19, 0x0E	; 14
    13b0:	b9 01       	movw	r22, r18
    13b2:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    13b6:	9c 01       	movw	r18, r24
    13b8:	a9 e8       	ldi	r26, 0x89	; 137
    13ba:	b8 e8       	ldi	r27, 0x88	; 136
    13bc:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    13c0:	9c 01       	movw	r18, r24
    13c2:	36 95       	lsr	r19
    13c4:	27 95       	ror	r18
    13c6:	32 95       	swap	r19
    13c8:	22 95       	swap	r18
    13ca:	2f 70       	andi	r18, 0x0F	; 15
    13cc:	23 27       	eor	r18, r19
    13ce:	3f 70       	andi	r19, 0x0F	; 15
    13d0:	23 27       	eor	r18, r19
    13d2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    13d6:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    13da:	40 e1       	ldi	r20, 0x10	; 16
    13dc:	5e e0       	ldi	r21, 0x0E	; 14
    13de:	ba 01       	movw	r22, r20
    13e0:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    13e4:	cb 01       	movw	r24, r22
    13e6:	ac 01       	movw	r20, r24
    13e8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1913>
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	19 f4       	brne	.+6      	; 0x13f6 <__stack+0xaf7>
    13f0:	88 e0       	ldi	r24, 0x08	; 8
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <__stack+0xafb>
    13f6:	80 e2       	ldi	r24, 0x20	; 32
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	6f 2f       	mov	r22, r31
    13fc:	6f 93       	push	r22
    13fe:	6e 2f       	mov	r22, r30
    1400:	6f 93       	push	r22
    1402:	63 2f       	mov	r22, r19
    1404:	6f 93       	push	r22
    1406:	2f 93       	push	r18
    1408:	25 2f       	mov	r18, r21
    140a:	2f 93       	push	r18
    140c:	24 2f       	mov	r18, r20
    140e:	2f 93       	push	r18
    1410:	29 2f       	mov	r18, r25
    1412:	2f 93       	push	r18
    1414:	8f 93       	push	r24
    1416:	8c e8       	ldi	r24, 0x8C	; 140
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	89 2f       	mov	r24, r25
    141c:	8f 93       	push	r24
    141e:	8c e8       	ldi	r24, 0x8C	; 140
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	8f 93       	push	r24
    1424:	0e 94 fe 10 	call	0x21fc	; 0x21fc <lcd_printf>
    1428:	ed b7       	in	r30, 0x3d	; 61
    142a:	fe b7       	in	r31, 0x3e	; 62
    142c:	3a 96       	adiw	r30, 0x0a	; 10
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
			break;
    1438:	00 00       	nop

		default:
		;
	}
}
    143a:	00 00       	nop
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <lcd_init>:
#include "wyk_lcd.h"

// inicializuje lcd
void lcd_init(void)
{
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	2e 97       	sbiw	r28, 0x0e	; 14
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
	LCD_RS_DDR |= LCD_RS;
    1460:	8a e2       	ldi	r24, 0x2A	; 42
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	2a e2       	ldi	r18, 0x2A	; 42
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	f9 01       	movw	r30, r18
    146a:	20 81       	ld	r18, Z
    146c:	21 60       	ori	r18, 0x01	; 1
    146e:	fc 01       	movw	r30, r24
    1470:	20 83       	st	Z, r18
	LCD_RS0;
    1472:	8b e2       	ldi	r24, 0x2B	; 43
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	2b e2       	ldi	r18, 0x2B	; 43
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	f9 01       	movw	r30, r18
    147c:	20 81       	ld	r18, Z
    147e:	2e 7f       	andi	r18, 0xFE	; 254
    1480:	fc 01       	movw	r30, r24
    1482:	20 83       	st	Z, r18

	LCD_EN_DDR |= LCD_EN;
    1484:	87 e2       	ldi	r24, 0x27	; 39
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	27 e2       	ldi	r18, 0x27	; 39
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	f9 01       	movw	r30, r18
    148e:	20 81       	ld	r18, Z
    1490:	20 61       	ori	r18, 0x10	; 16
    1492:	fc 01       	movw	r30, r24
    1494:	20 83       	st	Z, r18
	LCD_EN0;
    1496:	88 e2       	ldi	r24, 0x28	; 40
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	28 e2       	ldi	r18, 0x28	; 40
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	f9 01       	movw	r30, r18
    14a0:	20 81       	ld	r18, Z
    14a2:	2f 7e       	andi	r18, 0xEF	; 239
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18

	LCD_D7_DDR |= LCD_D7;
    14a8:	87 e2       	ldi	r24, 0x27	; 39
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	27 e2       	ldi	r18, 0x27	; 39
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	f9 01       	movw	r30, r18
    14b2:	20 81       	ld	r18, Z
    14b4:	21 60       	ori	r18, 0x01	; 1
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18
	LCD_D6_DDR |= LCD_D6;
    14ba:	87 e2       	ldi	r24, 0x27	; 39
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	27 e2       	ldi	r18, 0x27	; 39
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	f9 01       	movw	r30, r18
    14c4:	20 81       	ld	r18, Z
    14c6:	22 60       	ori	r18, 0x02	; 2
    14c8:	fc 01       	movw	r30, r24
    14ca:	20 83       	st	Z, r18
	LCD_D5_DDR |= LCD_D5;
    14cc:	87 e2       	ldi	r24, 0x27	; 39
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	27 e2       	ldi	r18, 0x27	; 39
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	f9 01       	movw	r30, r18
    14d6:	20 81       	ld	r18, Z
    14d8:	24 60       	ori	r18, 0x04	; 4
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
	LCD_D4_DDR |= LCD_D4;
    14de:	87 e2       	ldi	r24, 0x27	; 39
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	27 e2       	ldi	r18, 0x27	; 39
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	28 60       	ori	r18, 0x08	; 8
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18

	LCD_D7_0;
    14f0:	88 e2       	ldi	r24, 0x28	; 40
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	28 e2       	ldi	r18, 0x28	; 40
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	f9 01       	movw	r30, r18
    14fa:	20 81       	ld	r18, Z
    14fc:	2e 7f       	andi	r18, 0xFE	; 254
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
	LCD_D6_0;
    1502:	88 e2       	ldi	r24, 0x28	; 40
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	28 e2       	ldi	r18, 0x28	; 40
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	f9 01       	movw	r30, r18
    150c:	20 81       	ld	r18, Z
    150e:	2d 7f       	andi	r18, 0xFD	; 253
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
	LCD_D5_0;
    1514:	88 e2       	ldi	r24, 0x28	; 40
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	28 e2       	ldi	r18, 0x28	; 40
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	f9 01       	movw	r30, r18
    151e:	20 81       	ld	r18, Z
    1520:	2b 7f       	andi	r18, 0xFB	; 251
    1522:	fc 01       	movw	r30, r24
    1524:	20 83       	st	Z, r18
	LCD_D4_0;
    1526:	88 e2       	ldi	r24, 0x28	; 40
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	28 e2       	ldi	r18, 0x28	; 40
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	f9 01       	movw	r30, r18
    1530:	20 81       	ld	r18, Z
    1532:	27 7f       	andi	r18, 0xF7	; 247
    1534:	fc 01       	movw	r30, r24
    1536:	20 83       	st	Z, r18


	lcd_set_nibble(LCD_CMD_INIT>>4);
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 6d 0b 	call	0x16da	; 0x16da <lcd_set_nibble>
	LCD_EN1;
    1540:	88 e2       	ldi	r24, 0x28	; 40
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	28 e2       	ldi	r18, 0x28	; 40
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	f9 01       	movw	r30, r18
    154a:	20 81       	ld	r18, Z
    154c:	20 61       	ori	r18, 0x10	; 16
    154e:	fc 01       	movw	r30, r24
    1550:	20 83       	st	Z, r18
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e4       	ldi	r27, 0x40	; 64
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	ab 83       	std	Y+3, r26	; 0x03
    1560:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e8       	ldi	r19, 0x80	; 128
    1566:	4b eb       	ldi	r20, 0xBB	; 187
    1568:	55 e4       	ldi	r21, 0x45	; 69
    156a:	69 81       	ldd	r22, Y+1	; 0x01
    156c:	7a 81       	ldd	r23, Y+2	; 0x02
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	af 83       	std	Y+7, r26	; 0x07
    1580:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	6d 81       	ldd	r22, Y+5	; 0x05
    158c:	7e 81       	ldd	r23, Y+6	; 0x06
    158e:	8f 81       	ldd	r24, Y+7	; 0x07
    1590:	98 85       	ldd	r25, Y+8	; 0x08
    1592:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    1596:	88 23       	and	r24, r24
    1598:	2c f4       	brge	.+10     	; 0x15a4 <lcd_init+0x158>
		__ticks = 1;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	9a 87       	std	Y+10, r25	; 0x0a
    15a0:	89 87       	std	Y+9, r24	; 0x09
    15a2:	3f c0       	rjmp	.+126    	; 0x1622 <lcd_init+0x1d6>
	else if (__tmp > 65535)
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	6d 81       	ldd	r22, Y+5	; 0x05
    15ae:	7e 81       	ldd	r23, Y+6	; 0x06
    15b0:	8f 81       	ldd	r24, Y+7	; 0x07
    15b2:	98 85       	ldd	r25, Y+8	; 0x08
    15b4:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    15b8:	18 16       	cp	r1, r24
    15ba:	4c f5       	brge	.+82     	; 0x160e <lcd_init+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	69 81       	ldd	r22, Y+1	; 0x01
    15c6:	7a 81       	ldd	r23, Y+2	; 0x02
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9a 87       	std	Y+10, r25	; 0x0a
    15e2:	89 87       	std	Y+9, r24	; 0x09
    15e4:	0f c0       	rjmp	.+30     	; 0x1604 <lcd_init+0x1b8>
    15e6:	88 e5       	ldi	r24, 0x58	; 88
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	9c 87       	std	Y+12, r25	; 0x0c
    15ec:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    15f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <lcd_init+0x1a6>
    15f6:	9c 87       	std	Y+12, r25	; 0x0c
    15f8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	9a 87       	std	Y+10, r25	; 0x0a
    1602:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	89 2b       	or	r24, r25
    160a:	69 f7       	brne	.-38     	; 0x15e6 <lcd_init+0x19a>
    160c:	14 c0       	rjmp	.+40     	; 0x1636 <lcd_init+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160e:	6d 81       	ldd	r22, Y+5	; 0x05
    1610:	7e 81       	ldd	r23, Y+6	; 0x06
    1612:	8f 81       	ldd	r24, Y+7	; 0x07
    1614:	98 85       	ldd	r25, Y+8	; 0x08
    1616:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9a 87       	std	Y+10, r25	; 0x0a
    1620:	89 87       	std	Y+9, r24	; 0x09
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	9e 87       	std	Y+14, r25	; 0x0e
    1628:	8d 87       	std	Y+13, r24	; 0x0d
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <lcd_init+0x1e2>
    1632:	9e 87       	std	Y+14, r25	; 0x0e
    1634:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
	LCD_EN0;
    1636:	88 e2       	ldi	r24, 0x28	; 40
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	28 e2       	ldi	r18, 0x28	; 40
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	f9 01       	movw	r30, r18
    1640:	20 81       	ld	r18, Z
    1642:	2f 7e       	andi	r18, 0xEF	; 239
    1644:	fc 01       	movw	r30, r24
    1646:	20 83       	st	Z, r18
	lcd_cmd(LCD_CMD_INIT);
    1648:	88 e2       	ldi	r24, 0x28	; 40
    164a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURS);
    164e:	8c e0       	ldi	r24, 0x0C	; 12
    1650:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
	lcd_cmd(LCD_CMD_CLR);
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>

	// přidání vlastních znaků
	lcd_cmd(LCD_CMD_W_CGRAM);
    165a:	80 e4       	ldi	r24, 0x40	; 64
    165c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
	// trojuhelnik
	lcd_put(0b00010000);
    1660:	80 e1       	ldi	r24, 0x10	; 16
    1662:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011000);
    1666:	88 e1       	ldi	r24, 0x18	; 24
    1668:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011100);
    166c:	8c e1       	ldi	r24, 0x1C	; 28
    166e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011110);
    1672:	8e e1       	ldi	r24, 0x1E	; 30
    1674:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011100);
    1678:	8c e1       	ldi	r24, 0x1C	; 28
    167a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011000);
    167e:	88 e1       	ldi	r24, 0x18	; 24
    1680:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00010000);
    1684:	80 e1       	ldi	r24, 0x10	; 16
    1686:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00000000);
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	// bar
	lcd_put(0b00000000);
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00000000);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011111);
    169c:	8f e1       	ldi	r24, 0x1F	; 31
    169e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011111);
    16a2:	8f e1       	ldi	r24, 0x1F	; 31
    16a4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011111);
    16a8:	8f e1       	ldi	r24, 0x1F	; 31
    16aa:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00011111);
    16ae:	8f e1       	ldi	r24, 0x1F	; 31
    16b0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00000000);
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	lcd_put(0b00000000);
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	
	// přepnutí na zápis do zobrazovací paměti
	lcd_cmd(LCD_CMD_W_DDRAM);
    16c0:	80 e8       	ldi	r24, 0x80	; 128
    16c2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
}
    16c6:	00 00       	nop
    16c8:	2e 96       	adiw	r28, 0x0e	; 14
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <lcd_set_nibble>:

// posílat napřed msn a pak lsn
void lcd_set_nibble(uint8_t nibble)
{
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	1f 92       	push	r1
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	89 83       	std	Y+1, r24	; 0x01
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	88 70       	andi	r24, 0x08	; 8
    16ee:	99 27       	eor	r25, r25
    16f0:	89 2b       	or	r24, r25
    16f2:	51 f0       	breq	.+20     	; 0x1708 <lcd_set_nibble+0x2e>
    16f4:	88 e2       	ldi	r24, 0x28	; 40
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	28 e2       	ldi	r18, 0x28	; 40
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	f9 01       	movw	r30, r18
    16fe:	20 81       	ld	r18, Z
    1700:	21 60       	ori	r18, 0x01	; 1
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18
    1706:	09 c0       	rjmp	.+18     	; 0x171a <lcd_set_nibble+0x40>
    1708:	88 e2       	ldi	r24, 0x28	; 40
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	28 e2       	ldi	r18, 0x28	; 40
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	f9 01       	movw	r30, r18
    1712:	20 81       	ld	r18, Z
    1714:	2e 7f       	andi	r18, 0xFE	; 254
    1716:	fc 01       	movw	r30, r24
    1718:	20 83       	st	Z, r18
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	84 70       	andi	r24, 0x04	; 4
    1722:	99 27       	eor	r25, r25
    1724:	89 2b       	or	r24, r25
    1726:	51 f0       	breq	.+20     	; 0x173c <lcd_set_nibble+0x62>
    1728:	88 e2       	ldi	r24, 0x28	; 40
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	28 e2       	ldi	r18, 0x28	; 40
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	f9 01       	movw	r30, r18
    1732:	20 81       	ld	r18, Z
    1734:	22 60       	ori	r18, 0x02	; 2
    1736:	fc 01       	movw	r30, r24
    1738:	20 83       	st	Z, r18
    173a:	09 c0       	rjmp	.+18     	; 0x174e <lcd_set_nibble+0x74>
    173c:	88 e2       	ldi	r24, 0x28	; 40
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	28 e2       	ldi	r18, 0x28	; 40
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	f9 01       	movw	r30, r18
    1746:	20 81       	ld	r18, Z
    1748:	2d 7f       	andi	r18, 0xFD	; 253
    174a:	fc 01       	movw	r30, r24
    174c:	20 83       	st	Z, r18
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	82 70       	andi	r24, 0x02	; 2
    1756:	99 27       	eor	r25, r25
    1758:	89 2b       	or	r24, r25
    175a:	51 f0       	breq	.+20     	; 0x1770 <lcd_set_nibble+0x96>
    175c:	88 e2       	ldi	r24, 0x28	; 40
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	28 e2       	ldi	r18, 0x28	; 40
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	f9 01       	movw	r30, r18
    1766:	20 81       	ld	r18, Z
    1768:	24 60       	ori	r18, 0x04	; 4
    176a:	fc 01       	movw	r30, r24
    176c:	20 83       	st	Z, r18
    176e:	09 c0       	rjmp	.+18     	; 0x1782 <lcd_set_nibble+0xa8>
    1770:	88 e2       	ldi	r24, 0x28	; 40
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	28 e2       	ldi	r18, 0x28	; 40
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	f9 01       	movw	r30, r18
    177a:	20 81       	ld	r18, Z
    177c:	2b 7f       	andi	r18, 0xFB	; 251
    177e:	fc 01       	movw	r30, r24
    1780:	20 83       	st	Z, r18
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	81 70       	andi	r24, 0x01	; 1
    178a:	99 27       	eor	r25, r25
    178c:	89 2b       	or	r24, r25
    178e:	51 f0       	breq	.+20     	; 0x17a4 <lcd_set_nibble+0xca>
    1790:	88 e2       	ldi	r24, 0x28	; 40
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	28 e2       	ldi	r18, 0x28	; 40
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	f9 01       	movw	r30, r18
    179a:	20 81       	ld	r18, Z
    179c:	28 60       	ori	r18, 0x08	; 8
    179e:	fc 01       	movw	r30, r24
    17a0:	20 83       	st	Z, r18
}
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <lcd_set_nibble+0xdc>
void lcd_set_nibble(uint8_t nibble)
{
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    17a4:	88 e2       	ldi	r24, 0x28	; 40
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	28 e2       	ldi	r18, 0x28	; 40
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	f9 01       	movw	r30, r18
    17ae:	20 81       	ld	r18, Z
    17b0:	27 7f       	andi	r18, 0xF7	; 247
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
}
    17b6:	00 00       	nop
    17b8:	0f 90       	pop	r0
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <lcd_cmd>:

// pošle lcd instrukci
void lcd_cmd(uint8_t cmd)
{
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	6d 97       	sbiw	r28, 0x1d	; 29
    17ca:	0f b6       	in	r0, 0x3f	; 63
    17cc:	f8 94       	cli
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	cd bf       	out	0x3d, r28	; 61
    17d4:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_set_nibble(cmd>>4);
    17d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d8:	82 95       	swap	r24
    17da:	8f 70       	andi	r24, 0x0F	; 15
    17dc:	0e 94 6d 0b 	call	0x16da	; 0x16da <lcd_set_nibble>
	LCD_EN1;
    17e0:	88 e2       	ldi	r24, 0x28	; 40
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	28 e2       	ldi	r18, 0x28	; 40
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	f9 01       	movw	r30, r18
    17ea:	20 81       	ld	r18, Z
    17ec:	20 61       	ori	r18, 0x10	; 16
    17ee:	fc 01       	movw	r30, r24
    17f0:	20 83       	st	Z, r18
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e4       	ldi	r26, 0x40	; 64
    17f8:	b0 e4       	ldi	r27, 0x40	; 64
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	9a 83       	std	Y+2, r25	; 0x02
    17fe:	ab 83       	std	Y+3, r26	; 0x03
    1800:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e8       	ldi	r19, 0x80	; 128
    1806:	4b eb       	ldi	r20, 0xBB	; 187
    1808:	55 e4       	ldi	r21, 0x45	; 69
    180a:	69 81       	ldd	r22, Y+1	; 0x01
    180c:	7a 81       	ldd	r23, Y+2	; 0x02
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	8b 8b       	std	Y+19, r24	; 0x13
    181c:	9c 8b       	std	Y+20, r25	; 0x14
    181e:	ad 8b       	std	Y+21, r26	; 0x15
    1820:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	6b 89       	ldd	r22, Y+19	; 0x13
    182c:	7c 89       	ldd	r23, Y+20	; 0x14
    182e:	8d 89       	ldd	r24, Y+21	; 0x15
    1830:	9e 89       	ldd	r25, Y+22	; 0x16
    1832:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <lcd_cmd+0x84>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	98 8f       	std	Y+24, r25	; 0x18
    1840:	8f 8b       	std	Y+23, r24	; 0x17
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <lcd_cmd+0x102>
	else if (__tmp > 65535)
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	6b 89       	ldd	r22, Y+19	; 0x13
    184e:	7c 89       	ldd	r23, Y+20	; 0x14
    1850:	8d 89       	ldd	r24, Y+21	; 0x15
    1852:	9e 89       	ldd	r25, Y+22	; 0x16
    1854:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <lcd_cmd+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	69 81       	ldd	r22, Y+1	; 0x01
    1866:	7a 81       	ldd	r23, Y+2	; 0x02
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	98 8f       	std	Y+24, r25	; 0x18
    1882:	8f 8b       	std	Y+23, r24	; 0x17
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <lcd_cmd+0xe4>
    1886:	88 e5       	ldi	r24, 0x58	; 88
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	9a 8f       	std	Y+26, r25	; 0x1a
    188c:	89 8f       	std	Y+25, r24	; 0x19
    188e:	89 8d       	ldd	r24, Y+25	; 0x19
    1890:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <lcd_cmd+0xd2>
    1896:	9a 8f       	std	Y+26, r25	; 0x1a
    1898:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8f 89       	ldd	r24, Y+23	; 0x17
    189c:	98 8d       	ldd	r25, Y+24	; 0x18
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	98 8f       	std	Y+24, r25	; 0x18
    18a2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8f 89       	ldd	r24, Y+23	; 0x17
    18a6:	98 8d       	ldd	r25, Y+24	; 0x18
    18a8:	89 2b       	or	r24, r25
    18aa:	69 f7       	brne	.-38     	; 0x1886 <lcd_cmd+0xc6>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <lcd_cmd+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	6b 89       	ldd	r22, Y+19	; 0x13
    18b0:	7c 89       	ldd	r23, Y+20	; 0x14
    18b2:	8d 89       	ldd	r24, Y+21	; 0x15
    18b4:	9e 89       	ldd	r25, Y+22	; 0x16
    18b6:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	98 8f       	std	Y+24, r25	; 0x18
    18c0:	8f 8b       	std	Y+23, r24	; 0x17
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	9c 8f       	std	Y+28, r25	; 0x1c
    18c8:	8b 8f       	std	Y+27, r24	; 0x1b
    18ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <lcd_cmd+0x10e>
    18d2:	9c 8f       	std	Y+28, r25	; 0x1c
    18d4:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3);
	LCD_EN0;	
    18d6:	88 e2       	ldi	r24, 0x28	; 40
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	28 e2       	ldi	r18, 0x28	; 40
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	f9 01       	movw	r30, r18
    18e0:	20 81       	ld	r18, Z
    18e2:	2f 7e       	andi	r18, 0xEF	; 239
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
	lcd_set_nibble(cmd);
    18e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ea:	0e 94 6d 0b 	call	0x16da	; 0x16da <lcd_set_nibble>
	LCD_EN1;
    18ee:	88 e2       	ldi	r24, 0x28	; 40
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	28 e2       	ldi	r18, 0x28	; 40
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	f9 01       	movw	r30, r18
    18f8:	20 81       	ld	r18, Z
    18fa:	20 61       	ori	r18, 0x10	; 16
    18fc:	fc 01       	movw	r30, r24
    18fe:	20 83       	st	Z, r18
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e4       	ldi	r26, 0x40	; 64
    1906:	b0 e4       	ldi	r27, 0x40	; 64
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	af 83       	std	Y+7, r26	; 0x07
    190e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e8       	ldi	r19, 0x80	; 128
    1914:	4b eb       	ldi	r20, 0xBB	; 187
    1916:	55 e4       	ldi	r21, 0x45	; 69
    1918:	6d 81       	ldd	r22, Y+5	; 0x05
    191a:	7e 81       	ldd	r23, Y+6	; 0x06
    191c:	8f 81       	ldd	r24, Y+7	; 0x07
    191e:	98 85       	ldd	r25, Y+8	; 0x08
    1920:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	89 87       	std	Y+9, r24	; 0x09
    192a:	9a 87       	std	Y+10, r25	; 0x0a
    192c:	ab 87       	std	Y+11, r26	; 0x0b
    192e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	69 85       	ldd	r22, Y+9	; 0x09
    193a:	7a 85       	ldd	r23, Y+10	; 0x0a
    193c:	8b 85       	ldd	r24, Y+11	; 0x0b
    193e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1940:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <lcd_cmd+0x192>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9e 87       	std	Y+14, r25	; 0x0e
    194e:	8d 87       	std	Y+13, r24	; 0x0d
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <lcd_cmd+0x210>
	else if (__tmp > 65535)
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	69 85       	ldd	r22, Y+9	; 0x09
    195c:	7a 85       	ldd	r23, Y+10	; 0x0a
    195e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1960:	9c 85       	ldd	r25, Y+12	; 0x0c
    1962:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <lcd_cmd+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	6d 81       	ldd	r22, Y+5	; 0x05
    1974:	7e 81       	ldd	r23, Y+6	; 0x06
    1976:	8f 81       	ldd	r24, Y+7	; 0x07
    1978:	98 85       	ldd	r25, Y+8	; 0x08
    197a:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e 87       	std	Y+14, r25	; 0x0e
    1990:	8d 87       	std	Y+13, r24	; 0x0d
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <lcd_cmd+0x1f2>
    1994:	88 e5       	ldi	r24, 0x58	; 88
    1996:	92 e0       	ldi	r25, 0x02	; 2
    1998:	98 8b       	std	Y+16, r25	; 0x10
    199a:	8f 87       	std	Y+15, r24	; 0x0f
    199c:	8f 85       	ldd	r24, Y+15	; 0x0f
    199e:	98 89       	ldd	r25, Y+16	; 0x10
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <lcd_cmd+0x1e0>
    19a4:	98 8b       	std	Y+16, r25	; 0x10
    19a6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9e 87       	std	Y+14, r25	; 0x0e
    19b0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b6:	89 2b       	or	r24, r25
    19b8:	69 f7       	brne	.-38     	; 0x1994 <lcd_cmd+0x1d4>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <lcd_cmd+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	69 85       	ldd	r22, Y+9	; 0x09
    19be:	7a 85       	ldd	r23, Y+10	; 0x0a
    19c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c4:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9e 87       	std	Y+14, r25	; 0x0e
    19ce:	8d 87       	std	Y+13, r24	; 0x0d
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	9a 8b       	std	Y+18, r25	; 0x12
    19d6:	89 8b       	std	Y+17, r24	; 0x11
    19d8:	89 89       	ldd	r24, Y+17	; 0x11
    19da:	9a 89       	ldd	r25, Y+18	; 0x12
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <lcd_cmd+0x21c>
    19e0:	9a 8b       	std	Y+18, r25	; 0x12
    19e2:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(3);
	LCD_EN0;
    19e4:	88 e2       	ldi	r24, 0x28	; 40
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	28 e2       	ldi	r18, 0x28	; 40
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	f9 01       	movw	r30, r18
    19ee:	20 81       	ld	r18, Z
    19f0:	2f 7e       	andi	r18, 0xEF	; 239
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 83       	st	Z, r18
}
    19f6:	00 00       	nop
    19f8:	6d 96       	adiw	r28, 0x1d	; 29
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	08 95       	ret

00001a0a <lcd_put>:

// pošle lcd znak
void lcd_put(char znak)
{
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	c1 54       	subi	r28, 0x41	; 65
    1a14:	d1 09       	sbc	r29, r1
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	9e 01       	movw	r18, r28
    1a22:	2f 5b       	subi	r18, 0xBF	; 191
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	f9 01       	movw	r30, r18
    1a28:	80 83       	st	Z, r24
	LCD_RS1;
    1a2a:	8b e2       	ldi	r24, 0x2B	; 43
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	2b e2       	ldi	r18, 0x2B	; 43
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	f9 01       	movw	r30, r18
    1a34:	20 81       	ld	r18, Z
    1a36:	21 60       	ori	r18, 0x01	; 1
    1a38:	fc 01       	movw	r30, r24
    1a3a:	20 83       	st	Z, r18
	lcd_set_nibble(znak>>4);
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	8f 5b       	subi	r24, 0xBF	; 191
    1a40:	9f 4f       	sbci	r25, 0xFF	; 255
    1a42:	fc 01       	movw	r30, r24
    1a44:	80 81       	ld	r24, Z
    1a46:	82 95       	swap	r24
    1a48:	8f 70       	andi	r24, 0x0F	; 15
    1a4a:	0e 94 6d 0b 	call	0x16da	; 0x16da <lcd_set_nibble>
	LCD_EN1;
    1a4e:	88 e2       	ldi	r24, 0x28	; 40
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	28 e2       	ldi	r18, 0x28	; 40
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	f9 01       	movw	r30, r18
    1a58:	20 81       	ld	r18, Z
    1a5a:	20 61       	ori	r18, 0x10	; 16
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	20 83       	st	Z, r18
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a0 e2       	ldi	r26, 0x20	; 32
    1a66:	b2 e4       	ldi	r27, 0x42	; 66
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	ab 83       	std	Y+3, r26	; 0x03
    1a6e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	51 e4       	ldi	r21, 0x41	; 65
    1a78:	69 81       	ldd	r22, Y+1	; 0x01
    1a7a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	8d a3       	std	Y+37, r24	; 0x25
    1a8a:	9e a3       	std	Y+38, r25	; 0x26
    1a8c:	af a3       	std	Y+39, r26	; 0x27
    1a8e:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 ec       	ldi	r20, 0xC0	; 192
    1a96:	50 e4       	ldi	r21, 0x40	; 64
    1a98:	69 81       	ldd	r22, Y+1	; 0x01
    1a9a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	89 a7       	std	Y+41, r24	; 0x29
    1aaa:	9a a7       	std	Y+42, r25	; 0x2a
    1aac:	ab a7       	std	Y+43, r26	; 0x2b
    1aae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	40 e8       	ldi	r20, 0x80	; 128
    1ab6:	5f e3       	ldi	r21, 0x3F	; 63
    1ab8:	6d a1       	ldd	r22, Y+37	; 0x25
    1aba:	7e a1       	ldd	r23, Y+38	; 0x26
    1abc:	8f a1       	ldd	r24, Y+39	; 0x27
    1abe:	98 a5       	ldd	r25, Y+40	; 0x28
    1ac0:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    1ac4:	88 23       	and	r24, r24
    1ac6:	1c f4       	brge	.+6      	; 0x1ace <lcd_put+0xc4>
		__ticks = 1;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	8d a7       	std	Y+45, r24	; 0x2d
    1acc:	b2 c0       	rjmp	.+356    	; 0x1c32 <lcd_put+0x228>
	else if (__tmp2 > 65535)
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	57 e4       	ldi	r21, 0x47	; 71
    1ad6:	69 a5       	ldd	r22, Y+41	; 0x29
    1ad8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ada:	8b a5       	ldd	r24, Y+43	; 0x2b
    1adc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ade:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	0c f0       	brlt	.+2      	; 0x1ae8 <lcd_put+0xde>
    1ae6:	7b c0       	rjmp	.+246    	; 0x1bde <lcd_put+0x1d4>
	{
		_delay_ms(__us / 1000.0);
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a e7       	ldi	r20, 0x7A	; 122
    1aee:	54 e4       	ldi	r21, 0x44	; 68
    1af0:	69 81       	ldd	r22, Y+1	; 0x01
    1af2:	7a 81       	ldd	r23, Y+2	; 0x02
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8e a7       	std	Y+46, r24	; 0x2e
    1b02:	9f a7       	std	Y+47, r25	; 0x2f
    1b04:	a8 ab       	std	Y+48, r26	; 0x30
    1b06:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e8       	ldi	r19, 0x80	; 128
    1b0c:	4b eb       	ldi	r20, 0xBB	; 187
    1b0e:	55 e4       	ldi	r21, 0x45	; 69
    1b10:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b12:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b14:	88 a9       	ldd	r24, Y+48	; 0x30
    1b16:	99 a9       	ldd	r25, Y+49	; 0x31
    1b18:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8a ab       	std	Y+50, r24	; 0x32
    1b22:	9b ab       	std	Y+51, r25	; 0x33
    1b24:	ac ab       	std	Y+52, r26	; 0x34
    1b26:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	6a a9       	ldd	r22, Y+50	; 0x32
    1b32:	7b a9       	ldd	r23, Y+51	; 0x33
    1b34:	8c a9       	ldd	r24, Y+52	; 0x34
    1b36:	9d a9       	ldd	r25, Y+53	; 0x35
    1b38:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <lcd_put+0x140>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9f ab       	std	Y+55, r25	; 0x37
    1b46:	8e ab       	std	Y+54, r24	; 0x36
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <lcd_put+0x1be>
	else if (__tmp > 65535)
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	6a a9       	ldd	r22, Y+50	; 0x32
    1b54:	7b a9       	ldd	r23, Y+51	; 0x33
    1b56:	8c a9       	ldd	r24, Y+52	; 0x34
    1b58:	9d a9       	ldd	r25, Y+53	; 0x35
    1b5a:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <lcd_put+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b6c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b6e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b70:	99 a9       	ldd	r25, Y+49	; 0x31
    1b72:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9f ab       	std	Y+55, r25	; 0x37
    1b88:	8e ab       	std	Y+54, r24	; 0x36
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <lcd_put+0x1a0>
    1b8c:	88 e5       	ldi	r24, 0x58	; 88
    1b8e:	92 e0       	ldi	r25, 0x02	; 2
    1b90:	99 af       	std	Y+57, r25	; 0x39
    1b92:	88 af       	std	Y+56, r24	; 0x38
    1b94:	88 ad       	ldd	r24, Y+56	; 0x38
    1b96:	99 ad       	ldd	r25, Y+57	; 0x39
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <lcd_put+0x18e>
    1b9c:	99 af       	std	Y+57, r25	; 0x39
    1b9e:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	8e a9       	ldd	r24, Y+54	; 0x36
    1ba2:	9f a9       	ldd	r25, Y+55	; 0x37
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9f ab       	std	Y+55, r25	; 0x37
    1ba8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	8e a9       	ldd	r24, Y+54	; 0x36
    1bac:	9f a9       	ldd	r25, Y+55	; 0x37
    1bae:	89 2b       	or	r24, r25
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <lcd_put+0x182>
    1bb2:	3f c0       	rjmp	.+126    	; 0x1c32 <lcd_put+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	6a a9       	ldd	r22, Y+50	; 0x32
    1bb6:	7b a9       	ldd	r23, Y+51	; 0x33
    1bb8:	8c a9       	ldd	r24, Y+52	; 0x34
    1bba:	9d a9       	ldd	r25, Y+53	; 0x35
    1bbc:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9f ab       	std	Y+55, r25	; 0x37
    1bc6:	8e ab       	std	Y+54, r24	; 0x36
    1bc8:	8e a9       	ldd	r24, Y+54	; 0x36
    1bca:	9f a9       	ldd	r25, Y+55	; 0x37
    1bcc:	9b af       	std	Y+59, r25	; 0x3b
    1bce:	8a af       	std	Y+58, r24	; 0x3a
    1bd0:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bd2:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <lcd_put+0x1ca>
    1bd8:	9b af       	std	Y+59, r25	; 0x3b
    1bda:	8a af       	std	Y+58, r24	; 0x3a
    1bdc:	2a c0       	rjmp	.+84     	; 0x1c32 <lcd_put+0x228>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	53 e4       	ldi	r21, 0x43	; 67
    1be6:	6d a1       	ldd	r22, Y+37	; 0x25
    1be8:	7e a1       	ldd	r23, Y+38	; 0x26
    1bea:	8f a1       	ldd	r24, Y+39	; 0x27
    1bec:	98 a5       	ldd	r25, Y+40	; 0x28
    1bee:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	ac f4       	brge	.+42     	; 0x1c20 <lcd_put+0x216>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1bf6:	69 a5       	ldd	r22, Y+41	; 0x29
    1bf8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfe:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9d af       	std	Y+61, r25	; 0x3d
    1c08:	8c af       	std	Y+60, r24	; 0x3c
    1c0a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c0c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c0e:	9f af       	std	Y+63, r25	; 0x3f
    1c10:	8e af       	std	Y+62, r24	; 0x3e
    1c12:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c14:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <lcd_put+0x20c>
    1c1a:	9f af       	std	Y+63, r25	; 0x3f
    1c1c:	8e af       	std	Y+62, r24	; 0x3e
    1c1e:	1c c0       	rjmp	.+56     	; 0x1c58 <lcd_put+0x24e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c20:	6d a1       	ldd	r22, Y+37	; 0x25
    1c22:	7e a1       	ldd	r23, Y+38	; 0x26
    1c24:	8f a1       	ldd	r24, Y+39	; 0x27
    1c26:	98 a5       	ldd	r25, Y+40	; 0x28
    1c28:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8d a7       	std	Y+45, r24	; 0x2d
    1c32:	2d a5       	ldd	r18, Y+45	; 0x2d
    1c34:	ce 01       	movw	r24, r28
    1c36:	80 5c       	subi	r24, 0xC0	; 192
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c3e:	ce 01       	movw	r24, r28
    1c40:	80 5c       	subi	r24, 0xC0	; 192
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	fc 01       	movw	r30, r24
    1c46:	80 81       	ld	r24, Z
    1c48:	28 2f       	mov	r18, r24
    1c4a:	2a 95       	dec	r18
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <lcd_put+0x240>
    1c4e:	ce 01       	movw	r24, r28
    1c50:	80 5c       	subi	r24, 0xC0	; 192
    1c52:	9f 4f       	sbci	r25, 0xFF	; 255
    1c54:	fc 01       	movw	r30, r24
    1c56:	20 83       	st	Z, r18
	_delay_us(40);
	LCD_EN0;
    1c58:	88 e2       	ldi	r24, 0x28	; 40
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	28 e2       	ldi	r18, 0x28	; 40
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	f9 01       	movw	r30, r18
    1c62:	20 81       	ld	r18, Z
    1c64:	2f 7e       	andi	r18, 0xEF	; 239
    1c66:	fc 01       	movw	r30, r24
    1c68:	20 83       	st	Z, r18
	lcd_set_nibble(znak);
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	8f 5b       	subi	r24, 0xBF	; 191
    1c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c70:	fc 01       	movw	r30, r24
    1c72:	80 81       	ld	r24, Z
    1c74:	0e 94 6d 0b 	call	0x16da	; 0x16da <lcd_set_nibble>
	LCD_EN1;
    1c78:	88 e2       	ldi	r24, 0x28	; 40
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	28 e2       	ldi	r18, 0x28	; 40
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	f9 01       	movw	r30, r18
    1c82:	20 81       	ld	r18, Z
    1c84:	20 61       	ori	r18, 0x10	; 16
    1c86:	fc 01       	movw	r30, r24
    1c88:	20 83       	st	Z, r18
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e2       	ldi	r26, 0x20	; 32
    1c90:	b2 e4       	ldi	r27, 0x42	; 66
    1c92:	8d 83       	std	Y+5, r24	; 0x05
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	af 83       	std	Y+7, r26	; 0x07
    1c98:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e0       	ldi	r20, 0x00	; 0
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ca4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca8:	98 85       	ldd	r25, Y+8	; 0x08
    1caa:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	89 87       	std	Y+9, r24	; 0x09
    1cb4:	9a 87       	std	Y+10, r25	; 0x0a
    1cb6:	ab 87       	std	Y+11, r26	; 0x0b
    1cb8:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 ec       	ldi	r20, 0xC0	; 192
    1cc0:	50 e4       	ldi	r21, 0x40	; 64
    1cc2:	6d 81       	ldd	r22, Y+5	; 0x05
    1cc4:	7e 81       	ldd	r23, Y+6	; 0x06
    1cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc8:	98 85       	ldd	r25, Y+8	; 0x08
    1cca:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8d 87       	std	Y+13, r24	; 0x0d
    1cd4:	9e 87       	std	Y+14, r25	; 0x0e
    1cd6:	af 87       	std	Y+15, r26	; 0x0f
    1cd8:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	69 85       	ldd	r22, Y+9	; 0x09
    1ce4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ce6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ce8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cea:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	1c f4       	brge	.+6      	; 0x1cf8 <lcd_put+0x2ee>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	89 8b       	std	Y+17, r24	; 0x11
    1cf6:	b2 c0       	rjmp	.+356    	; 0x1e5c <lcd_put+0x452>
	else if (__tmp2 > 65535)
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	3f ef       	ldi	r19, 0xFF	; 255
    1cfc:	4f e7       	ldi	r20, 0x7F	; 127
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d02:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d06:	98 89       	ldd	r25, Y+16	; 0x10
    1d08:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	0c f0       	brlt	.+2      	; 0x1d12 <lcd_put+0x308>
    1d10:	7b c0       	rjmp	.+246    	; 0x1e08 <lcd_put+0x3fe>
	{
		_delay_ms(__us / 1000.0);
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	4a e7       	ldi	r20, 0x7A	; 122
    1d18:	54 e4       	ldi	r21, 0x44	; 68
    1d1a:	6d 81       	ldd	r22, Y+5	; 0x05
    1d1c:	7e 81       	ldd	r23, Y+6	; 0x06
    1d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d20:	98 85       	ldd	r25, Y+8	; 0x08
    1d22:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8a 8b       	std	Y+18, r24	; 0x12
    1d2c:	9b 8b       	std	Y+19, r25	; 0x13
    1d2e:	ac 8b       	std	Y+20, r26	; 0x14
    1d30:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e8       	ldi	r19, 0x80	; 128
    1d36:	4b eb       	ldi	r20, 0xBB	; 187
    1d38:	55 e4       	ldi	r21, 0x45	; 69
    1d3a:	6a 89       	ldd	r22, Y+18	; 0x12
    1d3c:	7b 89       	ldd	r23, Y+19	; 0x13
    1d3e:	8c 89       	ldd	r24, Y+20	; 0x14
    1d40:	9d 89       	ldd	r25, Y+21	; 0x15
    1d42:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8e 8b       	std	Y+22, r24	; 0x16
    1d4c:	9f 8b       	std	Y+23, r25	; 0x17
    1d4e:	a8 8f       	std	Y+24, r26	; 0x18
    1d50:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	6e 89       	ldd	r22, Y+22	; 0x16
    1d5c:	7f 89       	ldd	r23, Y+23	; 0x17
    1d5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1d60:	99 8d       	ldd	r25, Y+25	; 0x19
    1d62:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <lcd_put+0x36a>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9b 8f       	std	Y+27, r25	; 0x1b
    1d70:	8a 8f       	std	Y+26, r24	; 0x1a
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <lcd_put+0x3e8>
	else if (__tmp > 65535)
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	3f ef       	ldi	r19, 0xFF	; 255
    1d78:	4f e7       	ldi	r20, 0x7F	; 127
    1d7a:	57 e4       	ldi	r21, 0x47	; 71
    1d7c:	6e 89       	ldd	r22, Y+22	; 0x16
    1d7e:	7f 89       	ldd	r23, Y+23	; 0x17
    1d80:	88 8d       	ldd	r24, Y+24	; 0x18
    1d82:	99 8d       	ldd	r25, Y+25	; 0x19
    1d84:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <lcd_put+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e2       	ldi	r20, 0x20	; 32
    1d92:	51 e4       	ldi	r21, 0x41	; 65
    1d94:	6a 89       	ldd	r22, Y+18	; 0x12
    1d96:	7b 89       	ldd	r23, Y+19	; 0x13
    1d98:	8c 89       	ldd	r24, Y+20	; 0x14
    1d9a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d9c:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9b 8f       	std	Y+27, r25	; 0x1b
    1db2:	8a 8f       	std	Y+26, r24	; 0x1a
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <lcd_put+0x3ca>
    1db6:	88 e5       	ldi	r24, 0x58	; 88
    1db8:	92 e0       	ldi	r25, 0x02	; 2
    1dba:	9d 8f       	std	Y+29, r25	; 0x1d
    1dbc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dbe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dc0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <lcd_put+0x3b8>
    1dc6:	9d 8f       	std	Y+29, r25	; 0x1d
    1dc8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dcc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9b 8f       	std	Y+27, r25	; 0x1b
    1dd2:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dd6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dd8:	89 2b       	or	r24, r25
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <lcd_put+0x3ac>
    1ddc:	3f c0       	rjmp	.+126    	; 0x1e5c <lcd_put+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6e 89       	ldd	r22, Y+22	; 0x16
    1de0:	7f 89       	ldd	r23, Y+23	; 0x17
    1de2:	88 8d       	ldd	r24, Y+24	; 0x18
    1de4:	99 8d       	ldd	r25, Y+25	; 0x19
    1de6:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9b 8f       	std	Y+27, r25	; 0x1b
    1df0:	8a 8f       	std	Y+26, r24	; 0x1a
    1df2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1df4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1df6:	9f 8f       	std	Y+31, r25	; 0x1f
    1df8:	8e 8f       	std	Y+30, r24	; 0x1e
    1dfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dfc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <lcd_put+0x3f4>
    1e02:	9f 8f       	std	Y+31, r25	; 0x1f
    1e04:	8e 8f       	std	Y+30, r24	; 0x1e
    1e06:	2a c0       	rjmp	.+84     	; 0x1e5c <lcd_put+0x452>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	53 e4       	ldi	r21, 0x43	; 67
    1e10:	69 85       	ldd	r22, Y+9	; 0x09
    1e12:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e14:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e16:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e18:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    1e1c:	18 16       	cp	r1, r24
    1e1e:	ac f4       	brge	.+42     	; 0x1e4a <lcd_put+0x440>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1e20:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e22:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e26:	98 89       	ldd	r25, Y+16	; 0x10
    1e28:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	99 a3       	std	Y+33, r25	; 0x21
    1e32:	88 a3       	std	Y+32, r24	; 0x20
    1e34:	88 a1       	ldd	r24, Y+32	; 0x20
    1e36:	99 a1       	ldd	r25, Y+33	; 0x21
    1e38:	9b a3       	std	Y+35, r25	; 0x23
    1e3a:	8a a3       	std	Y+34, r24	; 0x22
    1e3c:	8a a1       	ldd	r24, Y+34	; 0x22
    1e3e:	9b a1       	ldd	r25, Y+35	; 0x23
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <lcd_put+0x436>
    1e44:	9b a3       	std	Y+35, r25	; 0x23
    1e46:	8a a3       	std	Y+34, r24	; 0x22
    1e48:	0f c0       	rjmp	.+30     	; 0x1e68 <lcd_put+0x45e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e4a:	69 85       	ldd	r22, Y+9	; 0x09
    1e4c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e50:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e52:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	89 8b       	std	Y+17, r24	; 0x11
    1e5c:	89 89       	ldd	r24, Y+17	; 0x11
    1e5e:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e60:	8c a1       	ldd	r24, Y+36	; 0x24
    1e62:	8a 95       	dec	r24
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <lcd_put+0x458>
    1e66:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(40);
	LCD_EN0;
    1e68:	88 e2       	ldi	r24, 0x28	; 40
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	28 e2       	ldi	r18, 0x28	; 40
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	f9 01       	movw	r30, r18
    1e72:	20 81       	ld	r18, Z
    1e74:	2f 7e       	andi	r18, 0xEF	; 239
    1e76:	fc 01       	movw	r30, r24
    1e78:	20 83       	st	Z, r18
	LCD_RS0;
    1e7a:	8b e2       	ldi	r24, 0x2B	; 43
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	2b e2       	ldi	r18, 0x2B	; 43
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	f9 01       	movw	r30, r18
    1e84:	20 81       	ld	r18, Z
    1e86:	2e 7f       	andi	r18, 0xFE	; 254
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18
}
    1e8c:	00 00       	nop
    1e8e:	cf 5b       	subi	r28, 0xBF	; 191
    1e90:	df 4f       	sbci	r29, 0xFF	; 255
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	08 95       	ret

00001ea2 <nible2hex>:

char nible2hex(uint8_t nible)
{
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	1f 92       	push	r1
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	89 83       	std	Y+1, r24	; 0x01
	if (nible < 10)
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	8a 30       	cpi	r24, 0x0A	; 10
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <nible2hex+0x18>
		return '0' + nible;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	80 5d       	subi	r24, 0xD0	; 208
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <nible2hex+0x1c>
	else
		return 'A' + nible - 10;
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	89 5c       	subi	r24, 0xC9	; 201
}
    1ebe:	0f 90       	pop	r0
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	08 95       	ret

00001ec6 <print_hex>:

// vytiskne číslo int 2B
void print_hex(uint16_t cislo)
{
    1ec6:	cf 93       	push	r28
    1ec8:	df 93       	push	r29
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <print_hex+0x6>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <print_hex+0x8>
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <print_hex+0xa>
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1ed8:	1a 82       	std	Y+2, r1	; 0x02
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	1c c0       	rjmp	.+56     	; 0x1f16 <print_hex+0x50>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	89 2f       	mov	r24, r25
    1ee4:	99 27       	eor	r25, r25
    1ee6:	82 95       	swap	r24
    1ee8:	8f 70       	andi	r24, 0x0F	; 15
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
		cislo <<= 4;
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	82 95       	swap	r24
    1ef4:	92 95       	swap	r25
    1ef6:	90 7f       	andi	r25, 0xF0	; 240
    1ef8:	98 27       	eor	r25, r24
    1efa:	80 7f       	andi	r24, 0xF0	; 240
    1efc:	98 27       	eor	r25, r24
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
		lcd_put(nible2hex(nible));
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <nible2hex>
    1f08:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
void print_hex(uint16_t cislo)
{
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	9a 83       	std	Y+2, r25	; 0x02
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	04 97       	sbiw	r24, 0x04	; 4
    1f1c:	00 f3       	brcs	.-64     	; 0x1ede <print_hex+0x18>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
		cislo <<= 4;
		lcd_put(nible2hex(nible));
	}
}
    1f1e:	00 00       	nop
    1f20:	26 96       	adiw	r28, 0x06	; 6
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	08 95       	ret

00001f32 <print_int>:

// vytiskne číslo int 2B
void print_int(int cislo, char znaminko, char nula, int pocet_mist)
{
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    1f3a:	6b 97       	sbiw	r28, 0x1b	; 27
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	9f 8b       	std	Y+23, r25	; 0x17
    1f48:	8e 8b       	std	Y+22, r24	; 0x16
    1f4a:	68 8f       	std	Y+24, r22	; 0x18
    1f4c:	49 8f       	std	Y+25, r20	; 0x19
    1f4e:	3b 8f       	std	Y+27, r19	; 0x1b
    1f50:	2a 8f       	std	Y+26, r18	; 0x1a
	int poc_cislo = cislo;
    1f52:	8e 89       	ldd	r24, Y+22	; 0x16
    1f54:	9f 89       	ldd	r25, Y+23	; 0x17
    1f56:	9d 83       	std	Y+5, r25	; 0x05
    1f58:	8c 83       	std	Y+4, r24	; 0x04
	int8_t i, len = 16, state = 1;
    1f5a:	80 e1       	ldi	r24, 0x10	; 16
    1f5c:	8a 83       	std	Y+2, r24	; 0x02
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	8b 83       	std	Y+3, r24	; 0x03
	char buf[16];

	// pokud máme vypsat před číslo znamínko
	if (znaminko)
    1f62:	88 8d       	ldd	r24, Y+24	; 0x18
    1f64:	88 23       	and	r24, r24
    1f66:	49 f0       	breq	.+18     	; 0x1f7a <print_int+0x48>
	{
		lcd_put((cislo >= 0) ? '+' : '-');
    1f68:	8e 89       	ldd	r24, Y+22	; 0x16
    1f6a:	9f 89       	ldd	r25, Y+23	; 0x17
    1f6c:	99 23       	and	r25, r25
    1f6e:	14 f0       	brlt	.+4      	; 0x1f74 <print_int+0x42>
    1f70:	8b e2       	ldi	r24, 0x2B	; 43
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <print_int+0x44>
    1f74:	8d e2       	ldi	r24, 0x2D	; 45
    1f76:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	}

	// pokud je vypnutá predikce nul
	if (nula)
    1f7a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f7c:	88 23       	and	r24, r24
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <print_int+0x50>
		state = 0;
    1f80:	1b 82       	std	Y+3, r1	; 0x03


	// když je zadána délka čísla
	if (pocet_mist >= 0)
    1f82:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f84:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f86:	99 23       	and	r25, r25
    1f88:	14 f0       	brlt	.+4      	; 0x1f8e <print_int+0x5c>
		len = pocet_mist;
    1f8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f8c:	8a 83       	std	Y+2, r24	; 0x02

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;
    1f8e:	8e 89       	ldd	r24, Y+22	; 0x16
    1f90:	9f 89       	ldd	r25, Y+23	; 0x17
    1f92:	99 23       	and	r25, r25
    1f94:	1c f4       	brge	.+6      	; 0x1f9c <print_int+0x6a>
    1f96:	91 95       	neg	r25
    1f98:	81 95       	neg	r24
    1f9a:	91 09       	sbc	r25, r1
    1f9c:	9f 8b       	std	Y+23, r25	; 0x17
    1f9e:	8e 8b       	std	Y+22, r24	; 0x16

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1fa0:	19 82       	std	Y+1, r1	; 0x01
    1fa2:	20 c0       	rjmp	.+64     	; 0x1fe4 <print_int+0xb2>
	{
		buf[i] = '0' + cislo % 10;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	88 0f       	add	r24, r24
    1faa:	33 0b       	sbc	r19, r19
    1fac:	8e 89       	ldd	r24, Y+22	; 0x16
    1fae:	9f 89       	ldd	r25, Y+23	; 0x17
    1fb0:	4a e0       	ldi	r20, 0x0A	; 10
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	ba 01       	movw	r22, r20
    1fb6:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__divmodhi4>
    1fba:	40 e3       	ldi	r20, 0x30	; 48
    1fbc:	48 0f       	add	r20, r24
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	06 96       	adiw	r24, 0x06	; 6
    1fc2:	82 0f       	add	r24, r18
    1fc4:	93 1f       	adc	r25, r19
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	40 83       	st	Z, r20
		cislo /= 10;
    1fca:	8e 89       	ldd	r24, Y+22	; 0x16
    1fcc:	9f 89       	ldd	r25, Y+23	; 0x17
    1fce:	2a e0       	ldi	r18, 0x0A	; 10
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__divmodhi4>
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9f 8b       	std	Y+23, r25	; 0x17
    1fdc:	8e 8b       	std	Y+22, r24	; 0x16

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	8f 5f       	subi	r24, 0xFF	; 255
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	99 81       	ldd	r25, Y+1	; 0x01
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	98 17       	cp	r25, r24
    1fea:	e4 f2       	brlt	.-72     	; 0x1fa4 <print_int+0x72>
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	81 50       	subi	r24, 0x01	; 1
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	3d c0       	rjmp	.+122    	; 0x206e <print_int+0x13c>
	{
		if (buf[i] == '0' && state)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	08 2e       	mov	r0, r24
    1ff8:	00 0c       	add	r0, r0
    1ffa:	99 0b       	sbc	r25, r25
    1ffc:	9e 01       	movw	r18, r28
    1ffe:	2a 5f       	subi	r18, 0xFA	; 250
    2000:	3f 4f       	sbci	r19, 0xFF	; 255
    2002:	82 0f       	add	r24, r18
    2004:	93 1f       	adc	r25, r19
    2006:	fc 01       	movw	r30, r24
    2008:	80 81       	ld	r24, Z
    200a:	80 33       	cpi	r24, 0x30	; 48
    200c:	e9 f4       	brne	.+58     	; 0x2048 <print_int+0x116>
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	88 23       	and	r24, r24
    2012:	d1 f0       	breq	.+52     	; 0x2048 <print_int+0x116>
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    2014:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2016:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2018:	01 96       	adiw	r24, 0x01	; 1
    201a:	29 f1       	breq	.+74     	; 0x2066 <print_int+0x134>
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	9d 81       	ldd	r25, Y+5	; 0x05
    2020:	89 2b       	or	r24, r25
    2022:	71 f4       	brne	.+28     	; 0x2040 <print_int+0x10e>
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	08 2e       	mov	r0, r24
    2028:	00 0c       	add	r0, r0
    202a:	99 0b       	sbc	r25, r25
    202c:	9c 01       	movw	r18, r24
    202e:	2f 5f       	subi	r18, 0xFF	; 255
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	08 2e       	mov	r0, r24
    2036:	00 0c       	add	r0, r0
    2038:	99 0b       	sbc	r25, r25
    203a:	28 17       	cp	r18, r24
    203c:	39 07       	cpc	r19, r25
    203e:	99 f0       	breq	.+38     	; 0x2066 <print_int+0x134>
			{
				lcd_put(' ');
    2040:	80 e2       	ldi	r24, 0x20	; 32
    2042:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <print_int+0x134>
				lcd_put(' ');
			}
		}
		else
		{
			state = 0;
    2048:	1b 82       	std	Y+3, r1	; 0x03
			lcd_put(buf[i]);
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	08 2e       	mov	r0, r24
    204e:	00 0c       	add	r0, r0
    2050:	99 0b       	sbc	r25, r25
    2052:	9e 01       	movw	r18, r28
    2054:	2a 5f       	subi	r18, 0xFA	; 250
    2056:	3f 4f       	sbci	r19, 0xFF	; 255
    2058:	82 0f       	add	r24, r18
    205a:	93 1f       	adc	r25, r19
    205c:	fc 01       	movw	r30, r24
    205e:	80 81       	ld	r24, Z
    2060:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <print_int+0x136>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    2066:	00 00       	nop
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	81 50       	subi	r24, 0x01	; 1
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	88 23       	and	r24, r24
    2072:	0c f0       	brlt	.+2      	; 0x2076 <print_int+0x144>
    2074:	bf cf       	rjmp	.-130    	; 0x1ff4 <print_int+0xc2>
			state = 0;
			lcd_put(buf[i]);
		}

	}
	if (state)
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	88 23       	and	r24, r24
    207a:	19 f0       	breq	.+6      	; 0x2082 <print_int+0x150>
	{
		lcd_put('0');
    207c:	80 e3       	ldi	r24, 0x30	; 48
    207e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	}
}
    2082:	00 00       	nop
    2084:	6b 96       	adiw	r28, 0x1b	; 27
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <print_double>:

// vytiskne double
void print_double(double cislo, char znaminko, char nula, int mista_pred_carkou, int mista_za_carkou)
{
    2096:	ef 92       	push	r14
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	61 97       	sbiw	r28, 0x11	; 17
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	68 87       	std	Y+8, r22	; 0x08
    20b4:	79 87       	std	Y+9, r23	; 0x09
    20b6:	8a 87       	std	Y+10, r24	; 0x0a
    20b8:	9b 87       	std	Y+11, r25	; 0x0b
    20ba:	4c 87       	std	Y+12, r20	; 0x0c
    20bc:	2d 87       	std	Y+13, r18	; 0x0d
    20be:	1f 87       	std	Y+15, r17	; 0x0f
    20c0:	0e 87       	std	Y+14, r16	; 0x0e
    20c2:	f9 8a       	std	Y+17, r15	; 0x11
    20c4:	e8 8a       	std	Y+16, r14	; 0x10
	int i, cela, desetinna;
	char znam = '+';
    20c6:	8b e2       	ldi	r24, 0x2B	; 43
    20c8:	8b 83       	std	Y+3, r24	; 0x03

	if (mista_za_carkou == -1)
    20ca:	88 89       	ldd	r24, Y+16	; 0x10
    20cc:	99 89       	ldd	r25, Y+17	; 0x11
    20ce:	01 96       	adiw	r24, 0x01	; 1
    20d0:	21 f4       	brne	.+8      	; 0x20da <print_double+0x44>
		mista_za_carkou = 3;
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	99 8b       	std	Y+17, r25	; 0x11
    20d8:	88 8b       	std	Y+16, r24	; 0x10

	if (cislo < 0)
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	a9 01       	movw	r20, r18
    20e0:	68 85       	ldd	r22, Y+8	; 0x08
    20e2:	79 85       	ldd	r23, Y+9	; 0x09
    20e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e8:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	5c f4       	brge	.+22     	; 0x2106 <print_double+0x70>
	{
		cislo *= -1;
    20f0:	88 85       	ldd	r24, Y+8	; 0x08
    20f2:	99 85       	ldd	r25, Y+9	; 0x09
    20f4:	aa 85       	ldd	r26, Y+10	; 0x0a
    20f6:	bb 85       	ldd	r27, Y+11	; 0x0b
    20f8:	b0 58       	subi	r27, 0x80	; 128
    20fa:	88 87       	std	Y+8, r24	; 0x08
    20fc:	99 87       	std	Y+9, r25	; 0x09
    20fe:	aa 87       	std	Y+10, r26	; 0x0a
    2100:	bb 87       	std	Y+11, r27	; 0x0b
		znam = '-';
    2102:	8d e2       	ldi	r24, 0x2D	; 45
    2104:	8b 83       	std	Y+3, r24	; 0x03
	}

	cela = (int) cislo;
    2106:	68 85       	ldd	r22, Y+8	; 0x08
    2108:	79 85       	ldd	r23, Y+9	; 0x09
    210a:	8a 85       	ldd	r24, Y+10	; 0x0a
    210c:	9b 85       	ldd	r25, Y+11	; 0x0b
    210e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__fixsfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9d 83       	std	Y+5, r25	; 0x05
    2118:	8c 83       	std	Y+4, r24	; 0x04
	cislo -= cela;
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	9d 81       	ldd	r25, Y+5	; 0x05
    211e:	09 2e       	mov	r0, r25
    2120:	00 0c       	add	r0, r0
    2122:	aa 0b       	sbc	r26, r26
    2124:	bb 0b       	sbc	r27, r27
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 1f 18 	call	0x303e	; 0x303e <__floatsisf>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9c 01       	movw	r18, r24
    2134:	ad 01       	movw	r20, r26
    2136:	68 85       	ldd	r22, Y+8	; 0x08
    2138:	79 85       	ldd	r23, Y+9	; 0x09
    213a:	8a 85       	ldd	r24, Y+10	; 0x0a
    213c:	9b 85       	ldd	r25, Y+11	; 0x0b
    213e:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__subsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	88 87       	std	Y+8, r24	; 0x08
    2148:	99 87       	std	Y+9, r25	; 0x09
    214a:	aa 87       	std	Y+10, r26	; 0x0a
    214c:	bb 87       	std	Y+11, r27	; 0x0b

	for (i=0; i < mista_za_carkou; i++)
    214e:	1a 82       	std	Y+2, r1	; 0x02
    2150:	19 82       	std	Y+1, r1	; 0x01
    2152:	15 c0       	rjmp	.+42     	; 0x217e <print_double+0xe8>
		cislo *= 10;
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	68 85       	ldd	r22, Y+8	; 0x08
    215e:	79 85       	ldd	r23, Y+9	; 0x09
    2160:	8a 85       	ldd	r24, Y+10	; 0x0a
    2162:	9b 85       	ldd	r25, Y+11	; 0x0b
    2164:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	88 87       	std	Y+8, r24	; 0x08
    216e:	99 87       	std	Y+9, r25	; 0x09
    2170:	aa 87       	std	Y+10, r26	; 0x0a
    2172:	bb 87       	std	Y+11, r27	; 0x0b
	}

	cela = (int) cislo;
	cislo -= cela;

	for (i=0; i < mista_za_carkou; i++)
    2174:	89 81       	ldd	r24, Y+1	; 0x01
    2176:	9a 81       	ldd	r25, Y+2	; 0x02
    2178:	01 96       	adiw	r24, 0x01	; 1
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	29 81       	ldd	r18, Y+1	; 0x01
    2180:	3a 81       	ldd	r19, Y+2	; 0x02
    2182:	88 89       	ldd	r24, Y+16	; 0x10
    2184:	99 89       	ldd	r25, Y+17	; 0x11
    2186:	28 17       	cp	r18, r24
    2188:	39 07       	cpc	r19, r25
    218a:	24 f3       	brlt	.-56     	; 0x2154 <print_double+0xbe>
		cislo *= 10;

	desetinna = (int) cislo;
    218c:	68 85       	ldd	r22, Y+8	; 0x08
    218e:	79 85       	ldd	r23, Y+9	; 0x09
    2190:	8a 85       	ldd	r24, Y+10	; 0x0a
    2192:	9b 85       	ldd	r25, Y+11	; 0x0b
    2194:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__fixsfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9f 83       	std	Y+7, r25	; 0x07
    219e:	8e 83       	std	Y+6, r24	; 0x06
	cela = (znam == '-') ? -1 * cela : cela;
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	8d 32       	cpi	r24, 0x2D	; 45
    21a4:	31 f4       	brne	.+12     	; 0x21b2 <print_double+0x11c>
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04
    21a8:	9d 81       	ldd	r25, Y+5	; 0x05
    21aa:	91 95       	neg	r25
    21ac:	81 95       	neg	r24
    21ae:	91 09       	sbc	r25, r1
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <print_double+0x120>
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	9d 81       	ldd	r25, Y+5	; 0x05
    21b6:	9d 83       	std	Y+5, r25	; 0x05
    21b8:	8c 83       	std	Y+4, r24	; 0x04

	print_int(cela, znaminko, nula, mista_pred_carkou);
    21ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    21bc:	3f 85       	ldd	r19, Y+15	; 0x0f
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	9d 81       	ldd	r25, Y+5	; 0x05
    21c2:	4d 85       	ldd	r20, Y+13	; 0x0d
    21c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    21c6:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <print_int>
	lcd_put(',');
    21ca:	8c e2       	ldi	r24, 0x2C	; 44
    21cc:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	print_int(desetinna, '\0', '0', mista_za_carkou);
    21d0:	28 89       	ldd	r18, Y+16	; 0x10
    21d2:	39 89       	ldd	r19, Y+17	; 0x11
    21d4:	8e 81       	ldd	r24, Y+6	; 0x06
    21d6:	9f 81       	ldd	r25, Y+7	; 0x07
    21d8:	40 e3       	ldi	r20, 0x30	; 48
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <print_int>

}
    21e0:	00 00       	nop
    21e2:	61 96       	adiw	r28, 0x11	; 17
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	08 95       	ret

000021fc <lcd_printf>:

// printf funkce
void lcd_printf(char str[], ...)
{
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	2f 97       	sbiw	r28, 0x0f	; 15
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61

	uint8_t i, j;
	char *str_p;
	int tmp_int;

	char znaminko = '\0';
    2218:	1b 82       	std	Y+3, r1	; 0x03
	char nula = '\0';
    221a:	1c 82       	std	Y+4, r1	; 0x04
	char desetina_carka = '\0';
    221c:	1d 82       	std	Y+5, r1	; 0x05
	int mista_pred_carkou = -1;
    221e:	8f ef       	ldi	r24, 0xFF	; 255
    2220:	9f ef       	ldi	r25, 0xFF	; 255
    2222:	9f 83       	std	Y+7, r25	; 0x07
    2224:	8e 83       	std	Y+6, r24	; 0x06
	int mista_za_carkou = -1;
    2226:	8f ef       	ldi	r24, 0xFF	; 255
    2228:	9f ef       	ldi	r25, 0xFF	; 255
    222a:	99 87       	std	Y+9, r25	; 0x09
    222c:	88 87       	std	Y+8, r24	; 0x08



	 __gnuc_va_list ap;
	 //va_list ap;
	 va_start(ap, str);
    222e:	ce 01       	movw	r24, r28
    2230:	4a 96       	adiw	r24, 0x1a	; 26
    2232:	9f 87       	std	Y+15, r25	; 0x0f
    2234:	8e 87       	std	Y+14, r24	; 0x0e



	for (i=0; str[i] != '\0'; i++)
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	5e c2       	rjmp	.+1212   	; 0x26f6 <lcd_printf+0x4fa>
	{
		// nová stránka
		if (str[i] == '\f')
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	28 8d       	ldd	r18, Y+24	; 0x18
    2242:	39 8d       	ldd	r19, Y+25	; 0x19
    2244:	82 0f       	add	r24, r18
    2246:	93 1f       	adc	r25, r19
    2248:	fc 01       	movw	r30, r24
    224a:	80 81       	ld	r24, Z
    224c:	8c 30       	cpi	r24, 0x0C	; 12
    224e:	51 f4       	brne	.+20     	; 0x2264 <lcd_printf+0x68>
		{
			line = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
			lcd_cmd(LCD_CMD_CLR);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
			lcd_cmd(LCD_CMD_W_DDRAM);
    225c:	80 e8       	ldi	r24, 0x80	; 128
    225e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
    2262:	46 c2       	rjmp	.+1164   	; 0x26f0 <lcd_printf+0x4f4>
		}
		// nový řádek
		else if (str[i] == '\n')
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	28 8d       	ldd	r18, Y+24	; 0x18
    226c:	39 8d       	ldd	r19, Y+25	; 0x19
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	fc 01       	movw	r30, r24
    2274:	80 81       	ld	r24, Z
    2276:	8a 30       	cpi	r24, 0x0A	; 10
    2278:	71 f5       	brne	.+92     	; 0x22d6 <lcd_printf+0xda>
		{
			// jestli jsme na 1.
			if (line == 1)
    227a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	49 f4       	brne	.+18     	; 0x2294 <lcd_printf+0x98>
			{
				line++;
    2282:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40); // go 2 line
    228c:	80 ec       	ldi	r24, 0xC0	; 192
    228e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
    2292:	2e c2       	rjmp	.+1116   	; 0x26f0 <lcd_printf+0x4f4>
			}
			// jestli jsme na 2.
			else if (line == 2)
    2294:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2298:	82 30       	cpi	r24, 0x02	; 2
    229a:	49 f4       	brne	.+18     	; 0x22ae <lcd_printf+0xb2>
			{
				line++;
    229c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22a0:	8f 5f       	subi	r24, 0xFF	; 255
    22a2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x14); // go 3 line
    22a6:	84 e9       	ldi	r24, 0x94	; 148
    22a8:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
    22ac:	21 c2       	rjmp	.+1090   	; 0x26f0 <lcd_printf+0x4f4>
			}
			// jestli jsme na 3.
			else if (line == 3)
    22ae:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22b2:	83 30       	cpi	r24, 0x03	; 3
    22b4:	49 f4       	brne	.+18     	; 0x22c8 <lcd_printf+0xcc>
			{
				line++;
    22b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22ba:	8f 5f       	subi	r24, 0xFF	; 255
    22bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x54); // go 4 line
    22c0:	84 ed       	ldi	r24, 0xD4	; 212
    22c2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
    22c6:	14 c2       	rjmp	.+1064   	; 0x26f0 <lcd_printf+0x4f4>
			}
			// jestli jsme na 4.
			else
			{
				line = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x00); // go 1 line
    22ce:	80 e8       	ldi	r24, 0x80	; 128
    22d0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
    22d4:	0d c2       	rjmp	.+1050   	; 0x26f0 <lcd_printf+0x4f4>
			}
		}
		// návrat vozíku
		else if (str[i] == '\r')
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	28 8d       	ldd	r18, Y+24	; 0x18
    22de:	39 8d       	ldd	r19, Y+25	; 0x19
    22e0:	82 0f       	add	r24, r18
    22e2:	93 1f       	adc	r25, r19
    22e4:	fc 01       	movw	r30, r24
    22e6:	80 81       	ld	r24, Z
    22e8:	8d 30       	cpi	r24, 0x0D	; 13
    22ea:	61 f4       	brne	.+24     	; 0x2304 <lcd_printf+0x108>
		{
			// pokud jsme na 2. řádku
			if (line)
    22ec:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22f0:	88 23       	and	r24, r24
    22f2:	21 f0       	breq	.+8      	; 0x22fc <lcd_printf+0x100>
			{
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40);
    22f4:	80 ec       	ldi	r24, 0xC0	; 192
    22f6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
    22fa:	fa c1       	rjmp	.+1012   	; 0x26f0 <lcd_printf+0x4f4>
			}
			// jestli jsme na 1.
			else
			{
				lcd_cmd(LCD_CMD_W_DDRAM);
    22fc:	80 e8       	ldi	r24, 0x80	; 128
    22fe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <lcd_cmd>
    2302:	f6 c1       	rjmp	.+1004   	; 0x26f0 <lcd_printf+0x4f4>
			}
		}
		// tabulátor
		else if (str[i] == '\t')
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	28 8d       	ldd	r18, Y+24	; 0x18
    230c:	39 8d       	ldd	r19, Y+25	; 0x19
    230e:	82 0f       	add	r24, r18
    2310:	93 1f       	adc	r25, r19
    2312:	fc 01       	movw	r30, r24
    2314:	80 81       	ld	r24, Z
    2316:	89 30       	cpi	r24, 0x09	; 9
    2318:	69 f4       	brne	.+26     	; 0x2334 <lcd_printf+0x138>
		{
			lcd_put(' ');
    231a:	80 e2       	ldi	r24, 0x20	; 32
    231c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
			lcd_put(' ');
    2320:	80 e2       	ldi	r24, 0x20	; 32
    2322:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
			lcd_put(' ');
    2326:	80 e2       	ldi	r24, 0x20	; 32
    2328:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
			lcd_put(' ');
    232c:	80 e2       	ldi	r24, 0x20	; 32
    232e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
    2332:	de c1       	rjmp	.+956    	; 0x26f0 <lcd_printf+0x4f4>
		}
		// znak lomeno
		else if (str[i] == '\\')
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	28 8d       	ldd	r18, Y+24	; 0x18
    233c:	39 8d       	ldd	r19, Y+25	; 0x19
    233e:	82 0f       	add	r24, r18
    2340:	93 1f       	adc	r25, r19
    2342:	fc 01       	movw	r30, r24
    2344:	80 81       	ld	r24, Z
    2346:	8c 35       	cpi	r24, 0x5C	; 92
    2348:	21 f4       	brne	.+8      	; 0x2352 <lcd_printf+0x156>
		{
			lcd_put(0xA4);
    234a:	84 ea       	ldi	r24, 0xA4	; 164
    234c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
    2350:	cf c1       	rjmp	.+926    	; 0x26f0 <lcd_printf+0x4f4>
		}
		else if (str[i] == '%')
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	28 8d       	ldd	r18, Y+24	; 0x18
    235a:	39 8d       	ldd	r19, Y+25	; 0x19
    235c:	82 0f       	add	r24, r18
    235e:	93 1f       	adc	r25, r19
    2360:	fc 01       	movw	r30, r24
    2362:	80 81       	ld	r24, Z
    2364:	85 32       	cpi	r24, 0x25	; 37
    2366:	09 f0       	breq	.+2      	; 0x236a <lcd_printf+0x16e>
    2368:	b8 c1       	rjmp	.+880    	; 0x26da <lcd_printf+0x4de>
		{
			// pokud jde o znak %
			if (str[i+1] == '%')
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	88 2f       	mov	r24, r24
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	01 96       	adiw	r24, 0x01	; 1
    2372:	28 8d       	ldd	r18, Y+24	; 0x18
    2374:	39 8d       	ldd	r19, Y+25	; 0x19
    2376:	82 0f       	add	r24, r18
    2378:	93 1f       	adc	r25, r19
    237a:	fc 01       	movw	r30, r24
    237c:	80 81       	ld	r24, Z
    237e:	85 32       	cpi	r24, 0x25	; 37
    2380:	39 f4       	brne	.+14     	; 0x2390 <lcd_printf+0x194>
			{
				i++;
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	89 83       	std	Y+1, r24	; 0x01
				lcd_put('%');
    2388:	85 e2       	ldi	r24, 0x25	; 37
    238a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
    238e:	b0 c1       	rjmp	.+864    	; 0x26f0 <lcd_printf+0x4f4>
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    2390:	89 81       	ldd	r24, Y+1	; 0x01
    2392:	8f 5f       	subi	r24, 0xFF	; 255
    2394:	8a 83       	std	Y+2, r24	; 0x02
    2396:	b5 c0       	rjmp	.+362    	; 0x2502 <lcd_printf+0x306>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
				{
					if (str[j] == '+' || str[j] == '-')
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	28 8d       	ldd	r18, Y+24	; 0x18
    23a0:	39 8d       	ldd	r19, Y+25	; 0x19
    23a2:	82 0f       	add	r24, r18
    23a4:	93 1f       	adc	r25, r19
    23a6:	fc 01       	movw	r30, r24
    23a8:	80 81       	ld	r24, Z
    23aa:	8b 32       	cpi	r24, 0x2B	; 43
    23ac:	59 f0       	breq	.+22     	; 0x23c4 <lcd_printf+0x1c8>
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	88 2f       	mov	r24, r24
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	28 8d       	ldd	r18, Y+24	; 0x18
    23b6:	39 8d       	ldd	r19, Y+25	; 0x19
    23b8:	82 0f       	add	r24, r18
    23ba:	93 1f       	adc	r25, r19
    23bc:	fc 01       	movw	r30, r24
    23be:	80 81       	ld	r24, Z
    23c0:	8d 32       	cpi	r24, 0x2D	; 45
    23c2:	19 f4       	brne	.+6      	; 0x23ca <lcd_printf+0x1ce>
					{
						znaminko = '+';
    23c4:	8b e2       	ldi	r24, 0x2B	; 43
    23c6:	8b 83       	std	Y+3, r24	; 0x03
    23c8:	99 c0       	rjmp	.+306    	; 0x24fc <lcd_printf+0x300>
					}
					else if (str[j] == '.')
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	88 2f       	mov	r24, r24
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	28 8d       	ldd	r18, Y+24	; 0x18
    23d2:	39 8d       	ldd	r19, Y+25	; 0x19
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	fc 01       	movw	r30, r24
    23da:	80 81       	ld	r24, Z
    23dc:	8e 32       	cpi	r24, 0x2E	; 46
    23de:	19 f4       	brne	.+6      	; 0x23e6 <lcd_printf+0x1ea>
					{
						desetina_carka = ',';
    23e0:	8c e2       	ldi	r24, 0x2C	; 44
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	8b c0       	rjmp	.+278    	; 0x24fc <lcd_printf+0x300>
					}
					else if (str[j] == '0')
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	28 8d       	ldd	r18, Y+24	; 0x18
    23ee:	39 8d       	ldd	r19, Y+25	; 0x19
    23f0:	82 0f       	add	r24, r18
    23f2:	93 1f       	adc	r25, r19
    23f4:	fc 01       	movw	r30, r24
    23f6:	80 81       	ld	r24, Z
    23f8:	80 33       	cpi	r24, 0x30	; 48
    23fa:	d1 f4       	brne	.+52     	; 0x2430 <lcd_printf+0x234>
					{
						if (desetina_carka == '\0')
    23fc:	8d 81       	ldd	r24, Y+5	; 0x05
    23fe:	88 23       	and	r24, r24
    2400:	a1 f4       	brne	.+40     	; 0x242a <lcd_printf+0x22e>
						{
							if (nula == '0')
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	80 33       	cpi	r24, 0x30	; 48
    2406:	71 f4       	brne	.+28     	; 0x2424 <lcd_printf+0x228>
								mista_pred_carkou *= 10;
    2408:	8e 81       	ldd	r24, Y+6	; 0x06
    240a:	9f 81       	ldd	r25, Y+7	; 0x07
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	9c 01       	movw	r18, r24
    2412:	22 0f       	add	r18, r18
    2414:	33 1f       	adc	r19, r19
    2416:	22 0f       	add	r18, r18
    2418:	33 1f       	adc	r19, r19
    241a:	82 0f       	add	r24, r18
    241c:	93 1f       	adc	r25, r19
    241e:	9f 83       	std	Y+7, r25	; 0x07
    2420:	8e 83       	std	Y+6, r24	; 0x06
    2422:	6c c0       	rjmp	.+216    	; 0x24fc <lcd_printf+0x300>
							else
								nula = '0';
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	8c 83       	std	Y+4, r24	; 0x04
    2428:	69 c0       	rjmp	.+210    	; 0x24fc <lcd_printf+0x300>
						}
						else
						{
							mista_za_carkou = 0;
    242a:	19 86       	std	Y+9, r1	; 0x09
    242c:	18 86       	std	Y+8, r1	; 0x08
    242e:	66 c0       	rjmp	.+204    	; 0x24fc <lcd_printf+0x300>
						}

					}
					else if (str[j] >= '1' && str[j] <= '9')
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	28 8d       	ldd	r18, Y+24	; 0x18
    2438:	39 8d       	ldd	r19, Y+25	; 0x19
    243a:	82 0f       	add	r24, r18
    243c:	93 1f       	adc	r25, r19
    243e:	fc 01       	movw	r30, r24
    2440:	80 81       	ld	r24, Z
    2442:	81 33       	cpi	r24, 0x31	; 49
    2444:	08 f4       	brcc	.+2      	; 0x2448 <lcd_printf+0x24c>
    2446:	5a c0       	rjmp	.+180    	; 0x24fc <lcd_printf+0x300>
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	28 8d       	ldd	r18, Y+24	; 0x18
    2450:	39 8d       	ldd	r19, Y+25	; 0x19
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	fc 01       	movw	r30, r24
    2458:	80 81       	ld	r24, Z
    245a:	8a 33       	cpi	r24, 0x3A	; 58
    245c:	08 f0       	brcs	.+2      	; 0x2460 <lcd_printf+0x264>
    245e:	4e c0       	rjmp	.+156    	; 0x24fc <lcd_printf+0x300>
					{
						if (desetina_carka == ',')
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	8c 32       	cpi	r24, 0x2C	; 44
    2464:	31 f5       	brne	.+76     	; 0x24b2 <lcd_printf+0x2b6>
						{
							if (mista_za_carkou == -1)
    2466:	88 85       	ldd	r24, Y+8	; 0x08
    2468:	99 85       	ldd	r25, Y+9	; 0x09
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	11 f4       	brne	.+4      	; 0x2472 <lcd_printf+0x276>
								mista_za_carkou = 0;
    246e:	19 86       	std	Y+9, r1	; 0x09
    2470:	18 86       	std	Y+8, r1	; 0x08

							mista_za_carkou *= 10;
    2472:	88 85       	ldd	r24, Y+8	; 0x08
    2474:	99 85       	ldd	r25, Y+9	; 0x09
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	9c 01       	movw	r18, r24
    247c:	22 0f       	add	r18, r18
    247e:	33 1f       	adc	r19, r19
    2480:	22 0f       	add	r18, r18
    2482:	33 1f       	adc	r19, r19
    2484:	82 0f       	add	r24, r18
    2486:	93 1f       	adc	r25, r19
    2488:	99 87       	std	Y+9, r25	; 0x09
    248a:	88 87       	std	Y+8, r24	; 0x08
							mista_za_carkou += str[j] - '0';
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	28 8d       	ldd	r18, Y+24	; 0x18
    2494:	39 8d       	ldd	r19, Y+25	; 0x19
    2496:	82 0f       	add	r24, r18
    2498:	93 1f       	adc	r25, r19
    249a:	fc 01       	movw	r30, r24
    249c:	80 81       	ld	r24, Z
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	c0 97       	sbiw	r24, 0x30	; 48
    24a4:	28 85       	ldd	r18, Y+8	; 0x08
    24a6:	39 85       	ldd	r19, Y+9	; 0x09
    24a8:	82 0f       	add	r24, r18
    24aa:	93 1f       	adc	r25, r19
    24ac:	99 87       	std	Y+9, r25	; 0x09
    24ae:	88 87       	std	Y+8, r24	; 0x08
    24b0:	25 c0       	rjmp	.+74     	; 0x24fc <lcd_printf+0x300>
						}
						else
						{
							if (mista_pred_carkou == -1)
    24b2:	8e 81       	ldd	r24, Y+6	; 0x06
    24b4:	9f 81       	ldd	r25, Y+7	; 0x07
    24b6:	01 96       	adiw	r24, 0x01	; 1
    24b8:	11 f4       	brne	.+4      	; 0x24be <lcd_printf+0x2c2>
								mista_pred_carkou = 0;
    24ba:	1f 82       	std	Y+7, r1	; 0x07
    24bc:	1e 82       	std	Y+6, r1	; 0x06

							mista_pred_carkou *= 10;
    24be:	8e 81       	ldd	r24, Y+6	; 0x06
    24c0:	9f 81       	ldd	r25, Y+7	; 0x07
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	9c 01       	movw	r18, r24
    24c8:	22 0f       	add	r18, r18
    24ca:	33 1f       	adc	r19, r19
    24cc:	22 0f       	add	r18, r18
    24ce:	33 1f       	adc	r19, r19
    24d0:	82 0f       	add	r24, r18
    24d2:	93 1f       	adc	r25, r19
    24d4:	9f 83       	std	Y+7, r25	; 0x07
    24d6:	8e 83       	std	Y+6, r24	; 0x06
							mista_pred_carkou += str[j] - '0';
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	28 8d       	ldd	r18, Y+24	; 0x18
    24e0:	39 8d       	ldd	r19, Y+25	; 0x19
    24e2:	82 0f       	add	r24, r18
    24e4:	93 1f       	adc	r25, r19
    24e6:	fc 01       	movw	r30, r24
    24e8:	80 81       	ld	r24, Z
    24ea:	88 2f       	mov	r24, r24
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	c0 97       	sbiw	r24, 0x30	; 48
    24f0:	2e 81       	ldd	r18, Y+6	; 0x06
    24f2:	3f 81       	ldd	r19, Y+7	; 0x07
    24f4:	82 0f       	add	r24, r18
    24f6:	93 1f       	adc	r25, r19
    24f8:	9f 83       	std	Y+7, r25	; 0x07
    24fa:	8e 83       	std	Y+6, r24	; 0x06
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	8a 83       	std	Y+2, r24	; 0x02
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	88 2f       	mov	r24, r24
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	28 8d       	ldd	r18, Y+24	; 0x18
    250a:	39 8d       	ldd	r19, Y+25	; 0x19
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	fc 01       	movw	r30, r24
    2512:	80 81       	ld	r24, Z
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    2514:	83 36       	cpi	r24, 0x63	; 99
    2516:	69 f1       	breq	.+90     	; 0x2572 <lcd_printf+0x376>
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	28 8d       	ldd	r18, Y+24	; 0x18
    2520:	39 8d       	ldd	r19, Y+25	; 0x19
    2522:	82 0f       	add	r24, r18
    2524:	93 1f       	adc	r25, r19
    2526:	fc 01       	movw	r30, r24
    2528:	80 81       	ld	r24, Z
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    252a:	88 34       	cpi	r24, 0x48	; 72
    252c:	11 f1       	breq	.+68     	; 0x2572 <lcd_printf+0x376>
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	88 2f       	mov	r24, r24
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	28 8d       	ldd	r18, Y+24	; 0x18
    2536:	39 8d       	ldd	r19, Y+25	; 0x19
    2538:	82 0f       	add	r24, r18
    253a:	93 1f       	adc	r25, r19
    253c:	fc 01       	movw	r30, r24
    253e:	80 81       	ld	r24, Z
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2540:	84 36       	cpi	r24, 0x64	; 100
    2542:	b9 f0       	breq	.+46     	; 0x2572 <lcd_printf+0x376>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	88 2f       	mov	r24, r24
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	28 8d       	ldd	r18, Y+24	; 0x18
    254c:	39 8d       	ldd	r19, Y+25	; 0x19
    254e:	82 0f       	add	r24, r18
    2550:	93 1f       	adc	r25, r19
    2552:	fc 01       	movw	r30, r24
    2554:	80 81       	ld	r24, Z
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    2556:	86 36       	cpi	r24, 0x66	; 102
    2558:	61 f0       	breq	.+24     	; 0x2572 <lcd_printf+0x376>
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	28 8d       	ldd	r18, Y+24	; 0x18
    2562:	39 8d       	ldd	r19, Y+25	; 0x19
    2564:	82 0f       	add	r24, r18
    2566:	93 1f       	adc	r25, r19
    2568:	fc 01       	movw	r30, r24
    256a:	80 81       	ld	r24, Z
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    256c:	83 37       	cpi	r24, 0x73	; 115
    256e:	09 f0       	breq	.+2      	; 0x2572 <lcd_printf+0x376>
    2570:	13 cf       	rjmp	.-474    	; 0x2398 <lcd_printf+0x19c>
						}
					}
				}

				// posuneme index procházení pole
				i = j;
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	89 83       	std	Y+1, r24	; 0x01

				// podle typu s nimi naložíme
				if (str[j] == 'c')
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	28 8d       	ldd	r18, Y+24	; 0x18
    257e:	39 8d       	ldd	r19, Y+25	; 0x19
    2580:	82 0f       	add	r24, r18
    2582:	93 1f       	adc	r25, r19
    2584:	fc 01       	movw	r30, r24
    2586:	80 81       	ld	r24, Z
    2588:	83 36       	cpi	r24, 0x63	; 99
    258a:	69 f4       	brne	.+26     	; 0x25a6 <lcd_printf+0x3aa>
				{
					lcd_put(va_arg(ap, int));
    258c:	8e 85       	ldd	r24, Y+14	; 0x0e
    258e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2590:	9c 01       	movw	r18, r24
    2592:	2e 5f       	subi	r18, 0xFE	; 254
    2594:	3f 4f       	sbci	r19, 0xFF	; 255
    2596:	3f 87       	std	Y+15, r19	; 0x0f
    2598:	2e 87       	std	Y+14, r18	; 0x0e
    259a:	fc 01       	movw	r30, r24
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
    25a4:	8e c0       	rjmp	.+284    	; 0x26c2 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'H')
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	28 8d       	ldd	r18, Y+24	; 0x18
    25ae:	39 8d       	ldd	r19, Y+25	; 0x19
    25b0:	82 0f       	add	r24, r18
    25b2:	93 1f       	adc	r25, r19
    25b4:	fc 01       	movw	r30, r24
    25b6:	80 81       	ld	r24, Z
    25b8:	88 34       	cpi	r24, 0x48	; 72
    25ba:	69 f4       	brne	.+26     	; 0x25d6 <lcd_printf+0x3da>
				{
					print_hex(va_arg(ap, uint16_t));
    25bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    25be:	9f 85       	ldd	r25, Y+15	; 0x0f
    25c0:	9c 01       	movw	r18, r24
    25c2:	2e 5f       	subi	r18, 0xFE	; 254
    25c4:	3f 4f       	sbci	r19, 0xFF	; 255
    25c6:	3f 87       	std	Y+15, r19	; 0x0f
    25c8:	2e 87       	std	Y+14, r18	; 0x0e
    25ca:	fc 01       	movw	r30, r24
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <print_hex>
    25d4:	76 c0       	rjmp	.+236    	; 0x26c2 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'd')
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	28 8d       	ldd	r18, Y+24	; 0x18
    25de:	39 8d       	ldd	r19, Y+25	; 0x19
    25e0:	82 0f       	add	r24, r18
    25e2:	93 1f       	adc	r25, r19
    25e4:	fc 01       	movw	r30, r24
    25e6:	80 81       	ld	r24, Z
    25e8:	84 36       	cpi	r24, 0x64	; 100
    25ea:	a9 f4       	brne	.+42     	; 0x2616 <lcd_printf+0x41a>
				{
					tmp_int = va_arg(ap, int);
    25ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f0:	9c 01       	movw	r18, r24
    25f2:	2e 5f       	subi	r18, 0xFE	; 254
    25f4:	3f 4f       	sbci	r19, 0xFF	; 255
    25f6:	3f 87       	std	Y+15, r19	; 0x0f
    25f8:	2e 87       	std	Y+14, r18	; 0x0e
    25fa:	fc 01       	movw	r30, r24
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	9b 87       	std	Y+11, r25	; 0x0b
    2602:	8a 87       	std	Y+10, r24	; 0x0a
					print_int(tmp_int, znaminko, nula, mista_pred_carkou);
    2604:	2e 81       	ldd	r18, Y+6	; 0x06
    2606:	3f 81       	ldd	r19, Y+7	; 0x07
    2608:	8a 85       	ldd	r24, Y+10	; 0x0a
    260a:	9b 85       	ldd	r25, Y+11	; 0x0b
    260c:	4c 81       	ldd	r20, Y+4	; 0x04
    260e:	6b 81       	ldd	r22, Y+3	; 0x03
    2610:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <print_int>
    2614:	56 c0       	rjmp	.+172    	; 0x26c2 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'f')
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	28 8d       	ldd	r18, Y+24	; 0x18
    261e:	39 8d       	ldd	r19, Y+25	; 0x19
    2620:	82 0f       	add	r24, r18
    2622:	93 1f       	adc	r25, r19
    2624:	fc 01       	movw	r30, r24
    2626:	80 81       	ld	r24, Z
    2628:	86 36       	cpi	r24, 0x66	; 102
    262a:	c9 f4       	brne	.+50     	; 0x265e <lcd_printf+0x462>
				{
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
    262c:	8e 85       	ldd	r24, Y+14	; 0x0e
    262e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2630:	9c 01       	movw	r18, r24
    2632:	2c 5f       	subi	r18, 0xFC	; 252
    2634:	3f 4f       	sbci	r19, 0xFF	; 255
    2636:	3f 87       	std	Y+15, r19	; 0x0f
    2638:	2e 87       	std	Y+14, r18	; 0x0e
    263a:	fc 01       	movw	r30, r24
    263c:	80 81       	ld	r24, Z
    263e:	91 81       	ldd	r25, Z+1	; 0x01
    2640:	a2 81       	ldd	r26, Z+2	; 0x02
    2642:	b3 81       	ldd	r27, Z+3	; 0x03
    2644:	48 85       	ldd	r20, Y+8	; 0x08
    2646:	59 85       	ldd	r21, Y+9	; 0x09
    2648:	2e 81       	ldd	r18, Y+6	; 0x06
    264a:	3f 81       	ldd	r19, Y+7	; 0x07
    264c:	7a 01       	movw	r14, r20
    264e:	89 01       	movw	r16, r18
    2650:	2c 81       	ldd	r18, Y+4	; 0x04
    2652:	4b 81       	ldd	r20, Y+3	; 0x03
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 4b 10 	call	0x2096	; 0x2096 <print_double>
    265c:	32 c0       	rjmp	.+100    	; 0x26c2 <lcd_printf+0x4c6>
				}
				else if (str[j] == 's')
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	88 2f       	mov	r24, r24
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	28 8d       	ldd	r18, Y+24	; 0x18
    2666:	39 8d       	ldd	r19, Y+25	; 0x19
    2668:	82 0f       	add	r24, r18
    266a:	93 1f       	adc	r25, r19
    266c:	fc 01       	movw	r30, r24
    266e:	80 81       	ld	r24, Z
    2670:	83 37       	cpi	r24, 0x73	; 115
    2672:	39 f5       	brne	.+78     	; 0x26c2 <lcd_printf+0x4c6>
				{
					str_p = va_arg(ap, char *);
    2674:	8e 85       	ldd	r24, Y+14	; 0x0e
    2676:	9f 85       	ldd	r25, Y+15	; 0x0f
    2678:	9c 01       	movw	r18, r24
    267a:	2e 5f       	subi	r18, 0xFE	; 254
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	3f 87       	std	Y+15, r19	; 0x0f
    2680:	2e 87       	std	Y+14, r18	; 0x0e
    2682:	fc 01       	movw	r30, r24
    2684:	80 81       	ld	r24, Z
    2686:	91 81       	ldd	r25, Z+1	; 0x01
    2688:	9d 87       	std	Y+13, r25	; 0x0d
    268a:	8c 87       	std	Y+12, r24	; 0x0c
					for (j=0; *(str_p + j) != '\0'; j++)
    268c:	1a 82       	std	Y+2, r1	; 0x02
    268e:	0e c0       	rjmp	.+28     	; 0x26ac <lcd_printf+0x4b0>
						lcd_put(*(str_p + j));
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	2c 85       	ldd	r18, Y+12	; 0x0c
    2698:	3d 85       	ldd	r19, Y+13	; 0x0d
    269a:	82 0f       	add	r24, r18
    269c:	93 1f       	adc	r25, r19
    269e:	fc 01       	movw	r30, r24
    26a0:	80 81       	ld	r24, Z
    26a2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
				}
				else if (str[j] == 's')
				{
					str_p = va_arg(ap, char *);
					for (j=0; *(str_p + j) != '\0'; j++)
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	8a 83       	std	Y+2, r24	; 0x02
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	88 2f       	mov	r24, r24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    26b4:	3d 85       	ldd	r19, Y+13	; 0x0d
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	fc 01       	movw	r30, r24
    26bc:	80 81       	ld	r24, Z
    26be:	88 23       	and	r24, r24
    26c0:	39 f7       	brne	.-50     	; 0x2690 <lcd_printf+0x494>
						lcd_put(*(str_p + j));
				}

				// vynulovní formátovacích proměnných
				znaminko = '\0';
    26c2:	1b 82       	std	Y+3, r1	; 0x03
				nula = '\0';
    26c4:	1c 82       	std	Y+4, r1	; 0x04
				desetina_carka = '\0';
    26c6:	1d 82       	std	Y+5, r1	; 0x05
				mista_pred_carkou = -1;
    26c8:	8f ef       	ldi	r24, 0xFF	; 255
    26ca:	9f ef       	ldi	r25, 0xFF	; 255
    26cc:	9f 83       	std	Y+7, r25	; 0x07
    26ce:	8e 83       	std	Y+6, r24	; 0x06
				mista_za_carkou = -1;
    26d0:	8f ef       	ldi	r24, 0xFF	; 255
    26d2:	9f ef       	ldi	r25, 0xFF	; 255
    26d4:	99 87       	std	Y+9, r25	; 0x09
    26d6:	88 87       	std	Y+8, r24	; 0x08
    26d8:	0b c0       	rjmp	.+22     	; 0x26f0 <lcd_printf+0x4f4>
			}
		}
		else
		{
			lcd_put(str[i]);
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	28 8d       	ldd	r18, Y+24	; 0x18
    26e2:	39 8d       	ldd	r19, Y+25	; 0x19
    26e4:	82 0f       	add	r24, r18
    26e6:	93 1f       	adc	r25, r19
    26e8:	fc 01       	movw	r30, r24
    26ea:	80 81       	ld	r24, Z
    26ec:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_put>
	 //va_list ap;
	 va_start(ap, str);



	for (i=0; str[i] != '\0'; i++)
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	28 8d       	ldd	r18, Y+24	; 0x18
    26fe:	39 8d       	ldd	r19, Y+25	; 0x19
    2700:	82 0f       	add	r24, r18
    2702:	93 1f       	adc	r25, r19
    2704:	fc 01       	movw	r30, r24
    2706:	80 81       	ld	r24, Z
    2708:	88 23       	and	r24, r24
    270a:	09 f0       	breq	.+2      	; 0x270e <lcd_printf+0x512>
    270c:	96 cd       	rjmp	.-1236   	; 0x223a <lcd_printf+0x3e>
		{
			lcd_put(str[i]);
		}
	}
	va_end(ap);
}
    270e:	00 00       	nop
    2710:	2f 96       	adiw	r28, 0x0f	; 15
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	ff 90       	pop	r15
    2726:	ef 90       	pop	r14
    2728:	08 95       	ret

0000272a <ntc_init>:
#define R_REF	10e3
// ========================================================

// NTC initialization
void ntc_init(void)
{
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0) | 5;							// referention AVCC, measure on channel ADC5
    2732:	8c e7       	ldi	r24, 0x7C	; 124
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	25 e4       	ldi	r18, 0x45	; 69
    2738:	fc 01       	movw	r30, r24
    273a:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);	// ADEN - enable ADC, ACD clk = F_CPU/64
    273c:	8a e7       	ldi	r24, 0x7A	; 122
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	26 e8       	ldi	r18, 0x86	; 134
    2742:	fc 01       	movw	r30, r24
    2744:	20 83       	st	Z, r18
}
    2746:	00 00       	nop
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	08 95       	ret

0000274e <ntc_measure>:

// NCT measure
int16_t ntc_measure(void)
{
    274e:	cf 92       	push	r12
    2750:	df 92       	push	r13
    2752:	ef 92       	push	r14
    2754:	ff 92       	push	r15
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	2e 97       	sbiw	r28, 0x0e	; 14
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
	int16_t adc, ntc_res, temp;
	double volt, tmp_log;
	
	ADCSRA |= (1<<ADSC);        // start conversion
    276a:	8a e7       	ldi	r24, 0x7A	; 122
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	2a e7       	ldi	r18, 0x7A	; 122
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	f9 01       	movw	r30, r18
    2774:	20 81       	ld	r18, Z
    2776:	20 64       	ori	r18, 0x40	; 64
    2778:	fc 01       	movw	r30, r24
    277a:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));  // wait to end conversion
    277c:	00 00       	nop
    277e:	8a e7       	ldi	r24, 0x7A	; 122
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	fc 01       	movw	r30, r24
    2784:	80 81       	ld	r24, Z
    2786:	88 2f       	mov	r24, r24
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	80 74       	andi	r24, 0x40	; 64
    278c:	99 27       	eor	r25, r25
    278e:	89 2b       	or	r24, r25
    2790:	b1 f7       	brne	.-20     	; 0x277e <ntc_measure+0x30>
	adc=ADC;					// value measurement
    2792:	88 e7       	ldi	r24, 0x78	; 120
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	fc 01       	movw	r30, r24
    2798:	80 81       	ld	r24, Z
    279a:	91 81       	ldd	r25, Z+1	; 0x01
    279c:	9a 83       	std	Y+2, r25	; 0x02
    279e:	89 83       	std	Y+1, r24	; 0x01
	
	// convert to voltage
	volt = (V_REF/ADC_MAX) * ((double)adc);
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	9a 81       	ldd	r25, Y+2	; 0x02
    27a4:	09 2e       	mov	r0, r25
    27a6:	00 0c       	add	r0, r0
    27a8:	aa 0b       	sbc	r26, r26
    27aa:	bb 0b       	sbc	r27, r27
    27ac:	bc 01       	movw	r22, r24
    27ae:	cd 01       	movw	r24, r26
    27b0:	0e 94 1f 18 	call	0x303e	; 0x303e <__floatsisf>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	2a e0       	ldi	r18, 0x0A	; 10
    27ba:	38 e2       	ldi	r19, 0x28	; 40
    27bc:	40 ea       	ldi	r20, 0xA0	; 160
    27be:	5b e3       	ldi	r21, 0x3B	; 59
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	9c 83       	std	Y+4, r25	; 0x04
    27d0:	ad 83       	std	Y+5, r26	; 0x05
    27d2:	be 83       	std	Y+6, r27	; 0x06
	ntc_res = (-(volt * R_DIV) / V_REF) / ((volt/V_REF) - 1);
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e4       	ldi	r19, 0x40	; 64
    27d8:	4c e1       	ldi	r20, 0x1C	; 28
    27da:	56 e4       	ldi	r21, 0x46	; 70
    27dc:	6b 81       	ldd	r22, Y+3	; 0x03
    27de:	7c 81       	ldd	r23, Y+4	; 0x04
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	b0 58       	subi	r27, 0x80	; 128
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 ea       	ldi	r20, 0xA0	; 160
    27f4:	50 e4       	ldi	r21, 0x40	; 64
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	6c 01       	movw	r12, r24
    2804:	7d 01       	movw	r14, r26
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 ea       	ldi	r20, 0xA0	; 160
    280c:	50 e4       	ldi	r21, 0x40	; 64
    280e:	6b 81       	ldd	r22, Y+3	; 0x03
    2810:	7c 81       	ldd	r23, Y+4	; 0x04
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__subsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9c 01       	movw	r18, r24
    2834:	ad 01       	movw	r20, r26
    2836:	c7 01       	movw	r24, r14
    2838:	b6 01       	movw	r22, r12
    283a:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__fixsfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	98 87       	std	Y+8, r25	; 0x08
    2850:	8f 83       	std	Y+7, r24	; 0x07
	
	tmp_log = log(ntc_res/R_REF);
    2852:	8f 81       	ldd	r24, Y+7	; 0x07
    2854:	98 85       	ldd	r25, Y+8	; 0x08
    2856:	09 2e       	mov	r0, r25
    2858:	00 0c       	add	r0, r0
    285a:	aa 0b       	sbc	r26, r26
    285c:	bb 0b       	sbc	r27, r27
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 1f 18 	call	0x303e	; 0x303e <__floatsisf>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e4       	ldi	r19, 0x40	; 64
    286e:	4c e1       	ldi	r20, 0x1C	; 28
    2870:	56 e4       	ldi	r21, 0x46	; 70
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <log>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	89 87       	std	Y+9, r24	; 0x09
    288c:	9a 87       	std	Y+10, r25	; 0x0a
    288e:	ab 87       	std	Y+11, r26	; 0x0b
    2890:	bc 87       	std	Y+12, r27	; 0x0c
	temp = 1.0 / ( A1 + B1*tmp_log + C1*tmp_log*tmp_log + D1*tmp_log*tmp_log*tmp_log ) - 273.15;
    2892:	21 ef       	ldi	r18, 0xF1	; 241
    2894:	3b eb       	ldi	r19, 0xBB	; 187
    2896:	46 e8       	ldi	r20, 0x86	; 134
    2898:	59 e3       	ldi	r21, 0x39	; 57
    289a:	69 85       	ldd	r22, Y+9	; 0x09
    289c:	7a 85       	ldd	r23, Y+10	; 0x0a
    289e:	8b 85       	ldd	r24, Y+11	; 0x0b
    28a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28a2:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	2d e0       	ldi	r18, 0x0D	; 13
    28ac:	3f ec       	ldi	r19, 0xCF	; 207
    28ae:	4b e5       	ldi	r20, 0x5B	; 91
    28b0:	5b e3       	ldi	r21, 0x3B	; 59
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__addsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	6c 01       	movw	r12, r24
    28c0:	7d 01       	movw	r14, r26
    28c2:	22 e8       	ldi	r18, 0x82	; 130
    28c4:	35 ed       	ldi	r19, 0xD5	; 213
    28c6:	4f e2       	ldi	r20, 0x2F	; 47
    28c8:	56 e3       	ldi	r21, 0x36	; 54
    28ca:	69 85       	ldd	r22, Y+9	; 0x09
    28cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    28ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d2:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	29 85       	ldd	r18, Y+9	; 0x09
    28dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    28de:	4b 85       	ldd	r20, Y+11	; 0x0b
    28e0:	5c 85       	ldd	r21, Y+12	; 0x0c
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9c 01       	movw	r18, r24
    28f0:	ad 01       	movw	r20, r26
    28f2:	c7 01       	movw	r24, r14
    28f4:	b6 01       	movw	r22, r12
    28f6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__addsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	6c 01       	movw	r12, r24
    2900:	7d 01       	movw	r14, r26
    2902:	2a e6       	ldi	r18, 0x6A	; 106
    2904:	33 e1       	ldi	r19, 0x13	; 19
    2906:	49 e8       	ldi	r20, 0x89	; 137
    2908:	53 e3       	ldi	r21, 0x33	; 51
    290a:	69 85       	ldd	r22, Y+9	; 0x09
    290c:	7a 85       	ldd	r23, Y+10	; 0x0a
    290e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2910:	9c 85       	ldd	r25, Y+12	; 0x0c
    2912:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	29 85       	ldd	r18, Y+9	; 0x09
    291c:	3a 85       	ldd	r19, Y+10	; 0x0a
    291e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2920:	5c 85       	ldd	r21, Y+12	; 0x0c
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	29 85       	ldd	r18, Y+9	; 0x09
    2930:	3a 85       	ldd	r19, Y+10	; 0x0a
    2932:	4b 85       	ldd	r20, Y+11	; 0x0b
    2934:	5c 85       	ldd	r21, Y+12	; 0x0c
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9c 01       	movw	r18, r24
    2944:	ad 01       	movw	r20, r26
    2946:	c7 01       	movw	r24, r14
    2948:	b6 01       	movw	r22, r12
    294a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__addsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9c 01       	movw	r18, r24
    2954:	ad 01       	movw	r20, r26
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	80 e8       	ldi	r24, 0x80	; 128
    295c:	9f e3       	ldi	r25, 0x3F	; 63
    295e:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	23 e3       	ldi	r18, 0x33	; 51
    2968:	33 e9       	ldi	r19, 0x93	; 147
    296a:	48 e8       	ldi	r20, 0x88	; 136
    296c:	53 e4       	ldi	r21, 0x43	; 67
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__subsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <__fixsfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9e 87       	std	Y+14, r25	; 0x0e
    2988:	8d 87       	std	Y+13, r24	; 0x0d
	
	return temp;
    298a:	8d 85       	ldd	r24, Y+13	; 0x0d
    298c:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    298e:	2e 96       	adiw	r28, 0x0e	; 14
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
    29a4:	cf 90       	pop	r12
    29a6:	08 95       	ret

000029a8 <motor_init>:
#include "wyk_step_stick.h"

void motor_init(void)
{
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ENA_DDR |= MOTOR_ENA_PIN;
    29b0:	8a e2       	ldi	r24, 0x2A	; 42
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	2a e2       	ldi	r18, 0x2A	; 42
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	f9 01       	movw	r30, r18
    29ba:	20 81       	ld	r18, Z
    29bc:	20 68       	ori	r18, 0x80	; 128
    29be:	fc 01       	movw	r30, r24
    29c0:	20 83       	st	Z, r18
	MOTOR_DIR_DDR |= MOTOR_DIR_PIN;
    29c2:	8a e2       	ldi	r24, 0x2A	; 42
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	2a e2       	ldi	r18, 0x2A	; 42
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	f9 01       	movw	r30, r18
    29cc:	20 81       	ld	r18, Z
    29ce:	20 62       	ori	r18, 0x20	; 32
    29d0:	fc 01       	movw	r30, r24
    29d2:	20 83       	st	Z, r18
	MOTOR_STEP_DDR |= MOTOR_STEP_PIN;
    29d4:	84 e2       	ldi	r24, 0x24	; 36
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	24 e2       	ldi	r18, 0x24	; 36
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	f9 01       	movw	r30, r18
    29de:	20 81       	ld	r18, Z
    29e0:	28 60       	ori	r18, 0x08	; 8
    29e2:	fc 01       	movw	r30, r24
    29e4:	20 83       	st	Z, r18

	MOTOR_DRIVER_OFF;
    29e6:	8b e2       	ldi	r24, 0x2B	; 43
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	2b e2       	ldi	r18, 0x2B	; 43
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	f9 01       	movw	r30, r18
    29f0:	20 81       	ld	r18, Z
    29f2:	20 68       	ori	r18, 0x80	; 128
    29f4:	fc 01       	movw	r30, r24
    29f6:	20 83       	st	Z, r18
			MOTOR_MS1_1;
			MOTOR_MS2_1;
			MOTOR_MS3_0;
			break;
		default:
			MOTOR_MS1_1;
    29f8:	85 e2       	ldi	r24, 0x25	; 37
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	25 e2       	ldi	r18, 0x25	; 37
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	f9 01       	movw	r30, r18
    2a02:	20 81       	ld	r18, Z
    2a04:	21 60       	ori	r18, 0x01	; 1
    2a06:	fc 01       	movw	r30, r24
    2a08:	20 83       	st	Z, r18
			MOTOR_MS2_1;
    2a0a:	85 e2       	ldi	r24, 0x25	; 37
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	25 e2       	ldi	r18, 0x25	; 37
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	f9 01       	movw	r30, r18
    2a14:	20 81       	ld	r18, Z
    2a16:	22 60       	ori	r18, 0x02	; 2
    2a18:	fc 01       	movw	r30, r24
    2a1a:	20 83       	st	Z, r18
			MOTOR_MS3_1;
    2a1c:	85 e2       	ldi	r24, 0x25	; 37
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	25 e2       	ldi	r18, 0x25	; 37
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	f9 01       	movw	r30, r18
    2a26:	20 81       	ld	r18, Z
    2a28:	24 60       	ori	r18, 0x04	; 4
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	20 83       	st	Z, r18
	}

	

	TCCR2A = (1<<COM2A0) | (1<<WGM21);				// toggle OCR2A CTC mode
    2a2e:	80 eb       	ldi	r24, 0xB0	; 176
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	22 e4       	ldi	r18, 0x42	; 66
    2a34:	fc 01       	movw	r30, r24
    2a36:	20 83       	st	Z, r18
	TCCR2B = 0;										// clock off
    2a38:	81 eb       	ldi	r24, 0xB1	; 177
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	10 82       	st	Z, r1
	OCR2A = 0;
    2a40:	83 eb       	ldi	r24, 0xB3	; 179
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	fc 01       	movw	r30, r24
    2a46:	10 82       	st	Z, r1
	TCNT2 = 0;
    2a48:	82 eb       	ldi	r24, 0xB2	; 178
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	10 82       	st	Z, r1
	MOTOR_DIR0;
    2a50:	8b e2       	ldi	r24, 0x2B	; 43
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	2b e2       	ldi	r18, 0x2B	; 43
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	f9 01       	movw	r30, r18
    2a5a:	20 81       	ld	r18, Z
    2a5c:	2f 7d       	andi	r18, 0xDF	; 223
    2a5e:	fc 01       	movw	r30, r24
    2a60:	20 83       	st	Z, r18
}
    2a62:	00 00       	nop
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	08 95       	ret

00002a6a <motor_set_rpm>:

void motor_set_rpm(uint16_t rpm)					// rote per minute
{
    2a6a:	8f 92       	push	r8
    2a6c:	9f 92       	push	r9
    2a6e:	af 92       	push	r10
    2a70:	bf 92       	push	r11
    2a72:	cf 92       	push	r12
    2a74:	df 92       	push	r13
    2a76:	ef 92       	push	r14
    2a78:	ff 92       	push	r15
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	6a 97       	sbiw	r28, 0x1a	; 26
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a90:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t buf;
	const uint32_t freq = F_CPU*60;
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	98 ea       	ldi	r25, 0xA8	; 168
    2a96:	a4 ed       	ldi	r26, 0xD4	; 212
    2a98:	b5 e5       	ldi	r27, 0x55	; 85
    2a9a:	8a 83       	std	Y+2, r24	; 0x02
    2a9c:	9b 83       	std	Y+3, r25	; 0x03
    2a9e:	ac 83       	std	Y+4, r26	; 0x04
    2aa0:	bd 83       	std	Y+5, r27	; 0x05
	const uint16_t div[] = {1, 8, 32, 64, 128, 256, 1024};
    2aa2:	8e e0       	ldi	r24, 0x0E	; 14
    2aa4:	e5 eb       	ldi	r30, 0xB5	; 181
    2aa6:	f2 e0       	ldi	r31, 0x02	; 2
    2aa8:	de 01       	movw	r26, r28
    2aaa:	1b 96       	adiw	r26, 0x0b	; 11
    2aac:	01 90       	ld	r0, Z+
    2aae:	0d 92       	st	X+, r0
    2ab0:	8a 95       	dec	r24
    2ab2:	e1 f7       	brne	.-8      	; 0x2aac <motor_set_rpm+0x42>
	const uint8_t div_len = 7;
    2ab4:	87 e0       	ldi	r24, 0x07	; 7
    2ab6:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t i;

	if (rpm)
    2ab8:	89 8d       	ldd	r24, Y+25	; 0x19
    2aba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2abc:	89 2b       	or	r24, r25
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <motor_set_rpm+0x58>
    2ac0:	94 c0       	rjmp	.+296    	; 0x2bea <motor_set_rpm+0x180>
	{
		for (i=0; i<div_len; i++)
    2ac2:	19 82       	std	Y+1, r1	; 0x01
    2ac4:	8c c0       	rjmp	.+280    	; 0x2bde <motor_set_rpm+0x174>
		{
			buf = freq / ( ((uint32_t)rpm) * MOTOR_PERIOD * 2 * div[i] );
    2ac6:	6a 81       	ldd	r22, Y+2	; 0x02
    2ac8:	7b 81       	ldd	r23, Y+3	; 0x03
    2aca:	8c 81       	ldd	r24, Y+4	; 0x04
    2acc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ace:	0e 94 1d 18 	call	0x303a	; 0x303a <__floatunsisf>
    2ad2:	6b 01       	movw	r12, r22
    2ad4:	7c 01       	movw	r14, r24
    2ad6:	89 8d       	ldd	r24, Y+25	; 0x19
    2ad8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ada:	9c 01       	movw	r18, r24
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	88 e6       	ldi	r24, 0x68	; 104
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	0e 94 2f 1a 	call	0x345e	; 0x345e <__muluhisi3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 1d 18 	call	0x303a	; 0x303a <__floatunsisf>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	26 e6       	ldi	r18, 0x66	; 102
    2afc:	36 e6       	ldi	r19, 0x66	; 102
    2afe:	46 ee       	ldi	r20, 0xE6	; 230
    2b00:	5d e3       	ldi	r21, 0x3D	; 61
    2b02:	bc 01       	movw	r22, r24
    2b04:	cd 01       	movw	r24, r26
    2b06:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9c 01       	movw	r18, r24
    2b10:	ad 01       	movw	r20, r26
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__addsf3>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	4c 01       	movw	r8, r24
    2b20:	5d 01       	movw	r10, r26
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	9e 01       	movw	r18, r28
    2b2e:	2f 5f       	subi	r18, 0xFF	; 255
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	82 0f       	add	r24, r18
    2b34:	93 1f       	adc	r25, r19
    2b36:	0a 96       	adiw	r24, 0x0a	; 10
    2b38:	fc 01       	movw	r30, r24
    2b3a:	80 81       	ld	r24, Z
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	cc 01       	movw	r24, r24
    2b40:	a0 e0       	ldi	r26, 0x00	; 0
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 1d 18 	call	0x303a	; 0x303a <__floatunsisf>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	9c 01       	movw	r18, r24
    2b52:	ad 01       	movw	r20, r26
    2b54:	c5 01       	movw	r24, r10
    2b56:	b4 01       	movw	r22, r8
    2b58:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9c 01       	movw	r18, r24
    2b62:	ad 01       	movw	r20, r26
    2b64:	c7 01       	movw	r24, r14
    2b66:	b6 01       	movw	r22, r12
    2b68:	0e 94 75 17 	call	0x2eea	; 0x2eea <__divsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8f 83       	std	Y+7, r24	; 0x07
    2b7e:	98 87       	std	Y+8, r25	; 0x08
    2b80:	a9 87       	std	Y+9, r26	; 0x09
    2b82:	ba 87       	std	Y+10, r27	; 0x0a
			if (buf < 0xFF && buf > 0)
    2b84:	8f 81       	ldd	r24, Y+7	; 0x07
    2b86:	98 85       	ldd	r25, Y+8	; 0x08
    2b88:	a9 85       	ldd	r26, Y+9	; 0x09
    2b8a:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b8c:	8f 3f       	cpi	r24, 0xFF	; 255
    2b8e:	91 05       	cpc	r25, r1
    2b90:	a1 05       	cpc	r26, r1
    2b92:	b1 05       	cpc	r27, r1
    2b94:	08 f5       	brcc	.+66     	; 0x2bd8 <motor_set_rpm+0x16e>
    2b96:	8f 81       	ldd	r24, Y+7	; 0x07
    2b98:	98 85       	ldd	r25, Y+8	; 0x08
    2b9a:	a9 85       	ldd	r26, Y+9	; 0x09
    2b9c:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b9e:	89 2b       	or	r24, r25
    2ba0:	8a 2b       	or	r24, r26
    2ba2:	8b 2b       	or	r24, r27
    2ba4:	c9 f0       	breq	.+50     	; 0x2bd8 <motor_set_rpm+0x16e>
			{
				TCCR2B = i+1;						// clock/div[i]
    2ba6:	81 eb       	ldi	r24, 0xB1	; 177
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	29 81       	ldd	r18, Y+1	; 0x01
    2bac:	2f 5f       	subi	r18, 0xFF	; 255
    2bae:	fc 01       	movw	r30, r24
    2bb0:	20 83       	st	Z, r18
				OCR2A = (uint8_t )buf;
    2bb2:	83 eb       	ldi	r24, 0xB3	; 179
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	2f 81       	ldd	r18, Y+7	; 0x07
    2bb8:	fc 01       	movw	r30, r24
    2bba:	20 83       	st	Z, r18
				TCNT2 = 0;
    2bbc:	82 eb       	ldi	r24, 0xB2	; 178
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	10 82       	st	Z, r1
				MOTOR_DRIVER_ON;
    2bc4:	8b e2       	ldi	r24, 0x2B	; 43
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	2b e2       	ldi	r18, 0x2B	; 43
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	f9 01       	movw	r30, r18
    2bce:	20 81       	ld	r18, Z
    2bd0:	2f 77       	andi	r18, 0x7F	; 127
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	20 83       	st	Z, r18
				break;
    2bd6:	16 c0       	rjmp	.+44     	; 0x2c04 <motor_set_rpm+0x19a>

	uint8_t i;

	if (rpm)
	{
		for (i=0; i<div_len; i++)
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	8f 5f       	subi	r24, 0xFF	; 255
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	99 81       	ldd	r25, Y+1	; 0x01
    2be0:	8e 81       	ldd	r24, Y+6	; 0x06
    2be2:	98 17       	cp	r25, r24
    2be4:	08 f4       	brcc	.+2      	; 0x2be8 <motor_set_rpm+0x17e>
    2be6:	6f cf       	rjmp	.-290    	; 0x2ac6 <motor_set_rpm+0x5c>
    2be8:	0d c0       	rjmp	.+26     	; 0x2c04 <motor_set_rpm+0x19a>
			}
		}
	}
	else
	{
		TCCR2B = 0x00;
    2bea:	81 eb       	ldi	r24, 0xB1	; 177
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	fc 01       	movw	r30, r24
    2bf0:	10 82       	st	Z, r1
		MOTOR_DRIVER_OFF;
    2bf2:	8b e2       	ldi	r24, 0x2B	; 43
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	2b e2       	ldi	r18, 0x2B	; 43
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	20 81       	ld	r18, Z
    2bfe:	20 68       	ori	r18, 0x80	; 128
    2c00:	fc 01       	movw	r30, r24
    2c02:	20 83       	st	Z, r18
	}
	actual_rmp = rpm;
    2c04:	89 8d       	ldd	r24, Y+25	; 0x19
    2c06:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c08:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <actual_rmp+0x1>
    2c0c:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <actual_rmp>
}
    2c10:	00 00       	nop
    2c12:	6a 96       	adiw	r28, 0x1a	; 26
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	9f 90       	pop	r9
    2c30:	8f 90       	pop	r8
    2c32:	08 95       	ret

00002c34 <motor_smoothly_rmp>:


void motor_smoothly_rmp(uint16_t rpm_start, uint16_t rpm_end)
{
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	65 97       	sbiw	r28, 0x15	; 21
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	9b 8b       	std	Y+19, r25	; 0x13
    2c4a:	8a 8b       	std	Y+18, r24	; 0x12
    2c4c:	7d 8b       	std	Y+21, r23	; 0x15
    2c4e:	6c 8b       	std	Y+20, r22	; 0x14
	uint16_t rpm;
	int8_t step;
	
	if (rpm_start < rpm_end)
    2c50:	2a 89       	ldd	r18, Y+18	; 0x12
    2c52:	3b 89       	ldd	r19, Y+19	; 0x13
    2c54:	8c 89       	ldd	r24, Y+20	; 0x14
    2c56:	9d 89       	ldd	r25, Y+21	; 0x15
    2c58:	28 17       	cp	r18, r24
    2c5a:	39 07       	cpc	r19, r25
    2c5c:	18 f4       	brcc	.+6      	; 0x2c64 <motor_smoothly_rmp+0x30>
	{
		step = 1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	8b 83       	std	Y+3, r24	; 0x03
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <motor_smoothly_rmp+0x34>
	}
	else
	{
		step = -1;
    2c64:	8f ef       	ldi	r24, 0xFF	; 255
    2c66:	8b 83       	std	Y+3, r24	; 0x03
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2c68:	8a 89       	ldd	r24, Y+18	; 0x12
    2c6a:	9b 89       	ldd	r25, Y+19	; 0x13
    2c6c:	9a 83       	std	Y+2, r25	; 0x02
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	a5 c0       	rjmp	.+330    	; 0x2dbc <motor_smoothly_rmp+0x188>
	{
		user_profile.rpm = rpm;
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	9a 81       	ldd	r25, Y+2	; 0x02
    2c76:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
    2c7a:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
		if (!(user_profile.rpm % 20))
    2c7e:	40 91 cb 02 	lds	r20, 0x02CB	; 0x8002cb <user_profile>
    2c82:	50 91 cc 02 	lds	r21, 0x02CC	; 0x8002cc <user_profile+0x1>
    2c86:	9a 01       	movw	r18, r20
    2c88:	ad ec       	ldi	r26, 0xCD	; 205
    2c8a:	bc ec       	ldi	r27, 0xCC	; 204
    2c8c:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    2c90:	92 95       	swap	r25
    2c92:	82 95       	swap	r24
    2c94:	8f 70       	andi	r24, 0x0F	; 15
    2c96:	89 27       	eor	r24, r25
    2c98:	9f 70       	andi	r25, 0x0F	; 15
    2c9a:	89 27       	eor	r24, r25
    2c9c:	64 e1       	ldi	r22, 0x14	; 20
    2c9e:	68 9f       	mul	r22, r24
    2ca0:	90 01       	movw	r18, r0
    2ca2:	69 9f       	mul	r22, r25
    2ca4:	30 0d       	add	r19, r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	ca 01       	movw	r24, r20
    2caa:	82 1b       	sub	r24, r18
    2cac:	93 0b       	sbc	r25, r19
    2cae:	89 2b       	or	r24, r25
    2cb0:	19 f4       	brne	.+6      	; 0x2cb8 <motor_smoothly_rmp+0x84>
			TUI('s');
    2cb2:	83 e7       	ldi	r24, 0x73	; 115
    2cb4:	0e 94 08 03 	call	0x610	; 0x610 <TUI>
		motor_set_rpm(user_profile.rpm);
    2cb8:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
    2cbc:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
    2cc0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <motor_set_rpm>
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	a0 ef       	ldi	r26, 0xF0	; 240
    2cca:	b1 e4       	ldi	r27, 0x41	; 65
    2ccc:	8c 83       	std	Y+4, r24	; 0x04
    2cce:	9d 83       	std	Y+5, r25	; 0x05
    2cd0:	ae 83       	std	Y+6, r26	; 0x06
    2cd2:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e8       	ldi	r19, 0x80	; 128
    2cd8:	4b eb       	ldi	r20, 0xBB	; 187
    2cda:	55 e4       	ldi	r21, 0x45	; 69
    2cdc:	6c 81       	ldd	r22, Y+4	; 0x04
    2cde:	7d 81       	ldd	r23, Y+5	; 0x05
    2ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce4:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	88 87       	std	Y+8, r24	; 0x08
    2cee:	99 87       	std	Y+9, r25	; 0x09
    2cf0:	aa 87       	std	Y+10, r26	; 0x0a
    2cf2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e8       	ldi	r20, 0x80	; 128
    2cfa:	5f e3       	ldi	r21, 0x3F	; 63
    2cfc:	68 85       	ldd	r22, Y+8	; 0x08
    2cfe:	79 85       	ldd	r23, Y+9	; 0x09
    2d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d04:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__cmpsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	2c f4       	brge	.+10     	; 0x2d16 <motor_smoothly_rmp+0xe2>
		__ticks = 1;
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9d 87       	std	Y+13, r25	; 0x0d
    2d12:	8c 87       	std	Y+12, r24	; 0x0c
    2d14:	3f c0       	rjmp	.+126    	; 0x2d94 <motor_smoothly_rmp+0x160>
	else if (__tmp > 65535)
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	4f e7       	ldi	r20, 0x7F	; 127
    2d1c:	57 e4       	ldi	r21, 0x47	; 71
    2d1e:	68 85       	ldd	r22, Y+8	; 0x08
    2d20:	79 85       	ldd	r23, Y+9	; 0x09
    2d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d26:	0e 94 cf 18 	call	0x319e	; 0x319e <__gesf2>
    2d2a:	18 16       	cp	r1, r24
    2d2c:	4c f5       	brge	.+82     	; 0x2d80 <motor_smoothly_rmp+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	6c 81       	ldd	r22, Y+4	; 0x04
    2d38:	7d 81       	ldd	r23, Y+5	; 0x05
    2d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d3e:	0e 94 24 19 	call	0x3248	; 0x3248 <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9d 87       	std	Y+13, r25	; 0x0d
    2d54:	8c 87       	std	Y+12, r24	; 0x0c
    2d56:	0f c0       	rjmp	.+30     	; 0x2d76 <motor_smoothly_rmp+0x142>
    2d58:	88 e5       	ldi	r24, 0x58	; 88
    2d5a:	92 e0       	ldi	r25, 0x02	; 2
    2d5c:	9f 87       	std	Y+15, r25	; 0x0f
    2d5e:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d60:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d62:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <motor_smoothly_rmp+0x130>
    2d68:	9f 87       	std	Y+15, r25	; 0x0f
    2d6a:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	9d 87       	std	Y+13, r25	; 0x0d
    2d74:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d76:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d78:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d7a:	89 2b       	or	r24, r25
    2d7c:	69 f7       	brne	.-38     	; 0x2d58 <motor_smoothly_rmp+0x124>
    2d7e:	14 c0       	rjmp	.+40     	; 0x2da8 <motor_smoothly_rmp+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d80:	68 85       	ldd	r22, Y+8	; 0x08
    2d82:	79 85       	ldd	r23, Y+9	; 0x09
    2d84:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d86:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d88:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	9d 87       	std	Y+13, r25	; 0x0d
    2d92:	8c 87       	std	Y+12, r24	; 0x0c
    2d94:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d96:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d98:	99 8b       	std	Y+17, r25	; 0x11
    2d9a:	88 8b       	std	Y+16, r24	; 0x10
    2d9c:	88 89       	ldd	r24, Y+16	; 0x10
    2d9e:	99 89       	ldd	r25, Y+17	; 0x11
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <motor_smoothly_rmp+0x16c>
    2da4:	99 8b       	std	Y+17, r25	; 0x11
    2da6:	88 8b       	std	Y+16, r24	; 0x10
	else
	{
		step = -1;
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	08 2e       	mov	r0, r24
    2dac:	00 0c       	add	r0, r0
    2dae:	99 0b       	sbc	r25, r25
    2db0:	29 81       	ldd	r18, Y+1	; 0x01
    2db2:	3a 81       	ldd	r19, Y+2	; 0x02
    2db4:	82 0f       	add	r24, r18
    2db6:	93 1f       	adc	r25, r19
    2db8:	9a 83       	std	Y+2, r25	; 0x02
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbe:	28 2f       	mov	r18, r24
    2dc0:	88 0f       	add	r24, r24
    2dc2:	33 0b       	sbc	r19, r19
    2dc4:	8c 89       	ldd	r24, Y+20	; 0x14
    2dc6:	9d 89       	ldd	r25, Y+21	; 0x15
    2dc8:	28 0f       	add	r18, r24
    2dca:	39 1f       	adc	r19, r25
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	28 17       	cp	r18, r24
    2dd2:	39 07       	cpc	r19, r25
    2dd4:	59 f0       	breq	.+22     	; 0x2dec <motor_smoothly_rmp+0x1b8>
    2dd6:	8c e3       	ldi	r24, 0x3C	; 60
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	fc 01       	movw	r30, r24
    2ddc:	80 81       	ld	r24, Z
    2dde:	88 2f       	mov	r24, r24
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	81 70       	andi	r24, 0x01	; 1
    2de4:	99 27       	eor	r25, r25
    2de6:	89 2b       	or	r24, r25
    2de8:	09 f4       	brne	.+2      	; 0x2dec <motor_smoothly_rmp+0x1b8>
    2dea:	43 cf       	rjmp	.-378    	; 0x2c72 <motor_smoothly_rmp+0x3e>
		if (!(user_profile.rpm % 20))
			TUI('s');
		motor_set_rpm(user_profile.rpm);
		_delay_ms(30);
	}
	TUI('s');
    2dec:	83 e7       	ldi	r24, 0x73	; 115
    2dee:	0e 94 08 03 	call	0x610	; 0x610 <TUI>
}
    2df2:	00 00       	nop
    2df4:	65 96       	adiw	r28, 0x15	; 21
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	08 95       	ret

00002e06 <__subsf3>:
    2e06:	50 58       	subi	r21, 0x80	; 128

00002e08 <__addsf3>:
    2e08:	bb 27       	eor	r27, r27
    2e0a:	aa 27       	eor	r26, r26
    2e0c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__addsf3x>
    2e10:	0c 94 95 18 	jmp	0x312a	; 0x312a <__fp_round>
    2e14:	0e 94 87 18 	call	0x310e	; 0x310e <__fp_pscA>
    2e18:	38 f0       	brcs	.+14     	; 0x2e28 <__addsf3+0x20>
    2e1a:	0e 94 8e 18 	call	0x311c	; 0x311c <__fp_pscB>
    2e1e:	20 f0       	brcs	.+8      	; 0x2e28 <__addsf3+0x20>
    2e20:	39 f4       	brne	.+14     	; 0x2e30 <__addsf3+0x28>
    2e22:	9f 3f       	cpi	r25, 0xFF	; 255
    2e24:	19 f4       	brne	.+6      	; 0x2e2c <__addsf3+0x24>
    2e26:	26 f4       	brtc	.+8      	; 0x2e30 <__addsf3+0x28>
    2e28:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__fp_nan>
    2e2c:	0e f4       	brtc	.+2      	; 0x2e30 <__addsf3+0x28>
    2e2e:	e0 95       	com	r30
    2e30:	e7 fb       	bst	r30, 7
    2e32:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__fp_inf>

00002e36 <__addsf3x>:
    2e36:	e9 2f       	mov	r30, r25
    2e38:	0e 94 a6 18 	call	0x314c	; 0x314c <__fp_split3>
    2e3c:	58 f3       	brcs	.-42     	; 0x2e14 <__addsf3+0xc>
    2e3e:	ba 17       	cp	r27, r26
    2e40:	62 07       	cpc	r22, r18
    2e42:	73 07       	cpc	r23, r19
    2e44:	84 07       	cpc	r24, r20
    2e46:	95 07       	cpc	r25, r21
    2e48:	20 f0       	brcs	.+8      	; 0x2e52 <__addsf3x+0x1c>
    2e4a:	79 f4       	brne	.+30     	; 0x2e6a <__addsf3x+0x34>
    2e4c:	a6 f5       	brtc	.+104    	; 0x2eb6 <__addsf3x+0x80>
    2e4e:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_zero>
    2e52:	0e f4       	brtc	.+2      	; 0x2e56 <__addsf3x+0x20>
    2e54:	e0 95       	com	r30
    2e56:	0b 2e       	mov	r0, r27
    2e58:	ba 2f       	mov	r27, r26
    2e5a:	a0 2d       	mov	r26, r0
    2e5c:	0b 01       	movw	r0, r22
    2e5e:	b9 01       	movw	r22, r18
    2e60:	90 01       	movw	r18, r0
    2e62:	0c 01       	movw	r0, r24
    2e64:	ca 01       	movw	r24, r20
    2e66:	a0 01       	movw	r20, r0
    2e68:	11 24       	eor	r1, r1
    2e6a:	ff 27       	eor	r31, r31
    2e6c:	59 1b       	sub	r21, r25
    2e6e:	99 f0       	breq	.+38     	; 0x2e96 <__addsf3x+0x60>
    2e70:	59 3f       	cpi	r21, 0xF9	; 249
    2e72:	50 f4       	brcc	.+20     	; 0x2e88 <__addsf3x+0x52>
    2e74:	50 3e       	cpi	r21, 0xE0	; 224
    2e76:	68 f1       	brcs	.+90     	; 0x2ed2 <__addsf3x+0x9c>
    2e78:	1a 16       	cp	r1, r26
    2e7a:	f0 40       	sbci	r31, 0x00	; 0
    2e7c:	a2 2f       	mov	r26, r18
    2e7e:	23 2f       	mov	r18, r19
    2e80:	34 2f       	mov	r19, r20
    2e82:	44 27       	eor	r20, r20
    2e84:	58 5f       	subi	r21, 0xF8	; 248
    2e86:	f3 cf       	rjmp	.-26     	; 0x2e6e <__addsf3x+0x38>
    2e88:	46 95       	lsr	r20
    2e8a:	37 95       	ror	r19
    2e8c:	27 95       	ror	r18
    2e8e:	a7 95       	ror	r26
    2e90:	f0 40       	sbci	r31, 0x00	; 0
    2e92:	53 95       	inc	r21
    2e94:	c9 f7       	brne	.-14     	; 0x2e88 <__addsf3x+0x52>
    2e96:	7e f4       	brtc	.+30     	; 0x2eb6 <__addsf3x+0x80>
    2e98:	1f 16       	cp	r1, r31
    2e9a:	ba 0b       	sbc	r27, r26
    2e9c:	62 0b       	sbc	r22, r18
    2e9e:	73 0b       	sbc	r23, r19
    2ea0:	84 0b       	sbc	r24, r20
    2ea2:	ba f0       	brmi	.+46     	; 0x2ed2 <__addsf3x+0x9c>
    2ea4:	91 50       	subi	r25, 0x01	; 1
    2ea6:	a1 f0       	breq	.+40     	; 0x2ed0 <__addsf3x+0x9a>
    2ea8:	ff 0f       	add	r31, r31
    2eaa:	bb 1f       	adc	r27, r27
    2eac:	66 1f       	adc	r22, r22
    2eae:	77 1f       	adc	r23, r23
    2eb0:	88 1f       	adc	r24, r24
    2eb2:	c2 f7       	brpl	.-16     	; 0x2ea4 <__addsf3x+0x6e>
    2eb4:	0e c0       	rjmp	.+28     	; 0x2ed2 <__addsf3x+0x9c>
    2eb6:	ba 0f       	add	r27, r26
    2eb8:	62 1f       	adc	r22, r18
    2eba:	73 1f       	adc	r23, r19
    2ebc:	84 1f       	adc	r24, r20
    2ebe:	48 f4       	brcc	.+18     	; 0x2ed2 <__addsf3x+0x9c>
    2ec0:	87 95       	ror	r24
    2ec2:	77 95       	ror	r23
    2ec4:	67 95       	ror	r22
    2ec6:	b7 95       	ror	r27
    2ec8:	f7 95       	ror	r31
    2eca:	9e 3f       	cpi	r25, 0xFE	; 254
    2ecc:	08 f0       	brcs	.+2      	; 0x2ed0 <__addsf3x+0x9a>
    2ece:	b0 cf       	rjmp	.-160    	; 0x2e30 <__addsf3+0x28>
    2ed0:	93 95       	inc	r25
    2ed2:	88 0f       	add	r24, r24
    2ed4:	08 f0       	brcs	.+2      	; 0x2ed8 <__addsf3x+0xa2>
    2ed6:	99 27       	eor	r25, r25
    2ed8:	ee 0f       	add	r30, r30
    2eda:	97 95       	ror	r25
    2edc:	87 95       	ror	r24
    2ede:	08 95       	ret

00002ee0 <__cmpsf2>:
    2ee0:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__fp_cmp>
    2ee4:	08 f4       	brcc	.+2      	; 0x2ee8 <__cmpsf2+0x8>
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	08 95       	ret

00002eea <__divsf3>:
    2eea:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__divsf3x>
    2eee:	0c 94 95 18 	jmp	0x312a	; 0x312a <__fp_round>
    2ef2:	0e 94 8e 18 	call	0x311c	; 0x311c <__fp_pscB>
    2ef6:	58 f0       	brcs	.+22     	; 0x2f0e <__divsf3+0x24>
    2ef8:	0e 94 87 18 	call	0x310e	; 0x310e <__fp_pscA>
    2efc:	40 f0       	brcs	.+16     	; 0x2f0e <__divsf3+0x24>
    2efe:	29 f4       	brne	.+10     	; 0x2f0a <__divsf3+0x20>
    2f00:	5f 3f       	cpi	r21, 0xFF	; 255
    2f02:	29 f0       	breq	.+10     	; 0x2f0e <__divsf3+0x24>
    2f04:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__fp_inf>
    2f08:	51 11       	cpse	r21, r1
    2f0a:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__fp_szero>
    2f0e:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__fp_nan>

00002f12 <__divsf3x>:
    2f12:	0e 94 a6 18 	call	0x314c	; 0x314c <__fp_split3>
    2f16:	68 f3       	brcs	.-38     	; 0x2ef2 <__divsf3+0x8>

00002f18 <__divsf3_pse>:
    2f18:	99 23       	and	r25, r25
    2f1a:	b1 f3       	breq	.-20     	; 0x2f08 <__divsf3+0x1e>
    2f1c:	55 23       	and	r21, r21
    2f1e:	91 f3       	breq	.-28     	; 0x2f04 <__divsf3+0x1a>
    2f20:	95 1b       	sub	r25, r21
    2f22:	55 0b       	sbc	r21, r21
    2f24:	bb 27       	eor	r27, r27
    2f26:	aa 27       	eor	r26, r26
    2f28:	62 17       	cp	r22, r18
    2f2a:	73 07       	cpc	r23, r19
    2f2c:	84 07       	cpc	r24, r20
    2f2e:	38 f0       	brcs	.+14     	; 0x2f3e <__divsf3_pse+0x26>
    2f30:	9f 5f       	subi	r25, 0xFF	; 255
    2f32:	5f 4f       	sbci	r21, 0xFF	; 255
    2f34:	22 0f       	add	r18, r18
    2f36:	33 1f       	adc	r19, r19
    2f38:	44 1f       	adc	r20, r20
    2f3a:	aa 1f       	adc	r26, r26
    2f3c:	a9 f3       	breq	.-22     	; 0x2f28 <__divsf3_pse+0x10>
    2f3e:	35 d0       	rcall	.+106    	; 0x2faa <__divsf3_pse+0x92>
    2f40:	0e 2e       	mov	r0, r30
    2f42:	3a f0       	brmi	.+14     	; 0x2f52 <__divsf3_pse+0x3a>
    2f44:	e0 e8       	ldi	r30, 0x80	; 128
    2f46:	32 d0       	rcall	.+100    	; 0x2fac <__divsf3_pse+0x94>
    2f48:	91 50       	subi	r25, 0x01	; 1
    2f4a:	50 40       	sbci	r21, 0x00	; 0
    2f4c:	e6 95       	lsr	r30
    2f4e:	00 1c       	adc	r0, r0
    2f50:	ca f7       	brpl	.-14     	; 0x2f44 <__divsf3_pse+0x2c>
    2f52:	2b d0       	rcall	.+86     	; 0x2faa <__divsf3_pse+0x92>
    2f54:	fe 2f       	mov	r31, r30
    2f56:	29 d0       	rcall	.+82     	; 0x2faa <__divsf3_pse+0x92>
    2f58:	66 0f       	add	r22, r22
    2f5a:	77 1f       	adc	r23, r23
    2f5c:	88 1f       	adc	r24, r24
    2f5e:	bb 1f       	adc	r27, r27
    2f60:	26 17       	cp	r18, r22
    2f62:	37 07       	cpc	r19, r23
    2f64:	48 07       	cpc	r20, r24
    2f66:	ab 07       	cpc	r26, r27
    2f68:	b0 e8       	ldi	r27, 0x80	; 128
    2f6a:	09 f0       	breq	.+2      	; 0x2f6e <__divsf3_pse+0x56>
    2f6c:	bb 0b       	sbc	r27, r27
    2f6e:	80 2d       	mov	r24, r0
    2f70:	bf 01       	movw	r22, r30
    2f72:	ff 27       	eor	r31, r31
    2f74:	93 58       	subi	r25, 0x83	; 131
    2f76:	5f 4f       	sbci	r21, 0xFF	; 255
    2f78:	3a f0       	brmi	.+14     	; 0x2f88 <__divsf3_pse+0x70>
    2f7a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f7c:	51 05       	cpc	r21, r1
    2f7e:	78 f0       	brcs	.+30     	; 0x2f9e <__divsf3_pse+0x86>
    2f80:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__fp_inf>
    2f84:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__fp_szero>
    2f88:	5f 3f       	cpi	r21, 0xFF	; 255
    2f8a:	e4 f3       	brlt	.-8      	; 0x2f84 <__divsf3_pse+0x6c>
    2f8c:	98 3e       	cpi	r25, 0xE8	; 232
    2f8e:	d4 f3       	brlt	.-12     	; 0x2f84 <__divsf3_pse+0x6c>
    2f90:	86 95       	lsr	r24
    2f92:	77 95       	ror	r23
    2f94:	67 95       	ror	r22
    2f96:	b7 95       	ror	r27
    2f98:	f7 95       	ror	r31
    2f9a:	9f 5f       	subi	r25, 0xFF	; 255
    2f9c:	c9 f7       	brne	.-14     	; 0x2f90 <__divsf3_pse+0x78>
    2f9e:	88 0f       	add	r24, r24
    2fa0:	91 1d       	adc	r25, r1
    2fa2:	96 95       	lsr	r25
    2fa4:	87 95       	ror	r24
    2fa6:	97 f9       	bld	r25, 7
    2fa8:	08 95       	ret
    2faa:	e1 e0       	ldi	r30, 0x01	; 1
    2fac:	66 0f       	add	r22, r22
    2fae:	77 1f       	adc	r23, r23
    2fb0:	88 1f       	adc	r24, r24
    2fb2:	bb 1f       	adc	r27, r27
    2fb4:	62 17       	cp	r22, r18
    2fb6:	73 07       	cpc	r23, r19
    2fb8:	84 07       	cpc	r24, r20
    2fba:	ba 07       	cpc	r27, r26
    2fbc:	20 f0       	brcs	.+8      	; 0x2fc6 <__divsf3_pse+0xae>
    2fbe:	62 1b       	sub	r22, r18
    2fc0:	73 0b       	sbc	r23, r19
    2fc2:	84 0b       	sbc	r24, r20
    2fc4:	ba 0b       	sbc	r27, r26
    2fc6:	ee 1f       	adc	r30, r30
    2fc8:	88 f7       	brcc	.-30     	; 0x2fac <__divsf3_pse+0x94>
    2fca:	e0 95       	com	r30
    2fcc:	08 95       	ret

00002fce <__fixsfsi>:
    2fce:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__fixunssfsi>
    2fd2:	68 94       	set
    2fd4:	b1 11       	cpse	r27, r1
    2fd6:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__fp_szero>
    2fda:	08 95       	ret

00002fdc <__fixunssfsi>:
    2fdc:	0e 94 ae 18 	call	0x315c	; 0x315c <__fp_splitA>
    2fe0:	88 f0       	brcs	.+34     	; 0x3004 <__fixunssfsi+0x28>
    2fe2:	9f 57       	subi	r25, 0x7F	; 127
    2fe4:	98 f0       	brcs	.+38     	; 0x300c <__fixunssfsi+0x30>
    2fe6:	b9 2f       	mov	r27, r25
    2fe8:	99 27       	eor	r25, r25
    2fea:	b7 51       	subi	r27, 0x17	; 23
    2fec:	b0 f0       	brcs	.+44     	; 0x301a <__fixunssfsi+0x3e>
    2fee:	e1 f0       	breq	.+56     	; 0x3028 <__fixunssfsi+0x4c>
    2ff0:	66 0f       	add	r22, r22
    2ff2:	77 1f       	adc	r23, r23
    2ff4:	88 1f       	adc	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	1a f0       	brmi	.+6      	; 0x3000 <__fixunssfsi+0x24>
    2ffa:	ba 95       	dec	r27
    2ffc:	c9 f7       	brne	.-14     	; 0x2ff0 <__fixunssfsi+0x14>
    2ffe:	14 c0       	rjmp	.+40     	; 0x3028 <__fixunssfsi+0x4c>
    3000:	b1 30       	cpi	r27, 0x01	; 1
    3002:	91 f0       	breq	.+36     	; 0x3028 <__fixunssfsi+0x4c>
    3004:	0e 94 c8 18 	call	0x3190	; 0x3190 <__fp_zero>
    3008:	b1 e0       	ldi	r27, 0x01	; 1
    300a:	08 95       	ret
    300c:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_zero>
    3010:	67 2f       	mov	r22, r23
    3012:	78 2f       	mov	r23, r24
    3014:	88 27       	eor	r24, r24
    3016:	b8 5f       	subi	r27, 0xF8	; 248
    3018:	39 f0       	breq	.+14     	; 0x3028 <__fixunssfsi+0x4c>
    301a:	b9 3f       	cpi	r27, 0xF9	; 249
    301c:	cc f3       	brlt	.-14     	; 0x3010 <__fixunssfsi+0x34>
    301e:	86 95       	lsr	r24
    3020:	77 95       	ror	r23
    3022:	67 95       	ror	r22
    3024:	b3 95       	inc	r27
    3026:	d9 f7       	brne	.-10     	; 0x301e <__fixunssfsi+0x42>
    3028:	3e f4       	brtc	.+14     	; 0x3038 <__fixunssfsi+0x5c>
    302a:	90 95       	com	r25
    302c:	80 95       	com	r24
    302e:	70 95       	com	r23
    3030:	61 95       	neg	r22
    3032:	7f 4f       	sbci	r23, 0xFF	; 255
    3034:	8f 4f       	sbci	r24, 0xFF	; 255
    3036:	9f 4f       	sbci	r25, 0xFF	; 255
    3038:	08 95       	ret

0000303a <__floatunsisf>:
    303a:	e8 94       	clt
    303c:	09 c0       	rjmp	.+18     	; 0x3050 <__floatsisf+0x12>

0000303e <__floatsisf>:
    303e:	97 fb       	bst	r25, 7
    3040:	3e f4       	brtc	.+14     	; 0x3050 <__floatsisf+0x12>
    3042:	90 95       	com	r25
    3044:	80 95       	com	r24
    3046:	70 95       	com	r23
    3048:	61 95       	neg	r22
    304a:	7f 4f       	sbci	r23, 0xFF	; 255
    304c:	8f 4f       	sbci	r24, 0xFF	; 255
    304e:	9f 4f       	sbci	r25, 0xFF	; 255
    3050:	99 23       	and	r25, r25
    3052:	a9 f0       	breq	.+42     	; 0x307e <__floatsisf+0x40>
    3054:	f9 2f       	mov	r31, r25
    3056:	96 e9       	ldi	r25, 0x96	; 150
    3058:	bb 27       	eor	r27, r27
    305a:	93 95       	inc	r25
    305c:	f6 95       	lsr	r31
    305e:	87 95       	ror	r24
    3060:	77 95       	ror	r23
    3062:	67 95       	ror	r22
    3064:	b7 95       	ror	r27
    3066:	f1 11       	cpse	r31, r1
    3068:	f8 cf       	rjmp	.-16     	; 0x305a <__floatsisf+0x1c>
    306a:	fa f4       	brpl	.+62     	; 0x30aa <__floatsisf+0x6c>
    306c:	bb 0f       	add	r27, r27
    306e:	11 f4       	brne	.+4      	; 0x3074 <__floatsisf+0x36>
    3070:	60 ff       	sbrs	r22, 0
    3072:	1b c0       	rjmp	.+54     	; 0x30aa <__floatsisf+0x6c>
    3074:	6f 5f       	subi	r22, 0xFF	; 255
    3076:	7f 4f       	sbci	r23, 0xFF	; 255
    3078:	8f 4f       	sbci	r24, 0xFF	; 255
    307a:	9f 4f       	sbci	r25, 0xFF	; 255
    307c:	16 c0       	rjmp	.+44     	; 0x30aa <__floatsisf+0x6c>
    307e:	88 23       	and	r24, r24
    3080:	11 f0       	breq	.+4      	; 0x3086 <__floatsisf+0x48>
    3082:	96 e9       	ldi	r25, 0x96	; 150
    3084:	11 c0       	rjmp	.+34     	; 0x30a8 <__floatsisf+0x6a>
    3086:	77 23       	and	r23, r23
    3088:	21 f0       	breq	.+8      	; 0x3092 <__floatsisf+0x54>
    308a:	9e e8       	ldi	r25, 0x8E	; 142
    308c:	87 2f       	mov	r24, r23
    308e:	76 2f       	mov	r23, r22
    3090:	05 c0       	rjmp	.+10     	; 0x309c <__floatsisf+0x5e>
    3092:	66 23       	and	r22, r22
    3094:	71 f0       	breq	.+28     	; 0x30b2 <__floatsisf+0x74>
    3096:	96 e8       	ldi	r25, 0x86	; 134
    3098:	86 2f       	mov	r24, r22
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	2a f0       	brmi	.+10     	; 0x30aa <__floatsisf+0x6c>
    30a0:	9a 95       	dec	r25
    30a2:	66 0f       	add	r22, r22
    30a4:	77 1f       	adc	r23, r23
    30a6:	88 1f       	adc	r24, r24
    30a8:	da f7       	brpl	.-10     	; 0x30a0 <__floatsisf+0x62>
    30aa:	88 0f       	add	r24, r24
    30ac:	96 95       	lsr	r25
    30ae:	87 95       	ror	r24
    30b0:	97 f9       	bld	r25, 7
    30b2:	08 95       	ret

000030b4 <__fp_cmp>:
    30b4:	99 0f       	add	r25, r25
    30b6:	00 08       	sbc	r0, r0
    30b8:	55 0f       	add	r21, r21
    30ba:	aa 0b       	sbc	r26, r26
    30bc:	e0 e8       	ldi	r30, 0x80	; 128
    30be:	fe ef       	ldi	r31, 0xFE	; 254
    30c0:	16 16       	cp	r1, r22
    30c2:	17 06       	cpc	r1, r23
    30c4:	e8 07       	cpc	r30, r24
    30c6:	f9 07       	cpc	r31, r25
    30c8:	c0 f0       	brcs	.+48     	; 0x30fa <__fp_cmp+0x46>
    30ca:	12 16       	cp	r1, r18
    30cc:	13 06       	cpc	r1, r19
    30ce:	e4 07       	cpc	r30, r20
    30d0:	f5 07       	cpc	r31, r21
    30d2:	98 f0       	brcs	.+38     	; 0x30fa <__fp_cmp+0x46>
    30d4:	62 1b       	sub	r22, r18
    30d6:	73 0b       	sbc	r23, r19
    30d8:	84 0b       	sbc	r24, r20
    30da:	95 0b       	sbc	r25, r21
    30dc:	39 f4       	brne	.+14     	; 0x30ec <__fp_cmp+0x38>
    30de:	0a 26       	eor	r0, r26
    30e0:	61 f0       	breq	.+24     	; 0x30fa <__fp_cmp+0x46>
    30e2:	23 2b       	or	r18, r19
    30e4:	24 2b       	or	r18, r20
    30e6:	25 2b       	or	r18, r21
    30e8:	21 f4       	brne	.+8      	; 0x30f2 <__fp_cmp+0x3e>
    30ea:	08 95       	ret
    30ec:	0a 26       	eor	r0, r26
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <__fp_cmp+0x3e>
    30f0:	a1 40       	sbci	r26, 0x01	; 1
    30f2:	a6 95       	lsr	r26
    30f4:	8f ef       	ldi	r24, 0xFF	; 255
    30f6:	81 1d       	adc	r24, r1
    30f8:	81 1d       	adc	r24, r1
    30fa:	08 95       	ret

000030fc <__fp_inf>:
    30fc:	97 f9       	bld	r25, 7
    30fe:	9f 67       	ori	r25, 0x7F	; 127
    3100:	80 e8       	ldi	r24, 0x80	; 128
    3102:	70 e0       	ldi	r23, 0x00	; 0
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	08 95       	ret

00003108 <__fp_nan>:
    3108:	9f ef       	ldi	r25, 0xFF	; 255
    310a:	80 ec       	ldi	r24, 0xC0	; 192
    310c:	08 95       	ret

0000310e <__fp_pscA>:
    310e:	00 24       	eor	r0, r0
    3110:	0a 94       	dec	r0
    3112:	16 16       	cp	r1, r22
    3114:	17 06       	cpc	r1, r23
    3116:	18 06       	cpc	r1, r24
    3118:	09 06       	cpc	r0, r25
    311a:	08 95       	ret

0000311c <__fp_pscB>:
    311c:	00 24       	eor	r0, r0
    311e:	0a 94       	dec	r0
    3120:	12 16       	cp	r1, r18
    3122:	13 06       	cpc	r1, r19
    3124:	14 06       	cpc	r1, r20
    3126:	05 06       	cpc	r0, r21
    3128:	08 95       	ret

0000312a <__fp_round>:
    312a:	09 2e       	mov	r0, r25
    312c:	03 94       	inc	r0
    312e:	00 0c       	add	r0, r0
    3130:	11 f4       	brne	.+4      	; 0x3136 <__fp_round+0xc>
    3132:	88 23       	and	r24, r24
    3134:	52 f0       	brmi	.+20     	; 0x314a <__fp_round+0x20>
    3136:	bb 0f       	add	r27, r27
    3138:	40 f4       	brcc	.+16     	; 0x314a <__fp_round+0x20>
    313a:	bf 2b       	or	r27, r31
    313c:	11 f4       	brne	.+4      	; 0x3142 <__fp_round+0x18>
    313e:	60 ff       	sbrs	r22, 0
    3140:	04 c0       	rjmp	.+8      	; 0x314a <__fp_round+0x20>
    3142:	6f 5f       	subi	r22, 0xFF	; 255
    3144:	7f 4f       	sbci	r23, 0xFF	; 255
    3146:	8f 4f       	sbci	r24, 0xFF	; 255
    3148:	9f 4f       	sbci	r25, 0xFF	; 255
    314a:	08 95       	ret

0000314c <__fp_split3>:
    314c:	57 fd       	sbrc	r21, 7
    314e:	90 58       	subi	r25, 0x80	; 128
    3150:	44 0f       	add	r20, r20
    3152:	55 1f       	adc	r21, r21
    3154:	59 f0       	breq	.+22     	; 0x316c <__fp_splitA+0x10>
    3156:	5f 3f       	cpi	r21, 0xFF	; 255
    3158:	71 f0       	breq	.+28     	; 0x3176 <__fp_splitA+0x1a>
    315a:	47 95       	ror	r20

0000315c <__fp_splitA>:
    315c:	88 0f       	add	r24, r24
    315e:	97 fb       	bst	r25, 7
    3160:	99 1f       	adc	r25, r25
    3162:	61 f0       	breq	.+24     	; 0x317c <__fp_splitA+0x20>
    3164:	9f 3f       	cpi	r25, 0xFF	; 255
    3166:	79 f0       	breq	.+30     	; 0x3186 <__fp_splitA+0x2a>
    3168:	87 95       	ror	r24
    316a:	08 95       	ret
    316c:	12 16       	cp	r1, r18
    316e:	13 06       	cpc	r1, r19
    3170:	14 06       	cpc	r1, r20
    3172:	55 1f       	adc	r21, r21
    3174:	f2 cf       	rjmp	.-28     	; 0x315a <__fp_split3+0xe>
    3176:	46 95       	lsr	r20
    3178:	f1 df       	rcall	.-30     	; 0x315c <__fp_splitA>
    317a:	08 c0       	rjmp	.+16     	; 0x318c <__fp_splitA+0x30>
    317c:	16 16       	cp	r1, r22
    317e:	17 06       	cpc	r1, r23
    3180:	18 06       	cpc	r1, r24
    3182:	99 1f       	adc	r25, r25
    3184:	f1 cf       	rjmp	.-30     	; 0x3168 <__fp_splitA+0xc>
    3186:	86 95       	lsr	r24
    3188:	71 05       	cpc	r23, r1
    318a:	61 05       	cpc	r22, r1
    318c:	08 94       	sec
    318e:	08 95       	ret

00003190 <__fp_zero>:
    3190:	e8 94       	clt

00003192 <__fp_szero>:
    3192:	bb 27       	eor	r27, r27
    3194:	66 27       	eor	r22, r22
    3196:	77 27       	eor	r23, r23
    3198:	cb 01       	movw	r24, r22
    319a:	97 f9       	bld	r25, 7
    319c:	08 95       	ret

0000319e <__gesf2>:
    319e:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <__fp_cmp>
    31a2:	08 f4       	brcc	.+2      	; 0x31a6 <__gesf2+0x8>
    31a4:	8f ef       	ldi	r24, 0xFF	; 255
    31a6:	08 95       	ret
    31a8:	16 f0       	brts	.+4      	; 0x31ae <__gesf2+0x10>
    31aa:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__fp_mpack>
    31ae:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__fp_nan>
    31b2:	68 94       	set
    31b4:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__fp_inf>

000031b8 <log>:
    31b8:	0e 94 ae 18 	call	0x315c	; 0x315c <__fp_splitA>
    31bc:	a8 f3       	brcs	.-22     	; 0x31a8 <__gesf2+0xa>
    31be:	99 23       	and	r25, r25
    31c0:	c1 f3       	breq	.-16     	; 0x31b2 <__gesf2+0x14>
    31c2:	ae f3       	brts	.-22     	; 0x31ae <__gesf2+0x10>
    31c4:	df 93       	push	r29
    31c6:	cf 93       	push	r28
    31c8:	1f 93       	push	r17
    31ca:	0f 93       	push	r16
    31cc:	ff 92       	push	r15
    31ce:	c9 2f       	mov	r28, r25
    31d0:	dd 27       	eor	r29, r29
    31d2:	88 23       	and	r24, r24
    31d4:	2a f0       	brmi	.+10     	; 0x31e0 <log+0x28>
    31d6:	21 97       	sbiw	r28, 0x01	; 1
    31d8:	66 0f       	add	r22, r22
    31da:	77 1f       	adc	r23, r23
    31dc:	88 1f       	adc	r24, r24
    31de:	da f7       	brpl	.-10     	; 0x31d6 <log+0x1e>
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	40 e8       	ldi	r20, 0x80	; 128
    31e6:	5f eb       	ldi	r21, 0xBF	; 191
    31e8:	9f e3       	ldi	r25, 0x3F	; 63
    31ea:	88 39       	cpi	r24, 0x98	; 152
    31ec:	20 f0       	brcs	.+8      	; 0x31f6 <log+0x3e>
    31ee:	80 3e       	cpi	r24, 0xE0	; 224
    31f0:	38 f0       	brcs	.+14     	; 0x3200 <log+0x48>
    31f2:	21 96       	adiw	r28, 0x01	; 1
    31f4:	8f 77       	andi	r24, 0x7F	; 127
    31f6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__addsf3>
    31fa:	e8 e6       	ldi	r30, 0x68	; 104
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	04 c0       	rjmp	.+8      	; 0x3208 <log+0x50>
    3200:	0e 94 04 17 	call	0x2e08	; 0x2e08 <__addsf3>
    3204:	e5 e9       	ldi	r30, 0x95	; 149
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	0e 94 9f 19 	call	0x333e	; 0x333e <__fp_powser>
    320c:	8b 01       	movw	r16, r22
    320e:	be 01       	movw	r22, r28
    3210:	ec 01       	movw	r28, r24
    3212:	fb 2e       	mov	r15, r27
    3214:	6f 57       	subi	r22, 0x7F	; 127
    3216:	71 09       	sbc	r23, r1
    3218:	75 95       	asr	r23
    321a:	77 1f       	adc	r23, r23
    321c:	88 0b       	sbc	r24, r24
    321e:	99 0b       	sbc	r25, r25
    3220:	0e 94 1f 18 	call	0x303e	; 0x303e <__floatsisf>
    3224:	28 e1       	ldi	r18, 0x18	; 24
    3226:	32 e7       	ldi	r19, 0x72	; 114
    3228:	41 e3       	ldi	r20, 0x31	; 49
    322a:	5f e3       	ldi	r21, 0x3F	; 63
    322c:	0e 94 37 19 	call	0x326e	; 0x326e <__mulsf3x>
    3230:	af 2d       	mov	r26, r15
    3232:	98 01       	movw	r18, r16
    3234:	ae 01       	movw	r20, r28
    3236:	ff 90       	pop	r15
    3238:	0f 91       	pop	r16
    323a:	1f 91       	pop	r17
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__addsf3x>
    3244:	0c 94 95 18 	jmp	0x312a	; 0x312a <__fp_round>

00003248 <__mulsf3>:
    3248:	0e 94 37 19 	call	0x326e	; 0x326e <__mulsf3x>
    324c:	0c 94 95 18 	jmp	0x312a	; 0x312a <__fp_round>
    3250:	0e 94 87 18 	call	0x310e	; 0x310e <__fp_pscA>
    3254:	38 f0       	brcs	.+14     	; 0x3264 <__mulsf3+0x1c>
    3256:	0e 94 8e 18 	call	0x311c	; 0x311c <__fp_pscB>
    325a:	20 f0       	brcs	.+8      	; 0x3264 <__mulsf3+0x1c>
    325c:	95 23       	and	r25, r21
    325e:	11 f0       	breq	.+4      	; 0x3264 <__mulsf3+0x1c>
    3260:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__fp_inf>
    3264:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__fp_nan>
    3268:	11 24       	eor	r1, r1
    326a:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__fp_szero>

0000326e <__mulsf3x>:
    326e:	0e 94 a6 18 	call	0x314c	; 0x314c <__fp_split3>
    3272:	70 f3       	brcs	.-36     	; 0x3250 <__mulsf3+0x8>

00003274 <__mulsf3_pse>:
    3274:	95 9f       	mul	r25, r21
    3276:	c1 f3       	breq	.-16     	; 0x3268 <__mulsf3+0x20>
    3278:	95 0f       	add	r25, r21
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	55 1f       	adc	r21, r21
    327e:	62 9f       	mul	r22, r18
    3280:	f0 01       	movw	r30, r0
    3282:	72 9f       	mul	r23, r18
    3284:	bb 27       	eor	r27, r27
    3286:	f0 0d       	add	r31, r0
    3288:	b1 1d       	adc	r27, r1
    328a:	63 9f       	mul	r22, r19
    328c:	aa 27       	eor	r26, r26
    328e:	f0 0d       	add	r31, r0
    3290:	b1 1d       	adc	r27, r1
    3292:	aa 1f       	adc	r26, r26
    3294:	64 9f       	mul	r22, r20
    3296:	66 27       	eor	r22, r22
    3298:	b0 0d       	add	r27, r0
    329a:	a1 1d       	adc	r26, r1
    329c:	66 1f       	adc	r22, r22
    329e:	82 9f       	mul	r24, r18
    32a0:	22 27       	eor	r18, r18
    32a2:	b0 0d       	add	r27, r0
    32a4:	a1 1d       	adc	r26, r1
    32a6:	62 1f       	adc	r22, r18
    32a8:	73 9f       	mul	r23, r19
    32aa:	b0 0d       	add	r27, r0
    32ac:	a1 1d       	adc	r26, r1
    32ae:	62 1f       	adc	r22, r18
    32b0:	83 9f       	mul	r24, r19
    32b2:	a0 0d       	add	r26, r0
    32b4:	61 1d       	adc	r22, r1
    32b6:	22 1f       	adc	r18, r18
    32b8:	74 9f       	mul	r23, r20
    32ba:	33 27       	eor	r19, r19
    32bc:	a0 0d       	add	r26, r0
    32be:	61 1d       	adc	r22, r1
    32c0:	23 1f       	adc	r18, r19
    32c2:	84 9f       	mul	r24, r20
    32c4:	60 0d       	add	r22, r0
    32c6:	21 1d       	adc	r18, r1
    32c8:	82 2f       	mov	r24, r18
    32ca:	76 2f       	mov	r23, r22
    32cc:	6a 2f       	mov	r22, r26
    32ce:	11 24       	eor	r1, r1
    32d0:	9f 57       	subi	r25, 0x7F	; 127
    32d2:	50 40       	sbci	r21, 0x00	; 0
    32d4:	9a f0       	brmi	.+38     	; 0x32fc <__mulsf3_pse+0x88>
    32d6:	f1 f0       	breq	.+60     	; 0x3314 <__mulsf3_pse+0xa0>
    32d8:	88 23       	and	r24, r24
    32da:	4a f0       	brmi	.+18     	; 0x32ee <__mulsf3_pse+0x7a>
    32dc:	ee 0f       	add	r30, r30
    32de:	ff 1f       	adc	r31, r31
    32e0:	bb 1f       	adc	r27, r27
    32e2:	66 1f       	adc	r22, r22
    32e4:	77 1f       	adc	r23, r23
    32e6:	88 1f       	adc	r24, r24
    32e8:	91 50       	subi	r25, 0x01	; 1
    32ea:	50 40       	sbci	r21, 0x00	; 0
    32ec:	a9 f7       	brne	.-22     	; 0x32d8 <__mulsf3_pse+0x64>
    32ee:	9e 3f       	cpi	r25, 0xFE	; 254
    32f0:	51 05       	cpc	r21, r1
    32f2:	80 f0       	brcs	.+32     	; 0x3314 <__mulsf3_pse+0xa0>
    32f4:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__fp_inf>
    32f8:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__fp_szero>
    32fc:	5f 3f       	cpi	r21, 0xFF	; 255
    32fe:	e4 f3       	brlt	.-8      	; 0x32f8 <__mulsf3_pse+0x84>
    3300:	98 3e       	cpi	r25, 0xE8	; 232
    3302:	d4 f3       	brlt	.-12     	; 0x32f8 <__mulsf3_pse+0x84>
    3304:	86 95       	lsr	r24
    3306:	77 95       	ror	r23
    3308:	67 95       	ror	r22
    330a:	b7 95       	ror	r27
    330c:	f7 95       	ror	r31
    330e:	e7 95       	ror	r30
    3310:	9f 5f       	subi	r25, 0xFF	; 255
    3312:	c1 f7       	brne	.-16     	; 0x3304 <__mulsf3_pse+0x90>
    3314:	fe 2b       	or	r31, r30
    3316:	88 0f       	add	r24, r24
    3318:	91 1d       	adc	r25, r1
    331a:	96 95       	lsr	r25
    331c:	87 95       	ror	r24
    331e:	97 f9       	bld	r25, 7
    3320:	08 95       	ret

00003322 <__fp_mpack>:
    3322:	9f 3f       	cpi	r25, 0xFF	; 255
    3324:	31 f0       	breq	.+12     	; 0x3332 <__fp_mpack_finite+0xc>

00003326 <__fp_mpack_finite>:
    3326:	91 50       	subi	r25, 0x01	; 1
    3328:	20 f4       	brcc	.+8      	; 0x3332 <__fp_mpack_finite+0xc>
    332a:	87 95       	ror	r24
    332c:	77 95       	ror	r23
    332e:	67 95       	ror	r22
    3330:	b7 95       	ror	r27
    3332:	88 0f       	add	r24, r24
    3334:	91 1d       	adc	r25, r1
    3336:	96 95       	lsr	r25
    3338:	87 95       	ror	r24
    333a:	97 f9       	bld	r25, 7
    333c:	08 95       	ret

0000333e <__fp_powser>:
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	1f 93       	push	r17
    3344:	0f 93       	push	r16
    3346:	ff 92       	push	r15
    3348:	ef 92       	push	r14
    334a:	df 92       	push	r13
    334c:	7b 01       	movw	r14, r22
    334e:	8c 01       	movw	r16, r24
    3350:	68 94       	set
    3352:	06 c0       	rjmp	.+12     	; 0x3360 <__fp_powser+0x22>
    3354:	da 2e       	mov	r13, r26
    3356:	ef 01       	movw	r28, r30
    3358:	0e 94 37 19 	call	0x326e	; 0x326e <__mulsf3x>
    335c:	fe 01       	movw	r30, r28
    335e:	e8 94       	clt
    3360:	a5 91       	lpm	r26, Z+
    3362:	25 91       	lpm	r18, Z+
    3364:	35 91       	lpm	r19, Z+
    3366:	45 91       	lpm	r20, Z+
    3368:	55 91       	lpm	r21, Z+
    336a:	a6 f3       	brts	.-24     	; 0x3354 <__fp_powser+0x16>
    336c:	ef 01       	movw	r28, r30
    336e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__addsf3x>
    3372:	fe 01       	movw	r30, r28
    3374:	97 01       	movw	r18, r14
    3376:	a8 01       	movw	r20, r16
    3378:	da 94       	dec	r13
    337a:	69 f7       	brne	.-38     	; 0x3356 <__fp_powser+0x18>
    337c:	df 90       	pop	r13
    337e:	ef 90       	pop	r14
    3380:	ff 90       	pop	r15
    3382:	0f 91       	pop	r16
    3384:	1f 91       	pop	r17
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	08 95       	ret

0000338c <__mulsi3>:
    338c:	db 01       	movw	r26, r22
    338e:	8f 93       	push	r24
    3390:	9f 93       	push	r25
    3392:	0e 94 2f 1a 	call	0x345e	; 0x345e <__muluhisi3>
    3396:	bf 91       	pop	r27
    3398:	af 91       	pop	r26
    339a:	a2 9f       	mul	r26, r18
    339c:	80 0d       	add	r24, r0
    339e:	91 1d       	adc	r25, r1
    33a0:	a3 9f       	mul	r26, r19
    33a2:	90 0d       	add	r25, r0
    33a4:	b2 9f       	mul	r27, r18
    33a6:	90 0d       	add	r25, r0
    33a8:	11 24       	eor	r1, r1
    33aa:	08 95       	ret

000033ac <__udivmodhi4>:
    33ac:	aa 1b       	sub	r26, r26
    33ae:	bb 1b       	sub	r27, r27
    33b0:	51 e1       	ldi	r21, 0x11	; 17
    33b2:	07 c0       	rjmp	.+14     	; 0x33c2 <__udivmodhi4_ep>

000033b4 <__udivmodhi4_loop>:
    33b4:	aa 1f       	adc	r26, r26
    33b6:	bb 1f       	adc	r27, r27
    33b8:	a6 17       	cp	r26, r22
    33ba:	b7 07       	cpc	r27, r23
    33bc:	10 f0       	brcs	.+4      	; 0x33c2 <__udivmodhi4_ep>
    33be:	a6 1b       	sub	r26, r22
    33c0:	b7 0b       	sbc	r27, r23

000033c2 <__udivmodhi4_ep>:
    33c2:	88 1f       	adc	r24, r24
    33c4:	99 1f       	adc	r25, r25
    33c6:	5a 95       	dec	r21
    33c8:	a9 f7       	brne	.-22     	; 0x33b4 <__udivmodhi4_loop>
    33ca:	80 95       	com	r24
    33cc:	90 95       	com	r25
    33ce:	bc 01       	movw	r22, r24
    33d0:	cd 01       	movw	r24, r26
    33d2:	08 95       	ret

000033d4 <__divmodhi4>:
    33d4:	97 fb       	bst	r25, 7
    33d6:	07 2e       	mov	r0, r23
    33d8:	16 f4       	brtc	.+4      	; 0x33de <__divmodhi4+0xa>
    33da:	00 94       	com	r0
    33dc:	07 d0       	rcall	.+14     	; 0x33ec <__divmodhi4_neg1>
    33de:	77 fd       	sbrc	r23, 7
    33e0:	09 d0       	rcall	.+18     	; 0x33f4 <__divmodhi4_neg2>
    33e2:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__udivmodhi4>
    33e6:	07 fc       	sbrc	r0, 7
    33e8:	05 d0       	rcall	.+10     	; 0x33f4 <__divmodhi4_neg2>
    33ea:	3e f4       	brtc	.+14     	; 0x33fa <__divmodhi4_exit>

000033ec <__divmodhi4_neg1>:
    33ec:	90 95       	com	r25
    33ee:	81 95       	neg	r24
    33f0:	9f 4f       	sbci	r25, 0xFF	; 255
    33f2:	08 95       	ret

000033f4 <__divmodhi4_neg2>:
    33f4:	70 95       	com	r23
    33f6:	61 95       	neg	r22
    33f8:	7f 4f       	sbci	r23, 0xFF	; 255

000033fa <__divmodhi4_exit>:
    33fa:	08 95       	ret

000033fc <__udivmodsi4>:
    33fc:	a1 e2       	ldi	r26, 0x21	; 33
    33fe:	1a 2e       	mov	r1, r26
    3400:	aa 1b       	sub	r26, r26
    3402:	bb 1b       	sub	r27, r27
    3404:	fd 01       	movw	r30, r26
    3406:	0d c0       	rjmp	.+26     	; 0x3422 <__udivmodsi4_ep>

00003408 <__udivmodsi4_loop>:
    3408:	aa 1f       	adc	r26, r26
    340a:	bb 1f       	adc	r27, r27
    340c:	ee 1f       	adc	r30, r30
    340e:	ff 1f       	adc	r31, r31
    3410:	a2 17       	cp	r26, r18
    3412:	b3 07       	cpc	r27, r19
    3414:	e4 07       	cpc	r30, r20
    3416:	f5 07       	cpc	r31, r21
    3418:	20 f0       	brcs	.+8      	; 0x3422 <__udivmodsi4_ep>
    341a:	a2 1b       	sub	r26, r18
    341c:	b3 0b       	sbc	r27, r19
    341e:	e4 0b       	sbc	r30, r20
    3420:	f5 0b       	sbc	r31, r21

00003422 <__udivmodsi4_ep>:
    3422:	66 1f       	adc	r22, r22
    3424:	77 1f       	adc	r23, r23
    3426:	88 1f       	adc	r24, r24
    3428:	99 1f       	adc	r25, r25
    342a:	1a 94       	dec	r1
    342c:	69 f7       	brne	.-38     	; 0x3408 <__udivmodsi4_loop>
    342e:	60 95       	com	r22
    3430:	70 95       	com	r23
    3432:	80 95       	com	r24
    3434:	90 95       	com	r25
    3436:	9b 01       	movw	r18, r22
    3438:	ac 01       	movw	r20, r24
    343a:	bd 01       	movw	r22, r26
    343c:	cf 01       	movw	r24, r30
    343e:	08 95       	ret

00003440 <__umulhisi3>:
    3440:	a2 9f       	mul	r26, r18
    3442:	b0 01       	movw	r22, r0
    3444:	b3 9f       	mul	r27, r19
    3446:	c0 01       	movw	r24, r0
    3448:	a3 9f       	mul	r26, r19
    344a:	70 0d       	add	r23, r0
    344c:	81 1d       	adc	r24, r1
    344e:	11 24       	eor	r1, r1
    3450:	91 1d       	adc	r25, r1
    3452:	b2 9f       	mul	r27, r18
    3454:	70 0d       	add	r23, r0
    3456:	81 1d       	adc	r24, r1
    3458:	11 24       	eor	r1, r1
    345a:	91 1d       	adc	r25, r1
    345c:	08 95       	ret

0000345e <__muluhisi3>:
    345e:	0e 94 20 1a 	call	0x3440	; 0x3440 <__umulhisi3>
    3462:	a5 9f       	mul	r26, r21
    3464:	90 0d       	add	r25, r0
    3466:	b4 9f       	mul	r27, r20
    3468:	90 0d       	add	r25, r0
    346a:	a4 9f       	mul	r26, r20
    346c:	80 0d       	add	r24, r0
    346e:	91 1d       	adc	r25, r1
    3470:	11 24       	eor	r1, r1
    3472:	08 95       	ret

00003474 <eeprom_read_block>:
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22

00003478 <eeprom_read_blraw>:
    3478:	fc 01       	movw	r30, r24
    347a:	f9 99       	sbic	0x1f, 1	; 31
    347c:	fe cf       	rjmp	.-4      	; 0x347a <eeprom_read_blraw+0x2>
    347e:	06 c0       	rjmp	.+12     	; 0x348c <eeprom_read_blraw+0x14>
    3480:	f2 bd       	out	0x22, r31	; 34
    3482:	e1 bd       	out	0x21, r30	; 33
    3484:	f8 9a       	sbi	0x1f, 0	; 31
    3486:	31 96       	adiw	r30, 0x01	; 1
    3488:	00 b4       	in	r0, 0x20	; 32
    348a:	0d 92       	st	X+, r0
    348c:	41 50       	subi	r20, 0x01	; 1
    348e:	50 40       	sbci	r21, 0x00	; 0
    3490:	b8 f7       	brcc	.-18     	; 0x3480 <eeprom_read_blraw+0x8>
    3492:	08 95       	ret

00003494 <eeprom_read_byte>:
    3494:	f9 99       	sbic	0x1f, 1	; 31
    3496:	fe cf       	rjmp	.-4      	; 0x3494 <eeprom_read_byte>
    3498:	92 bd       	out	0x22, r25	; 34
    349a:	81 bd       	out	0x21, r24	; 33
    349c:	f8 9a       	sbi	0x1f, 0	; 31
    349e:	99 27       	eor	r25, r25
    34a0:	80 b5       	in	r24, 0x20	; 32
    34a2:	08 95       	ret

000034a4 <eeprom_update_block>:
    34a4:	dc 01       	movw	r26, r24
    34a6:	a4 0f       	add	r26, r20
    34a8:	b5 1f       	adc	r27, r21
    34aa:	41 50       	subi	r20, 0x01	; 1
    34ac:	50 40       	sbci	r21, 0x00	; 0
    34ae:	48 f0       	brcs	.+18     	; 0x34c2 <eeprom_update_block+0x1e>
    34b0:	cb 01       	movw	r24, r22
    34b2:	84 0f       	add	r24, r20
    34b4:	95 1f       	adc	r25, r21
    34b6:	2e 91       	ld	r18, -X
    34b8:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <eeprom_update_r18>
    34bc:	41 50       	subi	r20, 0x01	; 1
    34be:	50 40       	sbci	r21, 0x00	; 0
    34c0:	d0 f7       	brcc	.-12     	; 0x34b6 <eeprom_update_block+0x12>
    34c2:	08 95       	ret

000034c4 <eeprom_update_byte>:
    34c4:	26 2f       	mov	r18, r22

000034c6 <eeprom_update_r18>:
    34c6:	f9 99       	sbic	0x1f, 1	; 31
    34c8:	fe cf       	rjmp	.-4      	; 0x34c6 <eeprom_update_r18>
    34ca:	92 bd       	out	0x22, r25	; 34
    34cc:	81 bd       	out	0x21, r24	; 33
    34ce:	f8 9a       	sbi	0x1f, 0	; 31
    34d0:	01 97       	sbiw	r24, 0x01	; 1
    34d2:	00 b4       	in	r0, 0x20	; 32
    34d4:	02 16       	cp	r0, r18
    34d6:	39 f0       	breq	.+14     	; 0x34e6 <eeprom_update_r18+0x20>
    34d8:	1f ba       	out	0x1f, r1	; 31
    34da:	20 bd       	out	0x20, r18	; 32
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	fa 9a       	sbi	0x1f, 2	; 31
    34e2:	f9 9a       	sbi	0x1f, 1	; 31
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	08 95       	ret

000034e8 <_exit>:
    34e8:	f8 94       	cli

000034ea <__stop_program>:
    34ea:	ff cf       	rjmp	.-2      	; 0x34ea <__stop_program>
