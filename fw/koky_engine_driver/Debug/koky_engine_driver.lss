
koky_engine_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d4  00800100  00003094  00003148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003094  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008002d4  008002d4  0000331c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000331c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000331f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003350  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a8  00000000  00000000  00003390  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017b5  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ae8  00000000  00000000  00004ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b16  00000000  00000000  000057d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004d4  00000000  00000000  000072ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000089f  00000000  00000000  000077c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0d  00000000  00000000  0000805f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  00008a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e9       	ldi	r30, 0x94	; 148
      7c:	f0 e3       	ldi	r31, 0x30	; 48
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3d       	cpi	r26, 0xD4	; 212
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a4 ed       	ldi	r26, 0xD4	; 212
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 3e       	cpi	r26, 0xE8	; 232
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 00 01 	call	0x200	; 0x200 <main>
      9e:	0c 94 48 18 	jmp	0x3090	; 0x3090 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
#define ENC_B_PORT	PORTD
// ============================================================================


ISR(INT0_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
      ae:	0f 92       	push	r0
      b0:	11 24       	eor	r1, r1
      b2:	2f 93       	push	r18
      b4:	3f 93       	push	r19
      b6:	4f 93       	push	r20
      b8:	5f 93       	push	r21
      ba:	6f 93       	push	r22
      bc:	7f 93       	push	r23
      be:	8f 93       	push	r24
      c0:	9f 93       	push	r25
      c2:	af 93       	push	r26
      c4:	bf 93       	push	r27
      c6:	ef 93       	push	r30
      c8:	ff 93       	push	r31
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
	TUI_back_timer_clear();
      d2:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <TUI_back_timer_clear>
	TUI('b');
      d6:	82 e6       	ldi	r24, 0x62	; 98
      d8:	0e 94 b3 02 	call	0x566	; 0x566 <TUI>
}
      dc:	00 00       	nop
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	ff 91       	pop	r31
      e4:	ef 91       	pop	r30
      e6:	bf 91       	pop	r27
      e8:	af 91       	pop	r26
      ea:	9f 91       	pop	r25
      ec:	8f 91       	pop	r24
      ee:	7f 91       	pop	r23
      f0:	6f 91       	pop	r22
      f2:	5f 91       	pop	r21
      f4:	4f 91       	pop	r20
      f6:	3f 91       	pop	r19
      f8:	2f 91       	pop	r18
      fa:	0f 90       	pop	r0
      fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     100:	0f 90       	pop	r0
     102:	1f 90       	pop	r1
     104:	18 95       	reti

00000106 <__vector_2>:

ISR(INT1_vect)
{
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	2f 93       	push	r18
     114:	3f 93       	push	r19
     116:	4f 93       	push	r20
     118:	5f 93       	push	r21
     11a:	6f 93       	push	r22
     11c:	7f 93       	push	r23
     11e:	8f 93       	push	r24
     120:	9f 93       	push	r25
     122:	af 93       	push	r26
     124:	bf 93       	push	r27
     126:	ef 93       	push	r30
     128:	ff 93       	push	r31
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TUI_back_timer_clear();
     132:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <TUI_back_timer_clear>
	if (ENC_A_PIN & ENC_A)
     136:	89 e2       	ldi	r24, 0x29	; 41
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	fc 01       	movw	r30, r24
     13c:	80 81       	ld	r24, Z
     13e:	88 2f       	mov	r24, r24
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	80 71       	andi	r24, 0x10	; 16
     144:	99 27       	eor	r25, r25
     146:	89 2b       	or	r24, r25
     148:	21 f0       	breq	.+8      	; 0x152 <__vector_2+0x4c>
	{
		TUI('-');
     14a:	8d e2       	ldi	r24, 0x2D	; 45
     14c:	0e 94 b3 02 	call	0x566	; 0x566 <TUI>
	}
	else
	{
		TUI('+');
	}
}
     150:	03 c0       	rjmp	.+6      	; 0x158 <__vector_2+0x52>
	{
		TUI('-');
	}
	else
	{
		TUI('+');
     152:	8b e2       	ldi	r24, 0x2B	; 43
     154:	0e 94 b3 02 	call	0x566	; 0x566 <TUI>
	}
}
     158:	00 00       	nop
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	ff 91       	pop	r31
     160:	ef 91       	pop	r30
     162:	bf 91       	pop	r27
     164:	af 91       	pop	r26
     166:	9f 91       	pop	r25
     168:	8f 91       	pop	r24
     16a:	7f 91       	pop	r23
     16c:	6f 91       	pop	r22
     16e:	5f 91       	pop	r21
     170:	4f 91       	pop	r20
     172:	3f 91       	pop	r19
     174:	2f 91       	pop	r18
     176:	0f 90       	pop	r0
     178:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     17c:	0f 90       	pop	r0
     17e:	1f 90       	pop	r1
     180:	18 95       	reti

00000182 <encoder_init>:

// encoder initialization
void encoder_init(void)
{
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
	// set button
	BTN_PORT |= BTN;		// pull-up
     18a:	8b e2       	ldi	r24, 0x2B	; 43
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	2b e2       	ldi	r18, 0x2B	; 43
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	24 60       	ori	r18, 0x04	; 4
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
	EICRA = (1<<ISC01);		// falling edge
     19c:	89 e6       	ldi	r24, 0x69	; 105
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	22 e0       	ldi	r18, 0x02	; 2
     1a2:	fc 01       	movw	r30, r24
     1a4:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);		// int enable from INT0
     1a6:	8d e3       	ldi	r24, 0x3D	; 61
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	21 e0       	ldi	r18, 0x01	; 1
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18

	// set encoder	
	ENC_A_PORT |= ENC_A;	// pull-up
     1b0:	8b e2       	ldi	r24, 0x2B	; 43
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	2b e2       	ldi	r18, 0x2B	; 43
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	f9 01       	movw	r30, r18
     1ba:	20 81       	ld	r18, Z
     1bc:	20 61       	ori	r18, 0x10	; 16
     1be:	fc 01       	movw	r30, r24
     1c0:	20 83       	st	Z, r18
	ENC_B_PORT |= ENC_B;	// pull-up
     1c2:	8b e2       	ldi	r24, 0x2B	; 43
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	2b e2       	ldi	r18, 0x2B	; 43
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	f9 01       	movw	r30, r18
     1cc:	20 81       	ld	r18, Z
     1ce:	28 60       	ori	r18, 0x08	; 8
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18

	EICRA |= (1<<ISC11);	// falling edge
     1d4:	89 e6       	ldi	r24, 0x69	; 105
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	29 e6       	ldi	r18, 0x69	; 105
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	f9 01       	movw	r30, r18
     1de:	20 81       	ld	r18, Z
     1e0:	28 60       	ori	r18, 0x08	; 8
     1e2:	fc 01       	movw	r30, r24
     1e4:	20 83       	st	Z, r18
	EIMSK |= (1<<INT1);		// int enable from INT0
     1e6:	8d e3       	ldi	r24, 0x3D	; 61
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	2d e3       	ldi	r18, 0x3D	; 61
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	f9 01       	movw	r30, r18
     1f0:	20 81       	ld	r18, Z
     1f2:	22 60       	ori	r18, 0x02	; 2
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 83       	st	Z, r18
}
     1f8:	00 00       	nop
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <main>:

int main(void)
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00;
     208:	84 e2       	ldi	r24, 0x24	; 36
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	fc 01       	movw	r30, r24
     20e:	10 82       	st	Z, r1
	DDRC = 0x00;
     210:	87 e2       	ldi	r24, 0x27	; 39
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	fc 01       	movw	r30, r24
     216:	10 82       	st	Z, r1
	DDRD = 0x00;
     218:	8a e2       	ldi	r24, 0x2A	; 42
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	10 82       	st	Z, r1

	PORTB = 0x00;
     220:	85 e2       	ldi	r24, 0x25	; 37
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	10 82       	st	Z, r1
	PORTC = 0x00;
     228:	88 e2       	ldi	r24, 0x28	; 40
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	fc 01       	movw	r30, r24
     22e:	10 82       	st	Z, r1
	PORTD = 0x00;
     230:	8b e2       	ldi	r24, 0x2B	; 43
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	fc 01       	movw	r30, r24
     236:	10 82       	st	Z, r1

	motor_init();
     238:	0e 94 2d 13 	call	0x265a	; 0x265a <motor_init>
	encoder_init();
     23c:	0e 94 c1 00 	call	0x182	; 0x182 <encoder_init>
	lcd_init();
     240:	0e 94 be 09 	call	0x137c	; 0x137c <lcd_init>

	sei();
     244:	78 94       	sei

	TUI_inti();
     246:	0e 94 61 02 	call	0x4c2	; 0x4c2 <TUI_inti>
	TUI('s');
     24a:	83 e7       	ldi	r24, 0x73	; 115
     24c:	0e 94 b3 02 	call	0x566	; 0x566 <TUI>
		
	for(;;)
    {
		;
    }
     250:	ff cf       	rjmp	.-2      	; 0x250 <main+0x50>

00000252 <TUI_sec_timer_init>:
#define EEP_ADDR		(void *)0x10
#define eep_read()		eeprom_read_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))
#define eep_update()	eeprom_update_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))

void TUI_sec_timer_init(void)
{
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
	TUI_sec_timer_stop();
     25a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <TUI_sec_timer_stop>
	TCCR1A = 0;
     25e:	80 e8       	ldi	r24, 0x80	; 128
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	fc 01       	movw	r30, r24
     264:	10 82       	st	Z, r1
	OCR1A = F_CPU / 1024;							// TOP value for 1 sec
     266:	88 e8       	ldi	r24, 0x88	; 136
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	2d e8       	ldi	r18, 0x8D	; 141
     26c:	3b e5       	ldi	r19, 0x5B	; 91
     26e:	fc 01       	movw	r30, r24
     270:	31 83       	std	Z+1, r19	; 0x01
     272:	20 83       	st	Z, r18
	TIMSK1 = (1<<OCIE1A);							// compare IT enable
     274:	8f e6       	ldi	r24, 0x6F	; 111
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	22 e0       	ldi	r18, 0x02	; 2
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
}
     27e:	00 00       	nop
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <TUI_sec_timer_start>:
void TUI_sec_timer_start(void)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);	// CTC mode clk/1024
     28e:	81 e8       	ldi	r24, 0x81	; 129
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	2d e0       	ldi	r18, 0x0D	; 13
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18
}
     298:	00 00       	nop
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <TUI_sec_timer_stop>:
void TUI_sec_timer_stop(void)
{
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12);							// CTC mode clk = 0
     2a8:	81 e8       	ldi	r24, 0x81	; 129
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	28 e0       	ldi	r18, 0x08	; 8
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
}
     2b2:	00 00       	nop
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     2c2:	0f 92       	push	r0
     2c4:	11 24       	eor	r1, r1
     2c6:	2f 93       	push	r18
     2c8:	3f 93       	push	r19
     2ca:	4f 93       	push	r20
     2cc:	5f 93       	push	r21
     2ce:	6f 93       	push	r22
     2d0:	7f 93       	push	r23
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	if (machine_state == MACHINE_START)
     2e6:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <machine_state>
     2ea:	88 23       	and	r24, r24
     2ec:	a9 f5       	brne	.+106    	; 0x358 <__vector_11+0x9e>
	{
		if (user_profile.sec > 0)
     2ee:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     2f2:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     2f6:	89 2b       	or	r24, r25
     2f8:	49 f0       	breq	.+18     	; 0x30c <__vector_11+0x52>
		{
			user_profile.sec--;
     2fa:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     2fe:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     302:	01 97       	sbiw	r24, 0x01	; 1
     304:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <user_profile+0x3>
     308:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <user_profile+0x2>
		}
		if (!user_profile.sec)
     30c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     310:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     314:	89 2b       	or	r24, r25
     316:	e9 f4       	brne	.+58     	; 0x352 <__vector_11+0x98>
		{
			motor_smoothly_rmp(user_profile.rpm, 0);
     318:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
     31c:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	0e 94 73 14 	call	0x28e6	; 0x28e6 <motor_smoothly_rmp>
			TUI_sec_timer_stop();
     328:	0e 94 50 01 	call	0x2a0	; 0x2a0 <TUI_sec_timer_stop>
			machine_state = MACHINE_STOP;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <machine_state>
			user_profile = backup_profile;
     332:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     336:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     33a:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     33e:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     342:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <user_profile>
     346:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <user_profile+0x1>
     34a:	a0 93 db 02 	sts	0x02DB, r26	; 0x8002db <user_profile+0x2>
     34e:	b0 93 dc 02 	sts	0x02DC, r27	; 0x8002dc <user_profile+0x3>
		}
		TUI('s');
     352:	83 e7       	ldi	r24, 0x73	; 115
     354:	0e 94 b3 02 	call	0x566	; 0x566 <TUI>
	}
}
     358:	00 00       	nop
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	ff 91       	pop	r31
     360:	ef 91       	pop	r30
     362:	bf 91       	pop	r27
     364:	af 91       	pop	r26
     366:	9f 91       	pop	r25
     368:	8f 91       	pop	r24
     36a:	7f 91       	pop	r23
     36c:	6f 91       	pop	r22
     36e:	5f 91       	pop	r21
     370:	4f 91       	pop	r20
     372:	3f 91       	pop	r19
     374:	2f 91       	pop	r18
     376:	0f 90       	pop	r0
     378:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <TUI_back_timer_init>:


void TUI_back_timer_init(void)
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;									// normal mode
     38a:	84 e4       	ldi	r24, 0x44	; 68
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	fc 01       	movw	r30, r24
     390:	10 82       	st	Z, r1
	TCCR0B = (1<<CS02) | (1<<CS00);				// clk/1024
     392:	85 e4       	ldi	r24, 0x45	; 69
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	25 e0       	ldi	r18, 0x05	; 5
     398:	fc 01       	movw	r30, r24
     39a:	20 83       	st	Z, r18
	TIMSK0 = (1<<TOIE0);						// compare IT enable
     39c:	8e e6       	ldi	r24, 0x6E	; 110
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
	TUI_back_timer_clear();
     3a6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <TUI_back_timer_clear>
}
     3aa:	00 00       	nop
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <TUI_back_timer_clear>:
void TUI_back_timer_clear(void)
{
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
	back_tick = 0;
     3ba:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <back_tick>
     3be:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <back_tick+0x1>
     3c2:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <back_tick+0x2>
     3c6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <back_tick+0x3>
	TCNT0 = 0;
     3ca:	86 e4       	ldi	r24, 0x46	; 70
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	fc 01       	movw	r30, r24
     3d0:	10 82       	st	Z, r1
}
     3d2:	00 00       	nop
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <__vector_16>:
ISR(TIMER0_OVF_vect)
{
     3da:	1f 92       	push	r1
     3dc:	0f 92       	push	r0
     3de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	2f 93       	push	r18
     3e8:	3f 93       	push	r19
     3ea:	4f 93       	push	r20
     3ec:	5f 93       	push	r21
     3ee:	6f 93       	push	r22
     3f0:	7f 93       	push	r23
     3f2:	8f 93       	push	r24
     3f4:	9f 93       	push	r25
     3f6:	af 93       	push	r26
     3f8:	bf 93       	push	r27
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	1f 92       	push	r1
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
	const uint8_t sec_to_return = 3;
     408:	83 e0       	ldi	r24, 0x03	; 3
     40a:	89 83       	std	Y+1, r24	; 0x01
	back_tick++;
     40c:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <back_tick>
     410:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <back_tick+0x1>
     414:	a0 91 df 02 	lds	r26, 0x02DF	; 0x8002df <back_tick+0x2>
     418:	b0 91 e0 02 	lds	r27, 0x02E0	; 0x8002e0 <back_tick+0x3>
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	a1 1d       	adc	r26, r1
     420:	b1 1d       	adc	r27, r1
     422:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <back_tick>
     426:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <back_tick+0x1>
     42a:	a0 93 df 02 	sts	0x02DF, r26	; 0x8002df <back_tick+0x2>
     42e:	b0 93 e0 02 	sts	0x02E0, r27	; 0x8002e0 <back_tick+0x3>
	if (back_tick == ( (((uint32_t) sec_to_return) * ((uint32_t) F_CPU)) / (((uint32_t) 256) * ((uint32_t) 1024))) )
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	a0 e0       	ldi	r26, 0x00	; 0
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	9c 01       	movw	r18, r24
     43e:	ad 01       	movw	r20, r26
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	76 e3       	ldi	r23, 0x36	; 54
     444:	8e e6       	ldi	r24, 0x6E	; 110
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__mulsi3>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	9c 01       	movw	r18, r24
     452:	ad 01       	movw	r20, r26
     454:	01 2e       	mov	r0, r17
     456:	12 e1       	ldi	r17, 0x12	; 18
     458:	56 95       	lsr	r21
     45a:	47 95       	ror	r20
     45c:	37 95       	ror	r19
     45e:	27 95       	ror	r18
     460:	1a 95       	dec	r17
     462:	d1 f7       	brne	.-12     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     464:	10 2d       	mov	r17, r0
     466:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <back_tick>
     46a:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <back_tick+0x1>
     46e:	a0 91 df 02 	lds	r26, 0x02DF	; 0x8002df <back_tick+0x2>
     472:	b0 91 e0 02 	lds	r27, 0x02E0	; 0x8002e0 <back_tick+0x3>
     476:	28 17       	cp	r18, r24
     478:	39 07       	cpc	r19, r25
     47a:	4a 07       	cpc	r20, r26
     47c:	5b 07       	cpc	r21, r27
     47e:	59 f4       	brne	.+22     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	{
		TUI_back_timer_clear();
     480:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <TUI_back_timer_clear>
		if (menu != MAIN_MENU)
     484:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <menu>
     488:	88 23       	and	r24, r24
     48a:	29 f0       	breq	.+10     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		{
			menu = MAIN_MENU;
     48c:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <menu>
			TUI('s');
     490:	83 e7       	ldi	r24, 0x73	; 115
     492:	0e 94 b3 02 	call	0x566	; 0x566 <TUI>
		}
	}
}
     496:	00 00       	nop
     498:	0f 90       	pop	r0
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	bf 91       	pop	r27
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <TUI_inti>:

void TUI_inti(void)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
	menu = MAIN_MENU;
     4ca:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <menu>
	machine_state = MACHINE_STOP;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <machine_state>
	actual_rmp = 0;
     4d4:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <actual_rmp+0x1>
     4d8:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <actual_rmp>

	TUI_sec_timer_init();
     4dc:	0e 94 29 01 	call	0x252	; 0x252 <TUI_sec_timer_init>
	TUI_back_timer_init();
     4e0:	0e 94 c1 01 	call	0x382	; 0x382 <TUI_back_timer_init>

	// EEPROM is empty
	if (eeprom_read_byte(EEP_ADDR) == 0xFF)
     4e4:	80 e1       	ldi	r24, 0x10	; 16
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 1e 18 	call	0x303c	; 0x303c <eeprom_read_byte>
     4ec:	8f 3f       	cpi	r24, 0xFF	; 255
     4ee:	41 f4       	brne	.+16     	; 0x500 <TUI_inti+0x3e>
	{
		eep_update();
     4f0:	4d e0       	ldi	r20, 0x0D	; 13
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	60 e1       	ldi	r22, 0x10	; 16
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 26 18 	call	0x304c	; 0x304c <eeprom_update_block>
	}
	eep_read();
     500:	4d e0       	ldi	r20, 0x0D	; 13
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	60 e1       	ldi	r22, 0x10	; 16
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 0e 18 	call	0x301c	; 0x301c <eeprom_read_block>

	user_profile = eeprom_data.profile[eeprom_data.profile_id];
     510:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     514:	88 2f       	mov	r24, r24
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	8f 5f       	subi	r24, 0xFF	; 255
     522:	9e 4f       	sbci	r25, 0xFE	; 254
     524:	fc 01       	movw	r30, r24
     526:	80 81       	ld	r24, Z
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	a2 81       	ldd	r26, Z+2	; 0x02
     52c:	b3 81       	ldd	r27, Z+3	; 0x03
     52e:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <user_profile>
     532:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <user_profile+0x1>
     536:	a0 93 db 02 	sts	0x02DB, r26	; 0x8002db <user_profile+0x2>
     53a:	b0 93 dc 02 	sts	0x02DC, r27	; 0x8002dc <user_profile+0x3>
	backup_profile = user_profile;
     53e:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
     542:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
     546:	a0 91 db 02 	lds	r26, 0x02DB	; 0x8002db <user_profile+0x2>
     54a:	b0 91 dc 02 	lds	r27, 0x02DC	; 0x8002dc <user_profile+0x3>
     54e:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <backup_profile>
     552:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <backup_profile+0x1>
     556:	a0 93 e3 02 	sts	0x02E3, r26	; 0x8002e3 <backup_profile+0x2>
     55a:	b0 93 e4 02 	sts	0x02E4, r27	; 0x8002e4 <backup_profile+0x3>
}
     55e:	00 00       	nop
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	08 95       	ret

00000566 <TUI>:

void TUI(char action)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	00 d0       	rcall	.+0      	; 0x56c <TUI+0x6>
     56c:	00 d0       	rcall	.+0      	; 0x56e <TUI+0x8>
     56e:	1f 92       	push	r1
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	8d 83       	std	Y+5, r24	; 0x05
	static item_menu_select_t item_menu_secect = ITEM_MENU_SELECT_RPM;
	static load_menu_select_t load_menu_select = LOAD_MENU_SELECT_PROFILE1;
	static save_menu_select_t save_menu_select = SAVE_MENU_SELECT_PROFILE1;

	// nastaveni
	switch (menu)
     576:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <menu>
     57a:	88 2f       	mov	r24, r24
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	91 05       	cpc	r25, r1
     582:	09 f4       	brne	.+2      	; 0x586 <TUI+0x20>
     584:	ee c0       	rjmp	.+476    	; 0x762 <TUI+0x1fc>
     586:	83 30       	cpi	r24, 0x03	; 3
     588:	91 05       	cpc	r25, r1
     58a:	34 f4       	brge	.+12     	; 0x598 <TUI+0x32>
     58c:	00 97       	sbiw	r24, 0x00	; 0
     58e:	81 f0       	breq	.+32     	; 0x5b0 <TUI+0x4a>
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	09 f4       	brne	.+2      	; 0x596 <TUI+0x30>
     594:	84 c0       	rjmp	.+264    	; 0x69e <TUI+0x138>
     596:	28 c2       	rjmp	.+1104   	; 0x9e8 <__stack+0xe9>
     598:	84 30       	cpi	r24, 0x04	; 4
     59a:	91 05       	cpc	r25, r1
     59c:	09 f4       	brne	.+2      	; 0x5a0 <TUI+0x3a>
     59e:	69 c1       	rjmp	.+722    	; 0x872 <TUI+0x30c>
     5a0:	84 30       	cpi	r24, 0x04	; 4
     5a2:	91 05       	cpc	r25, r1
     5a4:	0c f4       	brge	.+2      	; 0x5a8 <TUI+0x42>
     5a6:	21 c1       	rjmp	.+578    	; 0x7ea <TUI+0x284>
     5a8:	05 97       	sbiw	r24, 0x05	; 5
     5aa:	09 f4       	brne	.+2      	; 0x5ae <TUI+0x48>
     5ac:	bf c1       	rjmp	.+894    	; 0x92c <__stack+0x2d>
     5ae:	1c c2       	rjmp	.+1080   	; 0x9e8 <__stack+0xe9>
	{
		case MAIN_MENU:
			switch (action)
     5b0:	8d 81       	ldd	r24, Y+5	; 0x05
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	8d 32       	cpi	r24, 0x2D	; 45
     5b8:	91 05       	cpc	r25, r1
     5ba:	31 f0       	breq	.+12     	; 0x5c8 <TUI+0x62>
     5bc:	82 36       	cpi	r24, 0x62	; 98
     5be:	91 05       	cpc	r25, r1
     5c0:	89 f0       	breq	.+34     	; 0x5e4 <TUI+0x7e>
     5c2:	8b 97       	sbiw	r24, 0x2b	; 43
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <TUI+0x62>
					break;

				default:
					;
			}
			break;
     5c6:	10 c2       	rjmp	.+1056   	; 0x9e8 <__stack+0xe9>
			{
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
     5c8:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <machine_state>
     5cc:	88 23       	and	r24, r24
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <TUI+0x6c>
     5d0:	64 c0       	rjmp	.+200    	; 0x69a <TUI+0x134>
						break;
					main_menu_secelt = (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ? MAIN_MENU_SELECT_MENU : MAIN_MENU_SELECT_CONTOL;
     5d2:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <__data_end>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	99 23       	and	r25, r25
     5da:	09 f0       	breq	.+2      	; 0x5de <TUI+0x78>
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <__data_end>
					break;
     5e2:	5c c0       	rjmp	.+184    	; 0x69c <TUI+0x136>

				// stisk tlacitka
				case 'b':
					if (main_menu_secelt == MAIN_MENU_SELECT_CONTOL)
     5e4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     5e8:	88 23       	and	r24, r24
     5ea:	09 f0       	breq	.+2      	; 0x5ee <TUI+0x88>
     5ec:	42 c0       	rjmp	.+132    	; 0x672 <TUI+0x10c>
					{
						if (machine_state == MACHINE_STOP)
     5ee:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <machine_state>
     5f2:	81 30       	cpi	r24, 0x01	; 1
     5f4:	01 f5       	brne	.+64     	; 0x636 <TUI+0xd0>
						{
							machine_state = MACHINE_START;
     5f6:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <machine_state>
							backup_profile = user_profile;
     5fa:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
     5fe:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
     602:	a0 91 db 02 	lds	r26, 0x02DB	; 0x8002db <user_profile+0x2>
     606:	b0 91 dc 02 	lds	r27, 0x02DC	; 0x8002dc <user_profile+0x3>
     60a:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <backup_profile>
     60e:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <backup_profile+0x1>
     612:	a0 93 e3 02 	sts	0x02E3, r26	; 0x8002e3 <backup_profile+0x2>
     616:	b0 93 e4 02 	sts	0x02E4, r27	; 0x8002e4 <backup_profile+0x3>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);
     61a:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <user_profile>
     61e:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <user_profile+0x1>
     622:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <actual_rmp>
     626:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <actual_rmp+0x1>
     62a:	b9 01       	movw	r22, r18
     62c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <motor_smoothly_rmp>
							TUI_sec_timer_start();
     630:	0e 94 43 01 	call	0x286	; 0x286 <TUI_sec_timer_start>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     634:	33 c0       	rjmp	.+102    	; 0x69c <TUI+0x136>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);
							TUI_sec_timer_start();
						}
						else
						{
							machine_state = MACHINE_STOP;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <machine_state>
							motor_smoothly_rmp(user_profile.rpm, 0);
     63c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
     640:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	0e 94 73 14 	call	0x28e6	; 0x28e6 <motor_smoothly_rmp>
							TUI_sec_timer_stop();
     64c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <TUI_sec_timer_stop>
							user_profile = backup_profile;
     650:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     654:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     658:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     65c:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     660:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <user_profile>
     664:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <user_profile+0x1>
     668:	a0 93 db 02 	sts	0x02DB, r26	; 0x8002db <user_profile+0x2>
     66c:	b0 93 dc 02 	sts	0x02DC, r27	; 0x8002dc <user_profile+0x3>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     670:	15 c0       	rjmp	.+42     	; 0x69c <TUI+0x136>
							user_profile = backup_profile;
						}
					}
					else
					{
						menu = ITEM_MENU;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <menu>
						backup_profile = user_profile;
     678:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
     67c:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
     680:	a0 91 db 02 	lds	r26, 0x02DB	; 0x8002db <user_profile+0x2>
     684:	b0 91 dc 02 	lds	r27, 0x02DC	; 0x8002dc <user_profile+0x3>
     688:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <backup_profile>
     68c:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <backup_profile+0x1>
     690:	a0 93 e3 02 	sts	0x02E3, r26	; 0x8002e3 <backup_profile+0x2>
     694:	b0 93 e4 02 	sts	0x02E4, r27	; 0x8002e4 <backup_profile+0x3>
					}
					break;
     698:	01 c0       	rjmp	.+2      	; 0x69c <TUI+0x136>
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
						break;
     69a:	00 00       	nop
					break;

				default:
					;
			}
			break;
     69c:	a5 c1       	rjmp	.+842    	; 0x9e8 <__stack+0xe9>

		case ITEM_MENU:
			switch (action)
     69e:	8d 81       	ldd	r24, Y+5	; 0x05
     6a0:	88 2f       	mov	r24, r24
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	8d 32       	cpi	r24, 0x2D	; 45
     6a6:	91 05       	cpc	r25, r1
     6a8:	11 f1       	breq	.+68     	; 0x6ee <TUI+0x188>
     6aa:	82 36       	cpi	r24, 0x62	; 98
     6ac:	91 05       	cpc	r25, r1
     6ae:	d9 f1       	breq	.+118    	; 0x726 <TUI+0x1c0>
     6b0:	8b 97       	sbiw	r24, 0x2b	; 43
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <TUI+0x150>
					break;

				default:
					;
			}
			break;
     6b4:	99 c1       	rjmp	.+818    	; 0x9e8 <__stack+0xe9>

		case ITEM_MENU:
			switch (action)
			{
				case '+':
					switch (item_menu_secect)
     6b6:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <item_menu_secect.1907>
     6ba:	88 2f       	mov	r24, r24
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	91 05       	cpc	r25, r1
     6c2:	49 f0       	breq	.+18     	; 0x6d6 <TUI+0x170>
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	91 05       	cpc	r25, r1
     6c8:	51 f0       	breq	.+20     	; 0x6de <TUI+0x178>
     6ca:	89 2b       	or	r24, r25
     6cc:	61 f4       	brne	.+24     	; 0x6e6 <TUI+0x180>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <item_menu_secect.1907>
							break;
     6d4:	0b c0       	rjmp	.+22     	; 0x6ec <TUI+0x186>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <item_menu_secect.1907>
							break;
     6dc:	07 c0       	rjmp	.+14     	; 0x6ec <TUI+0x186>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <item_menu_secect.1907>
							break;
     6e4:	03 c0       	rjmp	.+6      	; 0x6ec <TUI+0x186>
						default:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     6e6:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <item_menu_secect.1907>
					}
					break;
     6ea:	3a c0       	rjmp	.+116    	; 0x760 <TUI+0x1fa>
     6ec:	39 c0       	rjmp	.+114    	; 0x760 <TUI+0x1fa>

				case  '-':
					switch (item_menu_secect)
     6ee:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <item_menu_secect.1907>
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	91 05       	cpc	r25, r1
     6fa:	49 f0       	breq	.+18     	; 0x70e <TUI+0x1a8>
     6fc:	82 30       	cpi	r24, 0x02	; 2
     6fe:	91 05       	cpc	r25, r1
     700:	49 f0       	breq	.+18     	; 0x714 <TUI+0x1ae>
     702:	89 2b       	or	r24, r25
     704:	59 f4       	brne	.+22     	; 0x71c <TUI+0x1b6>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <item_menu_secect.1907>
							break;
     70c:	0b c0       	rjmp	.+22     	; 0x724 <TUI+0x1be>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     70e:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <item_menu_secect.1907>
							break;
     712:	08 c0       	rjmp	.+16     	; 0x724 <TUI+0x1be>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <item_menu_secect.1907>
							break;
     71a:	04 c0       	rjmp	.+8      	; 0x724 <TUI+0x1be>
						default:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <item_menu_secect.1907>
					}
					break;
     722:	1e c0       	rjmp	.+60     	; 0x760 <TUI+0x1fa>
     724:	1d c0       	rjmp	.+58     	; 0x760 <TUI+0x1fa>

				case 'b':
					switch (item_menu_secect)
     726:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <item_menu_secect.1907>
     72a:	88 2f       	mov	r24, r24
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	91 05       	cpc	r25, r1
     732:	49 f0       	breq	.+18     	; 0x746 <TUI+0x1e0>
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	91 05       	cpc	r25, r1
     738:	51 f0       	breq	.+20     	; 0x74e <TUI+0x1e8>
     73a:	89 2b       	or	r24, r25
     73c:	61 f4       	brne	.+24     	; 0x756 <TUI+0x1f0>
					{
						case ITEM_MENU_SELECT_RPM:
							menu = RPM_MENU;
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <menu>
							break;
     744:	0c c0       	rjmp	.+24     	; 0x75e <TUI+0x1f8>
						case ITEM_MENU_SELECT_TIME:
							menu = TIME_MENU;
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <menu>
							break;
     74c:	08 c0       	rjmp	.+16     	; 0x75e <TUI+0x1f8>
						case ITEM_MENU_SELECT_LOAD:
							menu = LOAD_MENU;
     74e:	84 e0       	ldi	r24, 0x04	; 4
     750:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <menu>
							break;
     754:	04 c0       	rjmp	.+8      	; 0x75e <TUI+0x1f8>
						default:
							menu = SAVE_MENU;
     756:	85 e0       	ldi	r24, 0x05	; 5
     758:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <menu>
					}
					break;
     75c:	00 c0       	rjmp	.+0      	; 0x75e <TUI+0x1f8>
     75e:	00 00       	nop

				default:
					;
			}
			break;
     760:	43 c1       	rjmp	.+646    	; 0x9e8 <__stack+0xe9>

		case RPM_MENU:
			switch (action)
     762:	8d 81       	ldd	r24, Y+5	; 0x05
     764:	88 2f       	mov	r24, r24
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	8d 32       	cpi	r24, 0x2D	; 45
     76a:	91 05       	cpc	r25, r1
     76c:	b9 f0       	breq	.+46     	; 0x79c <TUI+0x236>
     76e:	82 36       	cpi	r24, 0x62	; 98
     770:	91 05       	cpc	r25, r1
     772:	21 f1       	breq	.+72     	; 0x7bc <TUI+0x256>
     774:	8b 97       	sbiw	r24, 0x2b	; 43
     776:	09 f0       	breq	.+2      	; 0x77a <TUI+0x214>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     778:	37 c1       	rjmp	.+622    	; 0x9e8 <__stack+0xe9>

		case RPM_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
     77a:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     77e:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     782:	8c 32       	cpi	r24, 0x2C	; 44
     784:	91 40       	sbci	r25, 0x01	; 1
     786:	68 f5       	brcc	.+90     	; 0x7e2 <TUI+0x27c>
						backup_profile.rpm++;
     788:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     78c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <backup_profile+0x1>
     796:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <backup_profile>
					break;
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <TUI+0x27c>
				case '-':
					if (backup_profile.rpm > 0)
     79c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     7a0:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     7a4:	89 2b       	or	r24, r25
     7a6:	f9 f0       	breq	.+62     	; 0x7e6 <TUI+0x280>
						backup_profile.rpm--;
     7a8:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     7ac:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <backup_profile+0x1>
     7b6:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <backup_profile>
					break;
     7ba:	15 c0       	rjmp	.+42     	; 0x7e6 <TUI+0x280>
				case  'b':
					menu = MAIN_MENU;
     7bc:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <menu>
					user_profile = backup_profile;
     7c0:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     7c4:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     7c8:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     7cc:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     7d0:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <user_profile>
     7d4:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <user_profile+0x1>
     7d8:	a0 93 db 02 	sts	0x02DB, r26	; 0x8002db <user_profile+0x2>
     7dc:	b0 93 dc 02 	sts	0x02DC, r27	; 0x8002dc <user_profile+0x3>
					break;
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <TUI+0x282>
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
						backup_profile.rpm++;
					break;
     7e2:	00 00       	nop
     7e4:	01 c1       	rjmp	.+514    	; 0x9e8 <__stack+0xe9>
				case '-':
					if (backup_profile.rpm > 0)
						backup_profile.rpm--;
					break;
     7e6:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     7e8:	ff c0       	rjmp	.+510    	; 0x9e8 <__stack+0xe9>

		case TIME_MENU:
			switch (action)
     7ea:	8d 81       	ldd	r24, Y+5	; 0x05
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	8d 32       	cpi	r24, 0x2D	; 45
     7f2:	91 05       	cpc	r25, r1
     7f4:	b9 f0       	breq	.+46     	; 0x824 <TUI+0x2be>
     7f6:	82 36       	cpi	r24, 0x62	; 98
     7f8:	91 05       	cpc	r25, r1
     7fa:	21 f1       	breq	.+72     	; 0x844 <TUI+0x2de>
     7fc:	8b 97       	sbiw	r24, 0x2b	; 43
     7fe:	09 f0       	breq	.+2      	; 0x802 <TUI+0x29c>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     800:	f3 c0       	rjmp	.+486    	; 0x9e8 <__stack+0xe9>

		case TIME_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
     802:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     806:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     80a:	80 3a       	cpi	r24, 0xA0	; 160
     80c:	9c 48       	sbci	r25, 0x8C	; 140
     80e:	68 f5       	brcc	.+90     	; 0x86a <TUI+0x304>
						backup_profile.sec+=60;
     810:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     814:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     818:	cc 96       	adiw	r24, 0x3c	; 60
     81a:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <backup_profile+0x3>
     81e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <backup_profile+0x2>
					break;
     822:	23 c0       	rjmp	.+70     	; 0x86a <TUI+0x304>
				case '-':
					if (backup_profile.sec > 0)
     824:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     828:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     82c:	89 2b       	or	r24, r25
     82e:	f9 f0       	breq	.+62     	; 0x86e <TUI+0x308>
						backup_profile.sec-=60;
     830:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     834:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     838:	cc 97       	sbiw	r24, 0x3c	; 60
     83a:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <backup_profile+0x3>
     83e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <backup_profile+0x2>
					break;
     842:	15 c0       	rjmp	.+42     	; 0x86e <TUI+0x308>
				case  'b':
					menu = MAIN_MENU;
     844:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <menu>
					user_profile = backup_profile;
     848:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     84c:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     850:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     854:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     858:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <user_profile>
     85c:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <user_profile+0x1>
     860:	a0 93 db 02 	sts	0x02DB, r26	; 0x8002db <user_profile+0x2>
     864:	b0 93 dc 02 	sts	0x02DC, r27	; 0x8002dc <user_profile+0x3>
					break;
     868:	03 c0       	rjmp	.+6      	; 0x870 <TUI+0x30a>
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
						backup_profile.sec+=60;
					break;
     86a:	00 00       	nop
     86c:	bd c0       	rjmp	.+378    	; 0x9e8 <__stack+0xe9>
				case '-':
					if (backup_profile.sec > 0)
						backup_profile.sec-=60;
					break;
     86e:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     870:	bb c0       	rjmp	.+374    	; 0x9e8 <__stack+0xe9>

		case LOAD_MENU:
			switch (action)
     872:	8d 81       	ldd	r24, Y+5	; 0x05
     874:	88 2f       	mov	r24, r24
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	8d 32       	cpi	r24, 0x2D	; 45
     87a:	91 05       	cpc	r25, r1
     87c:	d9 f0       	breq	.+54     	; 0x8b4 <TUI+0x34e>
     87e:	82 36       	cpi	r24, 0x62	; 98
     880:	91 05       	cpc	r25, r1
     882:	69 f1       	breq	.+90     	; 0x8de <TUI+0x378>
     884:	8b 97       	sbiw	r24, 0x2b	; 43
     886:	09 f0       	breq	.+2      	; 0x88a <TUI+0x324>
					eep_update();
					break;
				default:
				;
			}
			break;
     888:	af c0       	rjmp	.+350    	; 0x9e8 <__stack+0xe9>

		case LOAD_MENU:
			switch (action)
			{
				case '+':
					switch (load_menu_select)
     88a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <load_menu_select.1908>
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	00 97       	sbiw	r24, 0x00	; 0
     894:	19 f0       	breq	.+6      	; 0x89c <TUI+0x336>
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	29 f0       	breq	.+10     	; 0x8a4 <TUI+0x33e>
     89a:	08 c0       	rjmp	.+16     	; 0x8ac <TUI+0x346>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <load_menu_select.1908>
							break;
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <TUI+0x34c>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     8a4:	82 e0       	ldi	r24, 0x02	; 2
     8a6:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <load_menu_select.1908>
							break;
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <TUI+0x34c>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     8ac:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <load_menu_select.1908>
					}
					break;
     8b0:	3c c0       	rjmp	.+120    	; 0x92a <__stack+0x2b>
     8b2:	3b c0       	rjmp	.+118    	; 0x92a <__stack+0x2b>
				case '-':
					switch (load_menu_select)
     8b4:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <load_menu_select.1908>
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	00 97       	sbiw	r24, 0x00	; 0
     8be:	19 f0       	breq	.+6      	; 0x8c6 <TUI+0x360>
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	29 f0       	breq	.+10     	; 0x8ce <TUI+0x368>
     8c4:	07 c0       	rjmp	.+14     	; 0x8d4 <TUI+0x36e>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <load_menu_select.1908>
							break;
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <TUI+0x376>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     8ce:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <load_menu_select.1908>
							break;
     8d2:	04 c0       	rjmp	.+8      	; 0x8dc <TUI+0x376>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <load_menu_select.1908>
					}
					break;
     8da:	27 c0       	rjmp	.+78     	; 0x92a <__stack+0x2b>
     8dc:	26 c0       	rjmp	.+76     	; 0x92a <__stack+0x2b>
				case  'b':
					menu = MAIN_MENU;
     8de:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <menu>
					eeprom_data.profile_id = load_menu_select;
     8e2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <load_menu_select.1908>
     8e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					user_profile = eeprom_data.profile[eeprom_data.profile_id];
     8ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8ee:	88 2f       	mov	r24, r24
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	8f 5f       	subi	r24, 0xFF	; 255
     8fc:	9e 4f       	sbci	r25, 0xFE	; 254
     8fe:	fc 01       	movw	r30, r24
     900:	80 81       	ld	r24, Z
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	a2 81       	ldd	r26, Z+2	; 0x02
     906:	b3 81       	ldd	r27, Z+3	; 0x03
     908:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <user_profile>
     90c:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <user_profile+0x1>
     910:	a0 93 db 02 	sts	0x02DB, r26	; 0x8002db <user_profile+0x2>
     914:	b0 93 dc 02 	sts	0x02DC, r27	; 0x8002dc <user_profile+0x3>
					eep_update();
     918:	4d e0       	ldi	r20, 0x0D	; 13
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e1       	ldi	r22, 0x10	; 16
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 26 18 	call	0x304c	; 0x304c <eeprom_update_block>
					break;
     928:	00 00       	nop
				default:
				;
			}
			break;
     92a:	5e c0       	rjmp	.+188    	; 0x9e8 <__stack+0xe9>

		case SAVE_MENU:
			switch (action)
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	88 2f       	mov	r24, r24
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	8d 32       	cpi	r24, 0x2D	; 45
     934:	91 05       	cpc	r25, r1
     936:	d9 f0       	breq	.+54     	; 0x96e <__stack+0x6f>
     938:	82 36       	cpi	r24, 0x62	; 98
     93a:	91 05       	cpc	r25, r1
     93c:	69 f1       	breq	.+90     	; 0x998 <__stack+0x99>
     93e:	8b 97       	sbiw	r24, 0x2b	; 43
     940:	09 f0       	breq	.+2      	; 0x944 <__stack+0x45>
					eep_update();
					break;
				default:
				;
			}
			break;
     942:	51 c0       	rjmp	.+162    	; 0x9e6 <__stack+0xe7>

		case SAVE_MENU:
			switch (action)
			{
				case '+':
					switch (save_menu_select)
     944:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <save_menu_select.1909>
     948:	88 2f       	mov	r24, r24
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	19 f0       	breq	.+6      	; 0x956 <__stack+0x57>
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	29 f0       	breq	.+10     	; 0x95e <__stack+0x5f>
     954:	08 c0       	rjmp	.+16     	; 0x966 <__stack+0x67>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <save_menu_select.1909>
							break;
     95c:	07 c0       	rjmp	.+14     	; 0x96c <__stack+0x6d>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <save_menu_select.1909>
							break;
     964:	03 c0       	rjmp	.+6      	; 0x96c <__stack+0x6d>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     966:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <save_menu_select.1909>
					}
					break;
     96a:	3d c0       	rjmp	.+122    	; 0x9e6 <__stack+0xe7>
     96c:	3c c0       	rjmp	.+120    	; 0x9e6 <__stack+0xe7>
				case '-':
					switch (save_menu_select)
     96e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <save_menu_select.1909>
     972:	88 2f       	mov	r24, r24
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	19 f0       	breq	.+6      	; 0x980 <__stack+0x81>
     97a:	01 97       	sbiw	r24, 0x01	; 1
     97c:	29 f0       	breq	.+10     	; 0x988 <__stack+0x89>
     97e:	07 c0       	rjmp	.+14     	; 0x98e <__stack+0x8f>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <save_menu_select.1909>
							break;
     986:	07 c0       	rjmp	.+14     	; 0x996 <__stack+0x97>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     988:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <save_menu_select.1909>
							break;
     98c:	04 c0       	rjmp	.+8      	; 0x996 <__stack+0x97>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <save_menu_select.1909>
					}
					break;
     994:	28 c0       	rjmp	.+80     	; 0x9e6 <__stack+0xe7>
     996:	27 c0       	rjmp	.+78     	; 0x9e6 <__stack+0xe7>
				case  'b':
					menu = MAIN_MENU;
     998:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <menu>
					eeprom_data.profile_id = save_menu_select;
     99c:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <save_menu_select.1909>
     9a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					eeprom_data.profile[eeprom_data.profile_id] = user_profile;
     9a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	9c 01       	movw	r18, r24
     9b6:	2f 5f       	subi	r18, 0xFF	; 255
     9b8:	3e 4f       	sbci	r19, 0xFE	; 254
     9ba:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
     9be:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
     9c2:	a0 91 db 02 	lds	r26, 0x02DB	; 0x8002db <user_profile+0x2>
     9c6:	b0 91 dc 02 	lds	r27, 0x02DC	; 0x8002dc <user_profile+0x3>
     9ca:	f9 01       	movw	r30, r18
     9cc:	80 83       	st	Z, r24
     9ce:	91 83       	std	Z+1, r25	; 0x01
     9d0:	a2 83       	std	Z+2, r26	; 0x02
     9d2:	b3 83       	std	Z+3, r27	; 0x03
					eep_update();
     9d4:	4d e0       	ldi	r20, 0x0D	; 13
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	60 e1       	ldi	r22, 0x10	; 16
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 26 18 	call	0x304c	; 0x304c <eeprom_update_block>
					break;
     9e4:	00 00       	nop
				default:
				;
			}
			break;
     9e6:	00 00       	nop
		default:
			;
	}

	// zobrazeni
	switch (menu)
     9e8:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <menu>
     9ec:	88 2f       	mov	r24, r24
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	91 05       	cpc	r25, r1
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <__stack+0xf9>
     9f6:	09 c2       	rjmp	.+1042   	; 0xe0a <__stack+0x50b>
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	91 05       	cpc	r25, r1
     9fc:	34 f4       	brge	.+12     	; 0xa0a <__stack+0x10b>
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__stack+0x123>
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	09 f4       	brne	.+2      	; 0xa08 <__stack+0x109>
     a06:	9c c1       	rjmp	.+824    	; 0xd40 <__stack+0x441>
			break;

		default:
		;
	}
}
     a08:	b0 c4       	rjmp	.+2400   	; 0x136a <__stack+0xa6b>
		default:
			;
	}

	// zobrazeni
	switch (menu)
     a0a:	84 30       	cpi	r24, 0x04	; 4
     a0c:	91 05       	cpc	r25, r1
     a0e:	09 f4       	brne	.+2      	; 0xa12 <__stack+0x113>
     a10:	be c2       	rjmp	.+1404   	; 0xf8e <__stack+0x68f>
     a12:	84 30       	cpi	r24, 0x04	; 4
     a14:	91 05       	cpc	r25, r1
     a16:	0c f4       	brge	.+2      	; 0xa1a <__stack+0x11b>
     a18:	37 c2       	rjmp	.+1134   	; 0xe88 <__stack+0x589>
     a1a:	05 97       	sbiw	r24, 0x05	; 5
     a1c:	09 f4       	brne	.+2      	; 0xa20 <__stack+0x121>
     a1e:	ae c3       	rjmp	.+1884   	; 0x117c <__stack+0x87d>
			break;

		default:
		;
	}
}
     a20:	a4 c4       	rjmp	.+2376   	; 0x136a <__stack+0xa6b>
	// zobrazeni
	switch (menu)
	{
		case MAIN_MENU:

			if (user_profile.sec/3600)
     a22:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     a26:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     a2a:	80 31       	cpi	r24, 0x10	; 16
     a2c:	9e 40       	sbci	r25, 0x0E	; 14
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <__stack+0x133>
     a30:	5f c0       	rjmp	.+190    	; 0xaf0 <__stack+0x1f1>
				lcd_printf("\fCas:        %2d:%02d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     a32:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     a36:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     a3a:	20 e1       	ldi	r18, 0x10	; 16
     a3c:	3e e0       	ldi	r19, 0x0E	; 14
     a3e:	b9 01       	movw	r22, r18
     a40:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     a44:	ac 01       	movw	r20, r24
     a46:	9a 01       	movw	r18, r20
     a48:	a9 e8       	ldi	r26, 0x89	; 137
     a4a:	b8 e8       	ldi	r27, 0x88	; 136
     a4c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
     a50:	fc 01       	movw	r30, r24
     a52:	f6 95       	lsr	r31
     a54:	e7 95       	ror	r30
     a56:	f2 95       	swap	r31
     a58:	e2 95       	swap	r30
     a5a:	ef 70       	andi	r30, 0x0F	; 15
     a5c:	ef 27       	eor	r30, r31
     a5e:	ff 70       	andi	r31, 0x0F	; 15
     a60:	ef 27       	eor	r30, r31
     a62:	2c e3       	ldi	r18, 0x3C	; 60
     a64:	2e 9f       	mul	r18, r30
     a66:	c0 01       	movw	r24, r0
     a68:	2f 9f       	mul	r18, r31
     a6a:	90 0d       	add	r25, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	fa 01       	movw	r30, r20
     a70:	e8 1b       	sub	r30, r24
     a72:	f9 0b       	sbc	r31, r25
     a74:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     a78:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     a7c:	20 e1       	ldi	r18, 0x10	; 16
     a7e:	3e e0       	ldi	r19, 0x0E	; 14
     a80:	b9 01       	movw	r22, r18
     a82:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     a86:	9c 01       	movw	r18, r24
     a88:	a9 e8       	ldi	r26, 0x89	; 137
     a8a:	b8 e8       	ldi	r27, 0x88	; 136
     a8c:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
     a90:	9c 01       	movw	r18, r24
     a92:	36 95       	lsr	r19
     a94:	27 95       	ror	r18
     a96:	32 95       	swap	r19
     a98:	22 95       	swap	r18
     a9a:	2f 70       	andi	r18, 0x0F	; 15
     a9c:	23 27       	eor	r18, r19
     a9e:	3f 70       	andi	r19, 0x0F	; 15
     aa0:	23 27       	eor	r18, r19
     aa2:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     aa6:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     aaa:	40 e1       	ldi	r20, 0x10	; 16
     aac:	5e e0       	ldi	r21, 0x0E	; 14
     aae:	ba 01       	movw	r22, r20
     ab0:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     ab4:	cb 01       	movw	r24, r22
     ab6:	4f 2f       	mov	r20, r31
     ab8:	4f 93       	push	r20
     aba:	4e 2f       	mov	r20, r30
     abc:	4f 93       	push	r20
     abe:	43 2f       	mov	r20, r19
     ac0:	4f 93       	push	r20
     ac2:	2f 93       	push	r18
     ac4:	29 2f       	mov	r18, r25
     ac6:	2f 93       	push	r18
     ac8:	8f 93       	push	r24
     aca:	8e e0       	ldi	r24, 0x0E	; 14
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	89 2f       	mov	r24, r25
     ad0:	8f 93       	push	r24
     ad2:	8e e0       	ldi	r24, 0x0E	; 14
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	8f 93       	push	r24
     ad8:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     adc:	4d b7       	in	r20, 0x3d	; 61
     ade:	5e b7       	in	r21, 0x3e	; 62
     ae0:	48 5f       	subi	r20, 0xF8	; 248
     ae2:	5f 4f       	sbci	r21, 0xFF	; 255
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	4d c0       	rjmp	.+154    	; 0xb8a <__stack+0x28b>
			else
				lcd_printf("\fCas:           %2d:%02d", (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     af0:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     af4:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     af8:	20 e1       	ldi	r18, 0x10	; 16
     afa:	3e e0       	ldi	r19, 0x0E	; 14
     afc:	b9 01       	movw	r22, r18
     afe:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     b02:	ac 01       	movw	r20, r24
     b04:	9a 01       	movw	r18, r20
     b06:	a9 e8       	ldi	r26, 0x89	; 137
     b08:	b8 e8       	ldi	r27, 0x88	; 136
     b0a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
     b0e:	fc 01       	movw	r30, r24
     b10:	f6 95       	lsr	r31
     b12:	e7 95       	ror	r30
     b14:	f2 95       	swap	r31
     b16:	e2 95       	swap	r30
     b18:	ef 70       	andi	r30, 0x0F	; 15
     b1a:	ef 27       	eor	r30, r31
     b1c:	ff 70       	andi	r31, 0x0F	; 15
     b1e:	ef 27       	eor	r30, r31
     b20:	2c e3       	ldi	r18, 0x3C	; 60
     b22:	2e 9f       	mul	r18, r30
     b24:	c0 01       	movw	r24, r0
     b26:	2f 9f       	mul	r18, r31
     b28:	90 0d       	add	r25, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	fa 01       	movw	r30, r20
     b2e:	e8 1b       	sub	r30, r24
     b30:	f9 0b       	sbc	r31, r25
     b32:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     b36:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     b3a:	20 e1       	ldi	r18, 0x10	; 16
     b3c:	3e e0       	ldi	r19, 0x0E	; 14
     b3e:	b9 01       	movw	r22, r18
     b40:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     b44:	9c 01       	movw	r18, r24
     b46:	a9 e8       	ldi	r26, 0x89	; 137
     b48:	b8 e8       	ldi	r27, 0x88	; 136
     b4a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
     b4e:	96 95       	lsr	r25
     b50:	87 95       	ror	r24
     b52:	92 95       	swap	r25
     b54:	82 95       	swap	r24
     b56:	8f 70       	andi	r24, 0x0F	; 15
     b58:	89 27       	eor	r24, r25
     b5a:	9f 70       	andi	r25, 0x0F	; 15
     b5c:	89 27       	eor	r24, r25
     b5e:	2f 2f       	mov	r18, r31
     b60:	2f 93       	push	r18
     b62:	2e 2f       	mov	r18, r30
     b64:	2f 93       	push	r18
     b66:	29 2f       	mov	r18, r25
     b68:	2f 93       	push	r18
     b6a:	8f 93       	push	r24
     b6c:	89 e2       	ldi	r24, 0x29	; 41
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	89 2f       	mov	r24, r25
     b72:	8f 93       	push	r24
     b74:	89 e2       	ldi	r24, 0x29	; 41
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	8f 93       	push	r24
     b7a:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
			lcd_printf("\nOtacky:         %4d", user_profile.rpm);
     b8a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
     b8e:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
     b92:	29 2f       	mov	r18, r25
     b94:	2f 93       	push	r18
     b96:	8f 93       	push	r24
     b98:	82 e4       	ldi	r24, 0x42	; 66
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	89 2f       	mov	r24, r25
     b9e:	8f 93       	push	r24
     ba0:	82 e4       	ldi	r24, 0x42	; 66
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	8f 93       	push	r24
     ba6:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0

			switch (machine_state)
     bb2:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <machine_state>
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	41 f5       	brne	.+80     	; 0xc0e <__stack+0x30f>
			{
				case MACHINE_STOP:
					lcd_printf("\n\n%cStart        %cMenu ", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, (main_menu_secelt == MAIN_MENU_SELECT_MENU) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     bbe:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	19 f4       	brne	.+6      	; 0xbcc <__stack+0x2cd>
     bc6:	28 e0       	ldi	r18, 0x08	; 8
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__stack+0x2d1>
     bcc:	20 e2       	ldi	r18, 0x20	; 32
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     bd4:	88 23       	and	r24, r24
     bd6:	19 f4       	brne	.+6      	; 0xbde <__stack+0x2df>
     bd8:	88 e0       	ldi	r24, 0x08	; 8
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <__stack+0x2e3>
     bde:	80 e2       	ldi	r24, 0x20	; 32
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	43 2f       	mov	r20, r19
     be4:	4f 93       	push	r20
     be6:	2f 93       	push	r18
     be8:	29 2f       	mov	r18, r25
     bea:	2f 93       	push	r18
     bec:	8f 93       	push	r24
     bee:	87 e5       	ldi	r24, 0x57	; 87
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	89 2f       	mov	r24, r25
     bf4:	8f 93       	push	r24
     bf6:	87 e5       	ldi	r24, 0x57	; 87
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	8f 93       	push	r24
     bfc:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
					break;
     c0c:	98 c0       	rjmp	.+304    	; 0xd3e <__stack+0x43f>
				default:
					lcd_printf("\n");
     c0e:	80 e7       	ldi	r24, 0x70	; 112
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	89 2f       	mov	r24, r25
     c14:	8f 93       	push	r24
     c16:	80 e7       	ldi	r24, 0x70	; 112
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	8f 93       	push	r24
     c1c:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
					// bar to end
					uint32_t bar;
					bar = backup_profile.sec - user_profile.sec;
     c24:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     c28:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     c2c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     c30:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     c34:	f9 01       	movw	r30, r18
     c36:	e8 1b       	sub	r30, r24
     c38:	f9 0b       	sbc	r31, r25
     c3a:	cf 01       	movw	r24, r30
     c3c:	cc 01       	movw	r24, r24
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	89 83       	std	Y+1, r24	; 0x01
     c44:	9a 83       	std	Y+2, r25	; 0x02
     c46:	ab 83       	std	Y+3, r26	; 0x03
     c48:	bc 83       	std	Y+4, r27	; 0x04
					if (bar)	// div zero
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	ab 81       	ldd	r26, Y+3	; 0x03
     c50:	bc 81       	ldd	r27, Y+4	; 0x04
     c52:	89 2b       	or	r24, r25
     c54:	8a 2b       	or	r24, r26
     c56:	8b 2b       	or	r24, r27
     c58:	09 f4       	brne	.+2      	; 0xc5c <__stack+0x35d>
     c5a:	4f c0       	rjmp	.+158    	; 0xcfa <__stack+0x3fb>
					{
						bar *= 20;
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	ab 81       	ldd	r26, Y+3	; 0x03
     c62:	bc 81       	ldd	r27, Y+4	; 0x04
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	aa 1f       	adc	r26, r26
     c6a:	bb 1f       	adc	r27, r27
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	aa 1f       	adc	r26, r26
     c72:	bb 1f       	adc	r27, r27
     c74:	9c 01       	movw	r18, r24
     c76:	ad 01       	movw	r20, r26
     c78:	22 0f       	add	r18, r18
     c7a:	33 1f       	adc	r19, r19
     c7c:	44 1f       	adc	r20, r20
     c7e:	55 1f       	adc	r21, r21
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	a4 1f       	adc	r26, r20
     c8e:	b5 1f       	adc	r27, r21
     c90:	89 83       	std	Y+1, r24	; 0x01
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	ab 83       	std	Y+3, r26	; 0x03
     c96:	bc 83       	std	Y+4, r27	; 0x04
						bar = bar / backup_profile.sec;
     c98:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     c9c:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     ca0:	9c 01       	movw	r18, r24
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	ab 81       	ldd	r26, Y+3	; 0x03
     cac:	bc 81       	ldd	r27, Y+4	; 0x04
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <__udivmodsi4>
     cb6:	da 01       	movw	r26, r20
     cb8:	c9 01       	movw	r24, r18
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	ab 83       	std	Y+3, r26	; 0x03
     cc0:	bc 83       	std	Y+4, r27	; 0x04
					}
					for (; bar > 0; bar--)
     cc2:	1b c0       	rjmp	.+54     	; 0xcfa <__stack+0x3fb>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
     cc4:	1f 92       	push	r1
     cc6:	89 e0       	ldi	r24, 0x09	; 9
     cc8:	8f 93       	push	r24
     cca:	82 e7       	ldi	r24, 0x72	; 114
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	89 2f       	mov	r24, r25
     cd0:	8f 93       	push	r24
     cd2:	82 e7       	ldi	r24, 0x72	; 114
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	8f 93       	push	r24
     cd8:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
					if (bar)	// div zero
					{
						bar *= 20;
						bar = bar / backup_profile.sec;
					}
					for (; bar > 0; bar--)
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	ab 81       	ldd	r26, Y+3	; 0x03
     cea:	bc 81       	ldd	r27, Y+4	; 0x04
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	a1 09       	sbc	r26, r1
     cf0:	b1 09       	sbc	r27, r1
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	ab 83       	std	Y+3, r26	; 0x03
     cf8:	bc 83       	std	Y+4, r27	; 0x04
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	ab 81       	ldd	r26, Y+3	; 0x03
     d00:	bc 81       	ldd	r27, Y+4	; 0x04
     d02:	89 2b       	or	r24, r25
     d04:	8a 2b       	or	r24, r26
     d06:	8b 2b       	or	r24, r27
     d08:	e9 f6       	brne	.-70     	; 0xcc4 <__stack+0x3c5>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
					}

					lcd_printf("\n%cStop", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     d0a:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <__data_end>
     d0e:	88 23       	and	r24, r24
     d10:	19 f4       	brne	.+6      	; 0xd18 <__stack+0x419>
     d12:	88 e0       	ldi	r24, 0x08	; 8
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <__stack+0x41d>
     d18:	80 e2       	ldi	r24, 0x20	; 32
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	29 2f       	mov	r18, r25
     d1e:	2f 93       	push	r18
     d20:	8f 93       	push	r24
     d22:	85 e7       	ldi	r24, 0x75	; 117
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	89 2f       	mov	r24, r25
     d28:	8f 93       	push	r24
     d2a:	85 e7       	ldi	r24, 0x75	; 117
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	8f 93       	push	r24
     d30:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
					break;
     d3c:	00 00       	nop
			}
			break;
     d3e:	15 c3       	rjmp	.+1578   	; 0x136a <__stack+0xa6b>

		case ITEM_MENU:
			lcd_printf("\f%cRychlost omylani", (item_menu_secect == ITEM_MENU_SELECT_RPM) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     d40:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <item_menu_secect.1907>
     d44:	88 23       	and	r24, r24
     d46:	19 f4       	brne	.+6      	; 0xd4e <__stack+0x44f>
     d48:	88 e0       	ldi	r24, 0x08	; 8
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <__stack+0x453>
     d4e:	80 e2       	ldi	r24, 0x20	; 32
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	29 2f       	mov	r18, r25
     d54:	2f 93       	push	r18
     d56:	8f 93       	push	r24
     d58:	8d e7       	ldi	r24, 0x7D	; 125
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	89 2f       	mov	r24, r25
     d5e:	8f 93       	push	r24
     d60:	8d e7       	ldi	r24, 0x7D	; 125
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	8f 93       	push	r24
     d66:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
			lcd_printf("\n%cDelka omylani", (item_menu_secect == ITEM_MENU_SELECT_TIME) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     d72:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <item_menu_secect.1907>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	19 f4       	brne	.+6      	; 0xd80 <__stack+0x481>
     d7a:	88 e0       	ldi	r24, 0x08	; 8
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <__stack+0x485>
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	29 2f       	mov	r18, r25
     d86:	2f 93       	push	r18
     d88:	8f 93       	push	r24
     d8a:	81 e9       	ldi	r24, 0x91	; 145
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	89 2f       	mov	r24, r25
     d90:	8f 93       	push	r24
     d92:	81 e9       	ldi	r24, 0x91	; 145
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	8f 93       	push	r24
     d98:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
			lcd_printf("\n%cNacist profil", (item_menu_secect == ITEM_MENU_SELECT_LOAD) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     da4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <item_menu_secect.1907>
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	19 f4       	brne	.+6      	; 0xdb2 <__stack+0x4b3>
     dac:	88 e0       	ldi	r24, 0x08	; 8
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <__stack+0x4b7>
     db2:	80 e2       	ldi	r24, 0x20	; 32
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	29 2f       	mov	r18, r25
     db8:	2f 93       	push	r18
     dba:	8f 93       	push	r24
     dbc:	82 ea       	ldi	r24, 0xA2	; 162
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	89 2f       	mov	r24, r25
     dc2:	8f 93       	push	r24
     dc4:	82 ea       	ldi	r24, 0xA2	; 162
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	8f 93       	push	r24
     dca:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
			lcd_printf("\n%cUlozit profil", (item_menu_secect == ITEM_MENU_SELECT_SAVE) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     dd6:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <item_menu_secect.1907>
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	19 f4       	brne	.+6      	; 0xde4 <__stack+0x4e5>
     dde:	88 e0       	ldi	r24, 0x08	; 8
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <__stack+0x4e9>
     de4:	80 e2       	ldi	r24, 0x20	; 32
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	29 2f       	mov	r18, r25
     dea:	2f 93       	push	r18
     dec:	8f 93       	push	r24
     dee:	83 eb       	ldi	r24, 0xB3	; 179
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	89 2f       	mov	r24, r25
     df4:	8f 93       	push	r24
     df6:	83 eb       	ldi	r24, 0xB3	; 179
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	8f 93       	push	r24
     dfc:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
			break;
     e08:	b0 c2       	rjmp	.+1376   	; 0x136a <__stack+0xa6b>

		case RPM_MENU:
			lcd_printf("\fNastaveni otacek");
     e0a:	84 ec       	ldi	r24, 0xC4	; 196
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	89 2f       	mov	r24, r25
     e10:	8f 93       	push	r24
     e12:	84 ec       	ldi	r24, 0xC4	; 196
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	8f 93       	push	r24
     e18:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
			lcd_printf("\nza minutu");
     e20:	86 ed       	ldi	r24, 0xD6	; 214
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	89 2f       	mov	r24, r25
     e26:	8f 93       	push	r24
     e28:	86 ed       	ldi	r24, 0xD6	; 214
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	8f 93       	push	r24
     e2e:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
			lcd_printf("\nStara hodnota:%6d", user_profile.rpm);
     e36:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
     e3a:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
     e3e:	29 2f       	mov	r18, r25
     e40:	2f 93       	push	r18
     e42:	8f 93       	push	r24
     e44:	81 ee       	ldi	r24, 0xE1	; 225
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	89 2f       	mov	r24, r25
     e4a:	8f 93       	push	r24
     e4c:	81 ee       	ldi	r24, 0xE1	; 225
     e4e:	91 e0       	ldi	r25, 0x01	; 1
     e50:	8f 93       	push	r24
     e52:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
			lcd_printf("\nNova  hodnota:%6d", backup_profile.rpm);
     e5e:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <backup_profile>
     e62:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <backup_profile+0x1>
     e66:	29 2f       	mov	r18, r25
     e68:	2f 93       	push	r18
     e6a:	8f 93       	push	r24
     e6c:	84 ef       	ldi	r24, 0xF4	; 244
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	89 2f       	mov	r24, r25
     e72:	8f 93       	push	r24
     e74:	84 ef       	ldi	r24, 0xF4	; 244
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	8f 93       	push	r24
     e7a:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
			break;
     e86:	71 c2       	rjmp	.+1250   	; 0x136a <__stack+0xa6b>

		case TIME_MENU:
			lcd_printf("\fNastaveni delky");
     e88:	87 e0       	ldi	r24, 0x07	; 7
     e8a:	92 e0       	ldi	r25, 0x02	; 2
     e8c:	89 2f       	mov	r24, r25
     e8e:	8f 93       	push	r24
     e90:	87 e0       	ldi	r24, 0x07	; 7
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	8f 93       	push	r24
     e96:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
			lcd_printf("\nomylani [HH:MM]");
     e9e:	88 e1       	ldi	r24, 0x18	; 24
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	89 2f       	mov	r24, r25
     ea4:	8f 93       	push	r24
     ea6:	88 e1       	ldi	r24, 0x18	; 24
     ea8:	92 e0       	ldi	r25, 0x02	; 2
     eaa:	8f 93       	push	r24
     eac:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
			lcd_printf("\nStary cas:     %2d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60);
     eb4:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     eb8:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     ebc:	20 e1       	ldi	r18, 0x10	; 16
     ebe:	3e e0       	ldi	r19, 0x0E	; 14
     ec0:	b9 01       	movw	r22, r18
     ec2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     ec6:	9c 01       	movw	r18, r24
     ec8:	a9 e8       	ldi	r26, 0x89	; 137
     eca:	b8 e8       	ldi	r27, 0x88	; 136
     ecc:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
     ed0:	9c 01       	movw	r18, r24
     ed2:	36 95       	lsr	r19
     ed4:	27 95       	ror	r18
     ed6:	32 95       	swap	r19
     ed8:	22 95       	swap	r18
     eda:	2f 70       	andi	r18, 0x0F	; 15
     edc:	23 27       	eor	r18, r19
     ede:	3f 70       	andi	r19, 0x0F	; 15
     ee0:	23 27       	eor	r18, r19
     ee2:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <user_profile+0x2>
     ee6:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <user_profile+0x3>
     eea:	40 e1       	ldi	r20, 0x10	; 16
     eec:	5e e0       	ldi	r21, 0x0E	; 14
     eee:	ba 01       	movw	r22, r20
     ef0:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     ef4:	cb 01       	movw	r24, r22
     ef6:	43 2f       	mov	r20, r19
     ef8:	4f 93       	push	r20
     efa:	2f 93       	push	r18
     efc:	29 2f       	mov	r18, r25
     efe:	2f 93       	push	r18
     f00:	8f 93       	push	r24
     f02:	89 e2       	ldi	r24, 0x29	; 41
     f04:	92 e0       	ldi	r25, 0x02	; 2
     f06:	89 2f       	mov	r24, r25
     f08:	8f 93       	push	r24
     f0a:	89 e2       	ldi	r24, 0x29	; 41
     f0c:	92 e0       	ldi	r25, 0x02	; 2
     f0e:	8f 93       	push	r24
     f10:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
			lcd_printf("\nNovy  cas:     %2d:%02d", backup_profile.sec/3600, (backup_profile.sec%3600)/60);
     f20:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     f24:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     f28:	20 e1       	ldi	r18, 0x10	; 16
     f2a:	3e e0       	ldi	r19, 0x0E	; 14
     f2c:	b9 01       	movw	r22, r18
     f2e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     f32:	9c 01       	movw	r18, r24
     f34:	a9 e8       	ldi	r26, 0x89	; 137
     f36:	b8 e8       	ldi	r27, 0x88	; 136
     f38:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
     f3c:	9c 01       	movw	r18, r24
     f3e:	36 95       	lsr	r19
     f40:	27 95       	ror	r18
     f42:	32 95       	swap	r19
     f44:	22 95       	swap	r18
     f46:	2f 70       	andi	r18, 0x0F	; 15
     f48:	23 27       	eor	r18, r19
     f4a:	3f 70       	andi	r19, 0x0F	; 15
     f4c:	23 27       	eor	r18, r19
     f4e:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <backup_profile+0x2>
     f52:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <backup_profile+0x3>
     f56:	40 e1       	ldi	r20, 0x10	; 16
     f58:	5e e0       	ldi	r21, 0x0E	; 14
     f5a:	ba 01       	movw	r22, r20
     f5c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     f60:	cb 01       	movw	r24, r22
     f62:	43 2f       	mov	r20, r19
     f64:	4f 93       	push	r20
     f66:	2f 93       	push	r18
     f68:	29 2f       	mov	r18, r25
     f6a:	2f 93       	push	r18
     f6c:	8f 93       	push	r24
     f6e:	82 e4       	ldi	r24, 0x42	; 66
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	89 2f       	mov	r24, r25
     f74:	8f 93       	push	r24
     f76:	82 e4       	ldi	r24, 0x42	; 66
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	8f 93       	push	r24
     f7c:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
			break;
     f8c:	ee c1       	rjmp	.+988    	; 0x136a <__stack+0xa6b>

		case LOAD_MENU:
			lcd_printf("\fNacteni profilu");
     f8e:	8b e5       	ldi	r24, 0x5B	; 91
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	89 2f       	mov	r24, r25
     f94:	8f 93       	push	r24
     f96:	8b e5       	ldi	r24, 0x5B	; 91
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	8f 93       	push	r24
     f9c:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
     fa4:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
     fa8:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
     fac:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
     fb0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
     fb4:	20 e1       	ldi	r18, 0x10	; 16
     fb6:	3e e0       	ldi	r19, 0x0E	; 14
     fb8:	b9 01       	movw	r22, r18
     fba:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     fbe:	9c 01       	movw	r18, r24
     fc0:	a9 e8       	ldi	r26, 0x89	; 137
     fc2:	b8 e8       	ldi	r27, 0x88	; 136
     fc4:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
     fc8:	9c 01       	movw	r18, r24
     fca:	36 95       	lsr	r19
     fcc:	27 95       	ror	r18
     fce:	32 95       	swap	r19
     fd0:	22 95       	swap	r18
     fd2:	2f 70       	andi	r18, 0x0F	; 15
     fd4:	23 27       	eor	r18, r19
     fd6:	3f 70       	andi	r19, 0x0F	; 15
     fd8:	23 27       	eor	r18, r19
     fda:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
     fde:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
     fe2:	40 e1       	ldi	r20, 0x10	; 16
     fe4:	5e e0       	ldi	r21, 0x0E	; 14
     fe6:	ba 01       	movw	r22, r20
     fe8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
     fec:	cb 01       	movw	r24, r22
     fee:	ac 01       	movw	r20, r24
     ff0:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <load_menu_select.1908>
     ff4:	88 23       	and	r24, r24
     ff6:	19 f4       	brne	.+6      	; 0xffe <__stack+0x6ff>
     ff8:	88 e0       	ldi	r24, 0x08	; 8
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__stack+0x703>
     ffe:	80 e2       	ldi	r24, 0x20	; 32
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	6f 2f       	mov	r22, r31
    1004:	6f 93       	push	r22
    1006:	6e 2f       	mov	r22, r30
    1008:	6f 93       	push	r22
    100a:	63 2f       	mov	r22, r19
    100c:	6f 93       	push	r22
    100e:	2f 93       	push	r18
    1010:	25 2f       	mov	r18, r21
    1012:	2f 93       	push	r18
    1014:	24 2f       	mov	r18, r20
    1016:	2f 93       	push	r18
    1018:	29 2f       	mov	r18, r25
    101a:	2f 93       	push	r18
    101c:	8f 93       	push	r24
    101e:	8c e6       	ldi	r24, 0x6C	; 108
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	89 2f       	mov	r24, r25
    1024:	8f 93       	push	r24
    1026:	8c e6       	ldi	r24, 0x6C	; 108
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	8f 93       	push	r24
    102c:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
    1030:	4d b7       	in	r20, 0x3d	; 61
    1032:	5e b7       	in	r21, 0x3e	; 62
    1034:	46 5f       	subi	r20, 0xF6	; 246
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    1042:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    1046:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    104a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    104e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1052:	20 e1       	ldi	r18, 0x10	; 16
    1054:	3e e0       	ldi	r19, 0x0E	; 14
    1056:	b9 01       	movw	r22, r18
    1058:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    105c:	9c 01       	movw	r18, r24
    105e:	a9 e8       	ldi	r26, 0x89	; 137
    1060:	b8 e8       	ldi	r27, 0x88	; 136
    1062:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
    1066:	9c 01       	movw	r18, r24
    1068:	36 95       	lsr	r19
    106a:	27 95       	ror	r18
    106c:	32 95       	swap	r19
    106e:	22 95       	swap	r18
    1070:	2f 70       	andi	r18, 0x0F	; 15
    1072:	23 27       	eor	r18, r19
    1074:	3f 70       	andi	r19, 0x0F	; 15
    1076:	23 27       	eor	r18, r19
    1078:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    107c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1080:	40 e1       	ldi	r20, 0x10	; 16
    1082:	5e e0       	ldi	r21, 0x0E	; 14
    1084:	ba 01       	movw	r22, r20
    1086:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    108a:	cb 01       	movw	r24, r22
    108c:	ac 01       	movw	r20, r24
    108e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <load_menu_select.1908>
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	19 f4       	brne	.+6      	; 0x109c <__stack+0x79d>
    1096:	88 e0       	ldi	r24, 0x08	; 8
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <__stack+0x7a1>
    109c:	80 e2       	ldi	r24, 0x20	; 32
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	6f 2f       	mov	r22, r31
    10a2:	6f 93       	push	r22
    10a4:	6e 2f       	mov	r22, r30
    10a6:	6f 93       	push	r22
    10a8:	63 2f       	mov	r22, r19
    10aa:	6f 93       	push	r22
    10ac:	2f 93       	push	r18
    10ae:	25 2f       	mov	r18, r21
    10b0:	2f 93       	push	r18
    10b2:	24 2f       	mov	r18, r20
    10b4:	2f 93       	push	r18
    10b6:	29 2f       	mov	r18, r25
    10b8:	2f 93       	push	r18
    10ba:	8f 93       	push	r24
    10bc:	84 e8       	ldi	r24, 0x84	; 132
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	89 2f       	mov	r24, r25
    10c2:	8f 93       	push	r24
    10c4:	84 e8       	ldi	r24, 0x84	; 132
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	8f 93       	push	r24
    10ca:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
    10ce:	8d b7       	in	r24, 0x3d	; 61
    10d0:	9e b7       	in	r25, 0x3e	; 62
    10d2:	0a 96       	adiw	r24, 0x0a	; 10
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    10de:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    10e2:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    10e6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    10ea:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    10ee:	20 e1       	ldi	r18, 0x10	; 16
    10f0:	3e e0       	ldi	r19, 0x0E	; 14
    10f2:	b9 01       	movw	r22, r18
    10f4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    10f8:	9c 01       	movw	r18, r24
    10fa:	a9 e8       	ldi	r26, 0x89	; 137
    10fc:	b8 e8       	ldi	r27, 0x88	; 136
    10fe:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
    1102:	9c 01       	movw	r18, r24
    1104:	36 95       	lsr	r19
    1106:	27 95       	ror	r18
    1108:	32 95       	swap	r19
    110a:	22 95       	swap	r18
    110c:	2f 70       	andi	r18, 0x0F	; 15
    110e:	23 27       	eor	r18, r19
    1110:	3f 70       	andi	r19, 0x0F	; 15
    1112:	23 27       	eor	r18, r19
    1114:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1118:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    111c:	40 e1       	ldi	r20, 0x10	; 16
    111e:	5e e0       	ldi	r21, 0x0E	; 14
    1120:	ba 01       	movw	r22, r20
    1122:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    1126:	cb 01       	movw	r24, r22
    1128:	ac 01       	movw	r20, r24
    112a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <load_menu_select.1908>
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	19 f4       	brne	.+6      	; 0x1138 <__stack+0x839>
    1132:	88 e0       	ldi	r24, 0x08	; 8
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <__stack+0x83d>
    1138:	80 e2       	ldi	r24, 0x20	; 32
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	6f 2f       	mov	r22, r31
    113e:	6f 93       	push	r22
    1140:	6e 2f       	mov	r22, r30
    1142:	6f 93       	push	r22
    1144:	63 2f       	mov	r22, r19
    1146:	6f 93       	push	r22
    1148:	2f 93       	push	r18
    114a:	25 2f       	mov	r18, r21
    114c:	2f 93       	push	r18
    114e:	24 2f       	mov	r18, r20
    1150:	2f 93       	push	r18
    1152:	29 2f       	mov	r18, r25
    1154:	2f 93       	push	r18
    1156:	8f 93       	push	r24
    1158:	8c e9       	ldi	r24, 0x9C	; 156
    115a:	92 e0       	ldi	r25, 0x02	; 2
    115c:	89 2f       	mov	r24, r25
    115e:	8f 93       	push	r24
    1160:	8c e9       	ldi	r24, 0x9C	; 156
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	8f 93       	push	r24
    1166:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
    116a:	ed b7       	in	r30, 0x3d	; 61
    116c:	fe b7       	in	r31, 0x3e	; 62
    116e:	3a 96       	adiw	r30, 0x0a	; 10
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
			break;
    117a:	f7 c0       	rjmp	.+494    	; 0x136a <__stack+0xa6b>

		case SAVE_MENU:
			lcd_printf("\fUlozeni profilu");
    117c:	84 eb       	ldi	r24, 0xB4	; 180
    117e:	92 e0       	ldi	r25, 0x02	; 2
    1180:	89 2f       	mov	r24, r25
    1182:	8f 93       	push	r24
    1184:	84 eb       	ldi	r24, 0xB4	; 180
    1186:	92 e0       	ldi	r25, 0x02	; 2
    1188:	8f 93       	push	r24
    118a:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    1192:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    1196:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    119a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    119e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    11a2:	20 e1       	ldi	r18, 0x10	; 16
    11a4:	3e e0       	ldi	r19, 0x0E	; 14
    11a6:	b9 01       	movw	r22, r18
    11a8:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    11ac:	9c 01       	movw	r18, r24
    11ae:	a9 e8       	ldi	r26, 0x89	; 137
    11b0:	b8 e8       	ldi	r27, 0x88	; 136
    11b2:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
    11b6:	9c 01       	movw	r18, r24
    11b8:	36 95       	lsr	r19
    11ba:	27 95       	ror	r18
    11bc:	32 95       	swap	r19
    11be:	22 95       	swap	r18
    11c0:	2f 70       	andi	r18, 0x0F	; 15
    11c2:	23 27       	eor	r18, r19
    11c4:	3f 70       	andi	r19, 0x0F	; 15
    11c6:	23 27       	eor	r18, r19
    11c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    11cc:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    11d0:	40 e1       	ldi	r20, 0x10	; 16
    11d2:	5e e0       	ldi	r21, 0x0E	; 14
    11d4:	ba 01       	movw	r22, r20
    11d6:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    11da:	cb 01       	movw	r24, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <save_menu_select.1909>
    11e2:	88 23       	and	r24, r24
    11e4:	19 f4       	brne	.+6      	; 0x11ec <__stack+0x8ed>
    11e6:	88 e0       	ldi	r24, 0x08	; 8
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <__stack+0x8f1>
    11ec:	80 e2       	ldi	r24, 0x20	; 32
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	6f 2f       	mov	r22, r31
    11f2:	6f 93       	push	r22
    11f4:	6e 2f       	mov	r22, r30
    11f6:	6f 93       	push	r22
    11f8:	63 2f       	mov	r22, r19
    11fa:	6f 93       	push	r22
    11fc:	2f 93       	push	r18
    11fe:	25 2f       	mov	r18, r21
    1200:	2f 93       	push	r18
    1202:	24 2f       	mov	r18, r20
    1204:	2f 93       	push	r18
    1206:	29 2f       	mov	r18, r25
    1208:	2f 93       	push	r18
    120a:	8f 93       	push	r24
    120c:	8c e6       	ldi	r24, 0x6C	; 108
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	89 2f       	mov	r24, r25
    1212:	8f 93       	push	r24
    1214:	8c e6       	ldi	r24, 0x6C	; 108
    1216:	92 e0       	ldi	r25, 0x02	; 2
    1218:	8f 93       	push	r24
    121a:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
    121e:	4d b7       	in	r20, 0x3d	; 61
    1220:	5e b7       	in	r21, 0x3e	; 62
    1222:	46 5f       	subi	r20, 0xF6	; 246
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    1230:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    1234:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1238:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    123c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1240:	20 e1       	ldi	r18, 0x10	; 16
    1242:	3e e0       	ldi	r19, 0x0E	; 14
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    124a:	9c 01       	movw	r18, r24
    124c:	a9 e8       	ldi	r26, 0x89	; 137
    124e:	b8 e8       	ldi	r27, 0x88	; 136
    1250:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
    1254:	9c 01       	movw	r18, r24
    1256:	36 95       	lsr	r19
    1258:	27 95       	ror	r18
    125a:	32 95       	swap	r19
    125c:	22 95       	swap	r18
    125e:	2f 70       	andi	r18, 0x0F	; 15
    1260:	23 27       	eor	r18, r19
    1262:	3f 70       	andi	r19, 0x0F	; 15
    1264:	23 27       	eor	r18, r19
    1266:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    126a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    126e:	40 e1       	ldi	r20, 0x10	; 16
    1270:	5e e0       	ldi	r21, 0x0E	; 14
    1272:	ba 01       	movw	r22, r20
    1274:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    1278:	cb 01       	movw	r24, r22
    127a:	ac 01       	movw	r20, r24
    127c:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <save_menu_select.1909>
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	19 f4       	brne	.+6      	; 0x128a <__stack+0x98b>
    1284:	88 e0       	ldi	r24, 0x08	; 8
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <__stack+0x98f>
    128a:	80 e2       	ldi	r24, 0x20	; 32
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	6f 2f       	mov	r22, r31
    1290:	6f 93       	push	r22
    1292:	6e 2f       	mov	r22, r30
    1294:	6f 93       	push	r22
    1296:	63 2f       	mov	r22, r19
    1298:	6f 93       	push	r22
    129a:	2f 93       	push	r18
    129c:	25 2f       	mov	r18, r21
    129e:	2f 93       	push	r18
    12a0:	24 2f       	mov	r18, r20
    12a2:	2f 93       	push	r18
    12a4:	29 2f       	mov	r18, r25
    12a6:	2f 93       	push	r18
    12a8:	8f 93       	push	r24
    12aa:	84 e8       	ldi	r24, 0x84	; 132
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	89 2f       	mov	r24, r25
    12b0:	8f 93       	push	r24
    12b2:	84 e8       	ldi	r24, 0x84	; 132
    12b4:	92 e0       	ldi	r25, 0x02	; 2
    12b6:	8f 93       	push	r24
    12b8:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
    12bc:	8d b7       	in	r24, 0x3d	; 61
    12be:	9e b7       	in	r25, 0x3e	; 62
    12c0:	0a 96       	adiw	r24, 0x0a	; 10
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    12cc:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    12d0:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    12d4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    12d8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    12dc:	20 e1       	ldi	r18, 0x10	; 16
    12de:	3e e0       	ldi	r19, 0x0E	; 14
    12e0:	b9 01       	movw	r22, r18
    12e2:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    12e6:	9c 01       	movw	r18, r24
    12e8:	a9 e8       	ldi	r26, 0x89	; 137
    12ea:	b8 e8       	ldi	r27, 0x88	; 136
    12ec:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
    12f0:	9c 01       	movw	r18, r24
    12f2:	36 95       	lsr	r19
    12f4:	27 95       	ror	r18
    12f6:	32 95       	swap	r19
    12f8:	22 95       	swap	r18
    12fa:	2f 70       	andi	r18, 0x0F	; 15
    12fc:	23 27       	eor	r18, r19
    12fe:	3f 70       	andi	r19, 0x0F	; 15
    1300:	23 27       	eor	r18, r19
    1302:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1306:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    130a:	40 e1       	ldi	r20, 0x10	; 16
    130c:	5e e0       	ldi	r21, 0x0E	; 14
    130e:	ba 01       	movw	r22, r20
    1310:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    1314:	cb 01       	movw	r24, r22
    1316:	ac 01       	movw	r20, r24
    1318:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <save_menu_select.1909>
    131c:	82 30       	cpi	r24, 0x02	; 2
    131e:	19 f4       	brne	.+6      	; 0x1326 <__stack+0xa27>
    1320:	88 e0       	ldi	r24, 0x08	; 8
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <__stack+0xa2b>
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	6f 2f       	mov	r22, r31
    132c:	6f 93       	push	r22
    132e:	6e 2f       	mov	r22, r30
    1330:	6f 93       	push	r22
    1332:	63 2f       	mov	r22, r19
    1334:	6f 93       	push	r22
    1336:	2f 93       	push	r18
    1338:	25 2f       	mov	r18, r21
    133a:	2f 93       	push	r18
    133c:	24 2f       	mov	r18, r20
    133e:	2f 93       	push	r18
    1340:	29 2f       	mov	r18, r25
    1342:	2f 93       	push	r18
    1344:	8f 93       	push	r24
    1346:	8c e9       	ldi	r24, 0x9C	; 156
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	89 2f       	mov	r24, r25
    134c:	8f 93       	push	r24
    134e:	8c e9       	ldi	r24, 0x9C	; 156
    1350:	92 e0       	ldi	r25, 0x02	; 2
    1352:	8f 93       	push	r24
    1354:	0e 94 96 10 	call	0x212c	; 0x212c <lcd_printf>
    1358:	ed b7       	in	r30, 0x3d	; 61
    135a:	fe b7       	in	r31, 0x3e	; 62
    135c:	3a 96       	adiw	r30, 0x0a	; 10
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
			break;
    1368:	00 00       	nop

		default:
		;
	}
}
    136a:	00 00       	nop
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <lcd_init>:
#include "wyk_lcd.h"

// inicializuje lcd
void lcd_init(void)
{
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	2e 97       	sbiw	r28, 0x0e	; 14
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
	LCD_RS_DDR |= LCD_RS;
    1390:	87 e2       	ldi	r24, 0x27	; 39
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	27 e2       	ldi	r18, 0x27	; 39
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	f9 01       	movw	r30, r18
    139a:	20 81       	ld	r18, Z
    139c:	20 62       	ori	r18, 0x20	; 32
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
	LCD_RS0;
    13a2:	88 e2       	ldi	r24, 0x28	; 40
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	28 e2       	ldi	r18, 0x28	; 40
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	f9 01       	movw	r30, r18
    13ac:	20 81       	ld	r18, Z
    13ae:	2f 7d       	andi	r18, 0xDF	; 223
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18

	LCD_EN_DDR |= LCD_EN;
    13b4:	87 e2       	ldi	r24, 0x27	; 39
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	27 e2       	ldi	r18, 0x27	; 39
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	f9 01       	movw	r30, r18
    13be:	20 81       	ld	r18, Z
    13c0:	20 61       	ori	r18, 0x10	; 16
    13c2:	fc 01       	movw	r30, r24
    13c4:	20 83       	st	Z, r18
	LCD_EN0;
    13c6:	88 e2       	ldi	r24, 0x28	; 40
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	28 e2       	ldi	r18, 0x28	; 40
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	f9 01       	movw	r30, r18
    13d0:	20 81       	ld	r18, Z
    13d2:	2f 7e       	andi	r18, 0xEF	; 239
    13d4:	fc 01       	movw	r30, r24
    13d6:	20 83       	st	Z, r18

	LCD_D7_DDR |= LCD_D7;
    13d8:	87 e2       	ldi	r24, 0x27	; 39
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	27 e2       	ldi	r18, 0x27	; 39
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	f9 01       	movw	r30, r18
    13e2:	20 81       	ld	r18, Z
    13e4:	21 60       	ori	r18, 0x01	; 1
    13e6:	fc 01       	movw	r30, r24
    13e8:	20 83       	st	Z, r18
	LCD_D6_DDR |= LCD_D6;
    13ea:	87 e2       	ldi	r24, 0x27	; 39
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	27 e2       	ldi	r18, 0x27	; 39
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	f9 01       	movw	r30, r18
    13f4:	20 81       	ld	r18, Z
    13f6:	22 60       	ori	r18, 0x02	; 2
    13f8:	fc 01       	movw	r30, r24
    13fa:	20 83       	st	Z, r18
	LCD_D5_DDR |= LCD_D5;
    13fc:	87 e2       	ldi	r24, 0x27	; 39
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	27 e2       	ldi	r18, 0x27	; 39
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	f9 01       	movw	r30, r18
    1406:	20 81       	ld	r18, Z
    1408:	24 60       	ori	r18, 0x04	; 4
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
	LCD_D4_DDR |= LCD_D4;
    140e:	87 e2       	ldi	r24, 0x27	; 39
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	27 e2       	ldi	r18, 0x27	; 39
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	f9 01       	movw	r30, r18
    1418:	20 81       	ld	r18, Z
    141a:	28 60       	ori	r18, 0x08	; 8
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18

	LCD_D7_0;
    1420:	88 e2       	ldi	r24, 0x28	; 40
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	28 e2       	ldi	r18, 0x28	; 40
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	f9 01       	movw	r30, r18
    142a:	20 81       	ld	r18, Z
    142c:	2e 7f       	andi	r18, 0xFE	; 254
    142e:	fc 01       	movw	r30, r24
    1430:	20 83       	st	Z, r18
	LCD_D6_0;
    1432:	88 e2       	ldi	r24, 0x28	; 40
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	28 e2       	ldi	r18, 0x28	; 40
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	f9 01       	movw	r30, r18
    143c:	20 81       	ld	r18, Z
    143e:	2d 7f       	andi	r18, 0xFD	; 253
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
	LCD_D5_0;
    1444:	88 e2       	ldi	r24, 0x28	; 40
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	28 e2       	ldi	r18, 0x28	; 40
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	2b 7f       	andi	r18, 0xFB	; 251
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
	LCD_D4_0;
    1456:	88 e2       	ldi	r24, 0x28	; 40
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	28 e2       	ldi	r18, 0x28	; 40
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	f9 01       	movw	r30, r18
    1460:	20 81       	ld	r18, Z
    1462:	27 7f       	andi	r18, 0xF7	; 247
    1464:	fc 01       	movw	r30, r24
    1466:	20 83       	st	Z, r18


	lcd_set_nibble(LCD_CMD_INIT>>4);
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 05 0b 	call	0x160a	; 0x160a <lcd_set_nibble>
	LCD_EN1;
    1470:	88 e2       	ldi	r24, 0x28	; 40
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	28 e2       	ldi	r18, 0x28	; 40
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	f9 01       	movw	r30, r18
    147a:	20 81       	ld	r18, Z
    147c:	20 61       	ori	r18, 0x10	; 16
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e4       	ldi	r27, 0x40	; 64
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	ab 83       	std	Y+3, r26	; 0x03
    1490:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e8       	ldi	r19, 0x80	; 128
    1496:	4b eb       	ldi	r20, 0xBB	; 187
    1498:	55 e4       	ldi	r21, 0x45	; 69
    149a:	69 81       	ldd	r22, Y+1	; 0x01
    149c:	7a 81       	ldd	r23, Y+2	; 0x02
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	af 83       	std	Y+7, r26	; 0x07
    14b0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e8       	ldi	r20, 0x80	; 128
    14b8:	5f e3       	ldi	r21, 0x3F	; 63
    14ba:	6d 81       	ldd	r22, Y+5	; 0x05
    14bc:	7e 81       	ldd	r23, Y+6	; 0x06
    14be:	8f 81       	ldd	r24, Y+7	; 0x07
    14c0:	98 85       	ldd	r25, Y+8	; 0x08
    14c2:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <lcd_init+0x158>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9a 87       	std	Y+10, r25	; 0x0a
    14d0:	89 87       	std	Y+9, r24	; 0x09
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <lcd_init+0x1d6>
	else if (__tmp > 65535)
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	3f ef       	ldi	r19, 0xFF	; 255
    14d8:	4f e7       	ldi	r20, 0x7F	; 127
    14da:	57 e4       	ldi	r21, 0x47	; 71
    14dc:	6d 81       	ldd	r22, Y+5	; 0x05
    14de:	7e 81       	ldd	r23, Y+6	; 0x06
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	4c f5       	brge	.+82     	; 0x153e <lcd_init+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e2       	ldi	r20, 0x20	; 32
    14f2:	51 e4       	ldi	r21, 0x41	; 65
    14f4:	69 81       	ldd	r22, Y+1	; 0x01
    14f6:	7a 81       	ldd	r23, Y+2	; 0x02
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9a 87       	std	Y+10, r25	; 0x0a
    1512:	89 87       	std	Y+9, r24	; 0x09
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <lcd_init+0x1b8>
    1516:	88 e5       	ldi	r24, 0x58	; 88
    1518:	92 e0       	ldi	r25, 0x02	; 2
    151a:	9c 87       	std	Y+12, r25	; 0x0c
    151c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    151e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1520:	9c 85       	ldd	r25, Y+12	; 0x0c
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <lcd_init+0x1a6>
    1526:	9c 87       	std	Y+12, r25	; 0x0c
    1528:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9a 87       	std	Y+10, r25	; 0x0a
    1532:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1534:	89 85       	ldd	r24, Y+9	; 0x09
    1536:	9a 85       	ldd	r25, Y+10	; 0x0a
    1538:	89 2b       	or	r24, r25
    153a:	69 f7       	brne	.-38     	; 0x1516 <lcd_init+0x19a>
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <lcd_init+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153e:	6d 81       	ldd	r22, Y+5	; 0x05
    1540:	7e 81       	ldd	r23, Y+6	; 0x06
    1542:	8f 81       	ldd	r24, Y+7	; 0x07
    1544:	98 85       	ldd	r25, Y+8	; 0x08
    1546:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9a 87       	std	Y+10, r25	; 0x0a
    1550:	89 87       	std	Y+9, r24	; 0x09
    1552:	89 85       	ldd	r24, Y+9	; 0x09
    1554:	9a 85       	ldd	r25, Y+10	; 0x0a
    1556:	9e 87       	std	Y+14, r25	; 0x0e
    1558:	8d 87       	std	Y+13, r24	; 0x0d
    155a:	8d 85       	ldd	r24, Y+13	; 0x0d
    155c:	9e 85       	ldd	r25, Y+14	; 0x0e
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <lcd_init+0x1e2>
    1562:	9e 87       	std	Y+14, r25	; 0x0e
    1564:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
	LCD_EN0;
    1566:	88 e2       	ldi	r24, 0x28	; 40
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	28 e2       	ldi	r18, 0x28	; 40
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	f9 01       	movw	r30, r18
    1570:	20 81       	ld	r18, Z
    1572:	2f 7e       	andi	r18, 0xEF	; 239
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18
	lcd_cmd(LCD_CMD_INIT);
    1578:	88 e2       	ldi	r24, 0x28	; 40
    157a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURS);
    157e:	8c e0       	ldi	r24, 0x0C	; 12
    1580:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
	lcd_cmd(LCD_CMD_CLR);
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>

	// přidání vlastních znaků
	lcd_cmd(LCD_CMD_W_CGRAM);
    158a:	80 e4       	ldi	r24, 0x40	; 64
    158c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
	// trojuhelnik
	lcd_put(0b00010000);
    1590:	80 e1       	ldi	r24, 0x10	; 16
    1592:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011000);
    1596:	88 e1       	ldi	r24, 0x18	; 24
    1598:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011100);
    159c:	8c e1       	ldi	r24, 0x1C	; 28
    159e:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011110);
    15a2:	8e e1       	ldi	r24, 0x1E	; 30
    15a4:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011100);
    15a8:	8c e1       	ldi	r24, 0x1C	; 28
    15aa:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011000);
    15ae:	88 e1       	ldi	r24, 0x18	; 24
    15b0:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00010000);
    15b4:	80 e1       	ldi	r24, 0x10	; 16
    15b6:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00000000);
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	// bar
	lcd_put(0b00000000);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00000000);
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011111);
    15cc:	8f e1       	ldi	r24, 0x1F	; 31
    15ce:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011111);
    15d2:	8f e1       	ldi	r24, 0x1F	; 31
    15d4:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011111);
    15d8:	8f e1       	ldi	r24, 0x1F	; 31
    15da:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00011111);
    15de:	8f e1       	ldi	r24, 0x1F	; 31
    15e0:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00000000);
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	lcd_put(0b00000000);
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	
	// přepnutí na zápis do zobrazovací paměti
	lcd_cmd(LCD_CMD_W_DDRAM);
    15f0:	80 e8       	ldi	r24, 0x80	; 128
    15f2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
}
    15f6:	00 00       	nop
    15f8:	2e 96       	adiw	r28, 0x0e	; 14
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <lcd_set_nibble>:

// posílat napřed msn a pak lsn
void lcd_set_nibble(uint8_t nibble)
{
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	1f 92       	push	r1
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	89 83       	std	Y+1, r24	; 0x01
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	88 70       	andi	r24, 0x08	; 8
    161e:	99 27       	eor	r25, r25
    1620:	89 2b       	or	r24, r25
    1622:	51 f0       	breq	.+20     	; 0x1638 <lcd_set_nibble+0x2e>
    1624:	88 e2       	ldi	r24, 0x28	; 40
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	28 e2       	ldi	r18, 0x28	; 40
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	f9 01       	movw	r30, r18
    162e:	20 81       	ld	r18, Z
    1630:	21 60       	ori	r18, 0x01	; 1
    1632:	fc 01       	movw	r30, r24
    1634:	20 83       	st	Z, r18
    1636:	09 c0       	rjmp	.+18     	; 0x164a <lcd_set_nibble+0x40>
    1638:	88 e2       	ldi	r24, 0x28	; 40
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	28 e2       	ldi	r18, 0x28	; 40
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	f9 01       	movw	r30, r18
    1642:	20 81       	ld	r18, Z
    1644:	2e 7f       	andi	r18, 0xFE	; 254
    1646:	fc 01       	movw	r30, r24
    1648:	20 83       	st	Z, r18
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	84 70       	andi	r24, 0x04	; 4
    1652:	99 27       	eor	r25, r25
    1654:	89 2b       	or	r24, r25
    1656:	51 f0       	breq	.+20     	; 0x166c <lcd_set_nibble+0x62>
    1658:	88 e2       	ldi	r24, 0x28	; 40
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	28 e2       	ldi	r18, 0x28	; 40
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	20 81       	ld	r18, Z
    1664:	22 60       	ori	r18, 0x02	; 2
    1666:	fc 01       	movw	r30, r24
    1668:	20 83       	st	Z, r18
    166a:	09 c0       	rjmp	.+18     	; 0x167e <lcd_set_nibble+0x74>
    166c:	88 e2       	ldi	r24, 0x28	; 40
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	28 e2       	ldi	r18, 0x28	; 40
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	f9 01       	movw	r30, r18
    1676:	20 81       	ld	r18, Z
    1678:	2d 7f       	andi	r18, 0xFD	; 253
    167a:	fc 01       	movw	r30, r24
    167c:	20 83       	st	Z, r18
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	82 70       	andi	r24, 0x02	; 2
    1686:	99 27       	eor	r25, r25
    1688:	89 2b       	or	r24, r25
    168a:	51 f0       	breq	.+20     	; 0x16a0 <lcd_set_nibble+0x96>
    168c:	88 e2       	ldi	r24, 0x28	; 40
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	28 e2       	ldi	r18, 0x28	; 40
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	f9 01       	movw	r30, r18
    1696:	20 81       	ld	r18, Z
    1698:	24 60       	ori	r18, 0x04	; 4
    169a:	fc 01       	movw	r30, r24
    169c:	20 83       	st	Z, r18
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <lcd_set_nibble+0xa8>
    16a0:	88 e2       	ldi	r24, 0x28	; 40
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	28 e2       	ldi	r18, 0x28	; 40
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	f9 01       	movw	r30, r18
    16aa:	20 81       	ld	r18, Z
    16ac:	2b 7f       	andi	r18, 0xFB	; 251
    16ae:	fc 01       	movw	r30, r24
    16b0:	20 83       	st	Z, r18
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	88 2f       	mov	r24, r24
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	81 70       	andi	r24, 0x01	; 1
    16ba:	99 27       	eor	r25, r25
    16bc:	89 2b       	or	r24, r25
    16be:	51 f0       	breq	.+20     	; 0x16d4 <lcd_set_nibble+0xca>
    16c0:	88 e2       	ldi	r24, 0x28	; 40
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	28 e2       	ldi	r18, 0x28	; 40
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	f9 01       	movw	r30, r18
    16ca:	20 81       	ld	r18, Z
    16cc:	28 60       	ori	r18, 0x08	; 8
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18
}
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <lcd_set_nibble+0xdc>
void lcd_set_nibble(uint8_t nibble)
{
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    16d4:	88 e2       	ldi	r24, 0x28	; 40
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	28 e2       	ldi	r18, 0x28	; 40
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	f9 01       	movw	r30, r18
    16de:	20 81       	ld	r18, Z
    16e0:	27 7f       	andi	r18, 0xF7	; 247
    16e2:	fc 01       	movw	r30, r24
    16e4:	20 83       	st	Z, r18
}
    16e6:	00 00       	nop
    16e8:	0f 90       	pop	r0
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <lcd_cmd>:

// pošle lcd instrukci
void lcd_cmd(uint8_t cmd)
{
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	6d 97       	sbiw	r28, 0x1d	; 29
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_set_nibble(cmd>>4);
    1706:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1708:	82 95       	swap	r24
    170a:	8f 70       	andi	r24, 0x0F	; 15
    170c:	0e 94 05 0b 	call	0x160a	; 0x160a <lcd_set_nibble>
	LCD_EN1;
    1710:	88 e2       	ldi	r24, 0x28	; 40
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	28 e2       	ldi	r18, 0x28	; 40
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	20 61       	ori	r18, 0x10	; 16
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	a0 e4       	ldi	r26, 0x40	; 64
    1728:	b0 e4       	ldi	r27, 0x40	; 64
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	ab 83       	std	Y+3, r26	; 0x03
    1730:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e8       	ldi	r19, 0x80	; 128
    1736:	4b eb       	ldi	r20, 0xBB	; 187
    1738:	55 e4       	ldi	r21, 0x45	; 69
    173a:	69 81       	ldd	r22, Y+1	; 0x01
    173c:	7a 81       	ldd	r23, Y+2	; 0x02
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	8b 8b       	std	Y+19, r24	; 0x13
    174c:	9c 8b       	std	Y+20, r25	; 0x14
    174e:	ad 8b       	std	Y+21, r26	; 0x15
    1750:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e8       	ldi	r20, 0x80	; 128
    1758:	5f e3       	ldi	r21, 0x3F	; 63
    175a:	6b 89       	ldd	r22, Y+19	; 0x13
    175c:	7c 89       	ldd	r23, Y+20	; 0x14
    175e:	8d 89       	ldd	r24, Y+21	; 0x15
    1760:	9e 89       	ldd	r25, Y+22	; 0x16
    1762:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    1766:	88 23       	and	r24, r24
    1768:	2c f4       	brge	.+10     	; 0x1774 <lcd_cmd+0x84>
		__ticks = 1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	98 8f       	std	Y+24, r25	; 0x18
    1770:	8f 8b       	std	Y+23, r24	; 0x17
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <lcd_cmd+0x102>
	else if (__tmp > 65535)
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	3f ef       	ldi	r19, 0xFF	; 255
    1778:	4f e7       	ldi	r20, 0x7F	; 127
    177a:	57 e4       	ldi	r21, 0x47	; 71
    177c:	6b 89       	ldd	r22, Y+19	; 0x13
    177e:	7c 89       	ldd	r23, Y+20	; 0x14
    1780:	8d 89       	ldd	r24, Y+21	; 0x15
    1782:	9e 89       	ldd	r25, Y+22	; 0x16
    1784:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    1788:	18 16       	cp	r1, r24
    178a:	4c f5       	brge	.+82     	; 0x17de <lcd_cmd+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e2       	ldi	r20, 0x20	; 32
    1792:	51 e4       	ldi	r21, 0x41	; 65
    1794:	69 81       	ldd	r22, Y+1	; 0x01
    1796:	7a 81       	ldd	r23, Y+2	; 0x02
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	98 8f       	std	Y+24, r25	; 0x18
    17b2:	8f 8b       	std	Y+23, r24	; 0x17
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <lcd_cmd+0xe4>
    17b6:	88 e5       	ldi	r24, 0x58	; 88
    17b8:	92 e0       	ldi	r25, 0x02	; 2
    17ba:	9a 8f       	std	Y+26, r25	; 0x1a
    17bc:	89 8f       	std	Y+25, r24	; 0x19
    17be:	89 8d       	ldd	r24, Y+25	; 0x19
    17c0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <lcd_cmd+0xd2>
    17c6:	9a 8f       	std	Y+26, r25	; 0x1a
    17c8:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ca:	8f 89       	ldd	r24, Y+23	; 0x17
    17cc:	98 8d       	ldd	r25, Y+24	; 0x18
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	98 8f       	std	Y+24, r25	; 0x18
    17d2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d4:	8f 89       	ldd	r24, Y+23	; 0x17
    17d6:	98 8d       	ldd	r25, Y+24	; 0x18
    17d8:	89 2b       	or	r24, r25
    17da:	69 f7       	brne	.-38     	; 0x17b6 <lcd_cmd+0xc6>
    17dc:	14 c0       	rjmp	.+40     	; 0x1806 <lcd_cmd+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17de:	6b 89       	ldd	r22, Y+19	; 0x13
    17e0:	7c 89       	ldd	r23, Y+20	; 0x14
    17e2:	8d 89       	ldd	r24, Y+21	; 0x15
    17e4:	9e 89       	ldd	r25, Y+22	; 0x16
    17e6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	98 8f       	std	Y+24, r25	; 0x18
    17f0:	8f 8b       	std	Y+23, r24	; 0x17
    17f2:	8f 89       	ldd	r24, Y+23	; 0x17
    17f4:	98 8d       	ldd	r25, Y+24	; 0x18
    17f6:	9c 8f       	std	Y+28, r25	; 0x1c
    17f8:	8b 8f       	std	Y+27, r24	; 0x1b
    17fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <lcd_cmd+0x10e>
    1802:	9c 8f       	std	Y+28, r25	; 0x1c
    1804:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3);
	LCD_EN0;	
    1806:	88 e2       	ldi	r24, 0x28	; 40
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	28 e2       	ldi	r18, 0x28	; 40
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	f9 01       	movw	r30, r18
    1810:	20 81       	ld	r18, Z
    1812:	2f 7e       	andi	r18, 0xEF	; 239
    1814:	fc 01       	movw	r30, r24
    1816:	20 83       	st	Z, r18
	lcd_set_nibble(cmd);
    1818:	8d 8d       	ldd	r24, Y+29	; 0x1d
    181a:	0e 94 05 0b 	call	0x160a	; 0x160a <lcd_set_nibble>
	LCD_EN1;
    181e:	88 e2       	ldi	r24, 0x28	; 40
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	28 e2       	ldi	r18, 0x28	; 40
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	f9 01       	movw	r30, r18
    1828:	20 81       	ld	r18, Z
    182a:	20 61       	ori	r18, 0x10	; 16
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a0 e4       	ldi	r26, 0x40	; 64
    1836:	b0 e4       	ldi	r27, 0x40	; 64
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	9e 83       	std	Y+6, r25	; 0x06
    183c:	af 83       	std	Y+7, r26	; 0x07
    183e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e8       	ldi	r19, 0x80	; 128
    1844:	4b eb       	ldi	r20, 0xBB	; 187
    1846:	55 e4       	ldi	r21, 0x45	; 69
    1848:	6d 81       	ldd	r22, Y+5	; 0x05
    184a:	7e 81       	ldd	r23, Y+6	; 0x06
    184c:	8f 81       	ldd	r24, Y+7	; 0x07
    184e:	98 85       	ldd	r25, Y+8	; 0x08
    1850:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	89 87       	std	Y+9, r24	; 0x09
    185a:	9a 87       	std	Y+10, r25	; 0x0a
    185c:	ab 87       	std	Y+11, r26	; 0x0b
    185e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	69 85       	ldd	r22, Y+9	; 0x09
    186a:	7a 85       	ldd	r23, Y+10	; 0x0a
    186c:	8b 85       	ldd	r24, Y+11	; 0x0b
    186e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1870:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    1874:	88 23       	and	r24, r24
    1876:	2c f4       	brge	.+10     	; 0x1882 <lcd_cmd+0x192>
		__ticks = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	9e 87       	std	Y+14, r25	; 0x0e
    187e:	8d 87       	std	Y+13, r24	; 0x0d
    1880:	3f c0       	rjmp	.+126    	; 0x1900 <lcd_cmd+0x210>
	else if (__tmp > 65535)
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	3f ef       	ldi	r19, 0xFF	; 255
    1886:	4f e7       	ldi	r20, 0x7F	; 127
    1888:	57 e4       	ldi	r21, 0x47	; 71
    188a:	69 85       	ldd	r22, Y+9	; 0x09
    188c:	7a 85       	ldd	r23, Y+10	; 0x0a
    188e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1890:	9c 85       	ldd	r25, Y+12	; 0x0c
    1892:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    1896:	18 16       	cp	r1, r24
    1898:	4c f5       	brge	.+82     	; 0x18ec <lcd_cmd+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e2       	ldi	r20, 0x20	; 32
    18a0:	51 e4       	ldi	r21, 0x41	; 65
    18a2:	6d 81       	ldd	r22, Y+5	; 0x05
    18a4:	7e 81       	ldd	r23, Y+6	; 0x06
    18a6:	8f 81       	ldd	r24, Y+7	; 0x07
    18a8:	98 85       	ldd	r25, Y+8	; 0x08
    18aa:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9e 87       	std	Y+14, r25	; 0x0e
    18c0:	8d 87       	std	Y+13, r24	; 0x0d
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <lcd_cmd+0x1f2>
    18c4:	88 e5       	ldi	r24, 0x58	; 88
    18c6:	92 e0       	ldi	r25, 0x02	; 2
    18c8:	98 8b       	std	Y+16, r25	; 0x10
    18ca:	8f 87       	std	Y+15, r24	; 0x0f
    18cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ce:	98 89       	ldd	r25, Y+16	; 0x10
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <lcd_cmd+0x1e0>
    18d4:	98 8b       	std	Y+16, r25	; 0x10
    18d6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18da:	9e 85       	ldd	r25, Y+14	; 0x0e
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	9e 87       	std	Y+14, r25	; 0x0e
    18e0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e6:	89 2b       	or	r24, r25
    18e8:	69 f7       	brne	.-38     	; 0x18c4 <lcd_cmd+0x1d4>
    18ea:	14 c0       	rjmp	.+40     	; 0x1914 <lcd_cmd+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ec:	69 85       	ldd	r22, Y+9	; 0x09
    18ee:	7a 85       	ldd	r23, Y+10	; 0x0a
    18f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    18f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    18f4:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	9e 87       	std	Y+14, r25	; 0x0e
    18fe:	8d 87       	std	Y+13, r24	; 0x0d
    1900:	8d 85       	ldd	r24, Y+13	; 0x0d
    1902:	9e 85       	ldd	r25, Y+14	; 0x0e
    1904:	9a 8b       	std	Y+18, r25	; 0x12
    1906:	89 8b       	std	Y+17, r24	; 0x11
    1908:	89 89       	ldd	r24, Y+17	; 0x11
    190a:	9a 89       	ldd	r25, Y+18	; 0x12
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <lcd_cmd+0x21c>
    1910:	9a 8b       	std	Y+18, r25	; 0x12
    1912:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(3);
	LCD_EN0;
    1914:	88 e2       	ldi	r24, 0x28	; 40
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	28 e2       	ldi	r18, 0x28	; 40
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	f9 01       	movw	r30, r18
    191e:	20 81       	ld	r18, Z
    1920:	2f 7e       	andi	r18, 0xEF	; 239
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
}
    1926:	00 00       	nop
    1928:	6d 96       	adiw	r28, 0x1d	; 29
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <lcd_put>:

// pošle lcd znak
void lcd_put(char znak)
{
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	c1 54       	subi	r28, 0x41	; 65
    1944:	d1 09       	sbc	r29, r1
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	9e 01       	movw	r18, r28
    1952:	2f 5b       	subi	r18, 0xBF	; 191
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	f9 01       	movw	r30, r18
    1958:	80 83       	st	Z, r24
	LCD_RS1;
    195a:	88 e2       	ldi	r24, 0x28	; 40
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	28 e2       	ldi	r18, 0x28	; 40
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	f9 01       	movw	r30, r18
    1964:	20 81       	ld	r18, Z
    1966:	20 62       	ori	r18, 0x20	; 32
    1968:	fc 01       	movw	r30, r24
    196a:	20 83       	st	Z, r18
	lcd_set_nibble(znak>>4);
    196c:	ce 01       	movw	r24, r28
    196e:	8f 5b       	subi	r24, 0xBF	; 191
    1970:	9f 4f       	sbci	r25, 0xFF	; 255
    1972:	fc 01       	movw	r30, r24
    1974:	80 81       	ld	r24, Z
    1976:	82 95       	swap	r24
    1978:	8f 70       	andi	r24, 0x0F	; 15
    197a:	0e 94 05 0b 	call	0x160a	; 0x160a <lcd_set_nibble>
	LCD_EN1;
    197e:	88 e2       	ldi	r24, 0x28	; 40
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	28 e2       	ldi	r18, 0x28	; 40
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	f9 01       	movw	r30, r18
    1988:	20 81       	ld	r18, Z
    198a:	20 61       	ori	r18, 0x10	; 16
    198c:	fc 01       	movw	r30, r24
    198e:	20 83       	st	Z, r18
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e2       	ldi	r26, 0x20	; 32
    1996:	b2 e4       	ldi	r27, 0x42	; 66
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	ab 83       	std	Y+3, r26	; 0x03
    199e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	69 81       	ldd	r22, Y+1	; 0x01
    19aa:	7a 81       	ldd	r23, Y+2	; 0x02
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	9c 81       	ldd	r25, Y+4	; 0x04
    19b0:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8d a3       	std	Y+37, r24	; 0x25
    19ba:	9e a3       	std	Y+38, r25	; 0x26
    19bc:	af a3       	std	Y+39, r26	; 0x27
    19be:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 ec       	ldi	r20, 0xC0	; 192
    19c6:	50 e4       	ldi	r21, 0x40	; 64
    19c8:	69 81       	ldd	r22, Y+1	; 0x01
    19ca:	7a 81       	ldd	r23, Y+2	; 0x02
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	89 a7       	std	Y+41, r24	; 0x29
    19da:	9a a7       	std	Y+42, r25	; 0x2a
    19dc:	ab a7       	std	Y+43, r26	; 0x2b
    19de:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e8       	ldi	r20, 0x80	; 128
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	6d a1       	ldd	r22, Y+37	; 0x25
    19ea:	7e a1       	ldd	r23, Y+38	; 0x26
    19ec:	8f a1       	ldd	r24, Y+39	; 0x27
    19ee:	98 a5       	ldd	r25, Y+40	; 0x28
    19f0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	1c f4       	brge	.+6      	; 0x19fe <lcd_put+0xc4>
		__ticks = 1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	8d a7       	std	Y+45, r24	; 0x2d
    19fc:	b2 c0       	rjmp	.+356    	; 0x1b62 <lcd_put+0x228>
	else if (__tmp2 > 65535)
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	69 a5       	ldd	r22, Y+41	; 0x29
    1a08:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a0e:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	0c f0       	brlt	.+2      	; 0x1a18 <lcd_put+0xde>
    1a16:	7b c0       	rjmp	.+246    	; 0x1b0e <lcd_put+0x1d4>
	{
		_delay_ms(__us / 1000.0);
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	4a e7       	ldi	r20, 0x7A	; 122
    1a1e:	54 e4       	ldi	r21, 0x44	; 68
    1a20:	69 81       	ldd	r22, Y+1	; 0x01
    1a22:	7a 81       	ldd	r23, Y+2	; 0x02
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	9c 81       	ldd	r25, Y+4	; 0x04
    1a28:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__divsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8e a7       	std	Y+46, r24	; 0x2e
    1a32:	9f a7       	std	Y+47, r25	; 0x2f
    1a34:	a8 ab       	std	Y+48, r26	; 0x30
    1a36:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e8       	ldi	r19, 0x80	; 128
    1a3c:	4b eb       	ldi	r20, 0xBB	; 187
    1a3e:	55 e4       	ldi	r21, 0x45	; 69
    1a40:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a42:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a44:	88 a9       	ldd	r24, Y+48	; 0x30
    1a46:	99 a9       	ldd	r25, Y+49	; 0x31
    1a48:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8a ab       	std	Y+50, r24	; 0x32
    1a52:	9b ab       	std	Y+51, r25	; 0x33
    1a54:	ac ab       	std	Y+52, r26	; 0x34
    1a56:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	6a a9       	ldd	r22, Y+50	; 0x32
    1a62:	7b a9       	ldd	r23, Y+51	; 0x33
    1a64:	8c a9       	ldd	r24, Y+52	; 0x34
    1a66:	9d a9       	ldd	r25, Y+53	; 0x35
    1a68:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    1a6c:	88 23       	and	r24, r24
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <lcd_put+0x140>
		__ticks = 1;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9f ab       	std	Y+55, r25	; 0x37
    1a76:	8e ab       	std	Y+54, r24	; 0x36
    1a78:	3f c0       	rjmp	.+126    	; 0x1af8 <lcd_put+0x1be>
	else if (__tmp > 65535)
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	6a a9       	ldd	r22, Y+50	; 0x32
    1a84:	7b a9       	ldd	r23, Y+51	; 0x33
    1a86:	8c a9       	ldd	r24, Y+52	; 0x34
    1a88:	9d a9       	ldd	r25, Y+53	; 0x35
    1a8a:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	4c f5       	brge	.+82     	; 0x1ae4 <lcd_put+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a9c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a9e:	88 a9       	ldd	r24, Y+48	; 0x30
    1aa0:	99 a9       	ldd	r25, Y+49	; 0x31
    1aa2:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	9f ab       	std	Y+55, r25	; 0x37
    1ab8:	8e ab       	std	Y+54, r24	; 0x36
    1aba:	0f c0       	rjmp	.+30     	; 0x1ada <lcd_put+0x1a0>
    1abc:	88 e5       	ldi	r24, 0x58	; 88
    1abe:	92 e0       	ldi	r25, 0x02	; 2
    1ac0:	99 af       	std	Y+57, r25	; 0x39
    1ac2:	88 af       	std	Y+56, r24	; 0x38
    1ac4:	88 ad       	ldd	r24, Y+56	; 0x38
    1ac6:	99 ad       	ldd	r25, Y+57	; 0x39
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <lcd_put+0x18e>
    1acc:	99 af       	std	Y+57, r25	; 0x39
    1ace:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad0:	8e a9       	ldd	r24, Y+54	; 0x36
    1ad2:	9f a9       	ldd	r25, Y+55	; 0x37
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	9f ab       	std	Y+55, r25	; 0x37
    1ad8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ada:	8e a9       	ldd	r24, Y+54	; 0x36
    1adc:	9f a9       	ldd	r25, Y+55	; 0x37
    1ade:	89 2b       	or	r24, r25
    1ae0:	69 f7       	brne	.-38     	; 0x1abc <lcd_put+0x182>
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <lcd_put+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae4:	6a a9       	ldd	r22, Y+50	; 0x32
    1ae6:	7b a9       	ldd	r23, Y+51	; 0x33
    1ae8:	8c a9       	ldd	r24, Y+52	; 0x34
    1aea:	9d a9       	ldd	r25, Y+53	; 0x35
    1aec:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	9f ab       	std	Y+55, r25	; 0x37
    1af6:	8e ab       	std	Y+54, r24	; 0x36
    1af8:	8e a9       	ldd	r24, Y+54	; 0x36
    1afa:	9f a9       	ldd	r25, Y+55	; 0x37
    1afc:	9b af       	std	Y+59, r25	; 0x3b
    1afe:	8a af       	std	Y+58, r24	; 0x3a
    1b00:	8a ad       	ldd	r24, Y+58	; 0x3a
    1b02:	9b ad       	ldd	r25, Y+59	; 0x3b
    1b04:	01 97       	sbiw	r24, 0x01	; 1
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <lcd_put+0x1ca>
    1b08:	9b af       	std	Y+59, r25	; 0x3b
    1b0a:	8a af       	std	Y+58, r24	; 0x3a
    1b0c:	2a c0       	rjmp	.+84     	; 0x1b62 <lcd_put+0x228>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	53 e4       	ldi	r21, 0x43	; 67
    1b16:	6d a1       	ldd	r22, Y+37	; 0x25
    1b18:	7e a1       	ldd	r23, Y+38	; 0x26
    1b1a:	8f a1       	ldd	r24, Y+39	; 0x27
    1b1c:	98 a5       	ldd	r25, Y+40	; 0x28
    1b1e:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    1b22:	18 16       	cp	r1, r24
    1b24:	ac f4       	brge	.+42     	; 0x1b50 <lcd_put+0x216>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1b26:	69 a5       	ldd	r22, Y+41	; 0x29
    1b28:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b2e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	9d af       	std	Y+61, r25	; 0x3d
    1b38:	8c af       	std	Y+60, r24	; 0x3c
    1b3a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b3c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b3e:	9f af       	std	Y+63, r25	; 0x3f
    1b40:	8e af       	std	Y+62, r24	; 0x3e
    1b42:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b44:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <lcd_put+0x20c>
    1b4a:	9f af       	std	Y+63, r25	; 0x3f
    1b4c:	8e af       	std	Y+62, r24	; 0x3e
    1b4e:	1c c0       	rjmp	.+56     	; 0x1b88 <lcd_put+0x24e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b50:	6d a1       	ldd	r22, Y+37	; 0x25
    1b52:	7e a1       	ldd	r23, Y+38	; 0x26
    1b54:	8f a1       	ldd	r24, Y+39	; 0x27
    1b56:	98 a5       	ldd	r25, Y+40	; 0x28
    1b58:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	8d a7       	std	Y+45, r24	; 0x2d
    1b62:	2d a5       	ldd	r18, Y+45	; 0x2d
    1b64:	ce 01       	movw	r24, r28
    1b66:	80 5c       	subi	r24, 0xC0	; 192
    1b68:	9f 4f       	sbci	r25, 0xFF	; 255
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b6e:	ce 01       	movw	r24, r28
    1b70:	80 5c       	subi	r24, 0xC0	; 192
    1b72:	9f 4f       	sbci	r25, 0xFF	; 255
    1b74:	fc 01       	movw	r30, r24
    1b76:	80 81       	ld	r24, Z
    1b78:	28 2f       	mov	r18, r24
    1b7a:	2a 95       	dec	r18
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <lcd_put+0x240>
    1b7e:	ce 01       	movw	r24, r28
    1b80:	80 5c       	subi	r24, 0xC0	; 192
    1b82:	9f 4f       	sbci	r25, 0xFF	; 255
    1b84:	fc 01       	movw	r30, r24
    1b86:	20 83       	st	Z, r18
	_delay_us(40);
	LCD_EN0;
    1b88:	88 e2       	ldi	r24, 0x28	; 40
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	28 e2       	ldi	r18, 0x28	; 40
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	f9 01       	movw	r30, r18
    1b92:	20 81       	ld	r18, Z
    1b94:	2f 7e       	andi	r18, 0xEF	; 239
    1b96:	fc 01       	movw	r30, r24
    1b98:	20 83       	st	Z, r18
	lcd_set_nibble(znak);
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	8f 5b       	subi	r24, 0xBF	; 191
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	0e 94 05 0b 	call	0x160a	; 0x160a <lcd_set_nibble>
	LCD_EN1;
    1ba8:	88 e2       	ldi	r24, 0x28	; 40
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	28 e2       	ldi	r18, 0x28	; 40
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	20 81       	ld	r18, Z
    1bb4:	20 61       	ori	r18, 0x10	; 16
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	20 83       	st	Z, r18
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 e2       	ldi	r26, 0x20	; 32
    1bc0:	b2 e4       	ldi	r27, 0x42	; 66
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	af 83       	std	Y+7, r26	; 0x07
    1bc8:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	51 e4       	ldi	r21, 0x41	; 65
    1bd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1bd4:	7e 81       	ldd	r23, Y+6	; 0x06
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	98 85       	ldd	r25, Y+8	; 0x08
    1bda:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	89 87       	std	Y+9, r24	; 0x09
    1be4:	9a 87       	std	Y+10, r25	; 0x0a
    1be6:	ab 87       	std	Y+11, r26	; 0x0b
    1be8:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 ec       	ldi	r20, 0xC0	; 192
    1bf0:	50 e4       	ldi	r21, 0x40	; 64
    1bf2:	6d 81       	ldd	r22, Y+5	; 0x05
    1bf4:	7e 81       	ldd	r23, Y+6	; 0x06
    1bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf8:	98 85       	ldd	r25, Y+8	; 0x08
    1bfa:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8d 87       	std	Y+13, r24	; 0x0d
    1c04:	9e 87       	std	Y+14, r25	; 0x0e
    1c06:	af 87       	std	Y+15, r26	; 0x0f
    1c08:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	69 85       	ldd	r22, Y+9	; 0x09
    1c14:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c16:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c18:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c1a:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	1c f4       	brge	.+6      	; 0x1c28 <lcd_put+0x2ee>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 8b       	std	Y+17, r24	; 0x11
    1c26:	b2 c0       	rjmp	.+356    	; 0x1d8c <lcd_put+0x452>
	else if (__tmp2 > 65535)
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	57 e4       	ldi	r21, 0x47	; 71
    1c30:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c32:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c36:	98 89       	ldd	r25, Y+16	; 0x10
    1c38:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	0c f0       	brlt	.+2      	; 0x1c42 <lcd_put+0x308>
    1c40:	7b c0       	rjmp	.+246    	; 0x1d38 <lcd_put+0x3fe>
	{
		_delay_ms(__us / 1000.0);
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a e7       	ldi	r20, 0x7A	; 122
    1c48:	54 e4       	ldi	r21, 0x44	; 68
    1c4a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c4c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c50:	98 85       	ldd	r25, Y+8	; 0x08
    1c52:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__divsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8a 8b       	std	Y+18, r24	; 0x12
    1c5c:	9b 8b       	std	Y+19, r25	; 0x13
    1c5e:	ac 8b       	std	Y+20, r26	; 0x14
    1c60:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e8       	ldi	r19, 0x80	; 128
    1c66:	4b eb       	ldi	r20, 0xBB	; 187
    1c68:	55 e4       	ldi	r21, 0x45	; 69
    1c6a:	6a 89       	ldd	r22, Y+18	; 0x12
    1c6c:	7b 89       	ldd	r23, Y+19	; 0x13
    1c6e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c70:	9d 89       	ldd	r25, Y+21	; 0x15
    1c72:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8e 8b       	std	Y+22, r24	; 0x16
    1c7c:	9f 8b       	std	Y+23, r25	; 0x17
    1c7e:	a8 8f       	std	Y+24, r26	; 0x18
    1c80:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c8c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c8e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c90:	99 8d       	ldd	r25, Y+25	; 0x19
    1c92:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <lcd_put+0x36a>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9b 8f       	std	Y+27, r25	; 0x1b
    1ca0:	8a 8f       	std	Y+26, r24	; 0x1a
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <lcd_put+0x3e8>
	else if (__tmp > 65535)
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	6e 89       	ldd	r22, Y+22	; 0x16
    1cae:	7f 89       	ldd	r23, Y+23	; 0x17
    1cb0:	88 8d       	ldd	r24, Y+24	; 0x18
    1cb2:	99 8d       	ldd	r25, Y+25	; 0x19
    1cb4:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <lcd_put+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e2       	ldi	r20, 0x20	; 32
    1cc2:	51 e4       	ldi	r21, 0x41	; 65
    1cc4:	6a 89       	ldd	r22, Y+18	; 0x12
    1cc6:	7b 89       	ldd	r23, Y+19	; 0x13
    1cc8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cca:	9d 89       	ldd	r25, Y+21	; 0x15
    1ccc:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9b 8f       	std	Y+27, r25	; 0x1b
    1ce2:	8a 8f       	std	Y+26, r24	; 0x1a
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <lcd_put+0x3ca>
    1ce6:	88 e5       	ldi	r24, 0x58	; 88
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	9d 8f       	std	Y+29, r25	; 0x1d
    1cec:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cf0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <lcd_put+0x3b8>
    1cf6:	9d 8f       	std	Y+29, r25	; 0x1d
    1cf8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cfc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9b 8f       	std	Y+27, r25	; 0x1b
    1d02:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d08:	89 2b       	or	r24, r25
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <lcd_put+0x3ac>
    1d0c:	3f c0       	rjmp	.+126    	; 0x1d8c <lcd_put+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6e 89       	ldd	r22, Y+22	; 0x16
    1d10:	7f 89       	ldd	r23, Y+23	; 0x17
    1d12:	88 8d       	ldd	r24, Y+24	; 0x18
    1d14:	99 8d       	ldd	r25, Y+25	; 0x19
    1d16:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9b 8f       	std	Y+27, r25	; 0x1b
    1d20:	8a 8f       	std	Y+26, r24	; 0x1a
    1d22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d24:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1d26:	9f 8f       	std	Y+31, r25	; 0x1f
    1d28:	8e 8f       	std	Y+30, r24	; 0x1e
    1d2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <lcd_put+0x3f4>
    1d32:	9f 8f       	std	Y+31, r25	; 0x1f
    1d34:	8e 8f       	std	Y+30, r24	; 0x1e
    1d36:	2a c0       	rjmp	.+84     	; 0x1d8c <lcd_put+0x452>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	53 e4       	ldi	r21, 0x43	; 67
    1d40:	69 85       	ldd	r22, Y+9	; 0x09
    1d42:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d44:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d46:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d48:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	ac f4       	brge	.+42     	; 0x1d7a <lcd_put+0x440>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1d50:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d52:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d56:	98 89       	ldd	r25, Y+16	; 0x10
    1d58:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	99 a3       	std	Y+33, r25	; 0x21
    1d62:	88 a3       	std	Y+32, r24	; 0x20
    1d64:	88 a1       	ldd	r24, Y+32	; 0x20
    1d66:	99 a1       	ldd	r25, Y+33	; 0x21
    1d68:	9b a3       	std	Y+35, r25	; 0x23
    1d6a:	8a a3       	std	Y+34, r24	; 0x22
    1d6c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d6e:	9b a1       	ldd	r25, Y+35	; 0x23
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <lcd_put+0x436>
    1d74:	9b a3       	std	Y+35, r25	; 0x23
    1d76:	8a a3       	std	Y+34, r24	; 0x22
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <lcd_put+0x45e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d7a:	69 85       	ldd	r22, Y+9	; 0x09
    1d7c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d80:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d82:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	89 8b       	std	Y+17, r24	; 0x11
    1d8c:	89 89       	ldd	r24, Y+17	; 0x11
    1d8e:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d90:	8c a1       	ldd	r24, Y+36	; 0x24
    1d92:	8a 95       	dec	r24
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <lcd_put+0x458>
    1d96:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(40);
	LCD_EN0;
    1d98:	88 e2       	ldi	r24, 0x28	; 40
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	28 e2       	ldi	r18, 0x28	; 40
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	f9 01       	movw	r30, r18
    1da2:	20 81       	ld	r18, Z
    1da4:	2f 7e       	andi	r18, 0xEF	; 239
    1da6:	fc 01       	movw	r30, r24
    1da8:	20 83       	st	Z, r18
	LCD_RS0;
    1daa:	88 e2       	ldi	r24, 0x28	; 40
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	28 e2       	ldi	r18, 0x28	; 40
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	f9 01       	movw	r30, r18
    1db4:	20 81       	ld	r18, Z
    1db6:	2f 7d       	andi	r18, 0xDF	; 223
    1db8:	fc 01       	movw	r30, r24
    1dba:	20 83       	st	Z, r18
}
    1dbc:	00 00       	nop
    1dbe:	cf 5b       	subi	r28, 0xBF	; 191
    1dc0:	df 4f       	sbci	r29, 0xFF	; 255
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	df 91       	pop	r29
    1dce:	cf 91       	pop	r28
    1dd0:	08 95       	ret

00001dd2 <nible2hex>:

char nible2hex(uint8_t nible)
{
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	1f 92       	push	r1
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	if (nible < 10)
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	8a 30       	cpi	r24, 0x0A	; 10
    1de2:	18 f4       	brcc	.+6      	; 0x1dea <nible2hex+0x18>
		return '0' + nible;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	80 5d       	subi	r24, 0xD0	; 208
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <nible2hex+0x1c>
	else
		return 'A' + nible - 10;
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	89 5c       	subi	r24, 0xC9	; 201
}
    1dee:	0f 90       	pop	r0
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	08 95       	ret

00001df6 <print_hex>:

// vytiskne číslo int 2B
void print_hex(uint16_t cislo)
{
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <print_hex+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <print_hex+0x8>
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <print_hex+0xa>
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	9e 83       	std	Y+6, r25	; 0x06
    1e06:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1e08:	1a 82       	std	Y+2, r1	; 0x02
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    1e0c:	1c c0       	rjmp	.+56     	; 0x1e46 <print_hex+0x50>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	89 2f       	mov	r24, r25
    1e14:	99 27       	eor	r25, r25
    1e16:	82 95       	swap	r24
    1e18:	8f 70       	andi	r24, 0x0F	; 15
    1e1a:	9c 83       	std	Y+4, r25	; 0x04
    1e1c:	8b 83       	std	Y+3, r24	; 0x03
		cislo <<= 4;
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	82 95       	swap	r24
    1e24:	92 95       	swap	r25
    1e26:	90 7f       	andi	r25, 0xF0	; 240
    1e28:	98 27       	eor	r25, r24
    1e2a:	80 7f       	andi	r24, 0xF0	; 240
    1e2c:	98 27       	eor	r25, r24
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
		lcd_put(nible2hex(nible));
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <nible2hex>
    1e38:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
void print_hex(uint16_t cislo)
{
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	04 97       	sbiw	r24, 0x04	; 4
    1e4c:	00 f3       	brcs	.-64     	; 0x1e0e <print_hex+0x18>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
		cislo <<= 4;
		lcd_put(nible2hex(nible));
	}
}
    1e4e:	00 00       	nop
    1e50:	26 96       	adiw	r28, 0x06	; 6
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <print_int>:

// vytiskne číslo int 2B
void print_int(int cislo, char znaminko, char nula, int pocet_mist)
{
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	6b 97       	sbiw	r28, 0x1b	; 27
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	9f 8b       	std	Y+23, r25	; 0x17
    1e78:	8e 8b       	std	Y+22, r24	; 0x16
    1e7a:	68 8f       	std	Y+24, r22	; 0x18
    1e7c:	49 8f       	std	Y+25, r20	; 0x19
    1e7e:	3b 8f       	std	Y+27, r19	; 0x1b
    1e80:	2a 8f       	std	Y+26, r18	; 0x1a
	int poc_cislo = cislo;
    1e82:	8e 89       	ldd	r24, Y+22	; 0x16
    1e84:	9f 89       	ldd	r25, Y+23	; 0x17
    1e86:	9d 83       	std	Y+5, r25	; 0x05
    1e88:	8c 83       	std	Y+4, r24	; 0x04
	int8_t i, len = 16, state = 1;
    1e8a:	80 e1       	ldi	r24, 0x10	; 16
    1e8c:	8a 83       	std	Y+2, r24	; 0x02
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	8b 83       	std	Y+3, r24	; 0x03
	char buf[16];

	// pokud máme vypsat před číslo znamínko
	if (znaminko)
    1e92:	88 8d       	ldd	r24, Y+24	; 0x18
    1e94:	88 23       	and	r24, r24
    1e96:	49 f0       	breq	.+18     	; 0x1eaa <print_int+0x48>
	{
		lcd_put((cislo >= 0) ? '+' : '-');
    1e98:	8e 89       	ldd	r24, Y+22	; 0x16
    1e9a:	9f 89       	ldd	r25, Y+23	; 0x17
    1e9c:	99 23       	and	r25, r25
    1e9e:	14 f0       	brlt	.+4      	; 0x1ea4 <print_int+0x42>
    1ea0:	8b e2       	ldi	r24, 0x2B	; 43
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <print_int+0x44>
    1ea4:	8d e2       	ldi	r24, 0x2D	; 45
    1ea6:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	}

	// pokud je vypnutá predikce nul
	if (nula)
    1eaa:	89 8d       	ldd	r24, Y+25	; 0x19
    1eac:	88 23       	and	r24, r24
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <print_int+0x50>
		state = 0;
    1eb0:	1b 82       	std	Y+3, r1	; 0x03


	// když je zadána délka čísla
	if (pocet_mist >= 0)
    1eb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1eb4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1eb6:	99 23       	and	r25, r25
    1eb8:	14 f0       	brlt	.+4      	; 0x1ebe <print_int+0x5c>
		len = pocet_mist;
    1eba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ebc:	8a 83       	std	Y+2, r24	; 0x02

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;
    1ebe:	8e 89       	ldd	r24, Y+22	; 0x16
    1ec0:	9f 89       	ldd	r25, Y+23	; 0x17
    1ec2:	99 23       	and	r25, r25
    1ec4:	1c f4       	brge	.+6      	; 0x1ecc <print_int+0x6a>
    1ec6:	91 95       	neg	r25
    1ec8:	81 95       	neg	r24
    1eca:	91 09       	sbc	r25, r1
    1ecc:	9f 8b       	std	Y+23, r25	; 0x17
    1ece:	8e 8b       	std	Y+22, r24	; 0x16

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1ed0:	19 82       	std	Y+1, r1	; 0x01
    1ed2:	20 c0       	rjmp	.+64     	; 0x1f14 <print_int+0xb2>
	{
		buf[i] = '0' + cislo % 10;
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	88 0f       	add	r24, r24
    1eda:	33 0b       	sbc	r19, r19
    1edc:	8e 89       	ldd	r24, Y+22	; 0x16
    1ede:	9f 89       	ldd	r25, Y+23	; 0x17
    1ee0:	4a e0       	ldi	r20, 0x0A	; 10
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	ba 01       	movw	r22, r20
    1ee6:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divmodhi4>
    1eea:	40 e3       	ldi	r20, 0x30	; 48
    1eec:	48 0f       	add	r20, r24
    1eee:	ce 01       	movw	r24, r28
    1ef0:	06 96       	adiw	r24, 0x06	; 6
    1ef2:	82 0f       	add	r24, r18
    1ef4:	93 1f       	adc	r25, r19
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	40 83       	st	Z, r20
		cislo /= 10;
    1efa:	8e 89       	ldd	r24, Y+22	; 0x16
    1efc:	9f 89       	ldd	r25, Y+23	; 0x17
    1efe:	2a e0       	ldi	r18, 0x0A	; 10
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	b9 01       	movw	r22, r18
    1f04:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divmodhi4>
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9f 8b       	std	Y+23, r25	; 0x17
    1f0c:	8e 8b       	std	Y+22, r24	; 0x16

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	8f 5f       	subi	r24, 0xFF	; 255
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	99 81       	ldd	r25, Y+1	; 0x01
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	98 17       	cp	r25, r24
    1f1a:	e4 f2       	brlt	.-72     	; 0x1ed4 <print_int+0x72>
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	81 50       	subi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	3d c0       	rjmp	.+122    	; 0x1f9e <print_int+0x13c>
	{
		if (buf[i] == '0' && state)
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	08 2e       	mov	r0, r24
    1f28:	00 0c       	add	r0, r0
    1f2a:	99 0b       	sbc	r25, r25
    1f2c:	9e 01       	movw	r18, r28
    1f2e:	2a 5f       	subi	r18, 0xFA	; 250
    1f30:	3f 4f       	sbci	r19, 0xFF	; 255
    1f32:	82 0f       	add	r24, r18
    1f34:	93 1f       	adc	r25, r19
    1f36:	fc 01       	movw	r30, r24
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 33       	cpi	r24, 0x30	; 48
    1f3c:	e9 f4       	brne	.+58     	; 0x1f78 <print_int+0x116>
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	88 23       	and	r24, r24
    1f42:	d1 f0       	breq	.+52     	; 0x1f78 <print_int+0x116>
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    1f44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f46:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f48:	01 96       	adiw	r24, 0x01	; 1
    1f4a:	29 f1       	breq	.+74     	; 0x1f96 <print_int+0x134>
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	89 2b       	or	r24, r25
    1f52:	71 f4       	brne	.+28     	; 0x1f70 <print_int+0x10e>
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	08 2e       	mov	r0, r24
    1f58:	00 0c       	add	r0, r0
    1f5a:	99 0b       	sbc	r25, r25
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	2f 5f       	subi	r18, 0xFF	; 255
    1f60:	3f 4f       	sbci	r19, 0xFF	; 255
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	08 2e       	mov	r0, r24
    1f66:	00 0c       	add	r0, r0
    1f68:	99 0b       	sbc	r25, r25
    1f6a:	28 17       	cp	r18, r24
    1f6c:	39 07       	cpc	r19, r25
    1f6e:	99 f0       	breq	.+38     	; 0x1f96 <print_int+0x134>
			{
				lcd_put(' ');
    1f70:	80 e2       	ldi	r24, 0x20	; 32
    1f72:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <print_int+0x134>
				lcd_put(' ');
			}
		}
		else
		{
			state = 0;
    1f78:	1b 82       	std	Y+3, r1	; 0x03
			lcd_put(buf[i]);
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	08 2e       	mov	r0, r24
    1f7e:	00 0c       	add	r0, r0
    1f80:	99 0b       	sbc	r25, r25
    1f82:	9e 01       	movw	r18, r28
    1f84:	2a 5f       	subi	r18, 0xFA	; 250
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	82 0f       	add	r24, r18
    1f8a:	93 1f       	adc	r25, r19
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	80 81       	ld	r24, Z
    1f90:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <print_int+0x136>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    1f96:	00 00       	nop
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	81 50       	subi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	88 23       	and	r24, r24
    1fa2:	0c f0       	brlt	.+2      	; 0x1fa6 <print_int+0x144>
    1fa4:	bf cf       	rjmp	.-130    	; 0x1f24 <print_int+0xc2>
			state = 0;
			lcd_put(buf[i]);
		}

	}
	if (state)
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	88 23       	and	r24, r24
    1faa:	19 f0       	breq	.+6      	; 0x1fb2 <print_int+0x150>
	{
		lcd_put('0');
    1fac:	80 e3       	ldi	r24, 0x30	; 48
    1fae:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	}
}
    1fb2:	00 00       	nop
    1fb4:	6b 96       	adiw	r28, 0x1b	; 27
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <print_double>:

// vytiskne double
void print_double(double cislo, char znaminko, char nula, int mista_pred_carkou, int mista_za_carkou)
{
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	0f 93       	push	r16
    1fcc:	1f 93       	push	r17
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	61 97       	sbiw	r28, 0x11	; 17
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	68 87       	std	Y+8, r22	; 0x08
    1fe4:	79 87       	std	Y+9, r23	; 0x09
    1fe6:	8a 87       	std	Y+10, r24	; 0x0a
    1fe8:	9b 87       	std	Y+11, r25	; 0x0b
    1fea:	4c 87       	std	Y+12, r20	; 0x0c
    1fec:	2d 87       	std	Y+13, r18	; 0x0d
    1fee:	1f 87       	std	Y+15, r17	; 0x0f
    1ff0:	0e 87       	std	Y+14, r16	; 0x0e
    1ff2:	f9 8a       	std	Y+17, r15	; 0x11
    1ff4:	e8 8a       	std	Y+16, r14	; 0x10
	int i, cela, desetinna;
	char znam = '+';
    1ff6:	8b e2       	ldi	r24, 0x2B	; 43
    1ff8:	8b 83       	std	Y+3, r24	; 0x03

	if (mista_za_carkou == -1)
    1ffa:	88 89       	ldd	r24, Y+16	; 0x10
    1ffc:	99 89       	ldd	r25, Y+17	; 0x11
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	21 f4       	brne	.+8      	; 0x200a <print_double+0x44>
		mista_za_carkou = 3;
    2002:	83 e0       	ldi	r24, 0x03	; 3
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	99 8b       	std	Y+17, r25	; 0x11
    2008:	88 8b       	std	Y+16, r24	; 0x10

	if (cislo < 0)
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	a9 01       	movw	r20, r18
    2010:	68 85       	ldd	r22, Y+8	; 0x08
    2012:	79 85       	ldd	r23, Y+9	; 0x09
    2014:	8a 85       	ldd	r24, Y+10	; 0x0a
    2016:	9b 85       	ldd	r25, Y+11	; 0x0b
    2018:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    201c:	88 23       	and	r24, r24
    201e:	5c f4       	brge	.+22     	; 0x2036 <print_double+0x70>
	{
		cislo *= -1;
    2020:	88 85       	ldd	r24, Y+8	; 0x08
    2022:	99 85       	ldd	r25, Y+9	; 0x09
    2024:	aa 85       	ldd	r26, Y+10	; 0x0a
    2026:	bb 85       	ldd	r27, Y+11	; 0x0b
    2028:	b0 58       	subi	r27, 0x80	; 128
    202a:	88 87       	std	Y+8, r24	; 0x08
    202c:	99 87       	std	Y+9, r25	; 0x09
    202e:	aa 87       	std	Y+10, r26	; 0x0a
    2030:	bb 87       	std	Y+11, r27	; 0x0b
		znam = '-';
    2032:	8d e2       	ldi	r24, 0x2D	; 45
    2034:	8b 83       	std	Y+3, r24	; 0x03
	}

	cela = (int) cislo;
    2036:	68 85       	ldd	r22, Y+8	; 0x08
    2038:	79 85       	ldd	r23, Y+9	; 0x09
    203a:	8a 85       	ldd	r24, Y+10	; 0x0a
    203c:	9b 85       	ldd	r25, Y+11	; 0x0b
    203e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__fixsfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9d 83       	std	Y+5, r25	; 0x05
    2048:	8c 83       	std	Y+4, r24	; 0x04
	cislo -= cela;
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	09 2e       	mov	r0, r25
    2050:	00 0c       	add	r0, r0
    2052:	aa 0b       	sbc	r26, r26
    2054:	bb 0b       	sbc	r27, r27
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__floatsisf>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9c 01       	movw	r18, r24
    2064:	ad 01       	movw	r20, r26
    2066:	68 85       	ldd	r22, Y+8	; 0x08
    2068:	79 85       	ldd	r23, Y+9	; 0x09
    206a:	8a 85       	ldd	r24, Y+10	; 0x0a
    206c:	9b 85       	ldd	r25, Y+11	; 0x0b
    206e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__subsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	88 87       	std	Y+8, r24	; 0x08
    2078:	99 87       	std	Y+9, r25	; 0x09
    207a:	aa 87       	std	Y+10, r26	; 0x0a
    207c:	bb 87       	std	Y+11, r27	; 0x0b

	for (i=0; i < mista_za_carkou; i++)
    207e:	1a 82       	std	Y+2, r1	; 0x02
    2080:	19 82       	std	Y+1, r1	; 0x01
    2082:	15 c0       	rjmp	.+42     	; 0x20ae <print_double+0xe8>
		cislo *= 10;
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e2       	ldi	r20, 0x20	; 32
    208a:	51 e4       	ldi	r21, 0x41	; 65
    208c:	68 85       	ldd	r22, Y+8	; 0x08
    208e:	79 85       	ldd	r23, Y+9	; 0x09
    2090:	8a 85       	ldd	r24, Y+10	; 0x0a
    2092:	9b 85       	ldd	r25, Y+11	; 0x0b
    2094:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	88 87       	std	Y+8, r24	; 0x08
    209e:	99 87       	std	Y+9, r25	; 0x09
    20a0:	aa 87       	std	Y+10, r26	; 0x0a
    20a2:	bb 87       	std	Y+11, r27	; 0x0b
	}

	cela = (int) cislo;
	cislo -= cela;

	for (i=0; i < mista_za_carkou; i++)
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	29 81       	ldd	r18, Y+1	; 0x01
    20b0:	3a 81       	ldd	r19, Y+2	; 0x02
    20b2:	88 89       	ldd	r24, Y+16	; 0x10
    20b4:	99 89       	ldd	r25, Y+17	; 0x11
    20b6:	28 17       	cp	r18, r24
    20b8:	39 07       	cpc	r19, r25
    20ba:	24 f3       	brlt	.-56     	; 0x2084 <print_double+0xbe>
		cislo *= 10;

	desetinna = (int) cislo;
    20bc:	68 85       	ldd	r22, Y+8	; 0x08
    20be:	79 85       	ldd	r23, Y+9	; 0x09
    20c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__fixsfsi>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	9f 83       	std	Y+7, r25	; 0x07
    20ce:	8e 83       	std	Y+6, r24	; 0x06
	cela = (znam == '-') ? -1 * cela : cela;
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	8d 32       	cpi	r24, 0x2D	; 45
    20d4:	31 f4       	brne	.+12     	; 0x20e2 <print_double+0x11c>
    20d6:	8c 81       	ldd	r24, Y+4	; 0x04
    20d8:	9d 81       	ldd	r25, Y+5	; 0x05
    20da:	91 95       	neg	r25
    20dc:	81 95       	neg	r24
    20de:	91 09       	sbc	r25, r1
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <print_double+0x120>
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	9d 83       	std	Y+5, r25	; 0x05
    20e8:	8c 83       	std	Y+4, r24	; 0x04

	print_int(cela, znaminko, nula, mista_pred_carkou);
    20ea:	2e 85       	ldd	r18, Y+14	; 0x0e
    20ec:	3f 85       	ldd	r19, Y+15	; 0x0f
    20ee:	8c 81       	ldd	r24, Y+4	; 0x04
    20f0:	9d 81       	ldd	r25, Y+5	; 0x05
    20f2:	4d 85       	ldd	r20, Y+13	; 0x0d
    20f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    20f6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <print_int>
	lcd_put(',');
    20fa:	8c e2       	ldi	r24, 0x2C	; 44
    20fc:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	print_int(desetinna, '\0', '0', mista_za_carkou);
    2100:	28 89       	ldd	r18, Y+16	; 0x10
    2102:	39 89       	ldd	r19, Y+17	; 0x11
    2104:	8e 81       	ldd	r24, Y+6	; 0x06
    2106:	9f 81       	ldd	r25, Y+7	; 0x07
    2108:	40 e3       	ldi	r20, 0x30	; 48
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <print_int>

}
    2110:	00 00       	nop
    2112:	61 96       	adiw	r28, 0x11	; 17
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	08 95       	ret

0000212c <lcd_printf>:

// printf funkce
void lcd_printf(char str[], ...)
{
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	2f 97       	sbiw	r28, 0x0f	; 15
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61

	uint8_t i, j;
	char *str_p;
	int tmp_int;

	char znaminko = '\0';
    2148:	1b 82       	std	Y+3, r1	; 0x03
	char nula = '\0';
    214a:	1c 82       	std	Y+4, r1	; 0x04
	char desetina_carka = '\0';
    214c:	1d 82       	std	Y+5, r1	; 0x05
	int mista_pred_carkou = -1;
    214e:	8f ef       	ldi	r24, 0xFF	; 255
    2150:	9f ef       	ldi	r25, 0xFF	; 255
    2152:	9f 83       	std	Y+7, r25	; 0x07
    2154:	8e 83       	std	Y+6, r24	; 0x06
	int mista_za_carkou = -1;
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	9f ef       	ldi	r25, 0xFF	; 255
    215a:	99 87       	std	Y+9, r25	; 0x09
    215c:	88 87       	std	Y+8, r24	; 0x08



	 __gnuc_va_list ap;
	 //va_list ap;
	 va_start(ap, str);
    215e:	ce 01       	movw	r24, r28
    2160:	4a 96       	adiw	r24, 0x1a	; 26
    2162:	9f 87       	std	Y+15, r25	; 0x0f
    2164:	8e 87       	std	Y+14, r24	; 0x0e



	for (i=0; str[i] != '\0'; i++)
    2166:	19 82       	std	Y+1, r1	; 0x01
    2168:	5e c2       	rjmp	.+1212   	; 0x2626 <lcd_printf+0x4fa>
	{
		// nová stránka
		if (str[i] == '\f')
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	28 8d       	ldd	r18, Y+24	; 0x18
    2172:	39 8d       	ldd	r19, Y+25	; 0x19
    2174:	82 0f       	add	r24, r18
    2176:	93 1f       	adc	r25, r19
    2178:	fc 01       	movw	r30, r24
    217a:	80 81       	ld	r24, Z
    217c:	8c 30       	cpi	r24, 0x0C	; 12
    217e:	51 f4       	brne	.+20     	; 0x2194 <lcd_printf+0x68>
		{
			line = 1;
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
			lcd_cmd(LCD_CMD_CLR);
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
			lcd_cmd(LCD_CMD_W_DDRAM);
    218c:	80 e8       	ldi	r24, 0x80	; 128
    218e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
    2192:	46 c2       	rjmp	.+1164   	; 0x2620 <lcd_printf+0x4f4>
		}
		// nový řádek
		else if (str[i] == '\n')
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	28 8d       	ldd	r18, Y+24	; 0x18
    219c:	39 8d       	ldd	r19, Y+25	; 0x19
    219e:	82 0f       	add	r24, r18
    21a0:	93 1f       	adc	r25, r19
    21a2:	fc 01       	movw	r30, r24
    21a4:	80 81       	ld	r24, Z
    21a6:	8a 30       	cpi	r24, 0x0A	; 10
    21a8:	71 f5       	brne	.+92     	; 0x2206 <lcd_printf+0xda>
		{
			// jestli jsme na 1.
			if (line == 1)
    21aa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	49 f4       	brne	.+18     	; 0x21c4 <lcd_printf+0x98>
			{
				line++;
    21b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    21b6:	8f 5f       	subi	r24, 0xFF	; 255
    21b8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40); // go 2 line
    21bc:	80 ec       	ldi	r24, 0xC0	; 192
    21be:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
    21c2:	2e c2       	rjmp	.+1116   	; 0x2620 <lcd_printf+0x4f4>
			}
			// jestli jsme na 2.
			else if (line == 2)
    21c4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    21c8:	82 30       	cpi	r24, 0x02	; 2
    21ca:	49 f4       	brne	.+18     	; 0x21de <lcd_printf+0xb2>
			{
				line++;
    21cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    21d0:	8f 5f       	subi	r24, 0xFF	; 255
    21d2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x14); // go 3 line
    21d6:	84 e9       	ldi	r24, 0x94	; 148
    21d8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
    21dc:	21 c2       	rjmp	.+1090   	; 0x2620 <lcd_printf+0x4f4>
			}
			// jestli jsme na 3.
			else if (line == 3)
    21de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	49 f4       	brne	.+18     	; 0x21f8 <lcd_printf+0xcc>
			{
				line++;
    21e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    21ea:	8f 5f       	subi	r24, 0xFF	; 255
    21ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x54); // go 4 line
    21f0:	84 ed       	ldi	r24, 0xD4	; 212
    21f2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
    21f6:	14 c2       	rjmp	.+1064   	; 0x2620 <lcd_printf+0x4f4>
			}
			// jestli jsme na 4.
			else
			{
				line = 1;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x00); // go 1 line
    21fe:	80 e8       	ldi	r24, 0x80	; 128
    2200:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
    2204:	0d c2       	rjmp	.+1050   	; 0x2620 <lcd_printf+0x4f4>
			}
		}
		// návrat vozíku
		else if (str[i] == '\r')
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	88 2f       	mov	r24, r24
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	28 8d       	ldd	r18, Y+24	; 0x18
    220e:	39 8d       	ldd	r19, Y+25	; 0x19
    2210:	82 0f       	add	r24, r18
    2212:	93 1f       	adc	r25, r19
    2214:	fc 01       	movw	r30, r24
    2216:	80 81       	ld	r24, Z
    2218:	8d 30       	cpi	r24, 0x0D	; 13
    221a:	61 f4       	brne	.+24     	; 0x2234 <lcd_printf+0x108>
		{
			// pokud jsme na 2. řádku
			if (line)
    221c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2220:	88 23       	and	r24, r24
    2222:	21 f0       	breq	.+8      	; 0x222c <lcd_printf+0x100>
			{
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40);
    2224:	80 ec       	ldi	r24, 0xC0	; 192
    2226:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
    222a:	fa c1       	rjmp	.+1012   	; 0x2620 <lcd_printf+0x4f4>
			}
			// jestli jsme na 1.
			else
			{
				lcd_cmd(LCD_CMD_W_DDRAM);
    222c:	80 e8       	ldi	r24, 0x80	; 128
    222e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_cmd>
    2232:	f6 c1       	rjmp	.+1004   	; 0x2620 <lcd_printf+0x4f4>
			}
		}
		// tabulátor
		else if (str[i] == '\t')
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	28 8d       	ldd	r18, Y+24	; 0x18
    223c:	39 8d       	ldd	r19, Y+25	; 0x19
    223e:	82 0f       	add	r24, r18
    2240:	93 1f       	adc	r25, r19
    2242:	fc 01       	movw	r30, r24
    2244:	80 81       	ld	r24, Z
    2246:	89 30       	cpi	r24, 0x09	; 9
    2248:	69 f4       	brne	.+26     	; 0x2264 <lcd_printf+0x138>
		{
			lcd_put(' ');
    224a:	80 e2       	ldi	r24, 0x20	; 32
    224c:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
			lcd_put(' ');
    2250:	80 e2       	ldi	r24, 0x20	; 32
    2252:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
			lcd_put(' ');
    2256:	80 e2       	ldi	r24, 0x20	; 32
    2258:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
			lcd_put(' ');
    225c:	80 e2       	ldi	r24, 0x20	; 32
    225e:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
    2262:	de c1       	rjmp	.+956    	; 0x2620 <lcd_printf+0x4f4>
		}
		// znak lomeno
		else if (str[i] == '\\')
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	28 8d       	ldd	r18, Y+24	; 0x18
    226c:	39 8d       	ldd	r19, Y+25	; 0x19
    226e:	82 0f       	add	r24, r18
    2270:	93 1f       	adc	r25, r19
    2272:	fc 01       	movw	r30, r24
    2274:	80 81       	ld	r24, Z
    2276:	8c 35       	cpi	r24, 0x5C	; 92
    2278:	21 f4       	brne	.+8      	; 0x2282 <lcd_printf+0x156>
		{
			lcd_put(0xA4);
    227a:	84 ea       	ldi	r24, 0xA4	; 164
    227c:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
    2280:	cf c1       	rjmp	.+926    	; 0x2620 <lcd_printf+0x4f4>
		}
		else if (str[i] == '%')
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	28 8d       	ldd	r18, Y+24	; 0x18
    228a:	39 8d       	ldd	r19, Y+25	; 0x19
    228c:	82 0f       	add	r24, r18
    228e:	93 1f       	adc	r25, r19
    2290:	fc 01       	movw	r30, r24
    2292:	80 81       	ld	r24, Z
    2294:	85 32       	cpi	r24, 0x25	; 37
    2296:	09 f0       	breq	.+2      	; 0x229a <lcd_printf+0x16e>
    2298:	b8 c1       	rjmp	.+880    	; 0x260a <lcd_printf+0x4de>
		{
			// pokud jde o znak %
			if (str[i+1] == '%')
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	28 8d       	ldd	r18, Y+24	; 0x18
    22a4:	39 8d       	ldd	r19, Y+25	; 0x19
    22a6:	82 0f       	add	r24, r18
    22a8:	93 1f       	adc	r25, r19
    22aa:	fc 01       	movw	r30, r24
    22ac:	80 81       	ld	r24, Z
    22ae:	85 32       	cpi	r24, 0x25	; 37
    22b0:	39 f4       	brne	.+14     	; 0x22c0 <lcd_printf+0x194>
			{
				i++;
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	8f 5f       	subi	r24, 0xFF	; 255
    22b6:	89 83       	std	Y+1, r24	; 0x01
				lcd_put('%');
    22b8:	85 e2       	ldi	r24, 0x25	; 37
    22ba:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
    22be:	b0 c1       	rjmp	.+864    	; 0x2620 <lcd_printf+0x4f4>
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	8f 5f       	subi	r24, 0xFF	; 255
    22c4:	8a 83       	std	Y+2, r24	; 0x02
    22c6:	b5 c0       	rjmp	.+362    	; 0x2432 <lcd_printf+0x306>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
				{
					if (str[j] == '+' || str[j] == '-')
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	28 8d       	ldd	r18, Y+24	; 0x18
    22d0:	39 8d       	ldd	r19, Y+25	; 0x19
    22d2:	82 0f       	add	r24, r18
    22d4:	93 1f       	adc	r25, r19
    22d6:	fc 01       	movw	r30, r24
    22d8:	80 81       	ld	r24, Z
    22da:	8b 32       	cpi	r24, 0x2B	; 43
    22dc:	59 f0       	breq	.+22     	; 0x22f4 <lcd_printf+0x1c8>
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	28 8d       	ldd	r18, Y+24	; 0x18
    22e6:	39 8d       	ldd	r19, Y+25	; 0x19
    22e8:	82 0f       	add	r24, r18
    22ea:	93 1f       	adc	r25, r19
    22ec:	fc 01       	movw	r30, r24
    22ee:	80 81       	ld	r24, Z
    22f0:	8d 32       	cpi	r24, 0x2D	; 45
    22f2:	19 f4       	brne	.+6      	; 0x22fa <lcd_printf+0x1ce>
					{
						znaminko = '+';
    22f4:	8b e2       	ldi	r24, 0x2B	; 43
    22f6:	8b 83       	std	Y+3, r24	; 0x03
    22f8:	99 c0       	rjmp	.+306    	; 0x242c <lcd_printf+0x300>
					}
					else if (str[j] == '.')
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	88 2f       	mov	r24, r24
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	28 8d       	ldd	r18, Y+24	; 0x18
    2302:	39 8d       	ldd	r19, Y+25	; 0x19
    2304:	82 0f       	add	r24, r18
    2306:	93 1f       	adc	r25, r19
    2308:	fc 01       	movw	r30, r24
    230a:	80 81       	ld	r24, Z
    230c:	8e 32       	cpi	r24, 0x2E	; 46
    230e:	19 f4       	brne	.+6      	; 0x2316 <lcd_printf+0x1ea>
					{
						desetina_carka = ',';
    2310:	8c e2       	ldi	r24, 0x2C	; 44
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	8b c0       	rjmp	.+278    	; 0x242c <lcd_printf+0x300>
					}
					else if (str[j] == '0')
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	28 8d       	ldd	r18, Y+24	; 0x18
    231e:	39 8d       	ldd	r19, Y+25	; 0x19
    2320:	82 0f       	add	r24, r18
    2322:	93 1f       	adc	r25, r19
    2324:	fc 01       	movw	r30, r24
    2326:	80 81       	ld	r24, Z
    2328:	80 33       	cpi	r24, 0x30	; 48
    232a:	d1 f4       	brne	.+52     	; 0x2360 <lcd_printf+0x234>
					{
						if (desetina_carka == '\0')
    232c:	8d 81       	ldd	r24, Y+5	; 0x05
    232e:	88 23       	and	r24, r24
    2330:	a1 f4       	brne	.+40     	; 0x235a <lcd_printf+0x22e>
						{
							if (nula == '0')
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	80 33       	cpi	r24, 0x30	; 48
    2336:	71 f4       	brne	.+28     	; 0x2354 <lcd_printf+0x228>
								mista_pred_carkou *= 10;
    2338:	8e 81       	ldd	r24, Y+6	; 0x06
    233a:	9f 81       	ldd	r25, Y+7	; 0x07
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	9c 01       	movw	r18, r24
    2342:	22 0f       	add	r18, r18
    2344:	33 1f       	adc	r19, r19
    2346:	22 0f       	add	r18, r18
    2348:	33 1f       	adc	r19, r19
    234a:	82 0f       	add	r24, r18
    234c:	93 1f       	adc	r25, r19
    234e:	9f 83       	std	Y+7, r25	; 0x07
    2350:	8e 83       	std	Y+6, r24	; 0x06
    2352:	6c c0       	rjmp	.+216    	; 0x242c <lcd_printf+0x300>
							else
								nula = '0';
    2354:	80 e3       	ldi	r24, 0x30	; 48
    2356:	8c 83       	std	Y+4, r24	; 0x04
    2358:	69 c0       	rjmp	.+210    	; 0x242c <lcd_printf+0x300>
						}
						else
						{
							mista_za_carkou = 0;
    235a:	19 86       	std	Y+9, r1	; 0x09
    235c:	18 86       	std	Y+8, r1	; 0x08
    235e:	66 c0       	rjmp	.+204    	; 0x242c <lcd_printf+0x300>
						}

					}
					else if (str[j] >= '1' && str[j] <= '9')
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	28 8d       	ldd	r18, Y+24	; 0x18
    2368:	39 8d       	ldd	r19, Y+25	; 0x19
    236a:	82 0f       	add	r24, r18
    236c:	93 1f       	adc	r25, r19
    236e:	fc 01       	movw	r30, r24
    2370:	80 81       	ld	r24, Z
    2372:	81 33       	cpi	r24, 0x31	; 49
    2374:	08 f4       	brcc	.+2      	; 0x2378 <lcd_printf+0x24c>
    2376:	5a c0       	rjmp	.+180    	; 0x242c <lcd_printf+0x300>
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	88 2f       	mov	r24, r24
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	28 8d       	ldd	r18, Y+24	; 0x18
    2380:	39 8d       	ldd	r19, Y+25	; 0x19
    2382:	82 0f       	add	r24, r18
    2384:	93 1f       	adc	r25, r19
    2386:	fc 01       	movw	r30, r24
    2388:	80 81       	ld	r24, Z
    238a:	8a 33       	cpi	r24, 0x3A	; 58
    238c:	08 f0       	brcs	.+2      	; 0x2390 <lcd_printf+0x264>
    238e:	4e c0       	rjmp	.+156    	; 0x242c <lcd_printf+0x300>
					{
						if (desetina_carka == ',')
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	8c 32       	cpi	r24, 0x2C	; 44
    2394:	31 f5       	brne	.+76     	; 0x23e2 <lcd_printf+0x2b6>
						{
							if (mista_za_carkou == -1)
    2396:	88 85       	ldd	r24, Y+8	; 0x08
    2398:	99 85       	ldd	r25, Y+9	; 0x09
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	11 f4       	brne	.+4      	; 0x23a2 <lcd_printf+0x276>
								mista_za_carkou = 0;
    239e:	19 86       	std	Y+9, r1	; 0x09
    23a0:	18 86       	std	Y+8, r1	; 0x08

							mista_za_carkou *= 10;
    23a2:	88 85       	ldd	r24, Y+8	; 0x08
    23a4:	99 85       	ldd	r25, Y+9	; 0x09
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	9c 01       	movw	r18, r24
    23ac:	22 0f       	add	r18, r18
    23ae:	33 1f       	adc	r19, r19
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	82 0f       	add	r24, r18
    23b6:	93 1f       	adc	r25, r19
    23b8:	99 87       	std	Y+9, r25	; 0x09
    23ba:	88 87       	std	Y+8, r24	; 0x08
							mista_za_carkou += str[j] - '0';
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	28 8d       	ldd	r18, Y+24	; 0x18
    23c4:	39 8d       	ldd	r19, Y+25	; 0x19
    23c6:	82 0f       	add	r24, r18
    23c8:	93 1f       	adc	r25, r19
    23ca:	fc 01       	movw	r30, r24
    23cc:	80 81       	ld	r24, Z
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	c0 97       	sbiw	r24, 0x30	; 48
    23d4:	28 85       	ldd	r18, Y+8	; 0x08
    23d6:	39 85       	ldd	r19, Y+9	; 0x09
    23d8:	82 0f       	add	r24, r18
    23da:	93 1f       	adc	r25, r19
    23dc:	99 87       	std	Y+9, r25	; 0x09
    23de:	88 87       	std	Y+8, r24	; 0x08
    23e0:	25 c0       	rjmp	.+74     	; 0x242c <lcd_printf+0x300>
						}
						else
						{
							if (mista_pred_carkou == -1)
    23e2:	8e 81       	ldd	r24, Y+6	; 0x06
    23e4:	9f 81       	ldd	r25, Y+7	; 0x07
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	11 f4       	brne	.+4      	; 0x23ee <lcd_printf+0x2c2>
								mista_pred_carkou = 0;
    23ea:	1f 82       	std	Y+7, r1	; 0x07
    23ec:	1e 82       	std	Y+6, r1	; 0x06

							mista_pred_carkou *= 10;
    23ee:	8e 81       	ldd	r24, Y+6	; 0x06
    23f0:	9f 81       	ldd	r25, Y+7	; 0x07
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	9c 01       	movw	r18, r24
    23f8:	22 0f       	add	r18, r18
    23fa:	33 1f       	adc	r19, r19
    23fc:	22 0f       	add	r18, r18
    23fe:	33 1f       	adc	r19, r19
    2400:	82 0f       	add	r24, r18
    2402:	93 1f       	adc	r25, r19
    2404:	9f 83       	std	Y+7, r25	; 0x07
    2406:	8e 83       	std	Y+6, r24	; 0x06
							mista_pred_carkou += str[j] - '0';
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	88 2f       	mov	r24, r24
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	28 8d       	ldd	r18, Y+24	; 0x18
    2410:	39 8d       	ldd	r19, Y+25	; 0x19
    2412:	82 0f       	add	r24, r18
    2414:	93 1f       	adc	r25, r19
    2416:	fc 01       	movw	r30, r24
    2418:	80 81       	ld	r24, Z
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	c0 97       	sbiw	r24, 0x30	; 48
    2420:	2e 81       	ldd	r18, Y+6	; 0x06
    2422:	3f 81       	ldd	r19, Y+7	; 0x07
    2424:	82 0f       	add	r24, r18
    2426:	93 1f       	adc	r25, r19
    2428:	9f 83       	std	Y+7, r25	; 0x07
    242a:	8e 83       	std	Y+6, r24	; 0x06
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	8f 5f       	subi	r24, 0xFF	; 255
    2430:	8a 83       	std	Y+2, r24	; 0x02
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	28 8d       	ldd	r18, Y+24	; 0x18
    243a:	39 8d       	ldd	r19, Y+25	; 0x19
    243c:	82 0f       	add	r24, r18
    243e:	93 1f       	adc	r25, r19
    2440:	fc 01       	movw	r30, r24
    2442:	80 81       	ld	r24, Z
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    2444:	83 36       	cpi	r24, 0x63	; 99
    2446:	69 f1       	breq	.+90     	; 0x24a2 <lcd_printf+0x376>
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	28 8d       	ldd	r18, Y+24	; 0x18
    2450:	39 8d       	ldd	r19, Y+25	; 0x19
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	fc 01       	movw	r30, r24
    2458:	80 81       	ld	r24, Z
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    245a:	88 34       	cpi	r24, 0x48	; 72
    245c:	11 f1       	breq	.+68     	; 0x24a2 <lcd_printf+0x376>
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	88 2f       	mov	r24, r24
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	28 8d       	ldd	r18, Y+24	; 0x18
    2466:	39 8d       	ldd	r19, Y+25	; 0x19
    2468:	82 0f       	add	r24, r18
    246a:	93 1f       	adc	r25, r19
    246c:	fc 01       	movw	r30, r24
    246e:	80 81       	ld	r24, Z
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2470:	84 36       	cpi	r24, 0x64	; 100
    2472:	b9 f0       	breq	.+46     	; 0x24a2 <lcd_printf+0x376>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	28 8d       	ldd	r18, Y+24	; 0x18
    247c:	39 8d       	ldd	r19, Y+25	; 0x19
    247e:	82 0f       	add	r24, r18
    2480:	93 1f       	adc	r25, r19
    2482:	fc 01       	movw	r30, r24
    2484:	80 81       	ld	r24, Z
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    2486:	86 36       	cpi	r24, 0x66	; 102
    2488:	61 f0       	breq	.+24     	; 0x24a2 <lcd_printf+0x376>
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	28 8d       	ldd	r18, Y+24	; 0x18
    2492:	39 8d       	ldd	r19, Y+25	; 0x19
    2494:	82 0f       	add	r24, r18
    2496:	93 1f       	adc	r25, r19
    2498:	fc 01       	movw	r30, r24
    249a:	80 81       	ld	r24, Z
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    249c:	83 37       	cpi	r24, 0x73	; 115
    249e:	09 f0       	breq	.+2      	; 0x24a2 <lcd_printf+0x376>
    24a0:	13 cf       	rjmp	.-474    	; 0x22c8 <lcd_printf+0x19c>
						}
					}
				}

				// posuneme index procházení pole
				i = j;
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01

				// podle typu s nimi naložíme
				if (str[j] == 'c')
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	28 8d       	ldd	r18, Y+24	; 0x18
    24ae:	39 8d       	ldd	r19, Y+25	; 0x19
    24b0:	82 0f       	add	r24, r18
    24b2:	93 1f       	adc	r25, r19
    24b4:	fc 01       	movw	r30, r24
    24b6:	80 81       	ld	r24, Z
    24b8:	83 36       	cpi	r24, 0x63	; 99
    24ba:	69 f4       	brne	.+26     	; 0x24d6 <lcd_printf+0x3aa>
				{
					lcd_put(va_arg(ap, int));
    24bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    24be:	9f 85       	ldd	r25, Y+15	; 0x0f
    24c0:	9c 01       	movw	r18, r24
    24c2:	2e 5f       	subi	r18, 0xFE	; 254
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
    24c6:	3f 87       	std	Y+15, r19	; 0x0f
    24c8:	2e 87       	std	Y+14, r18	; 0x0e
    24ca:	fc 01       	movw	r30, r24
    24cc:	80 81       	ld	r24, Z
    24ce:	91 81       	ldd	r25, Z+1	; 0x01
    24d0:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
    24d4:	8e c0       	rjmp	.+284    	; 0x25f2 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'H')
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	28 8d       	ldd	r18, Y+24	; 0x18
    24de:	39 8d       	ldd	r19, Y+25	; 0x19
    24e0:	82 0f       	add	r24, r18
    24e2:	93 1f       	adc	r25, r19
    24e4:	fc 01       	movw	r30, r24
    24e6:	80 81       	ld	r24, Z
    24e8:	88 34       	cpi	r24, 0x48	; 72
    24ea:	69 f4       	brne	.+26     	; 0x2506 <lcd_printf+0x3da>
				{
					print_hex(va_arg(ap, uint16_t));
    24ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    24f0:	9c 01       	movw	r18, r24
    24f2:	2e 5f       	subi	r18, 0xFE	; 254
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
    24f6:	3f 87       	std	Y+15, r19	; 0x0f
    24f8:	2e 87       	std	Y+14, r18	; 0x0e
    24fa:	fc 01       	movw	r30, r24
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <print_hex>
    2504:	76 c0       	rjmp	.+236    	; 0x25f2 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'd')
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	28 8d       	ldd	r18, Y+24	; 0x18
    250e:	39 8d       	ldd	r19, Y+25	; 0x19
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	fc 01       	movw	r30, r24
    2516:	80 81       	ld	r24, Z
    2518:	84 36       	cpi	r24, 0x64	; 100
    251a:	a9 f4       	brne	.+42     	; 0x2546 <lcd_printf+0x41a>
				{
					tmp_int = va_arg(ap, int);
    251c:	8e 85       	ldd	r24, Y+14	; 0x0e
    251e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2520:	9c 01       	movw	r18, r24
    2522:	2e 5f       	subi	r18, 0xFE	; 254
    2524:	3f 4f       	sbci	r19, 0xFF	; 255
    2526:	3f 87       	std	Y+15, r19	; 0x0f
    2528:	2e 87       	std	Y+14, r18	; 0x0e
    252a:	fc 01       	movw	r30, r24
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	9b 87       	std	Y+11, r25	; 0x0b
    2532:	8a 87       	std	Y+10, r24	; 0x0a
					print_int(tmp_int, znaminko, nula, mista_pred_carkou);
    2534:	2e 81       	ldd	r18, Y+6	; 0x06
    2536:	3f 81       	ldd	r19, Y+7	; 0x07
    2538:	8a 85       	ldd	r24, Y+10	; 0x0a
    253a:	9b 85       	ldd	r25, Y+11	; 0x0b
    253c:	4c 81       	ldd	r20, Y+4	; 0x04
    253e:	6b 81       	ldd	r22, Y+3	; 0x03
    2540:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <print_int>
    2544:	56 c0       	rjmp	.+172    	; 0x25f2 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'f')
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	28 8d       	ldd	r18, Y+24	; 0x18
    254e:	39 8d       	ldd	r19, Y+25	; 0x19
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	fc 01       	movw	r30, r24
    2556:	80 81       	ld	r24, Z
    2558:	86 36       	cpi	r24, 0x66	; 102
    255a:	c9 f4       	brne	.+50     	; 0x258e <lcd_printf+0x462>
				{
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
    255c:	8e 85       	ldd	r24, Y+14	; 0x0e
    255e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2560:	9c 01       	movw	r18, r24
    2562:	2c 5f       	subi	r18, 0xFC	; 252
    2564:	3f 4f       	sbci	r19, 0xFF	; 255
    2566:	3f 87       	std	Y+15, r19	; 0x0f
    2568:	2e 87       	std	Y+14, r18	; 0x0e
    256a:	fc 01       	movw	r30, r24
    256c:	80 81       	ld	r24, Z
    256e:	91 81       	ldd	r25, Z+1	; 0x01
    2570:	a2 81       	ldd	r26, Z+2	; 0x02
    2572:	b3 81       	ldd	r27, Z+3	; 0x03
    2574:	48 85       	ldd	r20, Y+8	; 0x08
    2576:	59 85       	ldd	r21, Y+9	; 0x09
    2578:	2e 81       	ldd	r18, Y+6	; 0x06
    257a:	3f 81       	ldd	r19, Y+7	; 0x07
    257c:	7a 01       	movw	r14, r20
    257e:	89 01       	movw	r16, r18
    2580:	2c 81       	ldd	r18, Y+4	; 0x04
    2582:	4b 81       	ldd	r20, Y+3	; 0x03
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <print_double>
    258c:	32 c0       	rjmp	.+100    	; 0x25f2 <lcd_printf+0x4c6>
				}
				else if (str[j] == 's')
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	28 8d       	ldd	r18, Y+24	; 0x18
    2596:	39 8d       	ldd	r19, Y+25	; 0x19
    2598:	82 0f       	add	r24, r18
    259a:	93 1f       	adc	r25, r19
    259c:	fc 01       	movw	r30, r24
    259e:	80 81       	ld	r24, Z
    25a0:	83 37       	cpi	r24, 0x73	; 115
    25a2:	39 f5       	brne	.+78     	; 0x25f2 <lcd_printf+0x4c6>
				{
					str_p = va_arg(ap, char *);
    25a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25a8:	9c 01       	movw	r18, r24
    25aa:	2e 5f       	subi	r18, 0xFE	; 254
    25ac:	3f 4f       	sbci	r19, 0xFF	; 255
    25ae:	3f 87       	std	Y+15, r19	; 0x0f
    25b0:	2e 87       	std	Y+14, r18	; 0x0e
    25b2:	fc 01       	movw	r30, r24
    25b4:	80 81       	ld	r24, Z
    25b6:	91 81       	ldd	r25, Z+1	; 0x01
    25b8:	9d 87       	std	Y+13, r25	; 0x0d
    25ba:	8c 87       	std	Y+12, r24	; 0x0c
					for (j=0; *(str_p + j) != '\0'; j++)
    25bc:	1a 82       	std	Y+2, r1	; 0x02
    25be:	0e c0       	rjmp	.+28     	; 0x25dc <lcd_printf+0x4b0>
						lcd_put(*(str_p + j));
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    25c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    25ca:	82 0f       	add	r24, r18
    25cc:	93 1f       	adc	r25, r19
    25ce:	fc 01       	movw	r30, r24
    25d0:	80 81       	ld	r24, Z
    25d2:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
				}
				else if (str[j] == 's')
				{
					str_p = va_arg(ap, char *);
					for (j=0; *(str_p + j) != '\0'; j++)
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	8f 5f       	subi	r24, 0xFF	; 255
    25da:	8a 83       	std	Y+2, r24	; 0x02
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    25e4:	3d 85       	ldd	r19, Y+13	; 0x0d
    25e6:	82 0f       	add	r24, r18
    25e8:	93 1f       	adc	r25, r19
    25ea:	fc 01       	movw	r30, r24
    25ec:	80 81       	ld	r24, Z
    25ee:	88 23       	and	r24, r24
    25f0:	39 f7       	brne	.-50     	; 0x25c0 <lcd_printf+0x494>
						lcd_put(*(str_p + j));
				}

				// vynulovní formátovacích proměnných
				znaminko = '\0';
    25f2:	1b 82       	std	Y+3, r1	; 0x03
				nula = '\0';
    25f4:	1c 82       	std	Y+4, r1	; 0x04
				desetina_carka = '\0';
    25f6:	1d 82       	std	Y+5, r1	; 0x05
				mista_pred_carkou = -1;
    25f8:	8f ef       	ldi	r24, 0xFF	; 255
    25fa:	9f ef       	ldi	r25, 0xFF	; 255
    25fc:	9f 83       	std	Y+7, r25	; 0x07
    25fe:	8e 83       	std	Y+6, r24	; 0x06
				mista_za_carkou = -1;
    2600:	8f ef       	ldi	r24, 0xFF	; 255
    2602:	9f ef       	ldi	r25, 0xFF	; 255
    2604:	99 87       	std	Y+9, r25	; 0x09
    2606:	88 87       	std	Y+8, r24	; 0x08
    2608:	0b c0       	rjmp	.+22     	; 0x2620 <lcd_printf+0x4f4>
			}
		}
		else
		{
			lcd_put(str[i]);
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	28 8d       	ldd	r18, Y+24	; 0x18
    2612:	39 8d       	ldd	r19, Y+25	; 0x19
    2614:	82 0f       	add	r24, r18
    2616:	93 1f       	adc	r25, r19
    2618:	fc 01       	movw	r30, r24
    261a:	80 81       	ld	r24, Z
    261c:	0e 94 9d 0c 	call	0x193a	; 0x193a <lcd_put>
	 //va_list ap;
	 va_start(ap, str);



	for (i=0; str[i] != '\0'; i++)
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	28 8d       	ldd	r18, Y+24	; 0x18
    262e:	39 8d       	ldd	r19, Y+25	; 0x19
    2630:	82 0f       	add	r24, r18
    2632:	93 1f       	adc	r25, r19
    2634:	fc 01       	movw	r30, r24
    2636:	80 81       	ld	r24, Z
    2638:	88 23       	and	r24, r24
    263a:	09 f0       	breq	.+2      	; 0x263e <lcd_printf+0x512>
    263c:	96 cd       	rjmp	.-1236   	; 0x216a <lcd_printf+0x3e>
		{
			lcd_put(str[i]);
		}
	}
	va_end(ap);
}
    263e:	00 00       	nop
    2640:	2f 96       	adiw	r28, 0x0f	; 15
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	08 95       	ret

0000265a <motor_init>:
#include "wyk_step_stick.h"

void motor_init(void)
{
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ENA_DDR |= MOTOR_ENA_PIN;
    2662:	8a e2       	ldi	r24, 0x2A	; 42
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	2a e2       	ldi	r18, 0x2A	; 42
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	f9 01       	movw	r30, r18
    266c:	20 81       	ld	r18, Z
    266e:	20 68       	ori	r18, 0x80	; 128
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
	MOTOR_DIR_DDR |= MOTOR_DIR_PIN;
    2674:	8a e2       	ldi	r24, 0x2A	; 42
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	2a e2       	ldi	r18, 0x2A	; 42
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	f9 01       	movw	r30, r18
    267e:	20 81       	ld	r18, Z
    2680:	20 62       	ori	r18, 0x20	; 32
    2682:	fc 01       	movw	r30, r24
    2684:	20 83       	st	Z, r18
	MOTOR_STEP_DDR |= MOTOR_STEP_PIN;
    2686:	84 e2       	ldi	r24, 0x24	; 36
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	24 e2       	ldi	r18, 0x24	; 36
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	f9 01       	movw	r30, r18
    2690:	20 81       	ld	r18, Z
    2692:	28 60       	ori	r18, 0x08	; 8
    2694:	fc 01       	movw	r30, r24
    2696:	20 83       	st	Z, r18

	MOTOR_DRIVER_OFF;
    2698:	8b e2       	ldi	r24, 0x2B	; 43
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	2b e2       	ldi	r18, 0x2B	; 43
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	f9 01       	movw	r30, r18
    26a2:	20 81       	ld	r18, Z
    26a4:	20 68       	ori	r18, 0x80	; 128
    26a6:	fc 01       	movw	r30, r24
    26a8:	20 83       	st	Z, r18
			MOTOR_MS1_1;
			MOTOR_MS2_1;
			MOTOR_MS3_0;
			break;
		default:
			MOTOR_MS1_1;
    26aa:	85 e2       	ldi	r24, 0x25	; 37
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	25 e2       	ldi	r18, 0x25	; 37
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	f9 01       	movw	r30, r18
    26b4:	20 81       	ld	r18, Z
    26b6:	21 60       	ori	r18, 0x01	; 1
    26b8:	fc 01       	movw	r30, r24
    26ba:	20 83       	st	Z, r18
			MOTOR_MS2_1;
    26bc:	85 e2       	ldi	r24, 0x25	; 37
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	25 e2       	ldi	r18, 0x25	; 37
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	f9 01       	movw	r30, r18
    26c6:	20 81       	ld	r18, Z
    26c8:	22 60       	ori	r18, 0x02	; 2
    26ca:	fc 01       	movw	r30, r24
    26cc:	20 83       	st	Z, r18
			MOTOR_MS3_1;
    26ce:	85 e2       	ldi	r24, 0x25	; 37
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	25 e2       	ldi	r18, 0x25	; 37
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	f9 01       	movw	r30, r18
    26d8:	20 81       	ld	r18, Z
    26da:	24 60       	ori	r18, 0x04	; 4
    26dc:	fc 01       	movw	r30, r24
    26de:	20 83       	st	Z, r18
	}

	

	TCCR2A = (1<<COM2A0) | (1<<WGM21);				// toggle OCR2A CTC mode
    26e0:	80 eb       	ldi	r24, 0xB0	; 176
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	22 e4       	ldi	r18, 0x42	; 66
    26e6:	fc 01       	movw	r30, r24
    26e8:	20 83       	st	Z, r18
	TCCR2B = 0;										// clock off
    26ea:	81 eb       	ldi	r24, 0xB1	; 177
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	fc 01       	movw	r30, r24
    26f0:	10 82       	st	Z, r1
	OCR2A = 0;
    26f2:	83 eb       	ldi	r24, 0xB3	; 179
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	fc 01       	movw	r30, r24
    26f8:	10 82       	st	Z, r1
	TCNT2 = 0;
    26fa:	82 eb       	ldi	r24, 0xB2	; 178
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	fc 01       	movw	r30, r24
    2700:	10 82       	st	Z, r1
	MOTOR_DIR0;
    2702:	8b e2       	ldi	r24, 0x2B	; 43
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	2b e2       	ldi	r18, 0x2B	; 43
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	f9 01       	movw	r30, r18
    270c:	20 81       	ld	r18, Z
    270e:	2f 7d       	andi	r18, 0xDF	; 223
    2710:	fc 01       	movw	r30, r24
    2712:	20 83       	st	Z, r18
}
    2714:	00 00       	nop
    2716:	df 91       	pop	r29
    2718:	cf 91       	pop	r28
    271a:	08 95       	ret

0000271c <motor_set_rpm>:

void motor_set_rpm(uint16_t rpm)					// rote per minute
{
    271c:	8f 92       	push	r8
    271e:	9f 92       	push	r9
    2720:	af 92       	push	r10
    2722:	bf 92       	push	r11
    2724:	cf 92       	push	r12
    2726:	df 92       	push	r13
    2728:	ef 92       	push	r14
    272a:	ff 92       	push	r15
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
    2734:	6a 97       	sbiw	r28, 0x1a	; 26
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	9a 8f       	std	Y+26, r25	; 0x1a
    2742:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t buf;
	const uint32_t freq = F_CPU*60;
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	98 ea       	ldi	r25, 0xA8	; 168
    2748:	a4 ed       	ldi	r26, 0xD4	; 212
    274a:	b5 e5       	ldi	r27, 0x55	; 85
    274c:	8a 83       	std	Y+2, r24	; 0x02
    274e:	9b 83       	std	Y+3, r25	; 0x03
    2750:	ac 83       	std	Y+4, r26	; 0x04
    2752:	bd 83       	std	Y+5, r27	; 0x05
	const uint16_t div[] = {1, 8, 32, 64, 128, 256, 1024};
    2754:	8e e0       	ldi	r24, 0x0E	; 14
    2756:	e5 ec       	ldi	r30, 0xC5	; 197
    2758:	f2 e0       	ldi	r31, 0x02	; 2
    275a:	de 01       	movw	r26, r28
    275c:	1b 96       	adiw	r26, 0x0b	; 11
    275e:	01 90       	ld	r0, Z+
    2760:	0d 92       	st	X+, r0
    2762:	8a 95       	dec	r24
    2764:	e1 f7       	brne	.-8      	; 0x275e <motor_set_rpm+0x42>
	const uint8_t div_len = 7;
    2766:	87 e0       	ldi	r24, 0x07	; 7
    2768:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t i;

	if (rpm)
    276a:	89 8d       	ldd	r24, Y+25	; 0x19
    276c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    276e:	89 2b       	or	r24, r25
    2770:	09 f4       	brne	.+2      	; 0x2774 <motor_set_rpm+0x58>
    2772:	94 c0       	rjmp	.+296    	; 0x289c <motor_set_rpm+0x180>
	{
		for (i=0; i<div_len; i++)
    2774:	19 82       	std	Y+1, r1	; 0x01
    2776:	8c c0       	rjmp	.+280    	; 0x2890 <motor_set_rpm+0x174>
		{
			buf = freq / ( ((uint32_t)rpm) * MOTOR_PERIOD * 2 * div[i] );
    2778:	6a 81       	ldd	r22, Y+2	; 0x02
    277a:	7b 81       	ldd	r23, Y+3	; 0x03
    277c:	8c 81       	ldd	r24, Y+4	; 0x04
    277e:	9d 81       	ldd	r25, Y+5	; 0x05
    2780:	0e 94 76 16 	call	0x2cec	; 0x2cec <__floatunsisf>
    2784:	6b 01       	movw	r12, r22
    2786:	7c 01       	movw	r14, r24
    2788:	89 8d       	ldd	r24, Y+25	; 0x19
    278a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    278c:	9c 01       	movw	r18, r24
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	88 e6       	ldi	r24, 0x68	; 104
    2794:	91 e0       	ldi	r25, 0x01	; 1
    2796:	dc 01       	movw	r26, r24
    2798:	0e 94 03 18 	call	0x3006	; 0x3006 <__muluhisi3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	bc 01       	movw	r22, r24
    27a2:	cd 01       	movw	r24, r26
    27a4:	0e 94 76 16 	call	0x2cec	; 0x2cec <__floatunsisf>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	26 e6       	ldi	r18, 0x66	; 102
    27ae:	36 e6       	ldi	r19, 0x66	; 102
    27b0:	46 ee       	ldi	r20, 0xE6	; 230
    27b2:	5d e3       	ldi	r21, 0x3D	; 61
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__divsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9c 01       	movw	r18, r24
    27c2:	ad 01       	movw	r20, r26
    27c4:	bc 01       	movw	r22, r24
    27c6:	cd 01       	movw	r24, r26
    27c8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__addsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	4c 01       	movw	r8, r24
    27d2:	5d 01       	movw	r10, r26
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	88 2f       	mov	r24, r24
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	9e 01       	movw	r18, r28
    27e0:	2f 5f       	subi	r18, 0xFF	; 255
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	82 0f       	add	r24, r18
    27e6:	93 1f       	adc	r25, r19
    27e8:	0a 96       	adiw	r24, 0x0a	; 10
    27ea:	fc 01       	movw	r30, r24
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	cc 01       	movw	r24, r24
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 76 16 	call	0x2cec	; 0x2cec <__floatunsisf>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	9c 01       	movw	r18, r24
    2804:	ad 01       	movw	r20, r26
    2806:	c5 01       	movw	r24, r10
    2808:	b4 01       	movw	r22, r8
    280a:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9c 01       	movw	r18, r24
    2814:	ad 01       	movw	r20, r26
    2816:	c7 01       	movw	r24, r14
    2818:	b6 01       	movw	r22, r12
    281a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <__divsf3>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8f 83       	std	Y+7, r24	; 0x07
    2830:	98 87       	std	Y+8, r25	; 0x08
    2832:	a9 87       	std	Y+9, r26	; 0x09
    2834:	ba 87       	std	Y+10, r27	; 0x0a
			if (buf < 0xFF && buf > 0)
    2836:	8f 81       	ldd	r24, Y+7	; 0x07
    2838:	98 85       	ldd	r25, Y+8	; 0x08
    283a:	a9 85       	ldd	r26, Y+9	; 0x09
    283c:	ba 85       	ldd	r27, Y+10	; 0x0a
    283e:	8f 3f       	cpi	r24, 0xFF	; 255
    2840:	91 05       	cpc	r25, r1
    2842:	a1 05       	cpc	r26, r1
    2844:	b1 05       	cpc	r27, r1
    2846:	08 f5       	brcc	.+66     	; 0x288a <motor_set_rpm+0x16e>
    2848:	8f 81       	ldd	r24, Y+7	; 0x07
    284a:	98 85       	ldd	r25, Y+8	; 0x08
    284c:	a9 85       	ldd	r26, Y+9	; 0x09
    284e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2850:	89 2b       	or	r24, r25
    2852:	8a 2b       	or	r24, r26
    2854:	8b 2b       	or	r24, r27
    2856:	c9 f0       	breq	.+50     	; 0x288a <motor_set_rpm+0x16e>
			{
				TCCR2B = i+1;						// clock/div[i]
    2858:	81 eb       	ldi	r24, 0xB1	; 177
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	29 81       	ldd	r18, Y+1	; 0x01
    285e:	2f 5f       	subi	r18, 0xFF	; 255
    2860:	fc 01       	movw	r30, r24
    2862:	20 83       	st	Z, r18
				OCR2A = (uint8_t )buf;
    2864:	83 eb       	ldi	r24, 0xB3	; 179
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	2f 81       	ldd	r18, Y+7	; 0x07
    286a:	fc 01       	movw	r30, r24
    286c:	20 83       	st	Z, r18
				TCNT2 = 0;
    286e:	82 eb       	ldi	r24, 0xB2	; 178
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	fc 01       	movw	r30, r24
    2874:	10 82       	st	Z, r1
				MOTOR_DRIVER_ON;
    2876:	8b e2       	ldi	r24, 0x2B	; 43
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	2b e2       	ldi	r18, 0x2B	; 43
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	f9 01       	movw	r30, r18
    2880:	20 81       	ld	r18, Z
    2882:	2f 77       	andi	r18, 0x7F	; 127
    2884:	fc 01       	movw	r30, r24
    2886:	20 83       	st	Z, r18
				break;
    2888:	16 c0       	rjmp	.+44     	; 0x28b6 <motor_set_rpm+0x19a>

	uint8_t i;

	if (rpm)
	{
		for (i=0; i<div_len; i++)
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	99 81       	ldd	r25, Y+1	; 0x01
    2892:	8e 81       	ldd	r24, Y+6	; 0x06
    2894:	98 17       	cp	r25, r24
    2896:	08 f4       	brcc	.+2      	; 0x289a <motor_set_rpm+0x17e>
    2898:	6f cf       	rjmp	.-290    	; 0x2778 <motor_set_rpm+0x5c>
    289a:	0d c0       	rjmp	.+26     	; 0x28b6 <motor_set_rpm+0x19a>
			}
		}
	}
	else
	{
		TCCR2B = 0x00;
    289c:	81 eb       	ldi	r24, 0xB1	; 177
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	fc 01       	movw	r30, r24
    28a2:	10 82       	st	Z, r1
		MOTOR_DRIVER_OFF;
    28a4:	8b e2       	ldi	r24, 0x2B	; 43
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	2b e2       	ldi	r18, 0x2B	; 43
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	f9 01       	movw	r30, r18
    28ae:	20 81       	ld	r18, Z
    28b0:	20 68       	ori	r18, 0x80	; 128
    28b2:	fc 01       	movw	r30, r24
    28b4:	20 83       	st	Z, r18
	}
	actual_rmp = rpm;
    28b6:	89 8d       	ldd	r24, Y+25	; 0x19
    28b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28ba:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <actual_rmp+0x1>
    28be:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <actual_rmp>
}
    28c2:	00 00       	nop
    28c4:	6a 96       	adiw	r28, 0x1a	; 26
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	df 91       	pop	r29
    28d2:	cf 91       	pop	r28
    28d4:	ff 90       	pop	r15
    28d6:	ef 90       	pop	r14
    28d8:	df 90       	pop	r13
    28da:	cf 90       	pop	r12
    28dc:	bf 90       	pop	r11
    28de:	af 90       	pop	r10
    28e0:	9f 90       	pop	r9
    28e2:	8f 90       	pop	r8
    28e4:	08 95       	ret

000028e6 <motor_smoothly_rmp>:


void motor_smoothly_rmp(uint16_t rpm_start, uint16_t rpm_end)
{
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	65 97       	sbiw	r28, 0x15	; 21
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	9b 8b       	std	Y+19, r25	; 0x13
    28fc:	8a 8b       	std	Y+18, r24	; 0x12
    28fe:	7d 8b       	std	Y+21, r23	; 0x15
    2900:	6c 8b       	std	Y+20, r22	; 0x14
	uint16_t rpm;
	int8_t step;
	
	if (rpm_start < rpm_end)
    2902:	2a 89       	ldd	r18, Y+18	; 0x12
    2904:	3b 89       	ldd	r19, Y+19	; 0x13
    2906:	8c 89       	ldd	r24, Y+20	; 0x14
    2908:	9d 89       	ldd	r25, Y+21	; 0x15
    290a:	28 17       	cp	r18, r24
    290c:	39 07       	cpc	r19, r25
    290e:	18 f4       	brcc	.+6      	; 0x2916 <motor_smoothly_rmp+0x30>
	{
		step = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	8b 83       	std	Y+3, r24	; 0x03
    2914:	02 c0       	rjmp	.+4      	; 0x291a <motor_smoothly_rmp+0x34>
	}
	else
	{
		step = -1;
    2916:	8f ef       	ldi	r24, 0xFF	; 255
    2918:	8b 83       	std	Y+3, r24	; 0x03
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    291a:	8a 89       	ldd	r24, Y+18	; 0x12
    291c:	9b 89       	ldd	r25, Y+19	; 0x13
    291e:	9a 83       	std	Y+2, r25	; 0x02
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	a5 c0       	rjmp	.+330    	; 0x2a6e <motor_smoothly_rmp+0x188>
	{
		user_profile.rpm = rpm;
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	9a 81       	ldd	r25, Y+2	; 0x02
    2928:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <user_profile+0x1>
    292c:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <user_profile>
		if (!(user_profile.rpm % 20))
    2930:	40 91 d9 02 	lds	r20, 0x02D9	; 0x8002d9 <user_profile>
    2934:	50 91 da 02 	lds	r21, 0x02DA	; 0x8002da <user_profile+0x1>
    2938:	9a 01       	movw	r18, r20
    293a:	ad ec       	ldi	r26, 0xCD	; 205
    293c:	bc ec       	ldi	r27, 0xCC	; 204
    293e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
    2942:	92 95       	swap	r25
    2944:	82 95       	swap	r24
    2946:	8f 70       	andi	r24, 0x0F	; 15
    2948:	89 27       	eor	r24, r25
    294a:	9f 70       	andi	r25, 0x0F	; 15
    294c:	89 27       	eor	r24, r25
    294e:	64 e1       	ldi	r22, 0x14	; 20
    2950:	68 9f       	mul	r22, r24
    2952:	90 01       	movw	r18, r0
    2954:	69 9f       	mul	r22, r25
    2956:	30 0d       	add	r19, r0
    2958:	11 24       	eor	r1, r1
    295a:	ca 01       	movw	r24, r20
    295c:	82 1b       	sub	r24, r18
    295e:	93 0b       	sbc	r25, r19
    2960:	89 2b       	or	r24, r25
    2962:	19 f4       	brne	.+6      	; 0x296a <motor_smoothly_rmp+0x84>
			TUI('s');
    2964:	83 e7       	ldi	r24, 0x73	; 115
    2966:	0e 94 b3 02 	call	0x566	; 0x566 <TUI>
		motor_set_rpm(user_profile.rpm);
    296a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <user_profile>
    296e:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <user_profile+0x1>
    2972:	0e 94 8e 13 	call	0x271c	; 0x271c <motor_set_rpm>
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a0 ef       	ldi	r26, 0xF0	; 240
    297c:	b1 e4       	ldi	r27, 0x41	; 65
    297e:	8c 83       	std	Y+4, r24	; 0x04
    2980:	9d 83       	std	Y+5, r25	; 0x05
    2982:	ae 83       	std	Y+6, r26	; 0x06
    2984:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e8       	ldi	r19, 0x80	; 128
    298a:	4b eb       	ldi	r20, 0xBB	; 187
    298c:	55 e4       	ldi	r21, 0x45	; 69
    298e:	6c 81       	ldd	r22, Y+4	; 0x04
    2990:	7d 81       	ldd	r23, Y+5	; 0x05
    2992:	8e 81       	ldd	r24, Y+6	; 0x06
    2994:	9f 81       	ldd	r25, Y+7	; 0x07
    2996:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	88 87       	std	Y+8, r24	; 0x08
    29a0:	99 87       	std	Y+9, r25	; 0x09
    29a2:	aa 87       	std	Y+10, r26	; 0x0a
    29a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	68 85       	ldd	r22, Y+8	; 0x08
    29b0:	79 85       	ldd	r23, Y+9	; 0x09
    29b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    29b6:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__cmpsf2>
    29ba:	88 23       	and	r24, r24
    29bc:	2c f4       	brge	.+10     	; 0x29c8 <motor_smoothly_rmp+0xe2>
		__ticks = 1;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9d 87       	std	Y+13, r25	; 0x0d
    29c4:	8c 87       	std	Y+12, r24	; 0x0c
    29c6:	3f c0       	rjmp	.+126    	; 0x2a46 <motor_smoothly_rmp+0x160>
	else if (__tmp > 65535)
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	57 e4       	ldi	r21, 0x47	; 71
    29d0:	68 85       	ldd	r22, Y+8	; 0x08
    29d2:	79 85       	ldd	r23, Y+9	; 0x09
    29d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d8:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__gesf2>
    29dc:	18 16       	cp	r1, r24
    29de:	4c f5       	brge	.+82     	; 0x2a32 <motor_smoothly_rmp+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	6c 81       	ldd	r22, Y+4	; 0x04
    29ea:	7d 81       	ldd	r23, Y+5	; 0x05
    29ec:	8e 81       	ldd	r24, Y+6	; 0x06
    29ee:	9f 81       	ldd	r25, Y+7	; 0x07
    29f0:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	bc 01       	movw	r22, r24
    29fa:	cd 01       	movw	r24, r26
    29fc:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	9d 87       	std	Y+13, r25	; 0x0d
    2a06:	8c 87       	std	Y+12, r24	; 0x0c
    2a08:	0f c0       	rjmp	.+30     	; 0x2a28 <motor_smoothly_rmp+0x142>
    2a0a:	88 e5       	ldi	r24, 0x58	; 88
    2a0c:	92 e0       	ldi	r25, 0x02	; 2
    2a0e:	9f 87       	std	Y+15, r25	; 0x0f
    2a10:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a12:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a14:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <motor_smoothly_rmp+0x130>
    2a1a:	9f 87       	std	Y+15, r25	; 0x0f
    2a1c:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a20:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	9d 87       	std	Y+13, r25	; 0x0d
    2a26:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a28:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a2a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a2c:	89 2b       	or	r24, r25
    2a2e:	69 f7       	brne	.-38     	; 0x2a0a <motor_smoothly_rmp+0x124>
    2a30:	14 c0       	rjmp	.+40     	; 0x2a5a <motor_smoothly_rmp+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a32:	68 85       	ldd	r22, Y+8	; 0x08
    2a34:	79 85       	ldd	r23, Y+9	; 0x09
    2a36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a3a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9d 87       	std	Y+13, r25	; 0x0d
    2a44:	8c 87       	std	Y+12, r24	; 0x0c
    2a46:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a48:	9d 85       	ldd	r25, Y+13	; 0x0d
    2a4a:	99 8b       	std	Y+17, r25	; 0x11
    2a4c:	88 8b       	std	Y+16, r24	; 0x10
    2a4e:	88 89       	ldd	r24, Y+16	; 0x10
    2a50:	99 89       	ldd	r25, Y+17	; 0x11
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <motor_smoothly_rmp+0x16c>
    2a56:	99 8b       	std	Y+17, r25	; 0x11
    2a58:	88 8b       	std	Y+16, r24	; 0x10
	else
	{
		step = -1;
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	08 2e       	mov	r0, r24
    2a5e:	00 0c       	add	r0, r0
    2a60:	99 0b       	sbc	r25, r25
    2a62:	29 81       	ldd	r18, Y+1	; 0x01
    2a64:	3a 81       	ldd	r19, Y+2	; 0x02
    2a66:	82 0f       	add	r24, r18
    2a68:	93 1f       	adc	r25, r19
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	28 2f       	mov	r18, r24
    2a72:	88 0f       	add	r24, r24
    2a74:	33 0b       	sbc	r19, r19
    2a76:	8c 89       	ldd	r24, Y+20	; 0x14
    2a78:	9d 89       	ldd	r25, Y+21	; 0x15
    2a7a:	28 0f       	add	r18, r24
    2a7c:	39 1f       	adc	r19, r25
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	28 17       	cp	r18, r24
    2a84:	39 07       	cpc	r19, r25
    2a86:	59 f0       	breq	.+22     	; 0x2a9e <motor_smoothly_rmp+0x1b8>
    2a88:	8c e3       	ldi	r24, 0x3C	; 60
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	fc 01       	movw	r30, r24
    2a8e:	80 81       	ld	r24, Z
    2a90:	88 2f       	mov	r24, r24
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	81 70       	andi	r24, 0x01	; 1
    2a96:	99 27       	eor	r25, r25
    2a98:	89 2b       	or	r24, r25
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <motor_smoothly_rmp+0x1b8>
    2a9c:	43 cf       	rjmp	.-378    	; 0x2924 <motor_smoothly_rmp+0x3e>
		if (!(user_profile.rpm % 20))
			TUI('s');
		motor_set_rpm(user_profile.rpm);
		_delay_ms(30);
	}
	TUI('s');
    2a9e:	83 e7       	ldi	r24, 0x73	; 115
    2aa0:	0e 94 b3 02 	call	0x566	; 0x566 <TUI>
}
    2aa4:	00 00       	nop
    2aa6:	65 96       	adiw	r28, 0x15	; 21
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	08 95       	ret

00002ab8 <__subsf3>:
    2ab8:	50 58       	subi	r21, 0x80	; 128

00002aba <__addsf3>:
    2aba:	bb 27       	eor	r27, r27
    2abc:	aa 27       	eor	r26, r26
    2abe:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__addsf3x>
    2ac2:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__fp_round>
    2ac6:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__fp_pscA>
    2aca:	38 f0       	brcs	.+14     	; 0x2ada <__addsf3+0x20>
    2acc:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__fp_pscB>
    2ad0:	20 f0       	brcs	.+8      	; 0x2ada <__addsf3+0x20>
    2ad2:	39 f4       	brne	.+14     	; 0x2ae2 <__addsf3+0x28>
    2ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    2ad6:	19 f4       	brne	.+6      	; 0x2ade <__addsf3+0x24>
    2ad8:	26 f4       	brtc	.+8      	; 0x2ae2 <__addsf3+0x28>
    2ada:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__fp_nan>
    2ade:	0e f4       	brtc	.+2      	; 0x2ae2 <__addsf3+0x28>
    2ae0:	e0 95       	com	r30
    2ae2:	e7 fb       	bst	r30, 7
    2ae4:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__fp_inf>

00002ae8 <__addsf3x>:
    2ae8:	e9 2f       	mov	r30, r25
    2aea:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__fp_split3>
    2aee:	58 f3       	brcs	.-42     	; 0x2ac6 <__addsf3+0xc>
    2af0:	ba 17       	cp	r27, r26
    2af2:	62 07       	cpc	r22, r18
    2af4:	73 07       	cpc	r23, r19
    2af6:	84 07       	cpc	r24, r20
    2af8:	95 07       	cpc	r25, r21
    2afa:	20 f0       	brcs	.+8      	; 0x2b04 <__addsf3x+0x1c>
    2afc:	79 f4       	brne	.+30     	; 0x2b1c <__addsf3x+0x34>
    2afe:	a6 f5       	brtc	.+104    	; 0x2b68 <__addsf3x+0x80>
    2b00:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__fp_zero>
    2b04:	0e f4       	brtc	.+2      	; 0x2b08 <__addsf3x+0x20>
    2b06:	e0 95       	com	r30
    2b08:	0b 2e       	mov	r0, r27
    2b0a:	ba 2f       	mov	r27, r26
    2b0c:	a0 2d       	mov	r26, r0
    2b0e:	0b 01       	movw	r0, r22
    2b10:	b9 01       	movw	r22, r18
    2b12:	90 01       	movw	r18, r0
    2b14:	0c 01       	movw	r0, r24
    2b16:	ca 01       	movw	r24, r20
    2b18:	a0 01       	movw	r20, r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	ff 27       	eor	r31, r31
    2b1e:	59 1b       	sub	r21, r25
    2b20:	99 f0       	breq	.+38     	; 0x2b48 <__addsf3x+0x60>
    2b22:	59 3f       	cpi	r21, 0xF9	; 249
    2b24:	50 f4       	brcc	.+20     	; 0x2b3a <__addsf3x+0x52>
    2b26:	50 3e       	cpi	r21, 0xE0	; 224
    2b28:	68 f1       	brcs	.+90     	; 0x2b84 <__addsf3x+0x9c>
    2b2a:	1a 16       	cp	r1, r26
    2b2c:	f0 40       	sbci	r31, 0x00	; 0
    2b2e:	a2 2f       	mov	r26, r18
    2b30:	23 2f       	mov	r18, r19
    2b32:	34 2f       	mov	r19, r20
    2b34:	44 27       	eor	r20, r20
    2b36:	58 5f       	subi	r21, 0xF8	; 248
    2b38:	f3 cf       	rjmp	.-26     	; 0x2b20 <__addsf3x+0x38>
    2b3a:	46 95       	lsr	r20
    2b3c:	37 95       	ror	r19
    2b3e:	27 95       	ror	r18
    2b40:	a7 95       	ror	r26
    2b42:	f0 40       	sbci	r31, 0x00	; 0
    2b44:	53 95       	inc	r21
    2b46:	c9 f7       	brne	.-14     	; 0x2b3a <__addsf3x+0x52>
    2b48:	7e f4       	brtc	.+30     	; 0x2b68 <__addsf3x+0x80>
    2b4a:	1f 16       	cp	r1, r31
    2b4c:	ba 0b       	sbc	r27, r26
    2b4e:	62 0b       	sbc	r22, r18
    2b50:	73 0b       	sbc	r23, r19
    2b52:	84 0b       	sbc	r24, r20
    2b54:	ba f0       	brmi	.+46     	; 0x2b84 <__addsf3x+0x9c>
    2b56:	91 50       	subi	r25, 0x01	; 1
    2b58:	a1 f0       	breq	.+40     	; 0x2b82 <__addsf3x+0x9a>
    2b5a:	ff 0f       	add	r31, r31
    2b5c:	bb 1f       	adc	r27, r27
    2b5e:	66 1f       	adc	r22, r22
    2b60:	77 1f       	adc	r23, r23
    2b62:	88 1f       	adc	r24, r24
    2b64:	c2 f7       	brpl	.-16     	; 0x2b56 <__addsf3x+0x6e>
    2b66:	0e c0       	rjmp	.+28     	; 0x2b84 <__addsf3x+0x9c>
    2b68:	ba 0f       	add	r27, r26
    2b6a:	62 1f       	adc	r22, r18
    2b6c:	73 1f       	adc	r23, r19
    2b6e:	84 1f       	adc	r24, r20
    2b70:	48 f4       	brcc	.+18     	; 0x2b84 <__addsf3x+0x9c>
    2b72:	87 95       	ror	r24
    2b74:	77 95       	ror	r23
    2b76:	67 95       	ror	r22
    2b78:	b7 95       	ror	r27
    2b7a:	f7 95       	ror	r31
    2b7c:	9e 3f       	cpi	r25, 0xFE	; 254
    2b7e:	08 f0       	brcs	.+2      	; 0x2b82 <__addsf3x+0x9a>
    2b80:	b0 cf       	rjmp	.-160    	; 0x2ae2 <__addsf3+0x28>
    2b82:	93 95       	inc	r25
    2b84:	88 0f       	add	r24, r24
    2b86:	08 f0       	brcs	.+2      	; 0x2b8a <__addsf3x+0xa2>
    2b88:	99 27       	eor	r25, r25
    2b8a:	ee 0f       	add	r30, r30
    2b8c:	97 95       	ror	r25
    2b8e:	87 95       	ror	r24
    2b90:	08 95       	ret

00002b92 <__cmpsf2>:
    2b92:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__fp_cmp>
    2b96:	08 f4       	brcc	.+2      	; 0x2b9a <__cmpsf2+0x8>
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	08 95       	ret

00002b9c <__divsf3>:
    2b9c:	0e 94 e2 15 	call	0x2bc4	; 0x2bc4 <__divsf3x>
    2ba0:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__fp_round>
    2ba4:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__fp_pscB>
    2ba8:	58 f0       	brcs	.+22     	; 0x2bc0 <__divsf3+0x24>
    2baa:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__fp_pscA>
    2bae:	40 f0       	brcs	.+16     	; 0x2bc0 <__divsf3+0x24>
    2bb0:	29 f4       	brne	.+10     	; 0x2bbc <__divsf3+0x20>
    2bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    2bb4:	29 f0       	breq	.+10     	; 0x2bc0 <__divsf3+0x24>
    2bb6:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__fp_inf>
    2bba:	51 11       	cpse	r21, r1
    2bbc:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__fp_szero>
    2bc0:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__fp_nan>

00002bc4 <__divsf3x>:
    2bc4:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__fp_split3>
    2bc8:	68 f3       	brcs	.-38     	; 0x2ba4 <__divsf3+0x8>

00002bca <__divsf3_pse>:
    2bca:	99 23       	and	r25, r25
    2bcc:	b1 f3       	breq	.-20     	; 0x2bba <__divsf3+0x1e>
    2bce:	55 23       	and	r21, r21
    2bd0:	91 f3       	breq	.-28     	; 0x2bb6 <__divsf3+0x1a>
    2bd2:	95 1b       	sub	r25, r21
    2bd4:	55 0b       	sbc	r21, r21
    2bd6:	bb 27       	eor	r27, r27
    2bd8:	aa 27       	eor	r26, r26
    2bda:	62 17       	cp	r22, r18
    2bdc:	73 07       	cpc	r23, r19
    2bde:	84 07       	cpc	r24, r20
    2be0:	38 f0       	brcs	.+14     	; 0x2bf0 <__divsf3_pse+0x26>
    2be2:	9f 5f       	subi	r25, 0xFF	; 255
    2be4:	5f 4f       	sbci	r21, 0xFF	; 255
    2be6:	22 0f       	add	r18, r18
    2be8:	33 1f       	adc	r19, r19
    2bea:	44 1f       	adc	r20, r20
    2bec:	aa 1f       	adc	r26, r26
    2bee:	a9 f3       	breq	.-22     	; 0x2bda <__divsf3_pse+0x10>
    2bf0:	35 d0       	rcall	.+106    	; 0x2c5c <__divsf3_pse+0x92>
    2bf2:	0e 2e       	mov	r0, r30
    2bf4:	3a f0       	brmi	.+14     	; 0x2c04 <__divsf3_pse+0x3a>
    2bf6:	e0 e8       	ldi	r30, 0x80	; 128
    2bf8:	32 d0       	rcall	.+100    	; 0x2c5e <__divsf3_pse+0x94>
    2bfa:	91 50       	subi	r25, 0x01	; 1
    2bfc:	50 40       	sbci	r21, 0x00	; 0
    2bfe:	e6 95       	lsr	r30
    2c00:	00 1c       	adc	r0, r0
    2c02:	ca f7       	brpl	.-14     	; 0x2bf6 <__divsf3_pse+0x2c>
    2c04:	2b d0       	rcall	.+86     	; 0x2c5c <__divsf3_pse+0x92>
    2c06:	fe 2f       	mov	r31, r30
    2c08:	29 d0       	rcall	.+82     	; 0x2c5c <__divsf3_pse+0x92>
    2c0a:	66 0f       	add	r22, r22
    2c0c:	77 1f       	adc	r23, r23
    2c0e:	88 1f       	adc	r24, r24
    2c10:	bb 1f       	adc	r27, r27
    2c12:	26 17       	cp	r18, r22
    2c14:	37 07       	cpc	r19, r23
    2c16:	48 07       	cpc	r20, r24
    2c18:	ab 07       	cpc	r26, r27
    2c1a:	b0 e8       	ldi	r27, 0x80	; 128
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <__divsf3_pse+0x56>
    2c1e:	bb 0b       	sbc	r27, r27
    2c20:	80 2d       	mov	r24, r0
    2c22:	bf 01       	movw	r22, r30
    2c24:	ff 27       	eor	r31, r31
    2c26:	93 58       	subi	r25, 0x83	; 131
    2c28:	5f 4f       	sbci	r21, 0xFF	; 255
    2c2a:	3a f0       	brmi	.+14     	; 0x2c3a <__divsf3_pse+0x70>
    2c2c:	9e 3f       	cpi	r25, 0xFE	; 254
    2c2e:	51 05       	cpc	r21, r1
    2c30:	78 f0       	brcs	.+30     	; 0x2c50 <__divsf3_pse+0x86>
    2c32:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__fp_inf>
    2c36:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__fp_szero>
    2c3a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c3c:	e4 f3       	brlt	.-8      	; 0x2c36 <__divsf3_pse+0x6c>
    2c3e:	98 3e       	cpi	r25, 0xE8	; 232
    2c40:	d4 f3       	brlt	.-12     	; 0x2c36 <__divsf3_pse+0x6c>
    2c42:	86 95       	lsr	r24
    2c44:	77 95       	ror	r23
    2c46:	67 95       	ror	r22
    2c48:	b7 95       	ror	r27
    2c4a:	f7 95       	ror	r31
    2c4c:	9f 5f       	subi	r25, 0xFF	; 255
    2c4e:	c9 f7       	brne	.-14     	; 0x2c42 <__divsf3_pse+0x78>
    2c50:	88 0f       	add	r24, r24
    2c52:	91 1d       	adc	r25, r1
    2c54:	96 95       	lsr	r25
    2c56:	87 95       	ror	r24
    2c58:	97 f9       	bld	r25, 7
    2c5a:	08 95       	ret
    2c5c:	e1 e0       	ldi	r30, 0x01	; 1
    2c5e:	66 0f       	add	r22, r22
    2c60:	77 1f       	adc	r23, r23
    2c62:	88 1f       	adc	r24, r24
    2c64:	bb 1f       	adc	r27, r27
    2c66:	62 17       	cp	r22, r18
    2c68:	73 07       	cpc	r23, r19
    2c6a:	84 07       	cpc	r24, r20
    2c6c:	ba 07       	cpc	r27, r26
    2c6e:	20 f0       	brcs	.+8      	; 0x2c78 <__divsf3_pse+0xae>
    2c70:	62 1b       	sub	r22, r18
    2c72:	73 0b       	sbc	r23, r19
    2c74:	84 0b       	sbc	r24, r20
    2c76:	ba 0b       	sbc	r27, r26
    2c78:	ee 1f       	adc	r30, r30
    2c7a:	88 f7       	brcc	.-30     	; 0x2c5e <__divsf3_pse+0x94>
    2c7c:	e0 95       	com	r30
    2c7e:	08 95       	ret

00002c80 <__fixsfsi>:
    2c80:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__fixunssfsi>
    2c84:	68 94       	set
    2c86:	b1 11       	cpse	r27, r1
    2c88:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__fp_szero>
    2c8c:	08 95       	ret

00002c8e <__fixunssfsi>:
    2c8e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__fp_splitA>
    2c92:	88 f0       	brcs	.+34     	; 0x2cb6 <__fixunssfsi+0x28>
    2c94:	9f 57       	subi	r25, 0x7F	; 127
    2c96:	98 f0       	brcs	.+38     	; 0x2cbe <__fixunssfsi+0x30>
    2c98:	b9 2f       	mov	r27, r25
    2c9a:	99 27       	eor	r25, r25
    2c9c:	b7 51       	subi	r27, 0x17	; 23
    2c9e:	b0 f0       	brcs	.+44     	; 0x2ccc <__fixunssfsi+0x3e>
    2ca0:	e1 f0       	breq	.+56     	; 0x2cda <__fixunssfsi+0x4c>
    2ca2:	66 0f       	add	r22, r22
    2ca4:	77 1f       	adc	r23, r23
    2ca6:	88 1f       	adc	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	1a f0       	brmi	.+6      	; 0x2cb2 <__fixunssfsi+0x24>
    2cac:	ba 95       	dec	r27
    2cae:	c9 f7       	brne	.-14     	; 0x2ca2 <__fixunssfsi+0x14>
    2cb0:	14 c0       	rjmp	.+40     	; 0x2cda <__fixunssfsi+0x4c>
    2cb2:	b1 30       	cpi	r27, 0x01	; 1
    2cb4:	91 f0       	breq	.+36     	; 0x2cda <__fixunssfsi+0x4c>
    2cb6:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__fp_zero>
    2cba:	b1 e0       	ldi	r27, 0x01	; 1
    2cbc:	08 95       	ret
    2cbe:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__fp_zero>
    2cc2:	67 2f       	mov	r22, r23
    2cc4:	78 2f       	mov	r23, r24
    2cc6:	88 27       	eor	r24, r24
    2cc8:	b8 5f       	subi	r27, 0xF8	; 248
    2cca:	39 f0       	breq	.+14     	; 0x2cda <__fixunssfsi+0x4c>
    2ccc:	b9 3f       	cpi	r27, 0xF9	; 249
    2cce:	cc f3       	brlt	.-14     	; 0x2cc2 <__fixunssfsi+0x34>
    2cd0:	86 95       	lsr	r24
    2cd2:	77 95       	ror	r23
    2cd4:	67 95       	ror	r22
    2cd6:	b3 95       	inc	r27
    2cd8:	d9 f7       	brne	.-10     	; 0x2cd0 <__fixunssfsi+0x42>
    2cda:	3e f4       	brtc	.+14     	; 0x2cea <__fixunssfsi+0x5c>
    2cdc:	90 95       	com	r25
    2cde:	80 95       	com	r24
    2ce0:	70 95       	com	r23
    2ce2:	61 95       	neg	r22
    2ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    2cea:	08 95       	ret

00002cec <__floatunsisf>:
    2cec:	e8 94       	clt
    2cee:	09 c0       	rjmp	.+18     	; 0x2d02 <__floatsisf+0x12>

00002cf0 <__floatsisf>:
    2cf0:	97 fb       	bst	r25, 7
    2cf2:	3e f4       	brtc	.+14     	; 0x2d02 <__floatsisf+0x12>
    2cf4:	90 95       	com	r25
    2cf6:	80 95       	com	r24
    2cf8:	70 95       	com	r23
    2cfa:	61 95       	neg	r22
    2cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    2d00:	9f 4f       	sbci	r25, 0xFF	; 255
    2d02:	99 23       	and	r25, r25
    2d04:	a9 f0       	breq	.+42     	; 0x2d30 <__floatsisf+0x40>
    2d06:	f9 2f       	mov	r31, r25
    2d08:	96 e9       	ldi	r25, 0x96	; 150
    2d0a:	bb 27       	eor	r27, r27
    2d0c:	93 95       	inc	r25
    2d0e:	f6 95       	lsr	r31
    2d10:	87 95       	ror	r24
    2d12:	77 95       	ror	r23
    2d14:	67 95       	ror	r22
    2d16:	b7 95       	ror	r27
    2d18:	f1 11       	cpse	r31, r1
    2d1a:	f8 cf       	rjmp	.-16     	; 0x2d0c <__floatsisf+0x1c>
    2d1c:	fa f4       	brpl	.+62     	; 0x2d5c <__floatsisf+0x6c>
    2d1e:	bb 0f       	add	r27, r27
    2d20:	11 f4       	brne	.+4      	; 0x2d26 <__floatsisf+0x36>
    2d22:	60 ff       	sbrs	r22, 0
    2d24:	1b c0       	rjmp	.+54     	; 0x2d5c <__floatsisf+0x6c>
    2d26:	6f 5f       	subi	r22, 0xFF	; 255
    2d28:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2e:	16 c0       	rjmp	.+44     	; 0x2d5c <__floatsisf+0x6c>
    2d30:	88 23       	and	r24, r24
    2d32:	11 f0       	breq	.+4      	; 0x2d38 <__floatsisf+0x48>
    2d34:	96 e9       	ldi	r25, 0x96	; 150
    2d36:	11 c0       	rjmp	.+34     	; 0x2d5a <__floatsisf+0x6a>
    2d38:	77 23       	and	r23, r23
    2d3a:	21 f0       	breq	.+8      	; 0x2d44 <__floatsisf+0x54>
    2d3c:	9e e8       	ldi	r25, 0x8E	; 142
    2d3e:	87 2f       	mov	r24, r23
    2d40:	76 2f       	mov	r23, r22
    2d42:	05 c0       	rjmp	.+10     	; 0x2d4e <__floatsisf+0x5e>
    2d44:	66 23       	and	r22, r22
    2d46:	71 f0       	breq	.+28     	; 0x2d64 <__floatsisf+0x74>
    2d48:	96 e8       	ldi	r25, 0x86	; 134
    2d4a:	86 2f       	mov	r24, r22
    2d4c:	70 e0       	ldi	r23, 0x00	; 0
    2d4e:	60 e0       	ldi	r22, 0x00	; 0
    2d50:	2a f0       	brmi	.+10     	; 0x2d5c <__floatsisf+0x6c>
    2d52:	9a 95       	dec	r25
    2d54:	66 0f       	add	r22, r22
    2d56:	77 1f       	adc	r23, r23
    2d58:	88 1f       	adc	r24, r24
    2d5a:	da f7       	brpl	.-10     	; 0x2d52 <__floatsisf+0x62>
    2d5c:	88 0f       	add	r24, r24
    2d5e:	96 95       	lsr	r25
    2d60:	87 95       	ror	r24
    2d62:	97 f9       	bld	r25, 7
    2d64:	08 95       	ret

00002d66 <__fp_cmp>:
    2d66:	99 0f       	add	r25, r25
    2d68:	00 08       	sbc	r0, r0
    2d6a:	55 0f       	add	r21, r21
    2d6c:	aa 0b       	sbc	r26, r26
    2d6e:	e0 e8       	ldi	r30, 0x80	; 128
    2d70:	fe ef       	ldi	r31, 0xFE	; 254
    2d72:	16 16       	cp	r1, r22
    2d74:	17 06       	cpc	r1, r23
    2d76:	e8 07       	cpc	r30, r24
    2d78:	f9 07       	cpc	r31, r25
    2d7a:	c0 f0       	brcs	.+48     	; 0x2dac <__fp_cmp+0x46>
    2d7c:	12 16       	cp	r1, r18
    2d7e:	13 06       	cpc	r1, r19
    2d80:	e4 07       	cpc	r30, r20
    2d82:	f5 07       	cpc	r31, r21
    2d84:	98 f0       	brcs	.+38     	; 0x2dac <__fp_cmp+0x46>
    2d86:	62 1b       	sub	r22, r18
    2d88:	73 0b       	sbc	r23, r19
    2d8a:	84 0b       	sbc	r24, r20
    2d8c:	95 0b       	sbc	r25, r21
    2d8e:	39 f4       	brne	.+14     	; 0x2d9e <__fp_cmp+0x38>
    2d90:	0a 26       	eor	r0, r26
    2d92:	61 f0       	breq	.+24     	; 0x2dac <__fp_cmp+0x46>
    2d94:	23 2b       	or	r18, r19
    2d96:	24 2b       	or	r18, r20
    2d98:	25 2b       	or	r18, r21
    2d9a:	21 f4       	brne	.+8      	; 0x2da4 <__fp_cmp+0x3e>
    2d9c:	08 95       	ret
    2d9e:	0a 26       	eor	r0, r26
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <__fp_cmp+0x3e>
    2da2:	a1 40       	sbci	r26, 0x01	; 1
    2da4:	a6 95       	lsr	r26
    2da6:	8f ef       	ldi	r24, 0xFF	; 255
    2da8:	81 1d       	adc	r24, r1
    2daa:	81 1d       	adc	r24, r1
    2dac:	08 95       	ret

00002dae <__fp_inf>:
    2dae:	97 f9       	bld	r25, 7
    2db0:	9f 67       	ori	r25, 0x7F	; 127
    2db2:	80 e8       	ldi	r24, 0x80	; 128
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	08 95       	ret

00002dba <__fp_nan>:
    2dba:	9f ef       	ldi	r25, 0xFF	; 255
    2dbc:	80 ec       	ldi	r24, 0xC0	; 192
    2dbe:	08 95       	ret

00002dc0 <__fp_pscA>:
    2dc0:	00 24       	eor	r0, r0
    2dc2:	0a 94       	dec	r0
    2dc4:	16 16       	cp	r1, r22
    2dc6:	17 06       	cpc	r1, r23
    2dc8:	18 06       	cpc	r1, r24
    2dca:	09 06       	cpc	r0, r25
    2dcc:	08 95       	ret

00002dce <__fp_pscB>:
    2dce:	00 24       	eor	r0, r0
    2dd0:	0a 94       	dec	r0
    2dd2:	12 16       	cp	r1, r18
    2dd4:	13 06       	cpc	r1, r19
    2dd6:	14 06       	cpc	r1, r20
    2dd8:	05 06       	cpc	r0, r21
    2dda:	08 95       	ret

00002ddc <__fp_round>:
    2ddc:	09 2e       	mov	r0, r25
    2dde:	03 94       	inc	r0
    2de0:	00 0c       	add	r0, r0
    2de2:	11 f4       	brne	.+4      	; 0x2de8 <__fp_round+0xc>
    2de4:	88 23       	and	r24, r24
    2de6:	52 f0       	brmi	.+20     	; 0x2dfc <__fp_round+0x20>
    2de8:	bb 0f       	add	r27, r27
    2dea:	40 f4       	brcc	.+16     	; 0x2dfc <__fp_round+0x20>
    2dec:	bf 2b       	or	r27, r31
    2dee:	11 f4       	brne	.+4      	; 0x2df4 <__fp_round+0x18>
    2df0:	60 ff       	sbrs	r22, 0
    2df2:	04 c0       	rjmp	.+8      	; 0x2dfc <__fp_round+0x20>
    2df4:	6f 5f       	subi	r22, 0xFF	; 255
    2df6:	7f 4f       	sbci	r23, 0xFF	; 255
    2df8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfc:	08 95       	ret

00002dfe <__fp_split3>:
    2dfe:	57 fd       	sbrc	r21, 7
    2e00:	90 58       	subi	r25, 0x80	; 128
    2e02:	44 0f       	add	r20, r20
    2e04:	55 1f       	adc	r21, r21
    2e06:	59 f0       	breq	.+22     	; 0x2e1e <__fp_splitA+0x10>
    2e08:	5f 3f       	cpi	r21, 0xFF	; 255
    2e0a:	71 f0       	breq	.+28     	; 0x2e28 <__fp_splitA+0x1a>
    2e0c:	47 95       	ror	r20

00002e0e <__fp_splitA>:
    2e0e:	88 0f       	add	r24, r24
    2e10:	97 fb       	bst	r25, 7
    2e12:	99 1f       	adc	r25, r25
    2e14:	61 f0       	breq	.+24     	; 0x2e2e <__fp_splitA+0x20>
    2e16:	9f 3f       	cpi	r25, 0xFF	; 255
    2e18:	79 f0       	breq	.+30     	; 0x2e38 <__fp_splitA+0x2a>
    2e1a:	87 95       	ror	r24
    2e1c:	08 95       	ret
    2e1e:	12 16       	cp	r1, r18
    2e20:	13 06       	cpc	r1, r19
    2e22:	14 06       	cpc	r1, r20
    2e24:	55 1f       	adc	r21, r21
    2e26:	f2 cf       	rjmp	.-28     	; 0x2e0c <__fp_split3+0xe>
    2e28:	46 95       	lsr	r20
    2e2a:	f1 df       	rcall	.-30     	; 0x2e0e <__fp_splitA>
    2e2c:	08 c0       	rjmp	.+16     	; 0x2e3e <__fp_splitA+0x30>
    2e2e:	16 16       	cp	r1, r22
    2e30:	17 06       	cpc	r1, r23
    2e32:	18 06       	cpc	r1, r24
    2e34:	99 1f       	adc	r25, r25
    2e36:	f1 cf       	rjmp	.-30     	; 0x2e1a <__fp_splitA+0xc>
    2e38:	86 95       	lsr	r24
    2e3a:	71 05       	cpc	r23, r1
    2e3c:	61 05       	cpc	r22, r1
    2e3e:	08 94       	sec
    2e40:	08 95       	ret

00002e42 <__fp_zero>:
    2e42:	e8 94       	clt

00002e44 <__fp_szero>:
    2e44:	bb 27       	eor	r27, r27
    2e46:	66 27       	eor	r22, r22
    2e48:	77 27       	eor	r23, r23
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	97 f9       	bld	r25, 7
    2e4e:	08 95       	ret

00002e50 <__gesf2>:
    2e50:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__fp_cmp>
    2e54:	08 f4       	brcc	.+2      	; 0x2e58 <__gesf2+0x8>
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
    2e58:	08 95       	ret

00002e5a <__mulsf3>:
    2e5a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <__mulsf3x>
    2e5e:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__fp_round>
    2e62:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__fp_pscA>
    2e66:	38 f0       	brcs	.+14     	; 0x2e76 <__mulsf3+0x1c>
    2e68:	0e 94 e7 16 	call	0x2dce	; 0x2dce <__fp_pscB>
    2e6c:	20 f0       	brcs	.+8      	; 0x2e76 <__mulsf3+0x1c>
    2e6e:	95 23       	and	r25, r21
    2e70:	11 f0       	breq	.+4      	; 0x2e76 <__mulsf3+0x1c>
    2e72:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__fp_inf>
    2e76:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__fp_nan>
    2e7a:	11 24       	eor	r1, r1
    2e7c:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__fp_szero>

00002e80 <__mulsf3x>:
    2e80:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <__fp_split3>
    2e84:	70 f3       	brcs	.-36     	; 0x2e62 <__mulsf3+0x8>

00002e86 <__mulsf3_pse>:
    2e86:	95 9f       	mul	r25, r21
    2e88:	c1 f3       	breq	.-16     	; 0x2e7a <__mulsf3+0x20>
    2e8a:	95 0f       	add	r25, r21
    2e8c:	50 e0       	ldi	r21, 0x00	; 0
    2e8e:	55 1f       	adc	r21, r21
    2e90:	62 9f       	mul	r22, r18
    2e92:	f0 01       	movw	r30, r0
    2e94:	72 9f       	mul	r23, r18
    2e96:	bb 27       	eor	r27, r27
    2e98:	f0 0d       	add	r31, r0
    2e9a:	b1 1d       	adc	r27, r1
    2e9c:	63 9f       	mul	r22, r19
    2e9e:	aa 27       	eor	r26, r26
    2ea0:	f0 0d       	add	r31, r0
    2ea2:	b1 1d       	adc	r27, r1
    2ea4:	aa 1f       	adc	r26, r26
    2ea6:	64 9f       	mul	r22, r20
    2ea8:	66 27       	eor	r22, r22
    2eaa:	b0 0d       	add	r27, r0
    2eac:	a1 1d       	adc	r26, r1
    2eae:	66 1f       	adc	r22, r22
    2eb0:	82 9f       	mul	r24, r18
    2eb2:	22 27       	eor	r18, r18
    2eb4:	b0 0d       	add	r27, r0
    2eb6:	a1 1d       	adc	r26, r1
    2eb8:	62 1f       	adc	r22, r18
    2eba:	73 9f       	mul	r23, r19
    2ebc:	b0 0d       	add	r27, r0
    2ebe:	a1 1d       	adc	r26, r1
    2ec0:	62 1f       	adc	r22, r18
    2ec2:	83 9f       	mul	r24, r19
    2ec4:	a0 0d       	add	r26, r0
    2ec6:	61 1d       	adc	r22, r1
    2ec8:	22 1f       	adc	r18, r18
    2eca:	74 9f       	mul	r23, r20
    2ecc:	33 27       	eor	r19, r19
    2ece:	a0 0d       	add	r26, r0
    2ed0:	61 1d       	adc	r22, r1
    2ed2:	23 1f       	adc	r18, r19
    2ed4:	84 9f       	mul	r24, r20
    2ed6:	60 0d       	add	r22, r0
    2ed8:	21 1d       	adc	r18, r1
    2eda:	82 2f       	mov	r24, r18
    2edc:	76 2f       	mov	r23, r22
    2ede:	6a 2f       	mov	r22, r26
    2ee0:	11 24       	eor	r1, r1
    2ee2:	9f 57       	subi	r25, 0x7F	; 127
    2ee4:	50 40       	sbci	r21, 0x00	; 0
    2ee6:	9a f0       	brmi	.+38     	; 0x2f0e <__mulsf3_pse+0x88>
    2ee8:	f1 f0       	breq	.+60     	; 0x2f26 <__mulsf3_pse+0xa0>
    2eea:	88 23       	and	r24, r24
    2eec:	4a f0       	brmi	.+18     	; 0x2f00 <__mulsf3_pse+0x7a>
    2eee:	ee 0f       	add	r30, r30
    2ef0:	ff 1f       	adc	r31, r31
    2ef2:	bb 1f       	adc	r27, r27
    2ef4:	66 1f       	adc	r22, r22
    2ef6:	77 1f       	adc	r23, r23
    2ef8:	88 1f       	adc	r24, r24
    2efa:	91 50       	subi	r25, 0x01	; 1
    2efc:	50 40       	sbci	r21, 0x00	; 0
    2efe:	a9 f7       	brne	.-22     	; 0x2eea <__mulsf3_pse+0x64>
    2f00:	9e 3f       	cpi	r25, 0xFE	; 254
    2f02:	51 05       	cpc	r21, r1
    2f04:	80 f0       	brcs	.+32     	; 0x2f26 <__mulsf3_pse+0xa0>
    2f06:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <__fp_inf>
    2f0a:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__fp_szero>
    2f0e:	5f 3f       	cpi	r21, 0xFF	; 255
    2f10:	e4 f3       	brlt	.-8      	; 0x2f0a <__mulsf3_pse+0x84>
    2f12:	98 3e       	cpi	r25, 0xE8	; 232
    2f14:	d4 f3       	brlt	.-12     	; 0x2f0a <__mulsf3_pse+0x84>
    2f16:	86 95       	lsr	r24
    2f18:	77 95       	ror	r23
    2f1a:	67 95       	ror	r22
    2f1c:	b7 95       	ror	r27
    2f1e:	f7 95       	ror	r31
    2f20:	e7 95       	ror	r30
    2f22:	9f 5f       	subi	r25, 0xFF	; 255
    2f24:	c1 f7       	brne	.-16     	; 0x2f16 <__mulsf3_pse+0x90>
    2f26:	fe 2b       	or	r31, r30
    2f28:	88 0f       	add	r24, r24
    2f2a:	91 1d       	adc	r25, r1
    2f2c:	96 95       	lsr	r25
    2f2e:	87 95       	ror	r24
    2f30:	97 f9       	bld	r25, 7
    2f32:	08 95       	ret

00002f34 <__mulsi3>:
    2f34:	db 01       	movw	r26, r22
    2f36:	8f 93       	push	r24
    2f38:	9f 93       	push	r25
    2f3a:	0e 94 03 18 	call	0x3006	; 0x3006 <__muluhisi3>
    2f3e:	bf 91       	pop	r27
    2f40:	af 91       	pop	r26
    2f42:	a2 9f       	mul	r26, r18
    2f44:	80 0d       	add	r24, r0
    2f46:	91 1d       	adc	r25, r1
    2f48:	a3 9f       	mul	r26, r19
    2f4a:	90 0d       	add	r25, r0
    2f4c:	b2 9f       	mul	r27, r18
    2f4e:	90 0d       	add	r25, r0
    2f50:	11 24       	eor	r1, r1
    2f52:	08 95       	ret

00002f54 <__udivmodhi4>:
    2f54:	aa 1b       	sub	r26, r26
    2f56:	bb 1b       	sub	r27, r27
    2f58:	51 e1       	ldi	r21, 0x11	; 17
    2f5a:	07 c0       	rjmp	.+14     	; 0x2f6a <__udivmodhi4_ep>

00002f5c <__udivmodhi4_loop>:
    2f5c:	aa 1f       	adc	r26, r26
    2f5e:	bb 1f       	adc	r27, r27
    2f60:	a6 17       	cp	r26, r22
    2f62:	b7 07       	cpc	r27, r23
    2f64:	10 f0       	brcs	.+4      	; 0x2f6a <__udivmodhi4_ep>
    2f66:	a6 1b       	sub	r26, r22
    2f68:	b7 0b       	sbc	r27, r23

00002f6a <__udivmodhi4_ep>:
    2f6a:	88 1f       	adc	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	5a 95       	dec	r21
    2f70:	a9 f7       	brne	.-22     	; 0x2f5c <__udivmodhi4_loop>
    2f72:	80 95       	com	r24
    2f74:	90 95       	com	r25
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	08 95       	ret

00002f7c <__divmodhi4>:
    2f7c:	97 fb       	bst	r25, 7
    2f7e:	07 2e       	mov	r0, r23
    2f80:	16 f4       	brtc	.+4      	; 0x2f86 <__divmodhi4+0xa>
    2f82:	00 94       	com	r0
    2f84:	07 d0       	rcall	.+14     	; 0x2f94 <__divmodhi4_neg1>
    2f86:	77 fd       	sbrc	r23, 7
    2f88:	09 d0       	rcall	.+18     	; 0x2f9c <__divmodhi4_neg2>
    2f8a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <__udivmodhi4>
    2f8e:	07 fc       	sbrc	r0, 7
    2f90:	05 d0       	rcall	.+10     	; 0x2f9c <__divmodhi4_neg2>
    2f92:	3e f4       	brtc	.+14     	; 0x2fa2 <__divmodhi4_exit>

00002f94 <__divmodhi4_neg1>:
    2f94:	90 95       	com	r25
    2f96:	81 95       	neg	r24
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	08 95       	ret

00002f9c <__divmodhi4_neg2>:
    2f9c:	70 95       	com	r23
    2f9e:	61 95       	neg	r22
    2fa0:	7f 4f       	sbci	r23, 0xFF	; 255

00002fa2 <__divmodhi4_exit>:
    2fa2:	08 95       	ret

00002fa4 <__udivmodsi4>:
    2fa4:	a1 e2       	ldi	r26, 0x21	; 33
    2fa6:	1a 2e       	mov	r1, r26
    2fa8:	aa 1b       	sub	r26, r26
    2faa:	bb 1b       	sub	r27, r27
    2fac:	fd 01       	movw	r30, r26
    2fae:	0d c0       	rjmp	.+26     	; 0x2fca <__udivmodsi4_ep>

00002fb0 <__udivmodsi4_loop>:
    2fb0:	aa 1f       	adc	r26, r26
    2fb2:	bb 1f       	adc	r27, r27
    2fb4:	ee 1f       	adc	r30, r30
    2fb6:	ff 1f       	adc	r31, r31
    2fb8:	a2 17       	cp	r26, r18
    2fba:	b3 07       	cpc	r27, r19
    2fbc:	e4 07       	cpc	r30, r20
    2fbe:	f5 07       	cpc	r31, r21
    2fc0:	20 f0       	brcs	.+8      	; 0x2fca <__udivmodsi4_ep>
    2fc2:	a2 1b       	sub	r26, r18
    2fc4:	b3 0b       	sbc	r27, r19
    2fc6:	e4 0b       	sbc	r30, r20
    2fc8:	f5 0b       	sbc	r31, r21

00002fca <__udivmodsi4_ep>:
    2fca:	66 1f       	adc	r22, r22
    2fcc:	77 1f       	adc	r23, r23
    2fce:	88 1f       	adc	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	1a 94       	dec	r1
    2fd4:	69 f7       	brne	.-38     	; 0x2fb0 <__udivmodsi4_loop>
    2fd6:	60 95       	com	r22
    2fd8:	70 95       	com	r23
    2fda:	80 95       	com	r24
    2fdc:	90 95       	com	r25
    2fde:	9b 01       	movw	r18, r22
    2fe0:	ac 01       	movw	r20, r24
    2fe2:	bd 01       	movw	r22, r26
    2fe4:	cf 01       	movw	r24, r30
    2fe6:	08 95       	ret

00002fe8 <__umulhisi3>:
    2fe8:	a2 9f       	mul	r26, r18
    2fea:	b0 01       	movw	r22, r0
    2fec:	b3 9f       	mul	r27, r19
    2fee:	c0 01       	movw	r24, r0
    2ff0:	a3 9f       	mul	r26, r19
    2ff2:	70 0d       	add	r23, r0
    2ff4:	81 1d       	adc	r24, r1
    2ff6:	11 24       	eor	r1, r1
    2ff8:	91 1d       	adc	r25, r1
    2ffa:	b2 9f       	mul	r27, r18
    2ffc:	70 0d       	add	r23, r0
    2ffe:	81 1d       	adc	r24, r1
    3000:	11 24       	eor	r1, r1
    3002:	91 1d       	adc	r25, r1
    3004:	08 95       	ret

00003006 <__muluhisi3>:
    3006:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__umulhisi3>
    300a:	a5 9f       	mul	r26, r21
    300c:	90 0d       	add	r25, r0
    300e:	b4 9f       	mul	r27, r20
    3010:	90 0d       	add	r25, r0
    3012:	a4 9f       	mul	r26, r20
    3014:	80 0d       	add	r24, r0
    3016:	91 1d       	adc	r25, r1
    3018:	11 24       	eor	r1, r1
    301a:	08 95       	ret

0000301c <eeprom_read_block>:
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22

00003020 <eeprom_read_blraw>:
    3020:	fc 01       	movw	r30, r24
    3022:	f9 99       	sbic	0x1f, 1	; 31
    3024:	fe cf       	rjmp	.-4      	; 0x3022 <eeprom_read_blraw+0x2>
    3026:	06 c0       	rjmp	.+12     	; 0x3034 <eeprom_read_blraw+0x14>
    3028:	f2 bd       	out	0x22, r31	; 34
    302a:	e1 bd       	out	0x21, r30	; 33
    302c:	f8 9a       	sbi	0x1f, 0	; 31
    302e:	31 96       	adiw	r30, 0x01	; 1
    3030:	00 b4       	in	r0, 0x20	; 32
    3032:	0d 92       	st	X+, r0
    3034:	41 50       	subi	r20, 0x01	; 1
    3036:	50 40       	sbci	r21, 0x00	; 0
    3038:	b8 f7       	brcc	.-18     	; 0x3028 <eeprom_read_blraw+0x8>
    303a:	08 95       	ret

0000303c <eeprom_read_byte>:
    303c:	f9 99       	sbic	0x1f, 1	; 31
    303e:	fe cf       	rjmp	.-4      	; 0x303c <eeprom_read_byte>
    3040:	92 bd       	out	0x22, r25	; 34
    3042:	81 bd       	out	0x21, r24	; 33
    3044:	f8 9a       	sbi	0x1f, 0	; 31
    3046:	99 27       	eor	r25, r25
    3048:	80 b5       	in	r24, 0x20	; 32
    304a:	08 95       	ret

0000304c <eeprom_update_block>:
    304c:	dc 01       	movw	r26, r24
    304e:	a4 0f       	add	r26, r20
    3050:	b5 1f       	adc	r27, r21
    3052:	41 50       	subi	r20, 0x01	; 1
    3054:	50 40       	sbci	r21, 0x00	; 0
    3056:	48 f0       	brcs	.+18     	; 0x306a <eeprom_update_block+0x1e>
    3058:	cb 01       	movw	r24, r22
    305a:	84 0f       	add	r24, r20
    305c:	95 1f       	adc	r25, r21
    305e:	2e 91       	ld	r18, -X
    3060:	0e 94 37 18 	call	0x306e	; 0x306e <eeprom_update_r18>
    3064:	41 50       	subi	r20, 0x01	; 1
    3066:	50 40       	sbci	r21, 0x00	; 0
    3068:	d0 f7       	brcc	.-12     	; 0x305e <eeprom_update_block+0x12>
    306a:	08 95       	ret

0000306c <eeprom_update_byte>:
    306c:	26 2f       	mov	r18, r22

0000306e <eeprom_update_r18>:
    306e:	f9 99       	sbic	0x1f, 1	; 31
    3070:	fe cf       	rjmp	.-4      	; 0x306e <eeprom_update_r18>
    3072:	92 bd       	out	0x22, r25	; 34
    3074:	81 bd       	out	0x21, r24	; 33
    3076:	f8 9a       	sbi	0x1f, 0	; 31
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	00 b4       	in	r0, 0x20	; 32
    307c:	02 16       	cp	r0, r18
    307e:	39 f0       	breq	.+14     	; 0x308e <eeprom_update_r18+0x20>
    3080:	1f ba       	out	0x1f, r1	; 31
    3082:	20 bd       	out	0x20, r18	; 32
    3084:	0f b6       	in	r0, 0x3f	; 63
    3086:	f8 94       	cli
    3088:	fa 9a       	sbi	0x1f, 2	; 31
    308a:	f9 9a       	sbi	0x1f, 1	; 31
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	08 95       	ret

00003090 <_exit>:
    3090:	f8 94       	cli

00003092 <__stop_program>:
    3092:	ff cf       	rjmp	.-2      	; 0x3092 <__stop_program>
