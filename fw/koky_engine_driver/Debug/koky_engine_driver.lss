
koky_engine_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  00003552  00003606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003552  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002c4  008002c4  000037ca  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000037ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000037cd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003800  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001f0  00000000  00000000  00003840  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001964  00000000  00000000  00003a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bfc  00000000  00000000  00005394  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d28  00000000  00000000  00005f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  00007cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008fa  00000000  00000000  00008228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000afe  00000000  00000000  00008b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00009620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_2>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_11>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_16>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__fuse+0xff7dfbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__fuse+0xff7dfa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <TUI+0x29e>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e2 e5       	ldi	r30, 0x52	; 82
      d6:	f5 e3       	ldi	r31, 0x35	; 53
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a4 3c       	cpi	r26, 0xC4	; 196
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	22 e0       	ldi	r18, 0x02	; 2
      e6:	a4 ec       	ldi	r26, 0xC4	; 196
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	aa 3d       	cpi	r26, 0xDA	; 218
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
      f8:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <__vector_1>:
#define ENC_B_PORT	PORTD
// ============================================================================


ISR(INT0_vect)
{
     100:	1f 92       	push	r1
     102:	0f 92       	push	r0
     104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	2f 93       	push	r18
     10e:	3f 93       	push	r19
     110:	4f 93       	push	r20
     112:	5f 93       	push	r21
     114:	6f 93       	push	r22
     116:	7f 93       	push	r23
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	af 93       	push	r26
     11e:	bf 93       	push	r27
     120:	ef 93       	push	r30
     122:	ff 93       	push	r31
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
	TUI_back_timer_clear();
     12c:	0e 94 35 02 	call	0x46a	; 0x46a <TUI_back_timer_clear>
	TUI('b');
     130:	82 e6       	ldi	r24, 0x62	; 98
     132:	0e 94 0f 03 	call	0x61e	; 0x61e <TUI>
}
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	ff 91       	pop	r31
     13e:	ef 91       	pop	r30
     140:	bf 91       	pop	r27
     142:	af 91       	pop	r26
     144:	9f 91       	pop	r25
     146:	8f 91       	pop	r24
     148:	7f 91       	pop	r23
     14a:	6f 91       	pop	r22
     14c:	5f 91       	pop	r21
     14e:	4f 91       	pop	r20
     150:	3f 91       	pop	r19
     152:	2f 91       	pop	r18
     154:	0f 90       	pop	r0
     156:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <__vector_2>:

ISR(INT1_vect)
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	2f 93       	push	r18
     16e:	3f 93       	push	r19
     170:	4f 93       	push	r20
     172:	5f 93       	push	r21
     174:	6f 93       	push	r22
     176:	7f 93       	push	r23
     178:	8f 93       	push	r24
     17a:	9f 93       	push	r25
     17c:	af 93       	push	r26
     17e:	bf 93       	push	r27
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t step = 0;
	static uint8_t dir = 0;

	TUI_back_timer_clear();
     18c:	0e 94 35 02 	call	0x46a	; 0x46a <TUI_back_timer_clear>
	if (ENC_A_PIN & ENC_A)
     190:	89 e2       	ldi	r24, 0x29	; 41
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	80 81       	ld	r24, Z
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 71       	andi	r24, 0x10	; 16
     19e:	99 27       	eor	r25, r25
     1a0:	89 2b       	or	r24, r25
     1a2:	a1 f0       	breq	.+40     	; 0x1cc <__vector_2+0x6c>
	{
		
		if (!dir)
     1a4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1a8:	88 23       	and	r24, r24
     1aa:	69 f4       	brne	.+26     	; 0x1c6 <__vector_2+0x66>
		{
			step++;
     1ac:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <step.1884>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1b6:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	d8 f0       	brcs	.+54     	; 0x1f4 <__vector_2+0x94>
				TUI('-');
     1be:	8d e2       	ldi	r24, 0x2D	; 45
     1c0:	0e 94 0f 03 	call	0x61e	; 0x61e <TUI>
		{
			dir = 1;
			//step = 0;
		}
	}
}
     1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <__vector_2+0x94>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('-');
		}
		else
		{
			dir = 0;
     1c6:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
		{
			dir = 1;
			//step = 0;
		}
	}
}
     1ca:	14 c0       	rjmp	.+40     	; 0x1f4 <__vector_2+0x94>
			//step = 0;
		}
	}
	else
	{
		if (dir)
     1cc:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1d0:	88 23       	and	r24, r24
     1d2:	69 f0       	breq	.+26     	; 0x1ee <__vector_2+0x8e>
		{
			step++;
     1d4:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <step.1884>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1de:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1e2:	85 30       	cpi	r24, 0x05	; 5
     1e4:	38 f0       	brcs	.+14     	; 0x1f4 <__vector_2+0x94>
				TUI('+');
     1e6:	8b e2       	ldi	r24, 0x2B	; 43
     1e8:	0e 94 0f 03 	call	0x61e	; 0x61e <TUI>
		{
			dir = 1;
			//step = 0;
		}
	}
}
     1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <__vector_2+0x94>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('+');
		}
		else
		{
			dir = 1;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
			//step = 0;
		}
	}
}
     1f4:	00 00       	nop
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	ff 91       	pop	r31
     1fc:	ef 91       	pop	r30
     1fe:	bf 91       	pop	r27
     200:	af 91       	pop	r26
     202:	9f 91       	pop	r25
     204:	8f 91       	pop	r24
     206:	7f 91       	pop	r23
     208:	6f 91       	pop	r22
     20a:	5f 91       	pop	r21
     20c:	4f 91       	pop	r20
     20e:	3f 91       	pop	r19
     210:	2f 91       	pop	r18
     212:	0f 90       	pop	r0
     214:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     218:	0f 90       	pop	r0
     21a:	1f 90       	pop	r1
     21c:	18 95       	reti

0000021e <encoder_init>:

// encoder initialization
void encoder_init(void)
{
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
	// set button
	BTN_PORT |= BTN;		// pull-up
     226:	8b e2       	ldi	r24, 0x2B	; 43
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	2b e2       	ldi	r18, 0x2B	; 43
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	24 60       	ori	r18, 0x04	; 4
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
	EICRA = (1<<ISC01);		// falling edge
     238:	89 e6       	ldi	r24, 0x69	; 105
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	22 e0       	ldi	r18, 0x02	; 2
     23e:	fc 01       	movw	r30, r24
     240:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);		// int enable from INT0
     242:	8d e3       	ldi	r24, 0x3D	; 61
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18

	// set encoder	
	ENC_A_PORT |= ENC_A;	// pull-up
     24c:	8b e2       	ldi	r24, 0x2B	; 43
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	2b e2       	ldi	r18, 0x2B	; 43
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	20 61       	ori	r18, 0x10	; 16
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18
	ENC_B_PORT |= ENC_B;	// pull-up
     25e:	8b e2       	ldi	r24, 0x2B	; 43
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	2b e2       	ldi	r18, 0x2B	; 43
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	f9 01       	movw	r30, r18
     268:	20 81       	ld	r18, Z
     26a:	28 60       	ori	r18, 0x08	; 8
     26c:	fc 01       	movw	r30, r24
     26e:	20 83       	st	Z, r18

	EICRA |= (1<<ISC11);	// falling edge
     270:	89 e6       	ldi	r24, 0x69	; 105
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	29 e6       	ldi	r18, 0x69	; 105
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	f9 01       	movw	r30, r18
     27a:	20 81       	ld	r18, Z
     27c:	28 60       	ori	r18, 0x08	; 8
     27e:	fc 01       	movw	r30, r24
     280:	20 83       	st	Z, r18
	EIMSK |= (1<<INT1);		// int enable from INT0
     282:	8d e3       	ldi	r24, 0x3D	; 61
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	2d e3       	ldi	r18, 0x3D	; 61
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	f9 01       	movw	r30, r18
     28c:	20 81       	ld	r18, Z
     28e:	22 60       	ori	r18, 0x02	; 2
     290:	fc 01       	movw	r30, r24
     292:	20 83       	st	Z, r18
}
     294:	00 00       	nop
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <main>:

int main(void)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00;
     2a4:	84 e2       	ldi	r24, 0x24	; 36
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	fc 01       	movw	r30, r24
     2aa:	10 82       	st	Z, r1
	DDRC = 0x00;
     2ac:	87 e2       	ldi	r24, 0x27	; 39
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	10 82       	st	Z, r1
	DDRD = 0x00;
     2b4:	8a e2       	ldi	r24, 0x2A	; 42
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1

	PORTB = 0x00;
     2bc:	85 e2       	ldi	r24, 0x25	; 37
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	10 82       	st	Z, r1
	PORTC = 0x00;
     2c4:	88 e2       	ldi	r24, 0x28	; 40
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	10 82       	st	Z, r1
	PORTD = 0x00;
     2cc:	8b e2       	ldi	r24, 0x2B	; 43
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	fc 01       	movw	r30, r24
     2d2:	10 82       	st	Z, r1

	motor_init();
     2d4:	0e 94 ed 14 	call	0x29da	; 0x29da <motor_init>
	encoder_init();
     2d8:	0e 94 0f 01 	call	0x21e	; 0x21e <encoder_init>
	lcd_init();
     2dc:	0e 94 3f 0a 	call	0x147e	; 0x147e <lcd_init>
	ntc_init();
     2e0:	0e 94 ae 13 	call	0x275c	; 0x275c <ntc_init>
	valve_init();
     2e4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <valve_init>

	sei();
     2e8:	78 94       	sei

	TUI_inti();
     2ea:	0e 94 bd 02 	call	0x57a	; 0x57a <TUI_inti>
	TUI('s');
     2ee:	83 e7       	ldi	r24, 0x73	; 115
     2f0:	0e 94 0f 03 	call	0x61e	; 0x61e <TUI>
		
	for(;;)
    {
		asm("nop");
     2f4:	00 00       	nop
    }
     2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <main+0x58>

000002f8 <TUI_sec_timer_init>:
#define EEP_ADDR		(void *)0x10
#define eep_read()		eeprom_read_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))
#define eep_update()	eeprom_update_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))

void TUI_sec_timer_init(void)
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
	TUI_sec_timer_stop();
     300:	0e 94 a5 01 	call	0x34a	; 0x34a <TUI_sec_timer_stop>
	TCCR1A = 0;
     304:	80 e8       	ldi	r24, 0x80	; 128
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	fc 01       	movw	r30, r24
     30a:	10 82       	st	Z, r1
	OCR1A = F_CPU / 1024;							// TOP value for 1 sec
     30c:	88 e8       	ldi	r24, 0x88	; 136
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	24 e8       	ldi	r18, 0x84	; 132
     312:	3e e1       	ldi	r19, 0x1E	; 30
     314:	fc 01       	movw	r30, r24
     316:	31 83       	std	Z+1, r19	; 0x01
     318:	20 83       	st	Z, r18
	TIMSK1 = (1<<OCIE1A);							// compare IT enable
     31a:	8f e6       	ldi	r24, 0x6F	; 111
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	22 e0       	ldi	r18, 0x02	; 2
     320:	fc 01       	movw	r30, r24
     322:	20 83       	st	Z, r18
	TUI_sec_timer_start();
     324:	0e 94 98 01 	call	0x330	; 0x330 <TUI_sec_timer_start>
}
     328:	00 00       	nop
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <TUI_sec_timer_start>:
void TUI_sec_timer_start(void)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);	// CTC mode clk/1024
     338:	81 e8       	ldi	r24, 0x81	; 129
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	2d e0       	ldi	r18, 0x0D	; 13
     33e:	fc 01       	movw	r30, r24
     340:	20 83       	st	Z, r18
}
     342:	00 00       	nop
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <TUI_sec_timer_stop>:
void TUI_sec_timer_stop(void)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12);							// CTC mode clk = 0
     352:	81 e8       	ldi	r24, 0x81	; 129
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	28 e0       	ldi	r18, 0x08	; 8
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
}
     35c:	00 00       	nop
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
     364:	1f 92       	push	r1
     366:	0f 92       	push	r0
     368:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
	if (machine_state == MACHINE_START)
     390:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     394:	88 23       	and	r24, r24
     396:	c9 f5       	brne	.+114    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		if (user_profile.sec > 0)
     398:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     39c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3a0:	89 2b       	or	r24, r25
     3a2:	49 f0       	breq	.+18     	; 0x3b6 <__vector_11+0x52>
		{
			user_profile.sec--;
     3a4:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3a8:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <user_profile+0x3>
     3b2:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <user_profile+0x2>
		}
		if (!user_profile.sec)
     3b6:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3ba:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3be:	89 2b       	or	r24, r25
     3c0:	21 f5       	brne	.+72     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		{
			motor_smoothly_rmp(user_profile.rpm, 0);
     3c2:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     3c6:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	0e 94 33 16 	call	0x2c66	; 0x2c66 <motor_smoothly_rmp>
			machine_state = MACHINE_STOP;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
			VALVE_OFF;
     3d8:	8b e2       	ldi	r24, 0x2B	; 43
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	2b e2       	ldi	r18, 0x2B	; 43
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	f9 01       	movw	r30, r18
     3e2:	20 81       	ld	r18, Z
     3e4:	2d 7f       	andi	r18, 0xFD	; 253
     3e6:	fc 01       	movw	r30, r24
     3e8:	20 83       	st	Z, r18
			user_profile = backup_profile;
     3ea:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     3ee:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     3f2:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     3f6:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     3fa:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     3fe:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     402:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     406:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
		}
	}
	TUI('s');
     40a:	83 e7       	ldi	r24, 0x73	; 115
     40c:	0e 94 0f 03 	call	0x61e	; 0x61e <TUI>
}
     410:	00 00       	nop
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	ff 91       	pop	r31
     418:	ef 91       	pop	r30
     41a:	bf 91       	pop	r27
     41c:	af 91       	pop	r26
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	7f 91       	pop	r23
     424:	6f 91       	pop	r22
     426:	5f 91       	pop	r21
     428:	4f 91       	pop	r20
     42a:	3f 91       	pop	r19
     42c:	2f 91       	pop	r18
     42e:	0f 90       	pop	r0
     430:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <TUI_back_timer_init>:


void TUI_back_timer_init(void)
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;									// normal mode
     442:	84 e4       	ldi	r24, 0x44	; 68
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	10 82       	st	Z, r1
	TCCR0B = (1<<CS02) | (1<<CS00);				// clk/1024
     44a:	85 e4       	ldi	r24, 0x45	; 69
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	25 e0       	ldi	r18, 0x05	; 5
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
	TIMSK0 = (1<<TOIE0);						// compare IT enable
     454:	8e e6       	ldi	r24, 0x6E	; 110
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
	TUI_back_timer_clear();
     45e:	0e 94 35 02 	call	0x46a	; 0x46a <TUI_back_timer_clear>
}
     462:	00 00       	nop
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <TUI_back_timer_clear>:
void TUI_back_timer_clear(void)
{
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
	back_tick = 0;
     472:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <back_tick>
     476:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <back_tick+0x1>
     47a:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <back_tick+0x2>
     47e:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <back_tick+0x3>
	TCNT0 = 0;
     482:	86 e4       	ldi	r24, 0x46	; 70
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	fc 01       	movw	r30, r24
     488:	10 82       	st	Z, r1
}
     48a:	00 00       	nop
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     49a:	0f 92       	push	r0
     49c:	11 24       	eor	r1, r1
     49e:	2f 93       	push	r18
     4a0:	3f 93       	push	r19
     4a2:	4f 93       	push	r20
     4a4:	5f 93       	push	r21
     4a6:	6f 93       	push	r22
     4a8:	7f 93       	push	r23
     4aa:	8f 93       	push	r24
     4ac:	9f 93       	push	r25
     4ae:	af 93       	push	r26
     4b0:	bf 93       	push	r27
     4b2:	ef 93       	push	r30
     4b4:	ff 93       	push	r31
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	1f 92       	push	r1
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	const uint8_t sec_to_return = 3;
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	89 83       	std	Y+1, r24	; 0x01
	back_tick++;
     4c4:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <back_tick>
     4c8:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <back_tick+0x1>
     4cc:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <back_tick+0x2>
     4d0:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <back_tick+0x3>
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	a1 1d       	adc	r26, r1
     4d8:	b1 1d       	adc	r27, r1
     4da:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <back_tick>
     4de:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <back_tick+0x1>
     4e2:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <back_tick+0x2>
     4e6:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <back_tick+0x3>
	if (back_tick == ( (((uint32_t) sec_to_return) * ((uint32_t) F_CPU)) / (((uint32_t) 256) * ((uint32_t) 1024))) )
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	88 2f       	mov	r24, r24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	a0 e0       	ldi	r26, 0x00	; 0
     4f2:	b0 e0       	ldi	r27, 0x00	; 0
     4f4:	9c 01       	movw	r18, r24
     4f6:	ad 01       	movw	r20, r26
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	72 e1       	ldi	r23, 0x12	; 18
     4fc:	8a e7       	ldi	r24, 0x7A	; 122
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__mulsi3>
     504:	dc 01       	movw	r26, r24
     506:	cb 01       	movw	r24, r22
     508:	9c 01       	movw	r18, r24
     50a:	ad 01       	movw	r20, r26
     50c:	01 2e       	mov	r0, r17
     50e:	12 e1       	ldi	r17, 0x12	; 18
     510:	56 95       	lsr	r21
     512:	47 95       	ror	r20
     514:	37 95       	ror	r19
     516:	27 95       	ror	r18
     518:	1a 95       	dec	r17
     51a:	d1 f7       	brne	.-12     	; 0x510 <__vector_16+0x7e>
     51c:	10 2d       	mov	r17, r0
     51e:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <back_tick>
     522:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <back_tick+0x1>
     526:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <back_tick+0x2>
     52a:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <back_tick+0x3>
     52e:	28 17       	cp	r18, r24
     530:	39 07       	cpc	r19, r25
     532:	4a 07       	cpc	r20, r26
     534:	5b 07       	cpc	r21, r27
     536:	59 f4       	brne	.+22     	; 0x54e <__vector_16+0xbc>
	{
		TUI_back_timer_clear();
     538:	0e 94 35 02 	call	0x46a	; 0x46a <TUI_back_timer_clear>
		if (menu != MAIN_MENU)
     53c:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     540:	88 23       	and	r24, r24
     542:	29 f0       	breq	.+10     	; 0x54e <__vector_16+0xbc>
		{
			menu = MAIN_MENU;
     544:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
			TUI('s');
     548:	83 e7       	ldi	r24, 0x73	; 115
     54a:	0e 94 0f 03 	call	0x61e	; 0x61e <TUI>
		}
	}
}
     54e:	00 00       	nop
     550:	0f 90       	pop	r0
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <TUI_inti>:

void TUI_inti(void)
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
	menu = MAIN_MENU;
     582:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
	machine_state = MACHINE_STOP;
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
	actual_rmp = 0;
     58c:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <actual_rmp+0x1>
     590:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <actual_rmp>

	TUI_sec_timer_init();
     594:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TUI_sec_timer_init>
	TUI_back_timer_init();
     598:	0e 94 1d 02 	call	0x43a	; 0x43a <TUI_back_timer_init>

	// EEPROM is empty
	if (eeprom_read_byte(EEP_ADDR) == 0xFF)
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <eeprom_read_byte>
     5a4:	8f 3f       	cpi	r24, 0xFF	; 255
     5a6:	41 f4       	brne	.+16     	; 0x5b8 <TUI_inti+0x3e>
	{
		eep_update();
     5a8:	4d e0       	ldi	r20, 0x0D	; 13
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	60 e1       	ldi	r22, 0x10	; 16
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 85 1a 	call	0x350a	; 0x350a <eeprom_update_block>
	}
	eep_read();
     5b8:	4d e0       	ldi	r20, 0x0D	; 13
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	60 e1       	ldi	r22, 0x10	; 16
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 6d 1a 	call	0x34da	; 0x34da <eeprom_read_block>

	user_profile = eeprom_data.profile[eeprom_data.profile_id];
     5c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	8f 5f       	subi	r24, 0xFF	; 255
     5da:	9e 4f       	sbci	r25, 0xFE	; 254
     5dc:	fc 01       	movw	r30, r24
     5de:	80 81       	ld	r24, Z
     5e0:	91 81       	ldd	r25, Z+1	; 0x01
     5e2:	a2 81       	ldd	r26, Z+2	; 0x02
     5e4:	b3 81       	ldd	r27, Z+3	; 0x03
     5e6:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     5ea:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     5ee:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     5f2:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
	backup_profile = user_profile;
     5f6:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     5fa:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     5fe:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     602:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     606:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     60a:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     60e:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     612:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
}
     616:	00 00       	nop
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <TUI>:

void TUI(char action)
{
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	00 d0       	rcall	.+0      	; 0x624 <TUI+0x6>
     624:	00 d0       	rcall	.+0      	; 0x626 <TUI+0x8>
     626:	1f 92       	push	r1
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	8d 83       	std	Y+5, r24	; 0x05
	static item_menu_select_t item_menu_secect = ITEM_MENU_SELECT_RPM;
	static load_menu_select_t load_menu_select = LOAD_MENU_SELECT_PROFILE1;
	static save_menu_select_t save_menu_select = SAVE_MENU_SELECT_PROFILE1;

	// nastaveni
	switch (menu)
     62e:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     632:	88 2f       	mov	r24, r24
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	91 05       	cpc	r25, r1
     63a:	09 f4       	brne	.+2      	; 0x63e <TUI+0x20>
     63c:	fc c0       	rjmp	.+504    	; 0x836 <TUI+0x218>
     63e:	83 30       	cpi	r24, 0x03	; 3
     640:	91 05       	cpc	r25, r1
     642:	34 f4       	brge	.+12     	; 0x650 <TUI+0x32>
     644:	00 97       	sbiw	r24, 0x00	; 0
     646:	81 f0       	breq	.+32     	; 0x668 <TUI+0x4a>
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	09 f4       	brne	.+2      	; 0x64e <TUI+0x30>
     64c:	92 c0       	rjmp	.+292    	; 0x772 <TUI+0x154>
     64e:	36 c2       	rjmp	.+1132   	; 0xabc <__stack+0x1bd>
     650:	84 30       	cpi	r24, 0x04	; 4
     652:	91 05       	cpc	r25, r1
     654:	09 f4       	brne	.+2      	; 0x658 <TUI+0x3a>
     656:	77 c1       	rjmp	.+750    	; 0x946 <__stack+0x47>
     658:	84 30       	cpi	r24, 0x04	; 4
     65a:	91 05       	cpc	r25, r1
     65c:	0c f4       	brge	.+2      	; 0x660 <TUI+0x42>
     65e:	2f c1       	rjmp	.+606    	; 0x8be <TUI+0x2a0>
     660:	05 97       	sbiw	r24, 0x05	; 5
     662:	09 f4       	brne	.+2      	; 0x666 <TUI+0x48>
     664:	cd c1       	rjmp	.+922    	; 0xa00 <__stack+0x101>
     666:	2a c2       	rjmp	.+1108   	; 0xabc <__stack+0x1bd>
	{
		case MAIN_MENU:
			switch (action)
     668:	8d 81       	ldd	r24, Y+5	; 0x05
     66a:	88 2f       	mov	r24, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	8d 32       	cpi	r24, 0x2D	; 45
     670:	91 05       	cpc	r25, r1
     672:	31 f0       	breq	.+12     	; 0x680 <TUI+0x62>
     674:	82 36       	cpi	r24, 0x62	; 98
     676:	91 05       	cpc	r25, r1
     678:	89 f0       	breq	.+34     	; 0x69c <TUI+0x7e>
     67a:	8b 97       	sbiw	r24, 0x2b	; 43
     67c:	09 f0       	breq	.+2      	; 0x680 <TUI+0x62>
					break;

				default:
					;
			}
			break;
     67e:	1e c2       	rjmp	.+1084   	; 0xabc <__stack+0x1bd>
			{
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
     680:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     684:	88 23       	and	r24, r24
     686:	09 f4       	brne	.+2      	; 0x68a <TUI+0x6c>
     688:	72 c0       	rjmp	.+228    	; 0x76e <TUI+0x150>
						break;
					main_menu_secelt = (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ? MAIN_MENU_SELECT_MENU : MAIN_MENU_SELECT_CONTOL;
     68a:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	99 23       	and	r25, r25
     692:	09 f0       	breq	.+2      	; 0x696 <TUI+0x78>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <main_menu_secelt.1912>
					break;
     69a:	6a c0       	rjmp	.+212    	; 0x770 <TUI+0x152>

				// stisk tlacitka
				case 'b':
					if (main_menu_secelt == MAIN_MENU_SELECT_CONTOL)
     69c:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     6a0:	88 23       	and	r24, r24
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <TUI+0x88>
     6a4:	50 c0       	rjmp	.+160    	; 0x746 <TUI+0x128>
					{
						if (machine_state == MACHINE_STOP)
     6a6:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	39 f5       	brne	.+78     	; 0x6fc <TUI+0xde>
						{
							machine_state = MACHINE_START;
     6ae:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <machine_state>
							VALVE_ON;
     6b2:	8b e2       	ldi	r24, 0x2B	; 43
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2b e2       	ldi	r18, 0x2B	; 43
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	f9 01       	movw	r30, r18
     6bc:	20 81       	ld	r18, Z
     6be:	22 60       	ori	r18, 0x02	; 2
     6c0:	fc 01       	movw	r30, r24
     6c2:	20 83       	st	Z, r18
							backup_profile = user_profile;
     6c4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     6c8:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     6cc:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     6d0:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     6d4:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     6d8:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     6dc:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     6e0:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);							
     6e4:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <user_profile>
     6e8:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <user_profile+0x1>
     6ec:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <actual_rmp>
     6f0:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <actual_rmp+0x1>
     6f4:	b9 01       	movw	r22, r18
     6f6:	0e 94 33 16 	call	0x2c66	; 0x2c66 <motor_smoothly_rmp>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     6fa:	3a c0       	rjmp	.+116    	; 0x770 <TUI+0x152>
							backup_profile = user_profile;
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);							
						}
						else
						{
							machine_state = MACHINE_STOP;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
							motor_smoothly_rmp(user_profile.rpm, 0);
     702:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     706:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <motor_smoothly_rmp>
							VALVE_OFF;
     712:	8b e2       	ldi	r24, 0x2B	; 43
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	2b e2       	ldi	r18, 0x2B	; 43
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	2d 7f       	andi	r18, 0xFD	; 253
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
							user_profile = backup_profile;
     724:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     728:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     72c:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     730:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     734:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     738:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     73c:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     740:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     744:	15 c0       	rjmp	.+42     	; 0x770 <TUI+0x152>
							user_profile = backup_profile;
						}
					}
					else
					{
						menu = ITEM_MENU;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
						backup_profile = user_profile;
     74c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     750:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     754:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     758:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     75c:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     760:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     764:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     768:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
					}
					break;
     76c:	01 c0       	rjmp	.+2      	; 0x770 <TUI+0x152>
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
						break;
     76e:	00 00       	nop
					break;

				default:
					;
			}
			break;
     770:	a5 c1       	rjmp	.+842    	; 0xabc <__stack+0x1bd>

		case ITEM_MENU:
			switch (action)
     772:	8d 81       	ldd	r24, Y+5	; 0x05
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	8d 32       	cpi	r24, 0x2D	; 45
     77a:	91 05       	cpc	r25, r1
     77c:	11 f1       	breq	.+68     	; 0x7c2 <TUI+0x1a4>
     77e:	82 36       	cpi	r24, 0x62	; 98
     780:	91 05       	cpc	r25, r1
     782:	d9 f1       	breq	.+118    	; 0x7fa <TUI+0x1dc>
     784:	8b 97       	sbiw	r24, 0x2b	; 43
     786:	09 f0       	breq	.+2      	; 0x78a <TUI+0x16c>
					break;

				default:
					;
			}
			break;
     788:	99 c1       	rjmp	.+818    	; 0xabc <__stack+0x1bd>

		case ITEM_MENU:
			switch (action)
			{
				case '+':
					switch (item_menu_secect)
     78a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	91 05       	cpc	r25, r1
     796:	49 f0       	breq	.+18     	; 0x7aa <TUI+0x18c>
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	91 05       	cpc	r25, r1
     79c:	51 f0       	breq	.+20     	; 0x7b2 <TUI+0x194>
     79e:	89 2b       	or	r24, r25
     7a0:	61 f4       	brne	.+24     	; 0x7ba <TUI+0x19c>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7a8:	0b c0       	rjmp	.+22     	; 0x7c0 <TUI+0x1a2>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <TUI+0x1a2>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <TUI+0x1a2>
						default:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     7ba:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <item_menu_secect.1913>
					}
					break;
     7be:	3a c0       	rjmp	.+116    	; 0x834 <TUI+0x216>
     7c0:	39 c0       	rjmp	.+114    	; 0x834 <TUI+0x216>

				case  '-':
					switch (item_menu_secect)
     7c2:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     7c6:	88 2f       	mov	r24, r24
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	91 05       	cpc	r25, r1
     7ce:	49 f0       	breq	.+18     	; 0x7e2 <TUI+0x1c4>
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	91 05       	cpc	r25, r1
     7d4:	49 f0       	breq	.+18     	; 0x7e8 <TUI+0x1ca>
     7d6:	89 2b       	or	r24, r25
     7d8:	59 f4       	brne	.+22     	; 0x7f0 <TUI+0x1d2>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7e0:	0b c0       	rjmp	.+22     	; 0x7f8 <TUI+0x1da>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     7e2:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <item_menu_secect.1913>
							break;
     7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <TUI+0x1da>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <TUI+0x1da>
						default:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
					}
					break;
     7f6:	1e c0       	rjmp	.+60     	; 0x834 <TUI+0x216>
     7f8:	1d c0       	rjmp	.+58     	; 0x834 <TUI+0x216>

				case 'b':
					switch (item_menu_secect)
     7fa:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     7fe:	88 2f       	mov	r24, r24
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	91 05       	cpc	r25, r1
     806:	49 f0       	breq	.+18     	; 0x81a <TUI+0x1fc>
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	91 05       	cpc	r25, r1
     80c:	51 f0       	breq	.+20     	; 0x822 <TUI+0x204>
     80e:	89 2b       	or	r24, r25
     810:	61 f4       	brne	.+24     	; 0x82a <TUI+0x20c>
					{
						case ITEM_MENU_SELECT_RPM:
							menu = RPM_MENU;
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     818:	0c c0       	rjmp	.+24     	; 0x832 <TUI+0x214>
						case ITEM_MENU_SELECT_TIME:
							menu = TIME_MENU;
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     820:	08 c0       	rjmp	.+16     	; 0x832 <TUI+0x214>
						case ITEM_MENU_SELECT_LOAD:
							menu = LOAD_MENU;
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     828:	04 c0       	rjmp	.+8      	; 0x832 <TUI+0x214>
						default:
							menu = SAVE_MENU;
     82a:	85 e0       	ldi	r24, 0x05	; 5
     82c:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
					}
					break;
     830:	00 c0       	rjmp	.+0      	; 0x832 <TUI+0x214>
     832:	00 00       	nop

				default:
					;
			}
			break;
     834:	43 c1       	rjmp	.+646    	; 0xabc <__stack+0x1bd>

		case RPM_MENU:
			switch (action)
     836:	8d 81       	ldd	r24, Y+5	; 0x05
     838:	88 2f       	mov	r24, r24
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	8d 32       	cpi	r24, 0x2D	; 45
     83e:	91 05       	cpc	r25, r1
     840:	b9 f0       	breq	.+46     	; 0x870 <TUI+0x252>
     842:	82 36       	cpi	r24, 0x62	; 98
     844:	91 05       	cpc	r25, r1
     846:	21 f1       	breq	.+72     	; 0x890 <TUI+0x272>
     848:	8b 97       	sbiw	r24, 0x2b	; 43
     84a:	09 f0       	breq	.+2      	; 0x84e <TUI+0x230>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     84c:	37 c1       	rjmp	.+622    	; 0xabc <__stack+0x1bd>

		case RPM_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
     84e:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     852:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     856:	8c 32       	cpi	r24, 0x2C	; 44
     858:	91 40       	sbci	r25, 0x01	; 1
     85a:	68 f5       	brcc	.+90     	; 0x8b6 <TUI+0x298>
						backup_profile.rpm++;
     85c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     860:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     86a:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
					break;
     86e:	23 c0       	rjmp	.+70     	; 0x8b6 <TUI+0x298>
				case '-':
					if (backup_profile.rpm > 0)
     870:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     874:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     878:	89 2b       	or	r24, r25
     87a:	f9 f0       	breq	.+62     	; 0x8ba <TUI+0x29c>
						backup_profile.rpm--;
     87c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     880:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     88a:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
					break;
     88e:	15 c0       	rjmp	.+42     	; 0x8ba <TUI+0x29c>
				case  'b':
					menu = MAIN_MENU;
     890:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					user_profile = backup_profile;
     894:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     898:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     89c:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8a0:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8a4:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     8a8:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     8ac:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     8b0:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					break;
     8b4:	03 c0       	rjmp	.+6      	; 0x8bc <TUI+0x29e>
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
						backup_profile.rpm++;
					break;
     8b6:	00 00       	nop
     8b8:	01 c1       	rjmp	.+514    	; 0xabc <__stack+0x1bd>
				case '-':
					if (backup_profile.rpm > 0)
						backup_profile.rpm--;
					break;
     8ba:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     8bc:	ff c0       	rjmp	.+510    	; 0xabc <__stack+0x1bd>

		case TIME_MENU:
			switch (action)
     8be:	8d 81       	ldd	r24, Y+5	; 0x05
     8c0:	88 2f       	mov	r24, r24
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	8d 32       	cpi	r24, 0x2D	; 45
     8c6:	91 05       	cpc	r25, r1
     8c8:	b9 f0       	breq	.+46     	; 0x8f8 <TUI+0x2da>
     8ca:	82 36       	cpi	r24, 0x62	; 98
     8cc:	91 05       	cpc	r25, r1
     8ce:	21 f1       	breq	.+72     	; 0x918 <__stack+0x19>
     8d0:	8b 97       	sbiw	r24, 0x2b	; 43
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <TUI+0x2b8>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     8d4:	f3 c0       	rjmp	.+486    	; 0xabc <__stack+0x1bd>

		case TIME_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
     8d6:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8da:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8de:	80 3a       	cpi	r24, 0xA0	; 160
     8e0:	9c 48       	sbci	r25, 0x8C	; 140
     8e2:	68 f5       	brcc	.+90     	; 0x93e <__stack+0x3f>
						backup_profile.sec+=60;
     8e4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8e8:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8ec:	cc 96       	adiw	r24, 0x3c	; 60
     8ee:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <backup_profile+0x3>
     8f2:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <backup_profile+0x2>
					break;
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__stack+0x3f>
				case '-':
					if (backup_profile.sec > 0)
     8f8:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8fc:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     900:	89 2b       	or	r24, r25
     902:	f9 f0       	breq	.+62     	; 0x942 <__stack+0x43>
						backup_profile.sec-=60;
     904:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     908:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     90c:	cc 97       	sbiw	r24, 0x3c	; 60
     90e:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <backup_profile+0x3>
     912:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <backup_profile+0x2>
					break;
     916:	15 c0       	rjmp	.+42     	; 0x942 <__stack+0x43>
				case  'b':
					menu = MAIN_MENU;
     918:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					user_profile = backup_profile;
     91c:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     920:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     924:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     928:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     92c:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     930:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     934:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     938:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					break;
     93c:	03 c0       	rjmp	.+6      	; 0x944 <__stack+0x45>
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
						backup_profile.sec+=60;
					break;
     93e:	00 00       	nop
     940:	bd c0       	rjmp	.+378    	; 0xabc <__stack+0x1bd>
				case '-':
					if (backup_profile.sec > 0)
						backup_profile.sec-=60;
					break;
     942:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     944:	bb c0       	rjmp	.+374    	; 0xabc <__stack+0x1bd>

		case LOAD_MENU:
			switch (action)
     946:	8d 81       	ldd	r24, Y+5	; 0x05
     948:	88 2f       	mov	r24, r24
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	8d 32       	cpi	r24, 0x2D	; 45
     94e:	91 05       	cpc	r25, r1
     950:	d9 f0       	breq	.+54     	; 0x988 <__stack+0x89>
     952:	82 36       	cpi	r24, 0x62	; 98
     954:	91 05       	cpc	r25, r1
     956:	69 f1       	breq	.+90     	; 0x9b2 <__stack+0xb3>
     958:	8b 97       	sbiw	r24, 0x2b	; 43
     95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x5f>
					eep_update();
					break;
				default:
				;
			}
			break;
     95c:	af c0       	rjmp	.+350    	; 0xabc <__stack+0x1bd>

		case LOAD_MENU:
			switch (action)
			{
				case '+':
					switch (load_menu_select)
     95e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	19 f0       	breq	.+6      	; 0x970 <__stack+0x71>
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	29 f0       	breq	.+10     	; 0x978 <__stack+0x79>
     96e:	08 c0       	rjmp	.+16     	; 0x980 <__stack+0x81>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     976:	07 c0       	rjmp	.+14     	; 0x986 <__stack+0x87>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     97e:	03 c0       	rjmp	.+6      	; 0x986 <__stack+0x87>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     980:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <load_menu_select.1914>
					}
					break;
     984:	3c c0       	rjmp	.+120    	; 0x9fe <__stack+0xff>
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__stack+0xff>
				case '-':
					switch (load_menu_select)
     988:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	19 f0       	breq	.+6      	; 0x99a <__stack+0x9b>
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	29 f0       	breq	.+10     	; 0x9a2 <__stack+0xa3>
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <__stack+0xa9>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <__stack+0xb1>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     9a2:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <load_menu_select.1914>
							break;
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__stack+0xb1>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
					}
					break;
     9ae:	27 c0       	rjmp	.+78     	; 0x9fe <__stack+0xff>
     9b0:	26 c0       	rjmp	.+76     	; 0x9fe <__stack+0xff>
				case  'b':
					menu = MAIN_MENU;
     9b2:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					eeprom_data.profile_id = load_menu_select;
     9b6:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     9ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					user_profile = eeprom_data.profile[eeprom_data.profile_id];
     9be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9c2:	88 2f       	mov	r24, r24
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	8f 5f       	subi	r24, 0xFF	; 255
     9d0:	9e 4f       	sbci	r25, 0xFE	; 254
     9d2:	fc 01       	movw	r30, r24
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	a2 81       	ldd	r26, Z+2	; 0x02
     9da:	b3 81       	ldd	r27, Z+3	; 0x03
     9dc:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     9e0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     9e4:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     9e8:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					eep_update();
     9ec:	4d e0       	ldi	r20, 0x0D	; 13
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	60 e1       	ldi	r22, 0x10	; 16
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	0e 94 85 1a 	call	0x350a	; 0x350a <eeprom_update_block>
					break;
     9fc:	00 00       	nop
				default:
				;
			}
			break;
     9fe:	5e c0       	rjmp	.+188    	; 0xabc <__stack+0x1bd>

		case SAVE_MENU:
			switch (action)
     a00:	8d 81       	ldd	r24, Y+5	; 0x05
     a02:	88 2f       	mov	r24, r24
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	8d 32       	cpi	r24, 0x2D	; 45
     a08:	91 05       	cpc	r25, r1
     a0a:	d9 f0       	breq	.+54     	; 0xa42 <__stack+0x143>
     a0c:	82 36       	cpi	r24, 0x62	; 98
     a0e:	91 05       	cpc	r25, r1
     a10:	69 f1       	breq	.+90     	; 0xa6c <__stack+0x16d>
     a12:	8b 97       	sbiw	r24, 0x2b	; 43
     a14:	09 f0       	breq	.+2      	; 0xa18 <__stack+0x119>
					eep_update();
					break;
				default:
				;
			}
			break;
     a16:	51 c0       	rjmp	.+162    	; 0xaba <__stack+0x1bb>

		case SAVE_MENU:
			switch (action)
			{
				case '+':
					switch (save_menu_select)
     a18:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a1c:	88 2f       	mov	r24, r24
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	19 f0       	breq	.+6      	; 0xa2a <__stack+0x12b>
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	29 f0       	breq	.+10     	; 0xa32 <__stack+0x133>
     a28:	08 c0       	rjmp	.+16     	; 0xa3a <__stack+0x13b>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a30:	07 c0       	rjmp	.+14     	; 0xa40 <__stack+0x141>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a38:	03 c0       	rjmp	.+6      	; 0xa40 <__stack+0x141>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     a3a:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <save_menu_select.1915>
					}
					break;
     a3e:	3d c0       	rjmp	.+122    	; 0xaba <__stack+0x1bb>
     a40:	3c c0       	rjmp	.+120    	; 0xaba <__stack+0x1bb>
				case '-':
					switch (save_menu_select)
     a42:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a46:	88 2f       	mov	r24, r24
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	19 f0       	breq	.+6      	; 0xa54 <__stack+0x155>
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	29 f0       	breq	.+10     	; 0xa5c <__stack+0x15d>
     a52:	07 c0       	rjmp	.+14     	; 0xa62 <__stack+0x163>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__stack+0x16b>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     a5c:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <save_menu_select.1915>
							break;
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <__stack+0x16b>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
					}
					break;
     a68:	28 c0       	rjmp	.+80     	; 0xaba <__stack+0x1bb>
     a6a:	27 c0       	rjmp	.+78     	; 0xaba <__stack+0x1bb>
				case  'b':
					menu = MAIN_MENU;
     a6c:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					eeprom_data.profile_id = save_menu_select;
     a70:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a74:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					eeprom_data.profile[eeprom_data.profile_id] = user_profile;
     a78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	9c 01       	movw	r18, r24
     a8a:	2f 5f       	subi	r18, 0xFF	; 255
     a8c:	3e 4f       	sbci	r19, 0xFE	; 254
     a8e:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     a92:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     a96:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     a9a:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     a9e:	f9 01       	movw	r30, r18
     aa0:	80 83       	st	Z, r24
     aa2:	91 83       	std	Z+1, r25	; 0x01
     aa4:	a2 83       	std	Z+2, r26	; 0x02
     aa6:	b3 83       	std	Z+3, r27	; 0x03
					eep_update();
     aa8:	4d e0       	ldi	r20, 0x0D	; 13
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	60 e1       	ldi	r22, 0x10	; 16
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	0e 94 85 1a 	call	0x350a	; 0x350a <eeprom_update_block>
					break;
     ab8:	00 00       	nop
				default:
				;
			}
			break;
     aba:	00 00       	nop
		default:
			;
	}

	// zobrazeni
	switch (menu)
     abc:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	91 05       	cpc	r25, r1
     ac8:	09 f4       	brne	.+2      	; 0xacc <__stack+0x1cd>
     aca:	20 c2       	rjmp	.+1088   	; 0xf0c <__stack+0x60d>
     acc:	83 30       	cpi	r24, 0x03	; 3
     ace:	91 05       	cpc	r25, r1
     ad0:	34 f4       	brge	.+12     	; 0xade <__stack+0x1df>
     ad2:	00 97       	sbiw	r24, 0x00	; 0
     ad4:	81 f0       	breq	.+32     	; 0xaf6 <__stack+0x1f7>
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	09 f4       	brne	.+2      	; 0xadc <__stack+0x1dd>
     ada:	b3 c1       	rjmp	.+870    	; 0xe42 <__stack+0x543>
			break;

		default:
		;
	}
}
     adc:	c7 c4       	rjmp	.+2446   	; 0x146c <__stack+0xb6d>
		default:
			;
	}

	// zobrazeni
	switch (menu)
     ade:	84 30       	cpi	r24, 0x04	; 4
     ae0:	91 05       	cpc	r25, r1
     ae2:	09 f4       	brne	.+2      	; 0xae6 <__stack+0x1e7>
     ae4:	d5 c2       	rjmp	.+1450   	; 0x1090 <__stack+0x791>
     ae6:	84 30       	cpi	r24, 0x04	; 4
     ae8:	91 05       	cpc	r25, r1
     aea:	0c f4       	brge	.+2      	; 0xaee <__stack+0x1ef>
     aec:	4e c2       	rjmp	.+1180   	; 0xf8a <__stack+0x68b>
     aee:	05 97       	sbiw	r24, 0x05	; 5
     af0:	09 f4       	brne	.+2      	; 0xaf4 <__stack+0x1f5>
     af2:	c5 c3       	rjmp	.+1930   	; 0x127e <__stack+0x97f>
			break;

		default:
		;
	}
}
     af4:	bb c4       	rjmp	.+2422   	; 0x146c <__stack+0xb6d>
	// zobrazeni
	switch (menu)
	{
		case MAIN_MENU:

			if (user_profile.sec/3600)
     af6:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     afa:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     afe:	80 31       	cpi	r24, 0x10	; 16
     b00:	9e 40       	sbci	r25, 0x0E	; 14
     b02:	08 f4       	brcc	.+2      	; 0xb06 <__stack+0x207>
     b04:	5f c0       	rjmp	.+190    	; 0xbc4 <__stack+0x2c5>
				lcd_printf("\f%02d:%02d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     b06:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b0a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b0e:	20 e1       	ldi	r18, 0x10	; 16
     b10:	3e e0       	ldi	r19, 0x0E	; 14
     b12:	b9 01       	movw	r22, r18
     b14:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
     b18:	ac 01       	movw	r20, r24
     b1a:	9a 01       	movw	r18, r20
     b1c:	a9 e8       	ldi	r26, 0x89	; 137
     b1e:	b8 e8       	ldi	r27, 0x88	; 136
     b20:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
     b24:	fc 01       	movw	r30, r24
     b26:	f6 95       	lsr	r31
     b28:	e7 95       	ror	r30
     b2a:	f2 95       	swap	r31
     b2c:	e2 95       	swap	r30
     b2e:	ef 70       	andi	r30, 0x0F	; 15
     b30:	ef 27       	eor	r30, r31
     b32:	ff 70       	andi	r31, 0x0F	; 15
     b34:	ef 27       	eor	r30, r31
     b36:	2c e3       	ldi	r18, 0x3C	; 60
     b38:	2e 9f       	mul	r18, r30
     b3a:	c0 01       	movw	r24, r0
     b3c:	2f 9f       	mul	r18, r31
     b3e:	90 0d       	add	r25, r0
     b40:	11 24       	eor	r1, r1
     b42:	fa 01       	movw	r30, r20
     b44:	e8 1b       	sub	r30, r24
     b46:	f9 0b       	sbc	r31, r25
     b48:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b4c:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b50:	20 e1       	ldi	r18, 0x10	; 16
     b52:	3e e0       	ldi	r19, 0x0E	; 14
     b54:	b9 01       	movw	r22, r18
     b56:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
     b5a:	9c 01       	movw	r18, r24
     b5c:	a9 e8       	ldi	r26, 0x89	; 137
     b5e:	b8 e8       	ldi	r27, 0x88	; 136
     b60:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
     b64:	9c 01       	movw	r18, r24
     b66:	36 95       	lsr	r19
     b68:	27 95       	ror	r18
     b6a:	32 95       	swap	r19
     b6c:	22 95       	swap	r18
     b6e:	2f 70       	andi	r18, 0x0F	; 15
     b70:	23 27       	eor	r18, r19
     b72:	3f 70       	andi	r19, 0x0F	; 15
     b74:	23 27       	eor	r18, r19
     b76:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b7a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b7e:	40 e1       	ldi	r20, 0x10	; 16
     b80:	5e e0       	ldi	r21, 0x0E	; 14
     b82:	ba 01       	movw	r22, r20
     b84:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
     b88:	cb 01       	movw	r24, r22
     b8a:	4f 2f       	mov	r20, r31
     b8c:	4f 93       	push	r20
     b8e:	4e 2f       	mov	r20, r30
     b90:	4f 93       	push	r20
     b92:	43 2f       	mov	r20, r19
     b94:	4f 93       	push	r20
     b96:	2f 93       	push	r18
     b98:	29 2f       	mov	r18, r25
     b9a:	2f 93       	push	r18
     b9c:	8f 93       	push	r24
     b9e:	8e e0       	ldi	r24, 0x0E	; 14
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	89 2f       	mov	r24, r25
     ba4:	8f 93       	push	r24
     ba6:	8e e0       	ldi	r24, 0x0E	; 14
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	8f 93       	push	r24
     bac:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     bb0:	4d b7       	in	r20, 0x3d	; 61
     bb2:	5e b7       	in	r21, 0x3e	; 62
     bb4:	48 5f       	subi	r20, 0xF8	; 248
     bb6:	5f 4f       	sbci	r21, 0xFF	; 255
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	4d c0       	rjmp	.+154    	; 0xc5e <__stack+0x35f>
			else
				lcd_printf("\f%02d:%02d   ", (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     bc4:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     bc8:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     bcc:	20 e1       	ldi	r18, 0x10	; 16
     bce:	3e e0       	ldi	r19, 0x0E	; 14
     bd0:	b9 01       	movw	r22, r18
     bd2:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
     bd6:	ac 01       	movw	r20, r24
     bd8:	9a 01       	movw	r18, r20
     bda:	a9 e8       	ldi	r26, 0x89	; 137
     bdc:	b8 e8       	ldi	r27, 0x88	; 136
     bde:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
     be2:	fc 01       	movw	r30, r24
     be4:	f6 95       	lsr	r31
     be6:	e7 95       	ror	r30
     be8:	f2 95       	swap	r31
     bea:	e2 95       	swap	r30
     bec:	ef 70       	andi	r30, 0x0F	; 15
     bee:	ef 27       	eor	r30, r31
     bf0:	ff 70       	andi	r31, 0x0F	; 15
     bf2:	ef 27       	eor	r30, r31
     bf4:	2c e3       	ldi	r18, 0x3C	; 60
     bf6:	2e 9f       	mul	r18, r30
     bf8:	c0 01       	movw	r24, r0
     bfa:	2f 9f       	mul	r18, r31
     bfc:	90 0d       	add	r25, r0
     bfe:	11 24       	eor	r1, r1
     c00:	fa 01       	movw	r30, r20
     c02:	e8 1b       	sub	r30, r24
     c04:	f9 0b       	sbc	r31, r25
     c06:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     c0a:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     c0e:	20 e1       	ldi	r18, 0x10	; 16
     c10:	3e e0       	ldi	r19, 0x0E	; 14
     c12:	b9 01       	movw	r22, r18
     c14:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
     c18:	9c 01       	movw	r18, r24
     c1a:	a9 e8       	ldi	r26, 0x89	; 137
     c1c:	b8 e8       	ldi	r27, 0x88	; 136
     c1e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
     c22:	96 95       	lsr	r25
     c24:	87 95       	ror	r24
     c26:	92 95       	swap	r25
     c28:	82 95       	swap	r24
     c2a:	8f 70       	andi	r24, 0x0F	; 15
     c2c:	89 27       	eor	r24, r25
     c2e:	9f 70       	andi	r25, 0x0F	; 15
     c30:	89 27       	eor	r24, r25
     c32:	2f 2f       	mov	r18, r31
     c34:	2f 93       	push	r18
     c36:	2e 2f       	mov	r18, r30
     c38:	2f 93       	push	r18
     c3a:	29 2f       	mov	r18, r25
     c3c:	2f 93       	push	r18
     c3e:	8f 93       	push	r24
     c40:	8e e1       	ldi	r24, 0x1E	; 30
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	89 2f       	mov	r24, r25
     c46:	8f 93       	push	r24
     c48:	8e e1       	ldi	r24, 0x1E	; 30
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	8f 93       	push	r24
     c4e:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
			lcd_printf("       %3d%cC", ntc_measure(), 223);
     c5e:	0e 94 c0 13 	call	0x2780	; 0x2780 <ntc_measure>
     c62:	1f 92       	push	r1
     c64:	2f ed       	ldi	r18, 0xDF	; 223
     c66:	2f 93       	push	r18
     c68:	29 2f       	mov	r18, r25
     c6a:	2f 93       	push	r18
     c6c:	8f 93       	push	r24
     c6e:	8c e2       	ldi	r24, 0x2C	; 44
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	89 2f       	mov	r24, r25
     c74:	8f 93       	push	r24
     c76:	8c e2       	ldi	r24, 0x2C	; 44
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	8f 93       	push	r24
     c7c:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
			lcd_printf("\n        %4d", user_profile.rpm);
     c8c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     c90:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     c94:	29 2f       	mov	r18, r25
     c96:	2f 93       	push	r18
     c98:	8f 93       	push	r24
     c9a:	8a e3       	ldi	r24, 0x3A	; 58
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	89 2f       	mov	r24, r25
     ca0:	8f 93       	push	r24
     ca2:	8a e3       	ldi	r24, 0x3A	; 58
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	8f 93       	push	r24
     ca8:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0

			switch (machine_state)
     cb4:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	41 f5       	brne	.+80     	; 0xd10 <__stack+0x411>
			{
				case MACHINE_STOP:
					lcd_printf("\n\n%cStart        %cMenu ", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, (main_menu_secelt == MAIN_MENU_SELECT_MENU) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     cc0:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	19 f4       	brne	.+6      	; 0xcce <__stack+0x3cf>
     cc8:	28 e0       	ldi	r18, 0x08	; 8
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <__stack+0x3d3>
     cce:	20 e2       	ldi	r18, 0x20	; 32
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     cd6:	88 23       	and	r24, r24
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__stack+0x3e1>
     cda:	88 e0       	ldi	r24, 0x08	; 8
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <__stack+0x3e5>
     ce0:	80 e2       	ldi	r24, 0x20	; 32
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	43 2f       	mov	r20, r19
     ce6:	4f 93       	push	r20
     ce8:	2f 93       	push	r18
     cea:	29 2f       	mov	r18, r25
     cec:	2f 93       	push	r18
     cee:	8f 93       	push	r24
     cf0:	87 e4       	ldi	r24, 0x47	; 71
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	89 2f       	mov	r24, r25
     cf6:	8f 93       	push	r24
     cf8:	87 e4       	ldi	r24, 0x47	; 71
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	8f 93       	push	r24
     cfe:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
					break;
     d0e:	98 c0       	rjmp	.+304    	; 0xe40 <__stack+0x541>
				default:
					lcd_printf("\n");
     d10:	80 e6       	ldi	r24, 0x60	; 96
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	89 2f       	mov	r24, r25
     d16:	8f 93       	push	r24
     d18:	80 e6       	ldi	r24, 0x60	; 96
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	8f 93       	push	r24
     d1e:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
					// bar to end
					uint32_t bar;
					bar = backup_profile.sec - user_profile.sec;
     d26:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     d2a:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     d2e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     d32:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     d36:	f9 01       	movw	r30, r18
     d38:	e8 1b       	sub	r30, r24
     d3a:	f9 0b       	sbc	r31, r25
     d3c:	cf 01       	movw	r24, r30
     d3e:	cc 01       	movw	r24, r24
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	ab 83       	std	Y+3, r26	; 0x03
     d4a:	bc 83       	std	Y+4, r27	; 0x04
					if (bar)	// div zero
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	89 2b       	or	r24, r25
     d56:	8a 2b       	or	r24, r26
     d58:	8b 2b       	or	r24, r27
     d5a:	09 f4       	brne	.+2      	; 0xd5e <__stack+0x45f>
     d5c:	4f c0       	rjmp	.+158    	; 0xdfc <__stack+0x4fd>
					{
						bar *= 20;
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	ab 81       	ldd	r26, Y+3	; 0x03
     d64:	bc 81       	ldd	r27, Y+4	; 0x04
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	aa 1f       	adc	r26, r26
     d6c:	bb 1f       	adc	r27, r27
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	aa 1f       	adc	r26, r26
     d74:	bb 1f       	adc	r27, r27
     d76:	9c 01       	movw	r18, r24
     d78:	ad 01       	movw	r20, r26
     d7a:	22 0f       	add	r18, r18
     d7c:	33 1f       	adc	r19, r19
     d7e:	44 1f       	adc	r20, r20
     d80:	55 1f       	adc	r21, r21
     d82:	22 0f       	add	r18, r18
     d84:	33 1f       	adc	r19, r19
     d86:	44 1f       	adc	r20, r20
     d88:	55 1f       	adc	r21, r21
     d8a:	82 0f       	add	r24, r18
     d8c:	93 1f       	adc	r25, r19
     d8e:	a4 1f       	adc	r26, r20
     d90:	b5 1f       	adc	r27, r21
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	ab 83       	std	Y+3, r26	; 0x03
     d98:	bc 83       	std	Y+4, r27	; 0x04
						bar = bar / backup_profile.sec;
     d9a:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     d9e:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     da2:	9c 01       	movw	r18, r24
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	ab 81       	ldd	r26, Y+3	; 0x03
     dae:	bc 81       	ldd	r27, Y+4	; 0x04
     db0:	bc 01       	movw	r22, r24
     db2:	cd 01       	movw	r24, r26
     db4:	0e 94 31 1a 	call	0x3462	; 0x3462 <__udivmodsi4>
     db8:	da 01       	movw	r26, r20
     dba:	c9 01       	movw	r24, r18
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	ab 83       	std	Y+3, r26	; 0x03
     dc2:	bc 83       	std	Y+4, r27	; 0x04
					}
					for (; bar > 0; bar--)
     dc4:	1b c0       	rjmp	.+54     	; 0xdfc <__stack+0x4fd>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
     dc6:	1f 92       	push	r1
     dc8:	89 e0       	ldi	r24, 0x09	; 9
     dca:	8f 93       	push	r24
     dcc:	82 e6       	ldi	r24, 0x62	; 98
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	89 2f       	mov	r24, r25
     dd2:	8f 93       	push	r24
     dd4:	82 e6       	ldi	r24, 0x62	; 98
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	8f 93       	push	r24
     dda:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
					if (bar)	// div zero
					{
						bar *= 20;
						bar = bar / backup_profile.sec;
					}
					for (; bar > 0; bar--)
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	ab 81       	ldd	r26, Y+3	; 0x03
     dec:	bc 81       	ldd	r27, Y+4	; 0x04
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	a1 09       	sbc	r26, r1
     df2:	b1 09       	sbc	r27, r1
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	ab 83       	std	Y+3, r26	; 0x03
     dfa:	bc 83       	std	Y+4, r27	; 0x04
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	ab 81       	ldd	r26, Y+3	; 0x03
     e02:	bc 81       	ldd	r27, Y+4	; 0x04
     e04:	89 2b       	or	r24, r25
     e06:	8a 2b       	or	r24, r26
     e08:	8b 2b       	or	r24, r27
     e0a:	e9 f6       	brne	.-70     	; 0xdc6 <__stack+0x4c7>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
					}

					lcd_printf("\n%cStop", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e0c:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     e10:	88 23       	and	r24, r24
     e12:	19 f4       	brne	.+6      	; 0xe1a <__stack+0x51b>
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <__stack+0x51f>
     e1a:	80 e2       	ldi	r24, 0x20	; 32
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	29 2f       	mov	r18, r25
     e20:	2f 93       	push	r18
     e22:	8f 93       	push	r24
     e24:	85 e6       	ldi	r24, 0x65	; 101
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	89 2f       	mov	r24, r25
     e2a:	8f 93       	push	r24
     e2c:	85 e6       	ldi	r24, 0x65	; 101
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	8f 93       	push	r24
     e32:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
					break;
     e3e:	00 00       	nop
			}
			break;
     e40:	15 c3       	rjmp	.+1578   	; 0x146c <__stack+0xb6d>

		case ITEM_MENU:
			lcd_printf("\f%cRychlost omylani", (item_menu_secect == ITEM_MENU_SELECT_RPM) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e42:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     e46:	88 23       	and	r24, r24
     e48:	19 f4       	brne	.+6      	; 0xe50 <__stack+0x551>
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <__stack+0x555>
     e50:	80 e2       	ldi	r24, 0x20	; 32
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	29 2f       	mov	r18, r25
     e56:	2f 93       	push	r18
     e58:	8f 93       	push	r24
     e5a:	8d e6       	ldi	r24, 0x6D	; 109
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	89 2f       	mov	r24, r25
     e60:	8f 93       	push	r24
     e62:	8d e6       	ldi	r24, 0x6D	; 109
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	8f 93       	push	r24
     e68:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
			lcd_printf("\n%cDelka omylani", (item_menu_secect == ITEM_MENU_SELECT_TIME) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e74:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	19 f4       	brne	.+6      	; 0xe82 <__stack+0x583>
     e7c:	88 e0       	ldi	r24, 0x08	; 8
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <__stack+0x587>
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	29 2f       	mov	r18, r25
     e88:	2f 93       	push	r18
     e8a:	8f 93       	push	r24
     e8c:	81 e8       	ldi	r24, 0x81	; 129
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	89 2f       	mov	r24, r25
     e92:	8f 93       	push	r24
     e94:	81 e8       	ldi	r24, 0x81	; 129
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	8f 93       	push	r24
     e9a:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
			lcd_printf("\n%cNacist profil", (item_menu_secect == ITEM_MENU_SELECT_LOAD) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     ea6:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	19 f4       	brne	.+6      	; 0xeb4 <__stack+0x5b5>
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <__stack+0x5b9>
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	29 2f       	mov	r18, r25
     eba:	2f 93       	push	r18
     ebc:	8f 93       	push	r24
     ebe:	82 e9       	ldi	r24, 0x92	; 146
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	89 2f       	mov	r24, r25
     ec4:	8f 93       	push	r24
     ec6:	82 e9       	ldi	r24, 0x92	; 146
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	8f 93       	push	r24
     ecc:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
			lcd_printf("\n%cUlozit profil", (item_menu_secect == ITEM_MENU_SELECT_SAVE) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     ed8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	19 f4       	brne	.+6      	; 0xee6 <__stack+0x5e7>
     ee0:	88 e0       	ldi	r24, 0x08	; 8
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <__stack+0x5eb>
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	29 2f       	mov	r18, r25
     eec:	2f 93       	push	r18
     eee:	8f 93       	push	r24
     ef0:	83 ea       	ldi	r24, 0xA3	; 163
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	89 2f       	mov	r24, r25
     ef6:	8f 93       	push	r24
     ef8:	83 ea       	ldi	r24, 0xA3	; 163
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	8f 93       	push	r24
     efe:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
			break;
     f0a:	b0 c2       	rjmp	.+1376   	; 0x146c <__stack+0xb6d>

		case RPM_MENU:
			lcd_printf("\fNastaveni otacek");
     f0c:	84 eb       	ldi	r24, 0xB4	; 180
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	89 2f       	mov	r24, r25
     f12:	8f 93       	push	r24
     f14:	84 eb       	ldi	r24, 0xB4	; 180
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	8f 93       	push	r24
     f1a:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
			lcd_printf("\nza minutu");
     f22:	86 ec       	ldi	r24, 0xC6	; 198
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	89 2f       	mov	r24, r25
     f28:	8f 93       	push	r24
     f2a:	86 ec       	ldi	r24, 0xC6	; 198
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	8f 93       	push	r24
     f30:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
			lcd_printf("\nStara hodnota:%6d", user_profile.rpm);
     f38:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     f3c:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     f40:	29 2f       	mov	r18, r25
     f42:	2f 93       	push	r18
     f44:	8f 93       	push	r24
     f46:	81 ed       	ldi	r24, 0xD1	; 209
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	89 2f       	mov	r24, r25
     f4c:	8f 93       	push	r24
     f4e:	81 ed       	ldi	r24, 0xD1	; 209
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	8f 93       	push	r24
     f54:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
			lcd_printf("\nNova  hodnota:%6d", backup_profile.rpm);
     f60:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     f64:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     f68:	29 2f       	mov	r18, r25
     f6a:	2f 93       	push	r18
     f6c:	8f 93       	push	r24
     f6e:	84 ee       	ldi	r24, 0xE4	; 228
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	89 2f       	mov	r24, r25
     f74:	8f 93       	push	r24
     f76:	84 ee       	ldi	r24, 0xE4	; 228
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	8f 93       	push	r24
     f7c:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
			break;
     f88:	71 c2       	rjmp	.+1250   	; 0x146c <__stack+0xb6d>

		case TIME_MENU:
			lcd_printf("\fNastaveni delky");
     f8a:	87 ef       	ldi	r24, 0xF7	; 247
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	89 2f       	mov	r24, r25
     f90:	8f 93       	push	r24
     f92:	87 ef       	ldi	r24, 0xF7	; 247
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	8f 93       	push	r24
     f98:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
			lcd_printf("\nomylani [HH:MM]");
     fa0:	88 e0       	ldi	r24, 0x08	; 8
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	89 2f       	mov	r24, r25
     fa6:	8f 93       	push	r24
     fa8:	88 e0       	ldi	r24, 0x08	; 8
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	8f 93       	push	r24
     fae:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
			lcd_printf("\nStary cas:     %2d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60);
     fb6:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     fba:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     fbe:	20 e1       	ldi	r18, 0x10	; 16
     fc0:	3e e0       	ldi	r19, 0x0E	; 14
     fc2:	b9 01       	movw	r22, r18
     fc4:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
     fc8:	9c 01       	movw	r18, r24
     fca:	a9 e8       	ldi	r26, 0x89	; 137
     fcc:	b8 e8       	ldi	r27, 0x88	; 136
     fce:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
     fd2:	9c 01       	movw	r18, r24
     fd4:	36 95       	lsr	r19
     fd6:	27 95       	ror	r18
     fd8:	32 95       	swap	r19
     fda:	22 95       	swap	r18
     fdc:	2f 70       	andi	r18, 0x0F	; 15
     fde:	23 27       	eor	r18, r19
     fe0:	3f 70       	andi	r19, 0x0F	; 15
     fe2:	23 27       	eor	r18, r19
     fe4:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     fe8:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     fec:	40 e1       	ldi	r20, 0x10	; 16
     fee:	5e e0       	ldi	r21, 0x0E	; 14
     ff0:	ba 01       	movw	r22, r20
     ff2:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
     ff6:	cb 01       	movw	r24, r22
     ff8:	43 2f       	mov	r20, r19
     ffa:	4f 93       	push	r20
     ffc:	2f 93       	push	r18
     ffe:	29 2f       	mov	r18, r25
    1000:	2f 93       	push	r18
    1002:	8f 93       	push	r24
    1004:	89 e1       	ldi	r24, 0x19	; 25
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	89 2f       	mov	r24, r25
    100a:	8f 93       	push	r24
    100c:	89 e1       	ldi	r24, 0x19	; 25
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	8f 93       	push	r24
    1012:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
			lcd_printf("\nNovy  cas:     %2d:%02d", backup_profile.sec/3600, (backup_profile.sec%3600)/60);
    1022:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
    1026:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
    102a:	20 e1       	ldi	r18, 0x10	; 16
    102c:	3e e0       	ldi	r19, 0x0E	; 14
    102e:	b9 01       	movw	r22, r18
    1030:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    1034:	9c 01       	movw	r18, r24
    1036:	a9 e8       	ldi	r26, 0x89	; 137
    1038:	b8 e8       	ldi	r27, 0x88	; 136
    103a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    103e:	9c 01       	movw	r18, r24
    1040:	36 95       	lsr	r19
    1042:	27 95       	ror	r18
    1044:	32 95       	swap	r19
    1046:	22 95       	swap	r18
    1048:	2f 70       	andi	r18, 0x0F	; 15
    104a:	23 27       	eor	r18, r19
    104c:	3f 70       	andi	r19, 0x0F	; 15
    104e:	23 27       	eor	r18, r19
    1050:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
    1054:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
    1058:	40 e1       	ldi	r20, 0x10	; 16
    105a:	5e e0       	ldi	r21, 0x0E	; 14
    105c:	ba 01       	movw	r22, r20
    105e:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    1062:	cb 01       	movw	r24, r22
    1064:	43 2f       	mov	r20, r19
    1066:	4f 93       	push	r20
    1068:	2f 93       	push	r18
    106a:	29 2f       	mov	r18, r25
    106c:	2f 93       	push	r18
    106e:	8f 93       	push	r24
    1070:	82 e3       	ldi	r24, 0x32	; 50
    1072:	92 e0       	ldi	r25, 0x02	; 2
    1074:	89 2f       	mov	r24, r25
    1076:	8f 93       	push	r24
    1078:	82 e3       	ldi	r24, 0x32	; 50
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	8f 93       	push	r24
    107e:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
			break;
    108e:	ee c1       	rjmp	.+988    	; 0x146c <__stack+0xb6d>

		case LOAD_MENU:
			lcd_printf("\fNacteni profilu");
    1090:	8b e4       	ldi	r24, 0x4B	; 75
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	89 2f       	mov	r24, r25
    1096:	8f 93       	push	r24
    1098:	8b e4       	ldi	r24, 0x4B	; 75
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	8f 93       	push	r24
    109e:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    10a6:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    10aa:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    10ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    10b2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    10b6:	20 e1       	ldi	r18, 0x10	; 16
    10b8:	3e e0       	ldi	r19, 0x0E	; 14
    10ba:	b9 01       	movw	r22, r18
    10bc:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    10c0:	9c 01       	movw	r18, r24
    10c2:	a9 e8       	ldi	r26, 0x89	; 137
    10c4:	b8 e8       	ldi	r27, 0x88	; 136
    10c6:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    10ca:	9c 01       	movw	r18, r24
    10cc:	36 95       	lsr	r19
    10ce:	27 95       	ror	r18
    10d0:	32 95       	swap	r19
    10d2:	22 95       	swap	r18
    10d4:	2f 70       	andi	r18, 0x0F	; 15
    10d6:	23 27       	eor	r18, r19
    10d8:	3f 70       	andi	r19, 0x0F	; 15
    10da:	23 27       	eor	r18, r19
    10dc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    10e0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    10e4:	40 e1       	ldi	r20, 0x10	; 16
    10e6:	5e e0       	ldi	r21, 0x0E	; 14
    10e8:	ba 01       	movw	r22, r20
    10ea:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    10ee:	cb 01       	movw	r24, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    10f6:	88 23       	and	r24, r24
    10f8:	19 f4       	brne	.+6      	; 0x1100 <__stack+0x801>
    10fa:	88 e0       	ldi	r24, 0x08	; 8
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <__stack+0x805>
    1100:	80 e2       	ldi	r24, 0x20	; 32
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	6f 2f       	mov	r22, r31
    1106:	6f 93       	push	r22
    1108:	6e 2f       	mov	r22, r30
    110a:	6f 93       	push	r22
    110c:	63 2f       	mov	r22, r19
    110e:	6f 93       	push	r22
    1110:	2f 93       	push	r18
    1112:	25 2f       	mov	r18, r21
    1114:	2f 93       	push	r18
    1116:	24 2f       	mov	r18, r20
    1118:	2f 93       	push	r18
    111a:	29 2f       	mov	r18, r25
    111c:	2f 93       	push	r18
    111e:	8f 93       	push	r24
    1120:	8c e5       	ldi	r24, 0x5C	; 92
    1122:	92 e0       	ldi	r25, 0x02	; 2
    1124:	89 2f       	mov	r24, r25
    1126:	8f 93       	push	r24
    1128:	8c e5       	ldi	r24, 0x5C	; 92
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	8f 93       	push	r24
    112e:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    1132:	4d b7       	in	r20, 0x3d	; 61
    1134:	5e b7       	in	r21, 0x3e	; 62
    1136:	46 5f       	subi	r20, 0xF6	; 246
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    1144:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    1148:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    114c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1150:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1154:	20 e1       	ldi	r18, 0x10	; 16
    1156:	3e e0       	ldi	r19, 0x0E	; 14
    1158:	b9 01       	movw	r22, r18
    115a:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    115e:	9c 01       	movw	r18, r24
    1160:	a9 e8       	ldi	r26, 0x89	; 137
    1162:	b8 e8       	ldi	r27, 0x88	; 136
    1164:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    1168:	9c 01       	movw	r18, r24
    116a:	36 95       	lsr	r19
    116c:	27 95       	ror	r18
    116e:	32 95       	swap	r19
    1170:	22 95       	swap	r18
    1172:	2f 70       	andi	r18, 0x0F	; 15
    1174:	23 27       	eor	r18, r19
    1176:	3f 70       	andi	r19, 0x0F	; 15
    1178:	23 27       	eor	r18, r19
    117a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    117e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1182:	40 e1       	ldi	r20, 0x10	; 16
    1184:	5e e0       	ldi	r21, 0x0E	; 14
    1186:	ba 01       	movw	r22, r20
    1188:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    118c:	cb 01       	movw	r24, r22
    118e:	ac 01       	movw	r20, r24
    1190:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	19 f4       	brne	.+6      	; 0x119e <__stack+0x89f>
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <__stack+0x8a3>
    119e:	80 e2       	ldi	r24, 0x20	; 32
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	6f 2f       	mov	r22, r31
    11a4:	6f 93       	push	r22
    11a6:	6e 2f       	mov	r22, r30
    11a8:	6f 93       	push	r22
    11aa:	63 2f       	mov	r22, r19
    11ac:	6f 93       	push	r22
    11ae:	2f 93       	push	r18
    11b0:	25 2f       	mov	r18, r21
    11b2:	2f 93       	push	r18
    11b4:	24 2f       	mov	r18, r20
    11b6:	2f 93       	push	r18
    11b8:	29 2f       	mov	r18, r25
    11ba:	2f 93       	push	r18
    11bc:	8f 93       	push	r24
    11be:	84 e7       	ldi	r24, 0x74	; 116
    11c0:	92 e0       	ldi	r25, 0x02	; 2
    11c2:	89 2f       	mov	r24, r25
    11c4:	8f 93       	push	r24
    11c6:	84 e7       	ldi	r24, 0x74	; 116
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	8f 93       	push	r24
    11cc:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    11d0:	8d b7       	in	r24, 0x3d	; 61
    11d2:	9e b7       	in	r25, 0x3e	; 62
    11d4:	0a 96       	adiw	r24, 0x0a	; 10
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    11e0:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    11e4:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    11e8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    11ec:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    11f0:	20 e1       	ldi	r18, 0x10	; 16
    11f2:	3e e0       	ldi	r19, 0x0E	; 14
    11f4:	b9 01       	movw	r22, r18
    11f6:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    11fa:	9c 01       	movw	r18, r24
    11fc:	a9 e8       	ldi	r26, 0x89	; 137
    11fe:	b8 e8       	ldi	r27, 0x88	; 136
    1200:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    1204:	9c 01       	movw	r18, r24
    1206:	36 95       	lsr	r19
    1208:	27 95       	ror	r18
    120a:	32 95       	swap	r19
    120c:	22 95       	swap	r18
    120e:	2f 70       	andi	r18, 0x0F	; 15
    1210:	23 27       	eor	r18, r19
    1212:	3f 70       	andi	r19, 0x0F	; 15
    1214:	23 27       	eor	r18, r19
    1216:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    121a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    121e:	40 e1       	ldi	r20, 0x10	; 16
    1220:	5e e0       	ldi	r21, 0x0E	; 14
    1222:	ba 01       	movw	r22, r20
    1224:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    1228:	cb 01       	movw	r24, r22
    122a:	ac 01       	movw	r20, r24
    122c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	19 f4       	brne	.+6      	; 0x123a <__stack+0x93b>
    1234:	88 e0       	ldi	r24, 0x08	; 8
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 c0       	rjmp	.+4      	; 0x123e <__stack+0x93f>
    123a:	80 e2       	ldi	r24, 0x20	; 32
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	6f 2f       	mov	r22, r31
    1240:	6f 93       	push	r22
    1242:	6e 2f       	mov	r22, r30
    1244:	6f 93       	push	r22
    1246:	63 2f       	mov	r22, r19
    1248:	6f 93       	push	r22
    124a:	2f 93       	push	r18
    124c:	25 2f       	mov	r18, r21
    124e:	2f 93       	push	r18
    1250:	24 2f       	mov	r18, r20
    1252:	2f 93       	push	r18
    1254:	29 2f       	mov	r18, r25
    1256:	2f 93       	push	r18
    1258:	8f 93       	push	r24
    125a:	8c e8       	ldi	r24, 0x8C	; 140
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	89 2f       	mov	r24, r25
    1260:	8f 93       	push	r24
    1262:	8c e8       	ldi	r24, 0x8C	; 140
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	8f 93       	push	r24
    1268:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    126c:	ed b7       	in	r30, 0x3d	; 61
    126e:	fe b7       	in	r31, 0x3e	; 62
    1270:	3a 96       	adiw	r30, 0x0a	; 10
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	f8 94       	cli
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	cd bf       	out	0x3d, r28	; 61
			break;
    127c:	f7 c0       	rjmp	.+494    	; 0x146c <__stack+0xb6d>

		case SAVE_MENU:
			lcd_printf("\fUlozeni profilu");
    127e:	84 ea       	ldi	r24, 0xA4	; 164
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	89 2f       	mov	r24, r25
    1284:	8f 93       	push	r24
    1286:	84 ea       	ldi	r24, 0xA4	; 164
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	8f 93       	push	r24
    128c:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    1294:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    1298:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    129c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    12a0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    12a4:	20 e1       	ldi	r18, 0x10	; 16
    12a6:	3e e0       	ldi	r19, 0x0E	; 14
    12a8:	b9 01       	movw	r22, r18
    12aa:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    12ae:	9c 01       	movw	r18, r24
    12b0:	a9 e8       	ldi	r26, 0x89	; 137
    12b2:	b8 e8       	ldi	r27, 0x88	; 136
    12b4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    12b8:	9c 01       	movw	r18, r24
    12ba:	36 95       	lsr	r19
    12bc:	27 95       	ror	r18
    12be:	32 95       	swap	r19
    12c0:	22 95       	swap	r18
    12c2:	2f 70       	andi	r18, 0x0F	; 15
    12c4:	23 27       	eor	r18, r19
    12c6:	3f 70       	andi	r19, 0x0F	; 15
    12c8:	23 27       	eor	r18, r19
    12ca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    12ce:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    12d2:	40 e1       	ldi	r20, 0x10	; 16
    12d4:	5e e0       	ldi	r21, 0x0E	; 14
    12d6:	ba 01       	movw	r22, r20
    12d8:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    12dc:	cb 01       	movw	r24, r22
    12de:	ac 01       	movw	r20, r24
    12e0:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    12e4:	88 23       	and	r24, r24
    12e6:	19 f4       	brne	.+6      	; 0x12ee <__stack+0x9ef>
    12e8:	88 e0       	ldi	r24, 0x08	; 8
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <__stack+0x9f3>
    12ee:	80 e2       	ldi	r24, 0x20	; 32
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	6f 2f       	mov	r22, r31
    12f4:	6f 93       	push	r22
    12f6:	6e 2f       	mov	r22, r30
    12f8:	6f 93       	push	r22
    12fa:	63 2f       	mov	r22, r19
    12fc:	6f 93       	push	r22
    12fe:	2f 93       	push	r18
    1300:	25 2f       	mov	r18, r21
    1302:	2f 93       	push	r18
    1304:	24 2f       	mov	r18, r20
    1306:	2f 93       	push	r18
    1308:	29 2f       	mov	r18, r25
    130a:	2f 93       	push	r18
    130c:	8f 93       	push	r24
    130e:	8c e5       	ldi	r24, 0x5C	; 92
    1310:	92 e0       	ldi	r25, 0x02	; 2
    1312:	89 2f       	mov	r24, r25
    1314:	8f 93       	push	r24
    1316:	8c e5       	ldi	r24, 0x5C	; 92
    1318:	92 e0       	ldi	r25, 0x02	; 2
    131a:	8f 93       	push	r24
    131c:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    1320:	4d b7       	in	r20, 0x3d	; 61
    1322:	5e b7       	in	r21, 0x3e	; 62
    1324:	46 5f       	subi	r20, 0xF6	; 246
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    1332:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    1336:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    133a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    133e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1342:	20 e1       	ldi	r18, 0x10	; 16
    1344:	3e e0       	ldi	r19, 0x0E	; 14
    1346:	b9 01       	movw	r22, r18
    1348:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    134c:	9c 01       	movw	r18, r24
    134e:	a9 e8       	ldi	r26, 0x89	; 137
    1350:	b8 e8       	ldi	r27, 0x88	; 136
    1352:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    1356:	9c 01       	movw	r18, r24
    1358:	36 95       	lsr	r19
    135a:	27 95       	ror	r18
    135c:	32 95       	swap	r19
    135e:	22 95       	swap	r18
    1360:	2f 70       	andi	r18, 0x0F	; 15
    1362:	23 27       	eor	r18, r19
    1364:	3f 70       	andi	r19, 0x0F	; 15
    1366:	23 27       	eor	r18, r19
    1368:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    136c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1370:	40 e1       	ldi	r20, 0x10	; 16
    1372:	5e e0       	ldi	r21, 0x0E	; 14
    1374:	ba 01       	movw	r22, r20
    1376:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    137a:	cb 01       	movw	r24, r22
    137c:	ac 01       	movw	r20, r24
    137e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	19 f4       	brne	.+6      	; 0x138c <__stack+0xa8d>
    1386:	88 e0       	ldi	r24, 0x08	; 8
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <__stack+0xa91>
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	6f 2f       	mov	r22, r31
    1392:	6f 93       	push	r22
    1394:	6e 2f       	mov	r22, r30
    1396:	6f 93       	push	r22
    1398:	63 2f       	mov	r22, r19
    139a:	6f 93       	push	r22
    139c:	2f 93       	push	r18
    139e:	25 2f       	mov	r18, r21
    13a0:	2f 93       	push	r18
    13a2:	24 2f       	mov	r18, r20
    13a4:	2f 93       	push	r18
    13a6:	29 2f       	mov	r18, r25
    13a8:	2f 93       	push	r18
    13aa:	8f 93       	push	r24
    13ac:	84 e7       	ldi	r24, 0x74	; 116
    13ae:	92 e0       	ldi	r25, 0x02	; 2
    13b0:	89 2f       	mov	r24, r25
    13b2:	8f 93       	push	r24
    13b4:	84 e7       	ldi	r24, 0x74	; 116
    13b6:	92 e0       	ldi	r25, 0x02	; 2
    13b8:	8f 93       	push	r24
    13ba:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    13be:	8d b7       	in	r24, 0x3d	; 61
    13c0:	9e b7       	in	r25, 0x3e	; 62
    13c2:	0a 96       	adiw	r24, 0x0a	; 10
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    13ce:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    13d2:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    13d6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    13da:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    13de:	20 e1       	ldi	r18, 0x10	; 16
    13e0:	3e e0       	ldi	r19, 0x0E	; 14
    13e2:	b9 01       	movw	r22, r18
    13e4:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    13e8:	9c 01       	movw	r18, r24
    13ea:	a9 e8       	ldi	r26, 0x89	; 137
    13ec:	b8 e8       	ldi	r27, 0x88	; 136
    13ee:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    13f2:	9c 01       	movw	r18, r24
    13f4:	36 95       	lsr	r19
    13f6:	27 95       	ror	r18
    13f8:	32 95       	swap	r19
    13fa:	22 95       	swap	r18
    13fc:	2f 70       	andi	r18, 0x0F	; 15
    13fe:	23 27       	eor	r18, r19
    1400:	3f 70       	andi	r19, 0x0F	; 15
    1402:	23 27       	eor	r18, r19
    1404:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1408:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    140c:	40 e1       	ldi	r20, 0x10	; 16
    140e:	5e e0       	ldi	r21, 0x0E	; 14
    1410:	ba 01       	movw	r22, r20
    1412:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    1416:	cb 01       	movw	r24, r22
    1418:	ac 01       	movw	r20, r24
    141a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    141e:	82 30       	cpi	r24, 0x02	; 2
    1420:	19 f4       	brne	.+6      	; 0x1428 <__stack+0xb29>
    1422:	88 e0       	ldi	r24, 0x08	; 8
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 c0       	rjmp	.+4      	; 0x142c <__stack+0xb2d>
    1428:	80 e2       	ldi	r24, 0x20	; 32
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	6f 2f       	mov	r22, r31
    142e:	6f 93       	push	r22
    1430:	6e 2f       	mov	r22, r30
    1432:	6f 93       	push	r22
    1434:	63 2f       	mov	r22, r19
    1436:	6f 93       	push	r22
    1438:	2f 93       	push	r18
    143a:	25 2f       	mov	r18, r21
    143c:	2f 93       	push	r18
    143e:	24 2f       	mov	r18, r20
    1440:	2f 93       	push	r18
    1442:	29 2f       	mov	r18, r25
    1444:	2f 93       	push	r18
    1446:	8f 93       	push	r24
    1448:	8c e8       	ldi	r24, 0x8C	; 140
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	89 2f       	mov	r24, r25
    144e:	8f 93       	push	r24
    1450:	8c e8       	ldi	r24, 0x8C	; 140
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	8f 93       	push	r24
    1456:	0e 94 17 11 	call	0x222e	; 0x222e <lcd_printf>
    145a:	ed b7       	in	r30, 0x3d	; 61
    145c:	fe b7       	in	r31, 0x3e	; 62
    145e:	3a 96       	adiw	r30, 0x0a	; 10
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
			break;
    146a:	00 00       	nop

		default:
		;
	}
}
    146c:	00 00       	nop
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <lcd_init>:
#include "wyk_lcd.h"

// inicializuje lcd
void lcd_init(void)
{
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	2e 97       	sbiw	r28, 0x0e	; 14
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
	LCD_RS_DDR |= LCD_RS;
    1492:	8a e2       	ldi	r24, 0x2A	; 42
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	2a e2       	ldi	r18, 0x2A	; 42
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	f9 01       	movw	r30, r18
    149c:	20 81       	ld	r18, Z
    149e:	21 60       	ori	r18, 0x01	; 1
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 83       	st	Z, r18
	LCD_RS0;
    14a4:	8b e2       	ldi	r24, 0x2B	; 43
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	2b e2       	ldi	r18, 0x2B	; 43
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	f9 01       	movw	r30, r18
    14ae:	20 81       	ld	r18, Z
    14b0:	2e 7f       	andi	r18, 0xFE	; 254
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18

	LCD_EN_DDR |= LCD_EN;
    14b6:	87 e2       	ldi	r24, 0x27	; 39
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	27 e2       	ldi	r18, 0x27	; 39
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	f9 01       	movw	r30, r18
    14c0:	20 81       	ld	r18, Z
    14c2:	20 61       	ori	r18, 0x10	; 16
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 83       	st	Z, r18
	LCD_EN0;
    14c8:	88 e2       	ldi	r24, 0x28	; 40
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	28 e2       	ldi	r18, 0x28	; 40
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	f9 01       	movw	r30, r18
    14d2:	20 81       	ld	r18, Z
    14d4:	2f 7e       	andi	r18, 0xEF	; 239
    14d6:	fc 01       	movw	r30, r24
    14d8:	20 83       	st	Z, r18

	LCD_D7_DDR |= LCD_D7;
    14da:	87 e2       	ldi	r24, 0x27	; 39
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	27 e2       	ldi	r18, 0x27	; 39
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	f9 01       	movw	r30, r18
    14e4:	20 81       	ld	r18, Z
    14e6:	21 60       	ori	r18, 0x01	; 1
    14e8:	fc 01       	movw	r30, r24
    14ea:	20 83       	st	Z, r18
	LCD_D6_DDR |= LCD_D6;
    14ec:	87 e2       	ldi	r24, 0x27	; 39
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	27 e2       	ldi	r18, 0x27	; 39
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	f9 01       	movw	r30, r18
    14f6:	20 81       	ld	r18, Z
    14f8:	22 60       	ori	r18, 0x02	; 2
    14fa:	fc 01       	movw	r30, r24
    14fc:	20 83       	st	Z, r18
	LCD_D5_DDR |= LCD_D5;
    14fe:	87 e2       	ldi	r24, 0x27	; 39
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	27 e2       	ldi	r18, 0x27	; 39
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	f9 01       	movw	r30, r18
    1508:	20 81       	ld	r18, Z
    150a:	24 60       	ori	r18, 0x04	; 4
    150c:	fc 01       	movw	r30, r24
    150e:	20 83       	st	Z, r18
	LCD_D4_DDR |= LCD_D4;
    1510:	87 e2       	ldi	r24, 0x27	; 39
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	27 e2       	ldi	r18, 0x27	; 39
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	f9 01       	movw	r30, r18
    151a:	20 81       	ld	r18, Z
    151c:	28 60       	ori	r18, 0x08	; 8
    151e:	fc 01       	movw	r30, r24
    1520:	20 83       	st	Z, r18

	LCD_D7_0;
    1522:	88 e2       	ldi	r24, 0x28	; 40
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	28 e2       	ldi	r18, 0x28	; 40
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	f9 01       	movw	r30, r18
    152c:	20 81       	ld	r18, Z
    152e:	2e 7f       	andi	r18, 0xFE	; 254
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
	LCD_D6_0;
    1534:	88 e2       	ldi	r24, 0x28	; 40
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	28 e2       	ldi	r18, 0x28	; 40
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	f9 01       	movw	r30, r18
    153e:	20 81       	ld	r18, Z
    1540:	2d 7f       	andi	r18, 0xFD	; 253
    1542:	fc 01       	movw	r30, r24
    1544:	20 83       	st	Z, r18
	LCD_D5_0;
    1546:	88 e2       	ldi	r24, 0x28	; 40
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	28 e2       	ldi	r18, 0x28	; 40
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	f9 01       	movw	r30, r18
    1550:	20 81       	ld	r18, Z
    1552:	2b 7f       	andi	r18, 0xFB	; 251
    1554:	fc 01       	movw	r30, r24
    1556:	20 83       	st	Z, r18
	LCD_D4_0;
    1558:	88 e2       	ldi	r24, 0x28	; 40
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	28 e2       	ldi	r18, 0x28	; 40
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	f9 01       	movw	r30, r18
    1562:	20 81       	ld	r18, Z
    1564:	27 7f       	andi	r18, 0xF7	; 247
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18


	lcd_set_nibble(LCD_CMD_INIT>>4);
    156a:	82 e0       	ldi	r24, 0x02	; 2
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_set_nibble>
	LCD_EN1;
    1572:	88 e2       	ldi	r24, 0x28	; 40
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	28 e2       	ldi	r18, 0x28	; 40
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	f9 01       	movw	r30, r18
    157c:	20 81       	ld	r18, Z
    157e:	20 61       	ori	r18, 0x10	; 16
    1580:	fc 01       	movw	r30, r24
    1582:	20 83       	st	Z, r18
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e4       	ldi	r27, 0x40	; 64
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	ab 83       	std	Y+3, r26	; 0x03
    1592:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a ef       	ldi	r20, 0xFA	; 250
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	69 81       	ldd	r22, Y+1	; 0x01
    159e:	7a 81       	ldd	r23, Y+2	; 0x02
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	af 83       	std	Y+7, r26	; 0x07
    15b2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	6d 81       	ldd	r22, Y+5	; 0x05
    15be:	7e 81       	ldd	r23, Y+6	; 0x06
    15c0:	8f 81       	ldd	r24, Y+7	; 0x07
    15c2:	98 85       	ldd	r25, Y+8	; 0x08
    15c4:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    15c8:	88 23       	and	r24, r24
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <lcd_init+0x158>
		__ticks = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9a 87       	std	Y+10, r25	; 0x0a
    15d2:	89 87       	std	Y+9, r24	; 0x09
    15d4:	3f c0       	rjmp	.+126    	; 0x1654 <lcd_init+0x1d6>
	else if (__tmp > 65535)
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	6d 81       	ldd	r22, Y+5	; 0x05
    15e0:	7e 81       	ldd	r23, Y+6	; 0x06
    15e2:	8f 81       	ldd	r24, Y+7	; 0x07
    15e4:	98 85       	ldd	r25, Y+8	; 0x08
    15e6:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	4c f5       	brge	.+82     	; 0x1640 <lcd_init+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	69 81       	ldd	r22, Y+1	; 0x01
    15f8:	7a 81       	ldd	r23, Y+2	; 0x02
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	bc 01       	movw	r22, r24
    1608:	cd 01       	movw	r24, r26
    160a:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	9a 87       	std	Y+10, r25	; 0x0a
    1614:	89 87       	std	Y+9, r24	; 0x09
    1616:	0f c0       	rjmp	.+30     	; 0x1636 <lcd_init+0x1b8>
    1618:	88 ec       	ldi	r24, 0xC8	; 200
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9c 87       	std	Y+12, r25	; 0x0c
    161e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1620:	8b 85       	ldd	r24, Y+11	; 0x0b
    1622:	9c 85       	ldd	r25, Y+12	; 0x0c
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <lcd_init+0x1a6>
    1628:	9c 87       	std	Y+12, r25	; 0x0c
    162a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	9a 87       	std	Y+10, r25	; 0x0a
    1634:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	89 2b       	or	r24, r25
    163c:	69 f7       	brne	.-38     	; 0x1618 <lcd_init+0x19a>
    163e:	14 c0       	rjmp	.+40     	; 0x1668 <lcd_init+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1640:	6d 81       	ldd	r22, Y+5	; 0x05
    1642:	7e 81       	ldd	r23, Y+6	; 0x06
    1644:	8f 81       	ldd	r24, Y+7	; 0x07
    1646:	98 85       	ldd	r25, Y+8	; 0x08
    1648:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9a 87       	std	Y+10, r25	; 0x0a
    1652:	89 87       	std	Y+9, r24	; 0x09
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	9e 87       	std	Y+14, r25	; 0x0e
    165a:	8d 87       	std	Y+13, r24	; 0x0d
    165c:	8d 85       	ldd	r24, Y+13	; 0x0d
    165e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <lcd_init+0x1e2>
    1664:	9e 87       	std	Y+14, r25	; 0x0e
    1666:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
	LCD_EN0;
    1668:	88 e2       	ldi	r24, 0x28	; 40
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	28 e2       	ldi	r18, 0x28	; 40
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	f9 01       	movw	r30, r18
    1672:	20 81       	ld	r18, Z
    1674:	2f 7e       	andi	r18, 0xEF	; 239
    1676:	fc 01       	movw	r30, r24
    1678:	20 83       	st	Z, r18
	lcd_cmd(LCD_CMD_INIT);
    167a:	88 e2       	ldi	r24, 0x28	; 40
    167c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURS);
    1680:	8c e0       	ldi	r24, 0x0C	; 12
    1682:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
	lcd_cmd(LCD_CMD_CLR);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>

	// přidání vlastních znaků
	lcd_cmd(LCD_CMD_W_CGRAM);
    168c:	80 e4       	ldi	r24, 0x40	; 64
    168e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
	// trojuhelnik
	lcd_put(0b00010000);
    1692:	80 e1       	ldi	r24, 0x10	; 16
    1694:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011000);
    1698:	88 e1       	ldi	r24, 0x18	; 24
    169a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011100);
    169e:	8c e1       	ldi	r24, 0x1C	; 28
    16a0:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011110);
    16a4:	8e e1       	ldi	r24, 0x1E	; 30
    16a6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011100);
    16aa:	8c e1       	ldi	r24, 0x1C	; 28
    16ac:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011000);
    16b0:	88 e1       	ldi	r24, 0x18	; 24
    16b2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00010000);
    16b6:	80 e1       	ldi	r24, 0x10	; 16
    16b8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00000000);
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	// bar
	lcd_put(0b00000000);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00000000);
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011111);
    16ce:	8f e1       	ldi	r24, 0x1F	; 31
    16d0:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011111);
    16d4:	8f e1       	ldi	r24, 0x1F	; 31
    16d6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011111);
    16da:	8f e1       	ldi	r24, 0x1F	; 31
    16dc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00011111);
    16e0:	8f e1       	ldi	r24, 0x1F	; 31
    16e2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00000000);
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	lcd_put(0b00000000);
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	
	// přepnutí na zápis do zobrazovací paměti
	lcd_cmd(LCD_CMD_W_DDRAM);
    16f2:	80 e8       	ldi	r24, 0x80	; 128
    16f4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
}
    16f8:	00 00       	nop
    16fa:	2e 96       	adiw	r28, 0x0e	; 14
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <lcd_set_nibble>:

// posílat napřed msn a pak lsn
void lcd_set_nibble(uint8_t nibble)
{
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	1f 92       	push	r1
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	89 83       	std	Y+1, r24	; 0x01
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	88 2f       	mov	r24, r24
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	88 70       	andi	r24, 0x08	; 8
    1720:	99 27       	eor	r25, r25
    1722:	89 2b       	or	r24, r25
    1724:	51 f0       	breq	.+20     	; 0x173a <lcd_set_nibble+0x2e>
    1726:	88 e2       	ldi	r24, 0x28	; 40
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	28 e2       	ldi	r18, 0x28	; 40
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	f9 01       	movw	r30, r18
    1730:	20 81       	ld	r18, Z
    1732:	21 60       	ori	r18, 0x01	; 1
    1734:	fc 01       	movw	r30, r24
    1736:	20 83       	st	Z, r18
    1738:	09 c0       	rjmp	.+18     	; 0x174c <lcd_set_nibble+0x40>
    173a:	88 e2       	ldi	r24, 0x28	; 40
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	28 e2       	ldi	r18, 0x28	; 40
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	f9 01       	movw	r30, r18
    1744:	20 81       	ld	r18, Z
    1746:	2e 7f       	andi	r18, 0xFE	; 254
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	84 70       	andi	r24, 0x04	; 4
    1754:	99 27       	eor	r25, r25
    1756:	89 2b       	or	r24, r25
    1758:	51 f0       	breq	.+20     	; 0x176e <lcd_set_nibble+0x62>
    175a:	88 e2       	ldi	r24, 0x28	; 40
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	28 e2       	ldi	r18, 0x28	; 40
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	f9 01       	movw	r30, r18
    1764:	20 81       	ld	r18, Z
    1766:	22 60       	ori	r18, 0x02	; 2
    1768:	fc 01       	movw	r30, r24
    176a:	20 83       	st	Z, r18
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <lcd_set_nibble+0x74>
    176e:	88 e2       	ldi	r24, 0x28	; 40
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	28 e2       	ldi	r18, 0x28	; 40
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	f9 01       	movw	r30, r18
    1778:	20 81       	ld	r18, Z
    177a:	2d 7f       	andi	r18, 0xFD	; 253
    177c:	fc 01       	movw	r30, r24
    177e:	20 83       	st	Z, r18
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	82 70       	andi	r24, 0x02	; 2
    1788:	99 27       	eor	r25, r25
    178a:	89 2b       	or	r24, r25
    178c:	51 f0       	breq	.+20     	; 0x17a2 <lcd_set_nibble+0x96>
    178e:	88 e2       	ldi	r24, 0x28	; 40
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	28 e2       	ldi	r18, 0x28	; 40
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	f9 01       	movw	r30, r18
    1798:	20 81       	ld	r18, Z
    179a:	24 60       	ori	r18, 0x04	; 4
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <lcd_set_nibble+0xa8>
    17a2:	88 e2       	ldi	r24, 0x28	; 40
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	28 e2       	ldi	r18, 0x28	; 40
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	2b 7f       	andi	r18, 0xFB	; 251
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	81 70       	andi	r24, 0x01	; 1
    17bc:	99 27       	eor	r25, r25
    17be:	89 2b       	or	r24, r25
    17c0:	51 f0       	breq	.+20     	; 0x17d6 <lcd_set_nibble+0xca>
    17c2:	88 e2       	ldi	r24, 0x28	; 40
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	28 e2       	ldi	r18, 0x28	; 40
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	f9 01       	movw	r30, r18
    17cc:	20 81       	ld	r18, Z
    17ce:	28 60       	ori	r18, 0x08	; 8
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 83       	st	Z, r18
}
    17d4:	09 c0       	rjmp	.+18     	; 0x17e8 <lcd_set_nibble+0xdc>
void lcd_set_nibble(uint8_t nibble)
{
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    17d6:	88 e2       	ldi	r24, 0x28	; 40
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	28 e2       	ldi	r18, 0x28	; 40
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	27 7f       	andi	r18, 0xF7	; 247
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
}
    17e8:	00 00       	nop
    17ea:	0f 90       	pop	r0
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <lcd_cmd>:

// pošle lcd instrukci
void lcd_cmd(uint8_t cmd)
{
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	6d 97       	sbiw	r28, 0x1d	; 29
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_set_nibble(cmd>>4);
    1808:	8d 8d       	ldd	r24, Y+29	; 0x1d
    180a:	82 95       	swap	r24
    180c:	8f 70       	andi	r24, 0x0F	; 15
    180e:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_set_nibble>
	LCD_EN1;
    1812:	88 e2       	ldi	r24, 0x28	; 40
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	28 e2       	ldi	r18, 0x28	; 40
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	f9 01       	movw	r30, r18
    181c:	20 81       	ld	r18, Z
    181e:	20 61       	ori	r18, 0x10	; 16
    1820:	fc 01       	movw	r30, r24
    1822:	20 83       	st	Z, r18
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a0 e4       	ldi	r26, 0x40	; 64
    182a:	b0 e4       	ldi	r27, 0x40	; 64
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	ab 83       	std	Y+3, r26	; 0x03
    1832:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a ef       	ldi	r20, 0xFA	; 250
    183a:	54 e4       	ldi	r21, 0x44	; 68
    183c:	69 81       	ldd	r22, Y+1	; 0x01
    183e:	7a 81       	ldd	r23, Y+2	; 0x02
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	8b 8b       	std	Y+19, r24	; 0x13
    184e:	9c 8b       	std	Y+20, r25	; 0x14
    1850:	ad 8b       	std	Y+21, r26	; 0x15
    1852:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	5f e3       	ldi	r21, 0x3F	; 63
    185c:	6b 89       	ldd	r22, Y+19	; 0x13
    185e:	7c 89       	ldd	r23, Y+20	; 0x14
    1860:	8d 89       	ldd	r24, Y+21	; 0x15
    1862:	9e 89       	ldd	r25, Y+22	; 0x16
    1864:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    1868:	88 23       	and	r24, r24
    186a:	2c f4       	brge	.+10     	; 0x1876 <lcd_cmd+0x84>
		__ticks = 1;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	98 8f       	std	Y+24, r25	; 0x18
    1872:	8f 8b       	std	Y+23, r24	; 0x17
    1874:	3f c0       	rjmp	.+126    	; 0x18f4 <lcd_cmd+0x102>
	else if (__tmp > 65535)
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	3f ef       	ldi	r19, 0xFF	; 255
    187a:	4f e7       	ldi	r20, 0x7F	; 127
    187c:	57 e4       	ldi	r21, 0x47	; 71
    187e:	6b 89       	ldd	r22, Y+19	; 0x13
    1880:	7c 89       	ldd	r23, Y+20	; 0x14
    1882:	8d 89       	ldd	r24, Y+21	; 0x15
    1884:	9e 89       	ldd	r25, Y+22	; 0x16
    1886:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    188a:	18 16       	cp	r1, r24
    188c:	4c f5       	brge	.+82     	; 0x18e0 <lcd_cmd+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	69 81       	ldd	r22, Y+1	; 0x01
    1898:	7a 81       	ldd	r23, Y+2	; 0x02
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	98 8f       	std	Y+24, r25	; 0x18
    18b4:	8f 8b       	std	Y+23, r24	; 0x17
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <lcd_cmd+0xe4>
    18b8:	88 ec       	ldi	r24, 0xC8	; 200
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9a 8f       	std	Y+26, r25	; 0x1a
    18be:	89 8f       	std	Y+25, r24	; 0x19
    18c0:	89 8d       	ldd	r24, Y+25	; 0x19
    18c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <lcd_cmd+0xd2>
    18c8:	9a 8f       	std	Y+26, r25	; 0x1a
    18ca:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18cc:	8f 89       	ldd	r24, Y+23	; 0x17
    18ce:	98 8d       	ldd	r25, Y+24	; 0x18
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	98 8f       	std	Y+24, r25	; 0x18
    18d4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	98 8d       	ldd	r25, Y+24	; 0x18
    18da:	89 2b       	or	r24, r25
    18dc:	69 f7       	brne	.-38     	; 0x18b8 <lcd_cmd+0xc6>
    18de:	14 c0       	rjmp	.+40     	; 0x1908 <lcd_cmd+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e0:	6b 89       	ldd	r22, Y+19	; 0x13
    18e2:	7c 89       	ldd	r23, Y+20	; 0x14
    18e4:	8d 89       	ldd	r24, Y+21	; 0x15
    18e6:	9e 89       	ldd	r25, Y+22	; 0x16
    18e8:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	98 8f       	std	Y+24, r25	; 0x18
    18f2:	8f 8b       	std	Y+23, r24	; 0x17
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	9c 8f       	std	Y+28, r25	; 0x1c
    18fa:	8b 8f       	std	Y+27, r24	; 0x1b
    18fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <lcd_cmd+0x10e>
    1904:	9c 8f       	std	Y+28, r25	; 0x1c
    1906:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3);
	LCD_EN0;	
    1908:	88 e2       	ldi	r24, 0x28	; 40
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	28 e2       	ldi	r18, 0x28	; 40
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	f9 01       	movw	r30, r18
    1912:	20 81       	ld	r18, Z
    1914:	2f 7e       	andi	r18, 0xEF	; 239
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
	lcd_set_nibble(cmd);
    191a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_set_nibble>
	LCD_EN1;
    1920:	88 e2       	ldi	r24, 0x28	; 40
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	28 e2       	ldi	r18, 0x28	; 40
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	f9 01       	movw	r30, r18
    192a:	20 81       	ld	r18, Z
    192c:	20 61       	ori	r18, 0x10	; 16
    192e:	fc 01       	movw	r30, r24
    1930:	20 83       	st	Z, r18
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e4       	ldi	r26, 0x40	; 64
    1938:	b0 e4       	ldi	r27, 0x40	; 64
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	af 83       	std	Y+7, r26	; 0x07
    1940:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	4a ef       	ldi	r20, 0xFA	; 250
    1948:	54 e4       	ldi	r21, 0x44	; 68
    194a:	6d 81       	ldd	r22, Y+5	; 0x05
    194c:	7e 81       	ldd	r23, Y+6	; 0x06
    194e:	8f 81       	ldd	r24, Y+7	; 0x07
    1950:	98 85       	ldd	r25, Y+8	; 0x08
    1952:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	89 87       	std	Y+9, r24	; 0x09
    195c:	9a 87       	std	Y+10, r25	; 0x0a
    195e:	ab 87       	std	Y+11, r26	; 0x0b
    1960:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e8       	ldi	r20, 0x80	; 128
    1968:	5f e3       	ldi	r21, 0x3F	; 63
    196a:	69 85       	ldd	r22, Y+9	; 0x09
    196c:	7a 85       	ldd	r23, Y+10	; 0x0a
    196e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1970:	9c 85       	ldd	r25, Y+12	; 0x0c
    1972:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <lcd_cmd+0x192>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9e 87       	std	Y+14, r25	; 0x0e
    1980:	8d 87       	std	Y+13, r24	; 0x0d
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <lcd_cmd+0x210>
	else if (__tmp > 65535)
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	57 e4       	ldi	r21, 0x47	; 71
    198c:	69 85       	ldd	r22, Y+9	; 0x09
    198e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1990:	8b 85       	ldd	r24, Y+11	; 0x0b
    1992:	9c 85       	ldd	r25, Y+12	; 0x0c
    1994:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <lcd_cmd+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e2       	ldi	r20, 0x20	; 32
    19a2:	51 e4       	ldi	r21, 0x41	; 65
    19a4:	6d 81       	ldd	r22, Y+5	; 0x05
    19a6:	7e 81       	ldd	r23, Y+6	; 0x06
    19a8:	8f 81       	ldd	r24, Y+7	; 0x07
    19aa:	98 85       	ldd	r25, Y+8	; 0x08
    19ac:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 87       	std	Y+14, r25	; 0x0e
    19c2:	8d 87       	std	Y+13, r24	; 0x0d
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <lcd_cmd+0x1f2>
    19c6:	88 ec       	ldi	r24, 0xC8	; 200
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	98 8b       	std	Y+16, r25	; 0x10
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d0:	98 89       	ldd	r25, Y+16	; 0x10
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <lcd_cmd+0x1e0>
    19d6:	98 8b       	std	Y+16, r25	; 0x10
    19d8:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	8d 85       	ldd	r24, Y+13	; 0x0d
    19dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9e 87       	std	Y+14, r25	; 0x0e
    19e2:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	89 2b       	or	r24, r25
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <lcd_cmd+0x1d4>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <lcd_cmd+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	69 85       	ldd	r22, Y+9	; 0x09
    19f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    19f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    19f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f6:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e 87       	std	Y+14, r25	; 0x0e
    1a00:	8d 87       	std	Y+13, r24	; 0x0d
    1a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a06:	9a 8b       	std	Y+18, r25	; 0x12
    1a08:	89 8b       	std	Y+17, r24	; 0x11
    1a0a:	89 89       	ldd	r24, Y+17	; 0x11
    1a0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <lcd_cmd+0x21c>
    1a12:	9a 8b       	std	Y+18, r25	; 0x12
    1a14:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(3);
	LCD_EN0;
    1a16:	88 e2       	ldi	r24, 0x28	; 40
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	28 e2       	ldi	r18, 0x28	; 40
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	f9 01       	movw	r30, r18
    1a20:	20 81       	ld	r18, Z
    1a22:	2f 7e       	andi	r18, 0xEF	; 239
    1a24:	fc 01       	movw	r30, r24
    1a26:	20 83       	st	Z, r18
}
    1a28:	00 00       	nop
    1a2a:	6d 96       	adiw	r28, 0x1d	; 29
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	08 95       	ret

00001a3c <lcd_put>:

// pošle lcd znak
void lcd_put(char znak)
{
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	c1 54       	subi	r28, 0x41	; 65
    1a46:	d1 09       	sbc	r29, r1
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	9e 01       	movw	r18, r28
    1a54:	2f 5b       	subi	r18, 0xBF	; 191
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	f9 01       	movw	r30, r18
    1a5a:	80 83       	st	Z, r24
	LCD_RS1;
    1a5c:	8b e2       	ldi	r24, 0x2B	; 43
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	2b e2       	ldi	r18, 0x2B	; 43
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	f9 01       	movw	r30, r18
    1a66:	20 81       	ld	r18, Z
    1a68:	21 60       	ori	r18, 0x01	; 1
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	20 83       	st	Z, r18
	lcd_set_nibble(znak>>4);
    1a6e:	ce 01       	movw	r24, r28
    1a70:	8f 5b       	subi	r24, 0xBF	; 191
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	fc 01       	movw	r30, r24
    1a76:	80 81       	ld	r24, Z
    1a78:	82 95       	swap	r24
    1a7a:	8f 70       	andi	r24, 0x0F	; 15
    1a7c:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_set_nibble>
	LCD_EN1;
    1a80:	88 e2       	ldi	r24, 0x28	; 40
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	28 e2       	ldi	r18, 0x28	; 40
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	f9 01       	movw	r30, r18
    1a8a:	20 81       	ld	r18, Z
    1a8c:	20 61       	ori	r18, 0x10	; 16
    1a8e:	fc 01       	movw	r30, r24
    1a90:	20 83       	st	Z, r18
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e2       	ldi	r26, 0x20	; 32
    1a98:	b2 e4       	ldi	r27, 0x42	; 66
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	ab 83       	std	Y+3, r26	; 0x03
    1aa0:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1aa2:	2b ea       	ldi	r18, 0xAB	; 171
    1aa4:	3a ea       	ldi	r19, 0xAA	; 170
    1aa6:	4a e2       	ldi	r20, 0x2A	; 42
    1aa8:	50 e4       	ldi	r21, 0x40	; 64
    1aaa:	69 81       	ldd	r22, Y+1	; 0x01
    1aac:	7a 81       	ldd	r23, Y+2	; 0x02
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8d a3       	std	Y+37, r24	; 0x25
    1abc:	9e a3       	std	Y+38, r25	; 0x26
    1abe:	af a3       	std	Y+39, r26	; 0x27
    1ac0:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac8:	bc 81       	ldd	r27, Y+4	; 0x04
    1aca:	9c 01       	movw	r18, r24
    1acc:	ad 01       	movw	r20, r26
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__addsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	89 a7       	std	Y+41, r24	; 0x29
    1adc:	9a a7       	std	Y+42, r25	; 0x2a
    1ade:	ab a7       	std	Y+43, r26	; 0x2b
    1ae0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	5f e3       	ldi	r21, 0x3F	; 63
    1aea:	6d a1       	ldd	r22, Y+37	; 0x25
    1aec:	7e a1       	ldd	r23, Y+38	; 0x26
    1aee:	8f a1       	ldd	r24, Y+39	; 0x27
    1af0:	98 a5       	ldd	r25, Y+40	; 0x28
    1af2:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	1c f4       	brge	.+6      	; 0x1b00 <lcd_put+0xc4>
		__ticks = 1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	8d a7       	std	Y+45, r24	; 0x2d
    1afe:	b2 c0       	rjmp	.+356    	; 0x1c64 <lcd_put+0x228>
	else if (__tmp2 > 65535)
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	69 a5       	ldd	r22, Y+41	; 0x29
    1b0a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b10:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	0c f0       	brlt	.+2      	; 0x1b1a <lcd_put+0xde>
    1b18:	7b c0       	rjmp	.+246    	; 0x1c10 <lcd_put+0x1d4>
	{
		_delay_ms(__us / 1000.0);
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	4a e7       	ldi	r20, 0x7A	; 122
    1b20:	54 e4       	ldi	r21, 0x44	; 68
    1b22:	69 81       	ldd	r22, Y+1	; 0x01
    1b24:	7a 81       	ldd	r23, Y+2	; 0x02
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	8e a7       	std	Y+46, r24	; 0x2e
    1b34:	9f a7       	std	Y+47, r25	; 0x2f
    1b36:	a8 ab       	std	Y+48, r26	; 0x30
    1b38:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b44:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b46:	88 a9       	ldd	r24, Y+48	; 0x30
    1b48:	99 a9       	ldd	r25, Y+49	; 0x31
    1b4a:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	8a ab       	std	Y+50, r24	; 0x32
    1b54:	9b ab       	std	Y+51, r25	; 0x33
    1b56:	ac ab       	std	Y+52, r26	; 0x34
    1b58:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	6a a9       	ldd	r22, Y+50	; 0x32
    1b64:	7b a9       	ldd	r23, Y+51	; 0x33
    1b66:	8c a9       	ldd	r24, Y+52	; 0x34
    1b68:	9d a9       	ldd	r25, Y+53	; 0x35
    1b6a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <lcd_put+0x140>
		__ticks = 1;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9f ab       	std	Y+55, r25	; 0x37
    1b78:	8e ab       	std	Y+54, r24	; 0x36
    1b7a:	3f c0       	rjmp	.+126    	; 0x1bfa <lcd_put+0x1be>
	else if (__tmp > 65535)
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	6a a9       	ldd	r22, Y+50	; 0x32
    1b86:	7b a9       	ldd	r23, Y+51	; 0x33
    1b88:	8c a9       	ldd	r24, Y+52	; 0x34
    1b8a:	9d a9       	ldd	r25, Y+53	; 0x35
    1b8c:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    1b90:	18 16       	cp	r1, r24
    1b92:	4c f5       	brge	.+82     	; 0x1be6 <lcd_put+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b9e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ba0:	88 a9       	ldd	r24, Y+48	; 0x30
    1ba2:	99 a9       	ldd	r25, Y+49	; 0x31
    1ba4:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	bc 01       	movw	r22, r24
    1bae:	cd 01       	movw	r24, r26
    1bb0:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9f ab       	std	Y+55, r25	; 0x37
    1bba:	8e ab       	std	Y+54, r24	; 0x36
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <lcd_put+0x1a0>
    1bbe:	88 ec       	ldi	r24, 0xC8	; 200
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	99 af       	std	Y+57, r25	; 0x39
    1bc4:	88 af       	std	Y+56, r24	; 0x38
    1bc6:	88 ad       	ldd	r24, Y+56	; 0x38
    1bc8:	99 ad       	ldd	r25, Y+57	; 0x39
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <lcd_put+0x18e>
    1bce:	99 af       	std	Y+57, r25	; 0x39
    1bd0:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd2:	8e a9       	ldd	r24, Y+54	; 0x36
    1bd4:	9f a9       	ldd	r25, Y+55	; 0x37
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	9f ab       	std	Y+55, r25	; 0x37
    1bda:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bdc:	8e a9       	ldd	r24, Y+54	; 0x36
    1bde:	9f a9       	ldd	r25, Y+55	; 0x37
    1be0:	89 2b       	or	r24, r25
    1be2:	69 f7       	brne	.-38     	; 0x1bbe <lcd_put+0x182>
    1be4:	3f c0       	rjmp	.+126    	; 0x1c64 <lcd_put+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be6:	6a a9       	ldd	r22, Y+50	; 0x32
    1be8:	7b a9       	ldd	r23, Y+51	; 0x33
    1bea:	8c a9       	ldd	r24, Y+52	; 0x34
    1bec:	9d a9       	ldd	r25, Y+53	; 0x35
    1bee:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	9f ab       	std	Y+55, r25	; 0x37
    1bf8:	8e ab       	std	Y+54, r24	; 0x36
    1bfa:	8e a9       	ldd	r24, Y+54	; 0x36
    1bfc:	9f a9       	ldd	r25, Y+55	; 0x37
    1bfe:	9b af       	std	Y+59, r25	; 0x3b
    1c00:	8a af       	std	Y+58, r24	; 0x3a
    1c02:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c04:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c06:	01 97       	sbiw	r24, 0x01	; 1
    1c08:	f1 f7       	brne	.-4      	; 0x1c06 <lcd_put+0x1ca>
    1c0a:	9b af       	std	Y+59, r25	; 0x3b
    1c0c:	8a af       	std	Y+58, r24	; 0x3a
    1c0e:	2a c0       	rjmp	.+84     	; 0x1c64 <lcd_put+0x228>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	53 e4       	ldi	r21, 0x43	; 67
    1c18:	6d a1       	ldd	r22, Y+37	; 0x25
    1c1a:	7e a1       	ldd	r23, Y+38	; 0x26
    1c1c:	8f a1       	ldd	r24, Y+39	; 0x27
    1c1e:	98 a5       	ldd	r25, Y+40	; 0x28
    1c20:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    1c24:	18 16       	cp	r1, r24
    1c26:	ac f4       	brge	.+42     	; 0x1c52 <lcd_put+0x216>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1c28:	69 a5       	ldd	r22, Y+41	; 0x29
    1c2a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c30:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9d af       	std	Y+61, r25	; 0x3d
    1c3a:	8c af       	std	Y+60, r24	; 0x3c
    1c3c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c3e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c40:	9f af       	std	Y+63, r25	; 0x3f
    1c42:	8e af       	std	Y+62, r24	; 0x3e
    1c44:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c46:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <lcd_put+0x20c>
    1c4c:	9f af       	std	Y+63, r25	; 0x3f
    1c4e:	8e af       	std	Y+62, r24	; 0x3e
    1c50:	1c c0       	rjmp	.+56     	; 0x1c8a <lcd_put+0x24e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c52:	6d a1       	ldd	r22, Y+37	; 0x25
    1c54:	7e a1       	ldd	r23, Y+38	; 0x26
    1c56:	8f a1       	ldd	r24, Y+39	; 0x27
    1c58:	98 a5       	ldd	r25, Y+40	; 0x28
    1c5a:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8d a7       	std	Y+45, r24	; 0x2d
    1c64:	2d a5       	ldd	r18, Y+45	; 0x2d
    1c66:	ce 01       	movw	r24, r28
    1c68:	80 5c       	subi	r24, 0xC0	; 192
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c70:	ce 01       	movw	r24, r28
    1c72:	80 5c       	subi	r24, 0xC0	; 192
    1c74:	9f 4f       	sbci	r25, 0xFF	; 255
    1c76:	fc 01       	movw	r30, r24
    1c78:	80 81       	ld	r24, Z
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	2a 95       	dec	r18
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <lcd_put+0x240>
    1c80:	ce 01       	movw	r24, r28
    1c82:	80 5c       	subi	r24, 0xC0	; 192
    1c84:	9f 4f       	sbci	r25, 0xFF	; 255
    1c86:	fc 01       	movw	r30, r24
    1c88:	20 83       	st	Z, r18
	_delay_us(40);
	LCD_EN0;
    1c8a:	88 e2       	ldi	r24, 0x28	; 40
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	28 e2       	ldi	r18, 0x28	; 40
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	f9 01       	movw	r30, r18
    1c94:	20 81       	ld	r18, Z
    1c96:	2f 7e       	andi	r18, 0xEF	; 239
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 83       	st	Z, r18
	lcd_set_nibble(znak);
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	8f 5b       	subi	r24, 0xBF	; 191
    1ca0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	80 81       	ld	r24, Z
    1ca6:	0e 94 86 0b 	call	0x170c	; 0x170c <lcd_set_nibble>
	LCD_EN1;
    1caa:	88 e2       	ldi	r24, 0x28	; 40
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	28 e2       	ldi	r18, 0x28	; 40
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	f9 01       	movw	r30, r18
    1cb4:	20 81       	ld	r18, Z
    1cb6:	20 61       	ori	r18, 0x10	; 16
    1cb8:	fc 01       	movw	r30, r24
    1cba:	20 83       	st	Z, r18
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	a0 e2       	ldi	r26, 0x20	; 32
    1cc2:	b2 e4       	ldi	r27, 0x42	; 66
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	af 83       	std	Y+7, r26	; 0x07
    1cca:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1ccc:	2b ea       	ldi	r18, 0xAB	; 171
    1cce:	3a ea       	ldi	r19, 0xAA	; 170
    1cd0:	4a e2       	ldi	r20, 0x2A	; 42
    1cd2:	50 e4       	ldi	r21, 0x40	; 64
    1cd4:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd6:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cda:	98 85       	ldd	r25, Y+8	; 0x08
    1cdc:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	89 87       	std	Y+9, r24	; 0x09
    1ce6:	9a 87       	std	Y+10, r25	; 0x0a
    1ce8:	ab 87       	std	Y+11, r26	; 0x0b
    1cea:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	af 81       	ldd	r26, Y+7	; 0x07
    1cf2:	b8 85       	ldd	r27, Y+8	; 0x08
    1cf4:	9c 01       	movw	r18, r24
    1cf6:	ad 01       	movw	r20, r26
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__addsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	8d 87       	std	Y+13, r24	; 0x0d
    1d06:	9e 87       	std	Y+14, r25	; 0x0e
    1d08:	af 87       	std	Y+15, r26	; 0x0f
    1d0a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e8       	ldi	r20, 0x80	; 128
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	69 85       	ldd	r22, Y+9	; 0x09
    1d16:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d18:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d1a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d1c:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    1d20:	88 23       	and	r24, r24
    1d22:	1c f4       	brge	.+6      	; 0x1d2a <lcd_put+0x2ee>
		__ticks = 1;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	89 8b       	std	Y+17, r24	; 0x11
    1d28:	b2 c0       	rjmp	.+356    	; 0x1e8e <lcd_put+0x452>
	else if (__tmp2 > 65535)
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d34:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d38:	98 89       	ldd	r25, Y+16	; 0x10
    1d3a:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	0c f0       	brlt	.+2      	; 0x1d44 <lcd_put+0x308>
    1d42:	7b c0       	rjmp	.+246    	; 0x1e3a <lcd_put+0x3fe>
	{
		_delay_ms(__us / 1000.0);
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a e7       	ldi	r20, 0x7A	; 122
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	6d 81       	ldd	r22, Y+5	; 0x05
    1d4e:	7e 81       	ldd	r23, Y+6	; 0x06
    1d50:	8f 81       	ldd	r24, Y+7	; 0x07
    1d52:	98 85       	ldd	r25, Y+8	; 0x08
    1d54:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	8a 8b       	std	Y+18, r24	; 0x12
    1d5e:	9b 8b       	std	Y+19, r25	; 0x13
    1d60:	ac 8b       	std	Y+20, r26	; 0x14
    1d62:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a ef       	ldi	r20, 0xFA	; 250
    1d6a:	54 e4       	ldi	r21, 0x44	; 68
    1d6c:	6a 89       	ldd	r22, Y+18	; 0x12
    1d6e:	7b 89       	ldd	r23, Y+19	; 0x13
    1d70:	8c 89       	ldd	r24, Y+20	; 0x14
    1d72:	9d 89       	ldd	r25, Y+21	; 0x15
    1d74:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8e 8b       	std	Y+22, r24	; 0x16
    1d7e:	9f 8b       	std	Y+23, r25	; 0x17
    1d80:	a8 8f       	std	Y+24, r26	; 0x18
    1d82:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e8       	ldi	r20, 0x80	; 128
    1d8a:	5f e3       	ldi	r21, 0x3F	; 63
    1d8c:	6e 89       	ldd	r22, Y+22	; 0x16
    1d8e:	7f 89       	ldd	r23, Y+23	; 0x17
    1d90:	88 8d       	ldd	r24, Y+24	; 0x18
    1d92:	99 8d       	ldd	r25, Y+25	; 0x19
    1d94:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <lcd_put+0x36a>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9b 8f       	std	Y+27, r25	; 0x1b
    1da2:	8a 8f       	std	Y+26, r24	; 0x1a
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <lcd_put+0x3e8>
	else if (__tmp > 65535)
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	3f ef       	ldi	r19, 0xFF	; 255
    1daa:	4f e7       	ldi	r20, 0x7F	; 127
    1dac:	57 e4       	ldi	r21, 0x47	; 71
    1dae:	6e 89       	ldd	r22, Y+22	; 0x16
    1db0:	7f 89       	ldd	r23, Y+23	; 0x17
    1db2:	88 8d       	ldd	r24, Y+24	; 0x18
    1db4:	99 8d       	ldd	r25, Y+25	; 0x19
    1db6:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <lcd_put+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e2       	ldi	r20, 0x20	; 32
    1dc4:	51 e4       	ldi	r21, 0x41	; 65
    1dc6:	6a 89       	ldd	r22, Y+18	; 0x12
    1dc8:	7b 89       	ldd	r23, Y+19	; 0x13
    1dca:	8c 89       	ldd	r24, Y+20	; 0x14
    1dcc:	9d 89       	ldd	r25, Y+21	; 0x15
    1dce:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9b 8f       	std	Y+27, r25	; 0x1b
    1de4:	8a 8f       	std	Y+26, r24	; 0x1a
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <lcd_put+0x3ca>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9d 8f       	std	Y+29, r25	; 0x1d
    1dee:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1df0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1df2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <lcd_put+0x3b8>
    1df8:	9d 8f       	std	Y+29, r25	; 0x1d
    1dfa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dfe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9b 8f       	std	Y+27, r25	; 0x1b
    1e04:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e08:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e0a:	89 2b       	or	r24, r25
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <lcd_put+0x3ac>
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <lcd_put+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6e 89       	ldd	r22, Y+22	; 0x16
    1e12:	7f 89       	ldd	r23, Y+23	; 0x17
    1e14:	88 8d       	ldd	r24, Y+24	; 0x18
    1e16:	99 8d       	ldd	r25, Y+25	; 0x19
    1e18:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9b 8f       	std	Y+27, r25	; 0x1b
    1e22:	8a 8f       	std	Y+26, r24	; 0x1a
    1e24:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e26:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e28:	9f 8f       	std	Y+31, r25	; 0x1f
    1e2a:	8e 8f       	std	Y+30, r24	; 0x1e
    1e2c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e2e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <lcd_put+0x3f4>
    1e34:	9f 8f       	std	Y+31, r25	; 0x1f
    1e36:	8e 8f       	std	Y+30, r24	; 0x1e
    1e38:	2a c0       	rjmp	.+84     	; 0x1e8e <lcd_put+0x452>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	4f e7       	ldi	r20, 0x7F	; 127
    1e40:	53 e4       	ldi	r21, 0x43	; 67
    1e42:	69 85       	ldd	r22, Y+9	; 0x09
    1e44:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e46:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e48:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e4a:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	ac f4       	brge	.+42     	; 0x1e7c <lcd_put+0x440>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1e52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e58:	98 89       	ldd	r25, Y+16	; 0x10
    1e5a:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	99 a3       	std	Y+33, r25	; 0x21
    1e64:	88 a3       	std	Y+32, r24	; 0x20
    1e66:	88 a1       	ldd	r24, Y+32	; 0x20
    1e68:	99 a1       	ldd	r25, Y+33	; 0x21
    1e6a:	9b a3       	std	Y+35, r25	; 0x23
    1e6c:	8a a3       	std	Y+34, r24	; 0x22
    1e6e:	8a a1       	ldd	r24, Y+34	; 0x22
    1e70:	9b a1       	ldd	r25, Y+35	; 0x23
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <lcd_put+0x436>
    1e76:	9b a3       	std	Y+35, r25	; 0x23
    1e78:	8a a3       	std	Y+34, r24	; 0x22
    1e7a:	0f c0       	rjmp	.+30     	; 0x1e9a <lcd_put+0x45e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e7c:	69 85       	ldd	r22, Y+9	; 0x09
    1e7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e82:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e84:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	89 8b       	std	Y+17, r24	; 0x11
    1e8e:	89 89       	ldd	r24, Y+17	; 0x11
    1e90:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e92:	8c a1       	ldd	r24, Y+36	; 0x24
    1e94:	8a 95       	dec	r24
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <lcd_put+0x458>
    1e98:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(40);
	LCD_EN0;
    1e9a:	88 e2       	ldi	r24, 0x28	; 40
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	28 e2       	ldi	r18, 0x28	; 40
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	f9 01       	movw	r30, r18
    1ea4:	20 81       	ld	r18, Z
    1ea6:	2f 7e       	andi	r18, 0xEF	; 239
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	20 83       	st	Z, r18
	LCD_RS0;
    1eac:	8b e2       	ldi	r24, 0x2B	; 43
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	2b e2       	ldi	r18, 0x2B	; 43
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	f9 01       	movw	r30, r18
    1eb6:	20 81       	ld	r18, Z
    1eb8:	2e 7f       	andi	r18, 0xFE	; 254
    1eba:	fc 01       	movw	r30, r24
    1ebc:	20 83       	st	Z, r18
}
    1ebe:	00 00       	nop
    1ec0:	cf 5b       	subi	r28, 0xBF	; 191
    1ec2:	df 4f       	sbci	r29, 0xFF	; 255
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	08 95       	ret

00001ed4 <nible2hex>:

char nible2hex(uint8_t nible)
{
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	1f 92       	push	r1
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	89 83       	std	Y+1, r24	; 0x01
	if (nible < 10)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	8a 30       	cpi	r24, 0x0A	; 10
    1ee4:	18 f4       	brcc	.+6      	; 0x1eec <nible2hex+0x18>
		return '0' + nible;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	80 5d       	subi	r24, 0xD0	; 208
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <nible2hex+0x1c>
	else
		return 'A' + nible - 10;
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	89 5c       	subi	r24, 0xC9	; 201
}
    1ef0:	0f 90       	pop	r0
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	08 95       	ret

00001ef8 <print_hex>:

// vytiskne číslo int 2B
void print_hex(uint16_t cislo)
{
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <print_hex+0x6>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <print_hex+0x8>
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <print_hex+0xa>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1f0a:	1a 82       	std	Y+2, r1	; 0x02
    1f0c:	19 82       	std	Y+1, r1	; 0x01
    1f0e:	1c c0       	rjmp	.+56     	; 0x1f48 <print_hex+0x50>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	89 2f       	mov	r24, r25
    1f16:	99 27       	eor	r25, r25
    1f18:	82 95       	swap	r24
    1f1a:	8f 70       	andi	r24, 0x0F	; 15
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
		cislo <<= 4;
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	82 95       	swap	r24
    1f26:	92 95       	swap	r25
    1f28:	90 7f       	andi	r25, 0xF0	; 240
    1f2a:	98 27       	eor	r25, r24
    1f2c:	80 7f       	andi	r24, 0xF0	; 240
    1f2e:	98 27       	eor	r25, r24
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
		lcd_put(nible2hex(nible));
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <nible2hex>
    1f3a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
void print_hex(uint16_t cislo)
{
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4c:	04 97       	sbiw	r24, 0x04	; 4
    1f4e:	00 f3       	brcs	.-64     	; 0x1f10 <print_hex+0x18>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
		cislo <<= 4;
		lcd_put(nible2hex(nible));
	}
}
    1f50:	00 00       	nop
    1f52:	26 96       	adiw	r28, 0x06	; 6
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	08 95       	ret

00001f64 <print_int>:

// vytiskne číslo int 2B
void print_int(int cislo, char znaminko, char nula, int pocet_mist)
{
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	6b 97       	sbiw	r28, 0x1b	; 27
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	9f 8b       	std	Y+23, r25	; 0x17
    1f7a:	8e 8b       	std	Y+22, r24	; 0x16
    1f7c:	68 8f       	std	Y+24, r22	; 0x18
    1f7e:	49 8f       	std	Y+25, r20	; 0x19
    1f80:	3b 8f       	std	Y+27, r19	; 0x1b
    1f82:	2a 8f       	std	Y+26, r18	; 0x1a
	int poc_cislo = cislo;
    1f84:	8e 89       	ldd	r24, Y+22	; 0x16
    1f86:	9f 89       	ldd	r25, Y+23	; 0x17
    1f88:	9d 83       	std	Y+5, r25	; 0x05
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
	int8_t i, len = 16, state = 1;
    1f8c:	80 e1       	ldi	r24, 0x10	; 16
    1f8e:	8a 83       	std	Y+2, r24	; 0x02
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	8b 83       	std	Y+3, r24	; 0x03
	char buf[16];

	// pokud máme vypsat před číslo znamínko
	if (znaminko)
    1f94:	88 8d       	ldd	r24, Y+24	; 0x18
    1f96:	88 23       	and	r24, r24
    1f98:	49 f0       	breq	.+18     	; 0x1fac <print_int+0x48>
	{
		lcd_put((cislo >= 0) ? '+' : '-');
    1f9a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f9c:	9f 89       	ldd	r25, Y+23	; 0x17
    1f9e:	99 23       	and	r25, r25
    1fa0:	14 f0       	brlt	.+4      	; 0x1fa6 <print_int+0x42>
    1fa2:	8b e2       	ldi	r24, 0x2B	; 43
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <print_int+0x44>
    1fa6:	8d e2       	ldi	r24, 0x2D	; 45
    1fa8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	}

	// pokud je vypnutá predikce nul
	if (nula)
    1fac:	89 8d       	ldd	r24, Y+25	; 0x19
    1fae:	88 23       	and	r24, r24
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <print_int+0x50>
		state = 0;
    1fb2:	1b 82       	std	Y+3, r1	; 0x03


	// když je zadána délka čísla
	if (pocet_mist >= 0)
    1fb4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fb6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fb8:	99 23       	and	r25, r25
    1fba:	14 f0       	brlt	.+4      	; 0x1fc0 <print_int+0x5c>
		len = pocet_mist;
    1fbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fbe:	8a 83       	std	Y+2, r24	; 0x02

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;
    1fc0:	8e 89       	ldd	r24, Y+22	; 0x16
    1fc2:	9f 89       	ldd	r25, Y+23	; 0x17
    1fc4:	99 23       	and	r25, r25
    1fc6:	1c f4       	brge	.+6      	; 0x1fce <print_int+0x6a>
    1fc8:	91 95       	neg	r25
    1fca:	81 95       	neg	r24
    1fcc:	91 09       	sbc	r25, r1
    1fce:	9f 8b       	std	Y+23, r25	; 0x17
    1fd0:	8e 8b       	std	Y+22, r24	; 0x16

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1fd2:	19 82       	std	Y+1, r1	; 0x01
    1fd4:	20 c0       	rjmp	.+64     	; 0x2016 <print_int+0xb2>
	{
		buf[i] = '0' + cislo % 10;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	28 2f       	mov	r18, r24
    1fda:	88 0f       	add	r24, r24
    1fdc:	33 0b       	sbc	r19, r19
    1fde:	8e 89       	ldd	r24, Y+22	; 0x16
    1fe0:	9f 89       	ldd	r25, Y+23	; 0x17
    1fe2:	4a e0       	ldi	r20, 0x0A	; 10
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	ba 01       	movw	r22, r20
    1fe8:	0e 94 1d 1a 	call	0x343a	; 0x343a <__divmodhi4>
    1fec:	40 e3       	ldi	r20, 0x30	; 48
    1fee:	48 0f       	add	r20, r24
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	06 96       	adiw	r24, 0x06	; 6
    1ff4:	82 0f       	add	r24, r18
    1ff6:	93 1f       	adc	r25, r19
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	40 83       	st	Z, r20
		cislo /= 10;
    1ffc:	8e 89       	ldd	r24, Y+22	; 0x16
    1ffe:	9f 89       	ldd	r25, Y+23	; 0x17
    2000:	2a e0       	ldi	r18, 0x0A	; 10
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	b9 01       	movw	r22, r18
    2006:	0e 94 1d 1a 	call	0x343a	; 0x343a <__divmodhi4>
    200a:	cb 01       	movw	r24, r22
    200c:	9f 8b       	std	Y+23, r25	; 0x17
    200e:	8e 8b       	std	Y+22, r24	; 0x16

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	8f 5f       	subi	r24, 0xFF	; 255
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	99 81       	ldd	r25, Y+1	; 0x01
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	98 17       	cp	r25, r24
    201c:	e4 f2       	brlt	.-72     	; 0x1fd6 <print_int+0x72>
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	81 50       	subi	r24, 0x01	; 1
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	3d c0       	rjmp	.+122    	; 0x20a0 <print_int+0x13c>
	{
		if (buf[i] == '0' && state)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	08 2e       	mov	r0, r24
    202a:	00 0c       	add	r0, r0
    202c:	99 0b       	sbc	r25, r25
    202e:	9e 01       	movw	r18, r28
    2030:	2a 5f       	subi	r18, 0xFA	; 250
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	fc 01       	movw	r30, r24
    203a:	80 81       	ld	r24, Z
    203c:	80 33       	cpi	r24, 0x30	; 48
    203e:	e9 f4       	brne	.+58     	; 0x207a <print_int+0x116>
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	88 23       	and	r24, r24
    2044:	d1 f0       	breq	.+52     	; 0x207a <print_int+0x116>
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    2046:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2048:	9b 8d       	ldd	r25, Y+27	; 0x1b
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	29 f1       	breq	.+74     	; 0x2098 <print_int+0x134>
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	9d 81       	ldd	r25, Y+5	; 0x05
    2052:	89 2b       	or	r24, r25
    2054:	71 f4       	brne	.+28     	; 0x2072 <print_int+0x10e>
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	08 2e       	mov	r0, r24
    205a:	00 0c       	add	r0, r0
    205c:	99 0b       	sbc	r25, r25
    205e:	9c 01       	movw	r18, r24
    2060:	2f 5f       	subi	r18, 0xFF	; 255
    2062:	3f 4f       	sbci	r19, 0xFF	; 255
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	08 2e       	mov	r0, r24
    2068:	00 0c       	add	r0, r0
    206a:	99 0b       	sbc	r25, r25
    206c:	28 17       	cp	r18, r24
    206e:	39 07       	cpc	r19, r25
    2070:	99 f0       	breq	.+38     	; 0x2098 <print_int+0x134>
			{
				lcd_put(' ');
    2072:	80 e2       	ldi	r24, 0x20	; 32
    2074:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <print_int+0x134>
				lcd_put(' ');
			}
		}
		else
		{
			state = 0;
    207a:	1b 82       	std	Y+3, r1	; 0x03
			lcd_put(buf[i]);
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	08 2e       	mov	r0, r24
    2080:	00 0c       	add	r0, r0
    2082:	99 0b       	sbc	r25, r25
    2084:	9e 01       	movw	r18, r28
    2086:	2a 5f       	subi	r18, 0xFA	; 250
    2088:	3f 4f       	sbci	r19, 0xFF	; 255
    208a:	82 0f       	add	r24, r18
    208c:	93 1f       	adc	r25, r19
    208e:	fc 01       	movw	r30, r24
    2090:	80 81       	ld	r24, Z
    2092:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
    2096:	01 c0       	rjmp	.+2      	; 0x209a <print_int+0x136>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    2098:	00 00       	nop
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	88 23       	and	r24, r24
    20a4:	0c f0       	brlt	.+2      	; 0x20a8 <print_int+0x144>
    20a6:	bf cf       	rjmp	.-130    	; 0x2026 <print_int+0xc2>
			state = 0;
			lcd_put(buf[i]);
		}

	}
	if (state)
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	88 23       	and	r24, r24
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <print_int+0x150>
	{
		lcd_put('0');
    20ae:	80 e3       	ldi	r24, 0x30	; 48
    20b0:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	}
}
    20b4:	00 00       	nop
    20b6:	6b 96       	adiw	r28, 0x1b	; 27
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	08 95       	ret

000020c8 <print_double>:

// vytiskne double
void print_double(double cislo, char znaminko, char nula, int mista_pred_carkou, int mista_za_carkou)
{
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	61 97       	sbiw	r28, 0x11	; 17
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	68 87       	std	Y+8, r22	; 0x08
    20e6:	79 87       	std	Y+9, r23	; 0x09
    20e8:	8a 87       	std	Y+10, r24	; 0x0a
    20ea:	9b 87       	std	Y+11, r25	; 0x0b
    20ec:	4c 87       	std	Y+12, r20	; 0x0c
    20ee:	2d 87       	std	Y+13, r18	; 0x0d
    20f0:	1f 87       	std	Y+15, r17	; 0x0f
    20f2:	0e 87       	std	Y+14, r16	; 0x0e
    20f4:	f9 8a       	std	Y+17, r15	; 0x11
    20f6:	e8 8a       	std	Y+16, r14	; 0x10
	int i, cela, desetinna;
	char znam = '+';
    20f8:	8b e2       	ldi	r24, 0x2B	; 43
    20fa:	8b 83       	std	Y+3, r24	; 0x03

	if (mista_za_carkou == -1)
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	99 89       	ldd	r25, Y+17	; 0x11
    2100:	01 96       	adiw	r24, 0x01	; 1
    2102:	21 f4       	brne	.+8      	; 0x210c <print_double+0x44>
		mista_za_carkou = 3;
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	99 8b       	std	Y+17, r25	; 0x11
    210a:	88 8b       	std	Y+16, r24	; 0x10

	if (cislo < 0)
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	a9 01       	movw	r20, r18
    2112:	68 85       	ldd	r22, Y+8	; 0x08
    2114:	79 85       	ldd	r23, Y+9	; 0x09
    2116:	8a 85       	ldd	r24, Y+10	; 0x0a
    2118:	9b 85       	ldd	r25, Y+11	; 0x0b
    211a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    211e:	88 23       	and	r24, r24
    2120:	5c f4       	brge	.+22     	; 0x2138 <print_double+0x70>
	{
		cislo *= -1;
    2122:	88 85       	ldd	r24, Y+8	; 0x08
    2124:	99 85       	ldd	r25, Y+9	; 0x09
    2126:	aa 85       	ldd	r26, Y+10	; 0x0a
    2128:	bb 85       	ldd	r27, Y+11	; 0x0b
    212a:	b0 58       	subi	r27, 0x80	; 128
    212c:	88 87       	std	Y+8, r24	; 0x08
    212e:	99 87       	std	Y+9, r25	; 0x09
    2130:	aa 87       	std	Y+10, r26	; 0x0a
    2132:	bb 87       	std	Y+11, r27	; 0x0b
		znam = '-';
    2134:	8d e2       	ldi	r24, 0x2D	; 45
    2136:	8b 83       	std	Y+3, r24	; 0x03
	}

	cela = (int) cislo;
    2138:	68 85       	ldd	r22, Y+8	; 0x08
    213a:	79 85       	ldd	r23, Y+9	; 0x09
    213c:	8a 85       	ldd	r24, Y+10	; 0x0a
    213e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2140:	0e 94 1a 18 	call	0x3034	; 0x3034 <__fixsfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9d 83       	std	Y+5, r25	; 0x05
    214a:	8c 83       	std	Y+4, r24	; 0x04
	cislo -= cela;
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	09 2e       	mov	r0, r25
    2152:	00 0c       	add	r0, r0
    2154:	aa 0b       	sbc	r26, r26
    2156:	bb 0b       	sbc	r27, r27
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__floatsisf>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9c 01       	movw	r18, r24
    2166:	ad 01       	movw	r20, r26
    2168:	68 85       	ldd	r22, Y+8	; 0x08
    216a:	79 85       	ldd	r23, Y+9	; 0x09
    216c:	8a 85       	ldd	r24, Y+10	; 0x0a
    216e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2170:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__subsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	88 87       	std	Y+8, r24	; 0x08
    217a:	99 87       	std	Y+9, r25	; 0x09
    217c:	aa 87       	std	Y+10, r26	; 0x0a
    217e:	bb 87       	std	Y+11, r27	; 0x0b

	for (i=0; i < mista_za_carkou; i++)
    2180:	1a 82       	std	Y+2, r1	; 0x02
    2182:	19 82       	std	Y+1, r1	; 0x01
    2184:	15 c0       	rjmp	.+42     	; 0x21b0 <print_double+0xe8>
		cislo *= 10;
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	68 85       	ldd	r22, Y+8	; 0x08
    2190:	79 85       	ldd	r23, Y+9	; 0x09
    2192:	8a 85       	ldd	r24, Y+10	; 0x0a
    2194:	9b 85       	ldd	r25, Y+11	; 0x0b
    2196:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	88 87       	std	Y+8, r24	; 0x08
    21a0:	99 87       	std	Y+9, r25	; 0x09
    21a2:	aa 87       	std	Y+10, r26	; 0x0a
    21a4:	bb 87       	std	Y+11, r27	; 0x0b
	}

	cela = (int) cislo;
	cislo -= cela;

	for (i=0; i < mista_za_carkou; i++)
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	29 81       	ldd	r18, Y+1	; 0x01
    21b2:	3a 81       	ldd	r19, Y+2	; 0x02
    21b4:	88 89       	ldd	r24, Y+16	; 0x10
    21b6:	99 89       	ldd	r25, Y+17	; 0x11
    21b8:	28 17       	cp	r18, r24
    21ba:	39 07       	cpc	r19, r25
    21bc:	24 f3       	brlt	.-56     	; 0x2186 <print_double+0xbe>
		cislo *= 10;

	desetinna = (int) cislo;
    21be:	68 85       	ldd	r22, Y+8	; 0x08
    21c0:	79 85       	ldd	r23, Y+9	; 0x09
    21c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c6:	0e 94 1a 18 	call	0x3034	; 0x3034 <__fixsfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9f 83       	std	Y+7, r25	; 0x07
    21d0:	8e 83       	std	Y+6, r24	; 0x06
	cela = (znam == '-') ? -1 * cela : cela;
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	8d 32       	cpi	r24, 0x2D	; 45
    21d6:	31 f4       	brne	.+12     	; 0x21e4 <print_double+0x11c>
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	9d 81       	ldd	r25, Y+5	; 0x05
    21dc:	91 95       	neg	r25
    21de:	81 95       	neg	r24
    21e0:	91 09       	sbc	r25, r1
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <print_double+0x120>
    21e4:	8c 81       	ldd	r24, Y+4	; 0x04
    21e6:	9d 81       	ldd	r25, Y+5	; 0x05
    21e8:	9d 83       	std	Y+5, r25	; 0x05
    21ea:	8c 83       	std	Y+4, r24	; 0x04

	print_int(cela, znaminko, nula, mista_pred_carkou);
    21ec:	2e 85       	ldd	r18, Y+14	; 0x0e
    21ee:	3f 85       	ldd	r19, Y+15	; 0x0f
    21f0:	8c 81       	ldd	r24, Y+4	; 0x04
    21f2:	9d 81       	ldd	r25, Y+5	; 0x05
    21f4:	4d 85       	ldd	r20, Y+13	; 0x0d
    21f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    21f8:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <print_int>
	lcd_put(',');
    21fc:	8c e2       	ldi	r24, 0x2C	; 44
    21fe:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	print_int(desetinna, '\0', '0', mista_za_carkou);
    2202:	28 89       	ldd	r18, Y+16	; 0x10
    2204:	39 89       	ldd	r19, Y+17	; 0x11
    2206:	8e 81       	ldd	r24, Y+6	; 0x06
    2208:	9f 81       	ldd	r25, Y+7	; 0x07
    220a:	40 e3       	ldi	r20, 0x30	; 48
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <print_int>

}
    2212:	00 00       	nop
    2214:	61 96       	adiw	r28, 0x11	; 17
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	ff 90       	pop	r15
    222a:	ef 90       	pop	r14
    222c:	08 95       	ret

0000222e <lcd_printf>:

// printf funkce
void lcd_printf(char str[], ...)
{
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	2f 97       	sbiw	r28, 0x0f	; 15
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61

	uint8_t i, j;
	char *str_p;
	int tmp_int;

	char znaminko = '\0';
    224a:	1b 82       	std	Y+3, r1	; 0x03
	char nula = '\0';
    224c:	1c 82       	std	Y+4, r1	; 0x04
	char desetina_carka = '\0';
    224e:	1d 82       	std	Y+5, r1	; 0x05
	int mista_pred_carkou = -1;
    2250:	8f ef       	ldi	r24, 0xFF	; 255
    2252:	9f ef       	ldi	r25, 0xFF	; 255
    2254:	9f 83       	std	Y+7, r25	; 0x07
    2256:	8e 83       	std	Y+6, r24	; 0x06
	int mista_za_carkou = -1;
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	9f ef       	ldi	r25, 0xFF	; 255
    225c:	99 87       	std	Y+9, r25	; 0x09
    225e:	88 87       	std	Y+8, r24	; 0x08



	 __gnuc_va_list ap;
	 //va_list ap;
	 va_start(ap, str);
    2260:	ce 01       	movw	r24, r28
    2262:	4a 96       	adiw	r24, 0x1a	; 26
    2264:	9f 87       	std	Y+15, r25	; 0x0f
    2266:	8e 87       	std	Y+14, r24	; 0x0e



	for (i=0; str[i] != '\0'; i++)
    2268:	19 82       	std	Y+1, r1	; 0x01
    226a:	5e c2       	rjmp	.+1212   	; 0x2728 <lcd_printf+0x4fa>
	{
		// nová stránka
		if (str[i] == '\f')
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	88 2f       	mov	r24, r24
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	28 8d       	ldd	r18, Y+24	; 0x18
    2274:	39 8d       	ldd	r19, Y+25	; 0x19
    2276:	82 0f       	add	r24, r18
    2278:	93 1f       	adc	r25, r19
    227a:	fc 01       	movw	r30, r24
    227c:	80 81       	ld	r24, Z
    227e:	8c 30       	cpi	r24, 0x0C	; 12
    2280:	51 f4       	brne	.+20     	; 0x2296 <lcd_printf+0x68>
		{
			line = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
			lcd_cmd(LCD_CMD_CLR);
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
			lcd_cmd(LCD_CMD_W_DDRAM);
    228e:	80 e8       	ldi	r24, 0x80	; 128
    2290:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
    2294:	46 c2       	rjmp	.+1164   	; 0x2722 <lcd_printf+0x4f4>
		}
		// nový řádek
		else if (str[i] == '\n')
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	28 8d       	ldd	r18, Y+24	; 0x18
    229e:	39 8d       	ldd	r19, Y+25	; 0x19
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	fc 01       	movw	r30, r24
    22a6:	80 81       	ld	r24, Z
    22a8:	8a 30       	cpi	r24, 0x0A	; 10
    22aa:	71 f5       	brne	.+92     	; 0x2308 <lcd_printf+0xda>
		{
			// jestli jsme na 1.
			if (line == 1)
    22ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	49 f4       	brne	.+18     	; 0x22c6 <lcd_printf+0x98>
			{
				line++;
    22b4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40); // go 2 line
    22be:	80 ec       	ldi	r24, 0xC0	; 192
    22c0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
    22c4:	2e c2       	rjmp	.+1116   	; 0x2722 <lcd_printf+0x4f4>
			}
			// jestli jsme na 2.
			else if (line == 2)
    22c6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	49 f4       	brne	.+18     	; 0x22e0 <lcd_printf+0xb2>
			{
				line++;
    22ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22d2:	8f 5f       	subi	r24, 0xFF	; 255
    22d4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x14); // go 3 line
    22d8:	84 e9       	ldi	r24, 0x94	; 148
    22da:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
    22de:	21 c2       	rjmp	.+1090   	; 0x2722 <lcd_printf+0x4f4>
			}
			// jestli jsme na 3.
			else if (line == 3)
    22e0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	49 f4       	brne	.+18     	; 0x22fa <lcd_printf+0xcc>
			{
				line++;
    22e8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22ec:	8f 5f       	subi	r24, 0xFF	; 255
    22ee:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x54); // go 4 line
    22f2:	84 ed       	ldi	r24, 0xD4	; 212
    22f4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
    22f8:	14 c2       	rjmp	.+1064   	; 0x2722 <lcd_printf+0x4f4>
			}
			// jestli jsme na 4.
			else
			{
				line = 1;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x00); // go 1 line
    2300:	80 e8       	ldi	r24, 0x80	; 128
    2302:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
    2306:	0d c2       	rjmp	.+1050   	; 0x2722 <lcd_printf+0x4f4>
			}
		}
		// návrat vozíku
		else if (str[i] == '\r')
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	88 2f       	mov	r24, r24
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	28 8d       	ldd	r18, Y+24	; 0x18
    2310:	39 8d       	ldd	r19, Y+25	; 0x19
    2312:	82 0f       	add	r24, r18
    2314:	93 1f       	adc	r25, r19
    2316:	fc 01       	movw	r30, r24
    2318:	80 81       	ld	r24, Z
    231a:	8d 30       	cpi	r24, 0x0D	; 13
    231c:	61 f4       	brne	.+24     	; 0x2336 <lcd_printf+0x108>
		{
			// pokud jsme na 2. řádku
			if (line)
    231e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2322:	88 23       	and	r24, r24
    2324:	21 f0       	breq	.+8      	; 0x232e <lcd_printf+0x100>
			{
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40);
    2326:	80 ec       	ldi	r24, 0xC0	; 192
    2328:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
    232c:	fa c1       	rjmp	.+1012   	; 0x2722 <lcd_printf+0x4f4>
			}
			// jestli jsme na 1.
			else
			{
				lcd_cmd(LCD_CMD_W_DDRAM);
    232e:	80 e8       	ldi	r24, 0x80	; 128
    2330:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <lcd_cmd>
    2334:	f6 c1       	rjmp	.+1004   	; 0x2722 <lcd_printf+0x4f4>
			}
		}
		// tabulátor
		else if (str[i] == '\t')
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	28 8d       	ldd	r18, Y+24	; 0x18
    233e:	39 8d       	ldd	r19, Y+25	; 0x19
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	fc 01       	movw	r30, r24
    2346:	80 81       	ld	r24, Z
    2348:	89 30       	cpi	r24, 0x09	; 9
    234a:	69 f4       	brne	.+26     	; 0x2366 <lcd_printf+0x138>
		{
			lcd_put(' ');
    234c:	80 e2       	ldi	r24, 0x20	; 32
    234e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
			lcd_put(' ');
    2352:	80 e2       	ldi	r24, 0x20	; 32
    2354:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
			lcd_put(' ');
    2358:	80 e2       	ldi	r24, 0x20	; 32
    235a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
			lcd_put(' ');
    235e:	80 e2       	ldi	r24, 0x20	; 32
    2360:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
    2364:	de c1       	rjmp	.+956    	; 0x2722 <lcd_printf+0x4f4>
		}
		// znak lomeno
		else if (str[i] == '\\')
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	88 2f       	mov	r24, r24
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	28 8d       	ldd	r18, Y+24	; 0x18
    236e:	39 8d       	ldd	r19, Y+25	; 0x19
    2370:	82 0f       	add	r24, r18
    2372:	93 1f       	adc	r25, r19
    2374:	fc 01       	movw	r30, r24
    2376:	80 81       	ld	r24, Z
    2378:	8c 35       	cpi	r24, 0x5C	; 92
    237a:	21 f4       	brne	.+8      	; 0x2384 <lcd_printf+0x156>
		{
			lcd_put(0xA4);
    237c:	84 ea       	ldi	r24, 0xA4	; 164
    237e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
    2382:	cf c1       	rjmp	.+926    	; 0x2722 <lcd_printf+0x4f4>
		}
		else if (str[i] == '%')
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	28 8d       	ldd	r18, Y+24	; 0x18
    238c:	39 8d       	ldd	r19, Y+25	; 0x19
    238e:	82 0f       	add	r24, r18
    2390:	93 1f       	adc	r25, r19
    2392:	fc 01       	movw	r30, r24
    2394:	80 81       	ld	r24, Z
    2396:	85 32       	cpi	r24, 0x25	; 37
    2398:	09 f0       	breq	.+2      	; 0x239c <lcd_printf+0x16e>
    239a:	b8 c1       	rjmp	.+880    	; 0x270c <lcd_printf+0x4de>
		{
			// pokud jde o znak %
			if (str[i+1] == '%')
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	28 8d       	ldd	r18, Y+24	; 0x18
    23a6:	39 8d       	ldd	r19, Y+25	; 0x19
    23a8:	82 0f       	add	r24, r18
    23aa:	93 1f       	adc	r25, r19
    23ac:	fc 01       	movw	r30, r24
    23ae:	80 81       	ld	r24, Z
    23b0:	85 32       	cpi	r24, 0x25	; 37
    23b2:	39 f4       	brne	.+14     	; 0x23c2 <lcd_printf+0x194>
			{
				i++;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	8f 5f       	subi	r24, 0xFF	; 255
    23b8:	89 83       	std	Y+1, r24	; 0x01
				lcd_put('%');
    23ba:	85 e2       	ldi	r24, 0x25	; 37
    23bc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
    23c0:	b0 c1       	rjmp	.+864    	; 0x2722 <lcd_printf+0x4f4>
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	8f 5f       	subi	r24, 0xFF	; 255
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	b5 c0       	rjmp	.+362    	; 0x2534 <lcd_printf+0x306>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
				{
					if (str[j] == '+' || str[j] == '-')
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	88 2f       	mov	r24, r24
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	28 8d       	ldd	r18, Y+24	; 0x18
    23d2:	39 8d       	ldd	r19, Y+25	; 0x19
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	fc 01       	movw	r30, r24
    23da:	80 81       	ld	r24, Z
    23dc:	8b 32       	cpi	r24, 0x2B	; 43
    23de:	59 f0       	breq	.+22     	; 0x23f6 <lcd_printf+0x1c8>
    23e0:	8a 81       	ldd	r24, Y+2	; 0x02
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	28 8d       	ldd	r18, Y+24	; 0x18
    23e8:	39 8d       	ldd	r19, Y+25	; 0x19
    23ea:	82 0f       	add	r24, r18
    23ec:	93 1f       	adc	r25, r19
    23ee:	fc 01       	movw	r30, r24
    23f0:	80 81       	ld	r24, Z
    23f2:	8d 32       	cpi	r24, 0x2D	; 45
    23f4:	19 f4       	brne	.+6      	; 0x23fc <lcd_printf+0x1ce>
					{
						znaminko = '+';
    23f6:	8b e2       	ldi	r24, 0x2B	; 43
    23f8:	8b 83       	std	Y+3, r24	; 0x03
    23fa:	99 c0       	rjmp	.+306    	; 0x252e <lcd_printf+0x300>
					}
					else if (str[j] == '.')
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	28 8d       	ldd	r18, Y+24	; 0x18
    2404:	39 8d       	ldd	r19, Y+25	; 0x19
    2406:	82 0f       	add	r24, r18
    2408:	93 1f       	adc	r25, r19
    240a:	fc 01       	movw	r30, r24
    240c:	80 81       	ld	r24, Z
    240e:	8e 32       	cpi	r24, 0x2E	; 46
    2410:	19 f4       	brne	.+6      	; 0x2418 <lcd_printf+0x1ea>
					{
						desetina_carka = ',';
    2412:	8c e2       	ldi	r24, 0x2C	; 44
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	8b c0       	rjmp	.+278    	; 0x252e <lcd_printf+0x300>
					}
					else if (str[j] == '0')
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	28 8d       	ldd	r18, Y+24	; 0x18
    2420:	39 8d       	ldd	r19, Y+25	; 0x19
    2422:	82 0f       	add	r24, r18
    2424:	93 1f       	adc	r25, r19
    2426:	fc 01       	movw	r30, r24
    2428:	80 81       	ld	r24, Z
    242a:	80 33       	cpi	r24, 0x30	; 48
    242c:	d1 f4       	brne	.+52     	; 0x2462 <lcd_printf+0x234>
					{
						if (desetina_carka == '\0')
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	88 23       	and	r24, r24
    2432:	a1 f4       	brne	.+40     	; 0x245c <lcd_printf+0x22e>
						{
							if (nula == '0')
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	80 33       	cpi	r24, 0x30	; 48
    2438:	71 f4       	brne	.+28     	; 0x2456 <lcd_printf+0x228>
								mista_pred_carkou *= 10;
    243a:	8e 81       	ldd	r24, Y+6	; 0x06
    243c:	9f 81       	ldd	r25, Y+7	; 0x07
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	9c 01       	movw	r18, r24
    2444:	22 0f       	add	r18, r18
    2446:	33 1f       	adc	r19, r19
    2448:	22 0f       	add	r18, r18
    244a:	33 1f       	adc	r19, r19
    244c:	82 0f       	add	r24, r18
    244e:	93 1f       	adc	r25, r19
    2450:	9f 83       	std	Y+7, r25	; 0x07
    2452:	8e 83       	std	Y+6, r24	; 0x06
    2454:	6c c0       	rjmp	.+216    	; 0x252e <lcd_printf+0x300>
							else
								nula = '0';
    2456:	80 e3       	ldi	r24, 0x30	; 48
    2458:	8c 83       	std	Y+4, r24	; 0x04
    245a:	69 c0       	rjmp	.+210    	; 0x252e <lcd_printf+0x300>
						}
						else
						{
							mista_za_carkou = 0;
    245c:	19 86       	std	Y+9, r1	; 0x09
    245e:	18 86       	std	Y+8, r1	; 0x08
    2460:	66 c0       	rjmp	.+204    	; 0x252e <lcd_printf+0x300>
						}

					}
					else if (str[j] >= '1' && str[j] <= '9')
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	28 8d       	ldd	r18, Y+24	; 0x18
    246a:	39 8d       	ldd	r19, Y+25	; 0x19
    246c:	82 0f       	add	r24, r18
    246e:	93 1f       	adc	r25, r19
    2470:	fc 01       	movw	r30, r24
    2472:	80 81       	ld	r24, Z
    2474:	81 33       	cpi	r24, 0x31	; 49
    2476:	08 f4       	brcc	.+2      	; 0x247a <lcd_printf+0x24c>
    2478:	5a c0       	rjmp	.+180    	; 0x252e <lcd_printf+0x300>
    247a:	8a 81       	ldd	r24, Y+2	; 0x02
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	28 8d       	ldd	r18, Y+24	; 0x18
    2482:	39 8d       	ldd	r19, Y+25	; 0x19
    2484:	82 0f       	add	r24, r18
    2486:	93 1f       	adc	r25, r19
    2488:	fc 01       	movw	r30, r24
    248a:	80 81       	ld	r24, Z
    248c:	8a 33       	cpi	r24, 0x3A	; 58
    248e:	08 f0       	brcs	.+2      	; 0x2492 <lcd_printf+0x264>
    2490:	4e c0       	rjmp	.+156    	; 0x252e <lcd_printf+0x300>
					{
						if (desetina_carka == ',')
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	8c 32       	cpi	r24, 0x2C	; 44
    2496:	31 f5       	brne	.+76     	; 0x24e4 <lcd_printf+0x2b6>
						{
							if (mista_za_carkou == -1)
    2498:	88 85       	ldd	r24, Y+8	; 0x08
    249a:	99 85       	ldd	r25, Y+9	; 0x09
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	11 f4       	brne	.+4      	; 0x24a4 <lcd_printf+0x276>
								mista_za_carkou = 0;
    24a0:	19 86       	std	Y+9, r1	; 0x09
    24a2:	18 86       	std	Y+8, r1	; 0x08

							mista_za_carkou *= 10;
    24a4:	88 85       	ldd	r24, Y+8	; 0x08
    24a6:	99 85       	ldd	r25, Y+9	; 0x09
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	9c 01       	movw	r18, r24
    24ae:	22 0f       	add	r18, r18
    24b0:	33 1f       	adc	r19, r19
    24b2:	22 0f       	add	r18, r18
    24b4:	33 1f       	adc	r19, r19
    24b6:	82 0f       	add	r24, r18
    24b8:	93 1f       	adc	r25, r19
    24ba:	99 87       	std	Y+9, r25	; 0x09
    24bc:	88 87       	std	Y+8, r24	; 0x08
							mista_za_carkou += str[j] - '0';
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	88 2f       	mov	r24, r24
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	28 8d       	ldd	r18, Y+24	; 0x18
    24c6:	39 8d       	ldd	r19, Y+25	; 0x19
    24c8:	82 0f       	add	r24, r18
    24ca:	93 1f       	adc	r25, r19
    24cc:	fc 01       	movw	r30, r24
    24ce:	80 81       	ld	r24, Z
    24d0:	88 2f       	mov	r24, r24
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	c0 97       	sbiw	r24, 0x30	; 48
    24d6:	28 85       	ldd	r18, Y+8	; 0x08
    24d8:	39 85       	ldd	r19, Y+9	; 0x09
    24da:	82 0f       	add	r24, r18
    24dc:	93 1f       	adc	r25, r19
    24de:	99 87       	std	Y+9, r25	; 0x09
    24e0:	88 87       	std	Y+8, r24	; 0x08
    24e2:	25 c0       	rjmp	.+74     	; 0x252e <lcd_printf+0x300>
						}
						else
						{
							if (mista_pred_carkou == -1)
    24e4:	8e 81       	ldd	r24, Y+6	; 0x06
    24e6:	9f 81       	ldd	r25, Y+7	; 0x07
    24e8:	01 96       	adiw	r24, 0x01	; 1
    24ea:	11 f4       	brne	.+4      	; 0x24f0 <lcd_printf+0x2c2>
								mista_pred_carkou = 0;
    24ec:	1f 82       	std	Y+7, r1	; 0x07
    24ee:	1e 82       	std	Y+6, r1	; 0x06

							mista_pred_carkou *= 10;
    24f0:	8e 81       	ldd	r24, Y+6	; 0x06
    24f2:	9f 81       	ldd	r25, Y+7	; 0x07
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	9c 01       	movw	r18, r24
    24fa:	22 0f       	add	r18, r18
    24fc:	33 1f       	adc	r19, r19
    24fe:	22 0f       	add	r18, r18
    2500:	33 1f       	adc	r19, r19
    2502:	82 0f       	add	r24, r18
    2504:	93 1f       	adc	r25, r19
    2506:	9f 83       	std	Y+7, r25	; 0x07
    2508:	8e 83       	std	Y+6, r24	; 0x06
							mista_pred_carkou += str[j] - '0';
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	28 8d       	ldd	r18, Y+24	; 0x18
    2512:	39 8d       	ldd	r19, Y+25	; 0x19
    2514:	82 0f       	add	r24, r18
    2516:	93 1f       	adc	r25, r19
    2518:	fc 01       	movw	r30, r24
    251a:	80 81       	ld	r24, Z
    251c:	88 2f       	mov	r24, r24
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	c0 97       	sbiw	r24, 0x30	; 48
    2522:	2e 81       	ldd	r18, Y+6	; 0x06
    2524:	3f 81       	ldd	r19, Y+7	; 0x07
    2526:	82 0f       	add	r24, r18
    2528:	93 1f       	adc	r25, r19
    252a:	9f 83       	std	Y+7, r25	; 0x07
    252c:	8e 83       	std	Y+6, r24	; 0x06
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	8f 5f       	subi	r24, 0xFF	; 255
    2532:	8a 83       	std	Y+2, r24	; 0x02
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	28 8d       	ldd	r18, Y+24	; 0x18
    253c:	39 8d       	ldd	r19, Y+25	; 0x19
    253e:	82 0f       	add	r24, r18
    2540:	93 1f       	adc	r25, r19
    2542:	fc 01       	movw	r30, r24
    2544:	80 81       	ld	r24, Z
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    2546:	83 36       	cpi	r24, 0x63	; 99
    2548:	69 f1       	breq	.+90     	; 0x25a4 <lcd_printf+0x376>
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    254a:	8a 81       	ldd	r24, Y+2	; 0x02
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	28 8d       	ldd	r18, Y+24	; 0x18
    2552:	39 8d       	ldd	r19, Y+25	; 0x19
    2554:	82 0f       	add	r24, r18
    2556:	93 1f       	adc	r25, r19
    2558:	fc 01       	movw	r30, r24
    255a:	80 81       	ld	r24, Z
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    255c:	88 34       	cpi	r24, 0x48	; 72
    255e:	11 f1       	breq	.+68     	; 0x25a4 <lcd_printf+0x376>
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	88 2f       	mov	r24, r24
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	28 8d       	ldd	r18, Y+24	; 0x18
    2568:	39 8d       	ldd	r19, Y+25	; 0x19
    256a:	82 0f       	add	r24, r18
    256c:	93 1f       	adc	r25, r19
    256e:	fc 01       	movw	r30, r24
    2570:	80 81       	ld	r24, Z
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2572:	84 36       	cpi	r24, 0x64	; 100
    2574:	b9 f0       	breq	.+46     	; 0x25a4 <lcd_printf+0x376>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	28 8d       	ldd	r18, Y+24	; 0x18
    257e:	39 8d       	ldd	r19, Y+25	; 0x19
    2580:	82 0f       	add	r24, r18
    2582:	93 1f       	adc	r25, r19
    2584:	fc 01       	movw	r30, r24
    2586:	80 81       	ld	r24, Z
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    2588:	86 36       	cpi	r24, 0x66	; 102
    258a:	61 f0       	breq	.+24     	; 0x25a4 <lcd_printf+0x376>
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
    258c:	8a 81       	ldd	r24, Y+2	; 0x02
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	28 8d       	ldd	r18, Y+24	; 0x18
    2594:	39 8d       	ldd	r19, Y+25	; 0x19
    2596:	82 0f       	add	r24, r18
    2598:	93 1f       	adc	r25, r19
    259a:	fc 01       	movw	r30, r24
    259c:	80 81       	ld	r24, Z
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    259e:	83 37       	cpi	r24, 0x73	; 115
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <lcd_printf+0x376>
    25a2:	13 cf       	rjmp	.-474    	; 0x23ca <lcd_printf+0x19c>
						}
					}
				}

				// posuneme index procházení pole
				i = j;
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01

				// podle typu s nimi naložíme
				if (str[j] == 'c')
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	28 8d       	ldd	r18, Y+24	; 0x18
    25b0:	39 8d       	ldd	r19, Y+25	; 0x19
    25b2:	82 0f       	add	r24, r18
    25b4:	93 1f       	adc	r25, r19
    25b6:	fc 01       	movw	r30, r24
    25b8:	80 81       	ld	r24, Z
    25ba:	83 36       	cpi	r24, 0x63	; 99
    25bc:	69 f4       	brne	.+26     	; 0x25d8 <lcd_printf+0x3aa>
				{
					lcd_put(va_arg(ap, int));
    25be:	8e 85       	ldd	r24, Y+14	; 0x0e
    25c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25c2:	9c 01       	movw	r18, r24
    25c4:	2e 5f       	subi	r18, 0xFE	; 254
    25c6:	3f 4f       	sbci	r19, 0xFF	; 255
    25c8:	3f 87       	std	Y+15, r19	; 0x0f
    25ca:	2e 87       	std	Y+14, r18	; 0x0e
    25cc:	fc 01       	movw	r30, r24
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
    25d6:	8e c0       	rjmp	.+284    	; 0x26f4 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'H')
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	88 2f       	mov	r24, r24
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	28 8d       	ldd	r18, Y+24	; 0x18
    25e0:	39 8d       	ldd	r19, Y+25	; 0x19
    25e2:	82 0f       	add	r24, r18
    25e4:	93 1f       	adc	r25, r19
    25e6:	fc 01       	movw	r30, r24
    25e8:	80 81       	ld	r24, Z
    25ea:	88 34       	cpi	r24, 0x48	; 72
    25ec:	69 f4       	brne	.+26     	; 0x2608 <lcd_printf+0x3da>
				{
					print_hex(va_arg(ap, uint16_t));
    25ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f2:	9c 01       	movw	r18, r24
    25f4:	2e 5f       	subi	r18, 0xFE	; 254
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	3f 87       	std	Y+15, r19	; 0x0f
    25fa:	2e 87       	std	Y+14, r18	; 0x0e
    25fc:	fc 01       	movw	r30, r24
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <print_hex>
    2606:	76 c0       	rjmp	.+236    	; 0x26f4 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'd')
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	28 8d       	ldd	r18, Y+24	; 0x18
    2610:	39 8d       	ldd	r19, Y+25	; 0x19
    2612:	82 0f       	add	r24, r18
    2614:	93 1f       	adc	r25, r19
    2616:	fc 01       	movw	r30, r24
    2618:	80 81       	ld	r24, Z
    261a:	84 36       	cpi	r24, 0x64	; 100
    261c:	a9 f4       	brne	.+42     	; 0x2648 <lcd_printf+0x41a>
				{
					tmp_int = va_arg(ap, int);
    261e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2620:	9f 85       	ldd	r25, Y+15	; 0x0f
    2622:	9c 01       	movw	r18, r24
    2624:	2e 5f       	subi	r18, 0xFE	; 254
    2626:	3f 4f       	sbci	r19, 0xFF	; 255
    2628:	3f 87       	std	Y+15, r19	; 0x0f
    262a:	2e 87       	std	Y+14, r18	; 0x0e
    262c:	fc 01       	movw	r30, r24
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	9b 87       	std	Y+11, r25	; 0x0b
    2634:	8a 87       	std	Y+10, r24	; 0x0a
					print_int(tmp_int, znaminko, nula, mista_pred_carkou);
    2636:	2e 81       	ldd	r18, Y+6	; 0x06
    2638:	3f 81       	ldd	r19, Y+7	; 0x07
    263a:	8a 85       	ldd	r24, Y+10	; 0x0a
    263c:	9b 85       	ldd	r25, Y+11	; 0x0b
    263e:	4c 81       	ldd	r20, Y+4	; 0x04
    2640:	6b 81       	ldd	r22, Y+3	; 0x03
    2642:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <print_int>
    2646:	56 c0       	rjmp	.+172    	; 0x26f4 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'f')
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	28 8d       	ldd	r18, Y+24	; 0x18
    2650:	39 8d       	ldd	r19, Y+25	; 0x19
    2652:	82 0f       	add	r24, r18
    2654:	93 1f       	adc	r25, r19
    2656:	fc 01       	movw	r30, r24
    2658:	80 81       	ld	r24, Z
    265a:	86 36       	cpi	r24, 0x66	; 102
    265c:	c9 f4       	brne	.+50     	; 0x2690 <lcd_printf+0x462>
				{
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
    265e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2660:	9f 85       	ldd	r25, Y+15	; 0x0f
    2662:	9c 01       	movw	r18, r24
    2664:	2c 5f       	subi	r18, 0xFC	; 252
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	3f 87       	std	Y+15, r19	; 0x0f
    266a:	2e 87       	std	Y+14, r18	; 0x0e
    266c:	fc 01       	movw	r30, r24
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	a2 81       	ldd	r26, Z+2	; 0x02
    2674:	b3 81       	ldd	r27, Z+3	; 0x03
    2676:	48 85       	ldd	r20, Y+8	; 0x08
    2678:	59 85       	ldd	r21, Y+9	; 0x09
    267a:	2e 81       	ldd	r18, Y+6	; 0x06
    267c:	3f 81       	ldd	r19, Y+7	; 0x07
    267e:	7a 01       	movw	r14, r20
    2680:	89 01       	movw	r16, r18
    2682:	2c 81       	ldd	r18, Y+4	; 0x04
    2684:	4b 81       	ldd	r20, Y+3	; 0x03
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <print_double>
    268e:	32 c0       	rjmp	.+100    	; 0x26f4 <lcd_printf+0x4c6>
				}
				else if (str[j] == 's')
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	28 8d       	ldd	r18, Y+24	; 0x18
    2698:	39 8d       	ldd	r19, Y+25	; 0x19
    269a:	82 0f       	add	r24, r18
    269c:	93 1f       	adc	r25, r19
    269e:	fc 01       	movw	r30, r24
    26a0:	80 81       	ld	r24, Z
    26a2:	83 37       	cpi	r24, 0x73	; 115
    26a4:	39 f5       	brne	.+78     	; 0x26f4 <lcd_printf+0x4c6>
				{
					str_p = va_arg(ap, char *);
    26a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26aa:	9c 01       	movw	r18, r24
    26ac:	2e 5f       	subi	r18, 0xFE	; 254
    26ae:	3f 4f       	sbci	r19, 0xFF	; 255
    26b0:	3f 87       	std	Y+15, r19	; 0x0f
    26b2:	2e 87       	std	Y+14, r18	; 0x0e
    26b4:	fc 01       	movw	r30, r24
    26b6:	80 81       	ld	r24, Z
    26b8:	91 81       	ldd	r25, Z+1	; 0x01
    26ba:	9d 87       	std	Y+13, r25	; 0x0d
    26bc:	8c 87       	std	Y+12, r24	; 0x0c
					for (j=0; *(str_p + j) != '\0'; j++)
    26be:	1a 82       	std	Y+2, r1	; 0x02
    26c0:	0e c0       	rjmp	.+28     	; 0x26de <lcd_printf+0x4b0>
						lcd_put(*(str_p + j));
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    26cc:	82 0f       	add	r24, r18
    26ce:	93 1f       	adc	r25, r19
    26d0:	fc 01       	movw	r30, r24
    26d2:	80 81       	ld	r24, Z
    26d4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
				}
				else if (str[j] == 's')
				{
					str_p = va_arg(ap, char *);
					for (j=0; *(str_p + j) != '\0'; j++)
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	8f 5f       	subi	r24, 0xFF	; 255
    26dc:	8a 83       	std	Y+2, r24	; 0x02
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    26e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    26e8:	82 0f       	add	r24, r18
    26ea:	93 1f       	adc	r25, r19
    26ec:	fc 01       	movw	r30, r24
    26ee:	80 81       	ld	r24, Z
    26f0:	88 23       	and	r24, r24
    26f2:	39 f7       	brne	.-50     	; 0x26c2 <lcd_printf+0x494>
						lcd_put(*(str_p + j));
				}

				// vynulovní formátovacích proměnných
				znaminko = '\0';
    26f4:	1b 82       	std	Y+3, r1	; 0x03
				nula = '\0';
    26f6:	1c 82       	std	Y+4, r1	; 0x04
				desetina_carka = '\0';
    26f8:	1d 82       	std	Y+5, r1	; 0x05
				mista_pred_carkou = -1;
    26fa:	8f ef       	ldi	r24, 0xFF	; 255
    26fc:	9f ef       	ldi	r25, 0xFF	; 255
    26fe:	9f 83       	std	Y+7, r25	; 0x07
    2700:	8e 83       	std	Y+6, r24	; 0x06
				mista_za_carkou = -1;
    2702:	8f ef       	ldi	r24, 0xFF	; 255
    2704:	9f ef       	ldi	r25, 0xFF	; 255
    2706:	99 87       	std	Y+9, r25	; 0x09
    2708:	88 87       	std	Y+8, r24	; 0x08
    270a:	0b c0       	rjmp	.+22     	; 0x2722 <lcd_printf+0x4f4>
			}
		}
		else
		{
			lcd_put(str[i]);
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	28 8d       	ldd	r18, Y+24	; 0x18
    2714:	39 8d       	ldd	r19, Y+25	; 0x19
    2716:	82 0f       	add	r24, r18
    2718:	93 1f       	adc	r25, r19
    271a:	fc 01       	movw	r30, r24
    271c:	80 81       	ld	r24, Z
    271e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <lcd_put>
	 //va_list ap;
	 va_start(ap, str);



	for (i=0; str[i] != '\0'; i++)
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	88 2f       	mov	r24, r24
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	28 8d       	ldd	r18, Y+24	; 0x18
    2730:	39 8d       	ldd	r19, Y+25	; 0x19
    2732:	82 0f       	add	r24, r18
    2734:	93 1f       	adc	r25, r19
    2736:	fc 01       	movw	r30, r24
    2738:	80 81       	ld	r24, Z
    273a:	88 23       	and	r24, r24
    273c:	09 f0       	breq	.+2      	; 0x2740 <lcd_printf+0x512>
    273e:	96 cd       	rjmp	.-1236   	; 0x226c <lcd_printf+0x3e>
		{
			lcd_put(str[i]);
		}
	}
	va_end(ap);
}
    2740:	00 00       	nop
    2742:	2f 96       	adiw	r28, 0x0f	; 15
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	08 95       	ret

0000275c <ntc_init>:
#define R_REF	10e3
// ========================================================

// NTC initialization
void ntc_init(void)
{
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0) | 5;							// referention AVCC, measure on channel ADC5
    2764:	8c e7       	ldi	r24, 0x7C	; 124
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	25 e4       	ldi	r18, 0x45	; 69
    276a:	fc 01       	movw	r30, r24
    276c:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);	// ADEN - enable ADC, ACD clk = F_CPU/64
    276e:	8a e7       	ldi	r24, 0x7A	; 122
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	26 e8       	ldi	r18, 0x86	; 134
    2774:	fc 01       	movw	r30, r24
    2776:	20 83       	st	Z, r18
}
    2778:	00 00       	nop
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	08 95       	ret

00002780 <ntc_measure>:

// NCT measure
int16_t ntc_measure(void)
{
    2780:	cf 92       	push	r12
    2782:	df 92       	push	r13
    2784:	ef 92       	push	r14
    2786:	ff 92       	push	r15
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	2e 97       	sbiw	r28, 0x0e	; 14
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
	int16_t adc, ntc_res, temp;
	double volt, tmp_log;
	
	ADCSRA |= (1<<ADSC);        // start conversion
    279c:	8a e7       	ldi	r24, 0x7A	; 122
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	2a e7       	ldi	r18, 0x7A	; 122
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	f9 01       	movw	r30, r18
    27a6:	20 81       	ld	r18, Z
    27a8:	20 64       	ori	r18, 0x40	; 64
    27aa:	fc 01       	movw	r30, r24
    27ac:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));  // wait to end conversion
    27ae:	00 00       	nop
    27b0:	8a e7       	ldi	r24, 0x7A	; 122
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	fc 01       	movw	r30, r24
    27b6:	80 81       	ld	r24, Z
    27b8:	88 2f       	mov	r24, r24
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	80 74       	andi	r24, 0x40	; 64
    27be:	99 27       	eor	r25, r25
    27c0:	89 2b       	or	r24, r25
    27c2:	b1 f7       	brne	.-20     	; 0x27b0 <ntc_measure+0x30>
	adc=ADC;					// value measurement
    27c4:	88 e7       	ldi	r24, 0x78	; 120
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	fc 01       	movw	r30, r24
    27ca:	80 81       	ld	r24, Z
    27cc:	91 81       	ldd	r25, Z+1	; 0x01
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
	
	// convert to voltage
	volt = (V_REF/ADC_MAX) * ((double)adc);
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	09 2e       	mov	r0, r25
    27d8:	00 0c       	add	r0, r0
    27da:	aa 0b       	sbc	r26, r26
    27dc:	bb 0b       	sbc	r27, r27
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__floatsisf>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	2a e0       	ldi	r18, 0x0A	; 10
    27ec:	38 e2       	ldi	r19, 0x28	; 40
    27ee:	40 ea       	ldi	r20, 0xA0	; 160
    27f0:	5b e3       	ldi	r21, 0x3B	; 59
    27f2:	bc 01       	movw	r22, r24
    27f4:	cd 01       	movw	r24, r26
    27f6:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	8b 83       	std	Y+3, r24	; 0x03
    2800:	9c 83       	std	Y+4, r25	; 0x04
    2802:	ad 83       	std	Y+5, r26	; 0x05
    2804:	be 83       	std	Y+6, r27	; 0x06
	ntc_res = (-(volt * R_DIV) / V_REF) / ((volt/V_REF) - 1);
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e4       	ldi	r19, 0x40	; 64
    280a:	4c e1       	ldi	r20, 0x1C	; 28
    280c:	56 e4       	ldi	r21, 0x46	; 70
    280e:	6b 81       	ldd	r22, Y+3	; 0x03
    2810:	7c 81       	ldd	r23, Y+4	; 0x04
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	b0 58       	subi	r27, 0x80	; 128
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 ea       	ldi	r20, 0xA0	; 160
    2826:	50 e4       	ldi	r21, 0x40	; 64
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	6c 01       	movw	r12, r24
    2836:	7d 01       	movw	r14, r26
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 ea       	ldi	r20, 0xA0	; 160
    283e:	50 e4       	ldi	r21, 0x40	; 64
    2840:	6b 81       	ldd	r22, Y+3	; 0x03
    2842:	7c 81       	ldd	r23, Y+4	; 0x04
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
    2846:	9e 81       	ldd	r25, Y+6	; 0x06
    2848:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e8       	ldi	r20, 0x80	; 128
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	bc 01       	movw	r22, r24
    285a:	cd 01       	movw	r24, r26
    285c:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__subsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	9c 01       	movw	r18, r24
    2866:	ad 01       	movw	r20, r26
    2868:	c7 01       	movw	r24, r14
    286a:	b6 01       	movw	r22, r12
    286c:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 1a 18 	call	0x3034	; 0x3034 <__fixsfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	98 87       	std	Y+8, r25	; 0x08
    2882:	8f 83       	std	Y+7, r24	; 0x07
	
	tmp_log = log(ntc_res/R_REF);
    2884:	8f 81       	ldd	r24, Y+7	; 0x07
    2886:	98 85       	ldd	r25, Y+8	; 0x08
    2888:	09 2e       	mov	r0, r25
    288a:	00 0c       	add	r0, r0
    288c:	aa 0b       	sbc	r26, r26
    288e:	bb 0b       	sbc	r27, r27
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__floatsisf>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e4       	ldi	r19, 0x40	; 64
    28a0:	4c e1       	ldi	r20, 0x1C	; 28
    28a2:	56 e4       	ldi	r21, 0x46	; 70
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	bc 01       	movw	r22, r24
    28b2:	cd 01       	movw	r24, r26
    28b4:	0e 94 0f 19 	call	0x321e	; 0x321e <log>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	89 87       	std	Y+9, r24	; 0x09
    28be:	9a 87       	std	Y+10, r25	; 0x0a
    28c0:	ab 87       	std	Y+11, r26	; 0x0b
    28c2:	bc 87       	std	Y+12, r27	; 0x0c
	temp = 1.0 / ( A1 + B1*tmp_log + C1*tmp_log*tmp_log + D1*tmp_log*tmp_log*tmp_log ) - 273.15;
    28c4:	21 ef       	ldi	r18, 0xF1	; 241
    28c6:	3b eb       	ldi	r19, 0xBB	; 187
    28c8:	46 e8       	ldi	r20, 0x86	; 134
    28ca:	59 e3       	ldi	r21, 0x39	; 57
    28cc:	69 85       	ldd	r22, Y+9	; 0x09
    28ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    28d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    28d4:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	2d e0       	ldi	r18, 0x0D	; 13
    28de:	3f ec       	ldi	r19, 0xCF	; 207
    28e0:	4b e5       	ldi	r20, 0x5B	; 91
    28e2:	5b e3       	ldi	r21, 0x3B	; 59
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__addsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	6c 01       	movw	r12, r24
    28f2:	7d 01       	movw	r14, r26
    28f4:	22 e8       	ldi	r18, 0x82	; 130
    28f6:	35 ed       	ldi	r19, 0xD5	; 213
    28f8:	4f e2       	ldi	r20, 0x2F	; 47
    28fa:	56 e3       	ldi	r21, 0x36	; 54
    28fc:	69 85       	ldd	r22, Y+9	; 0x09
    28fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    2900:	8b 85       	ldd	r24, Y+11	; 0x0b
    2902:	9c 85       	ldd	r25, Y+12	; 0x0c
    2904:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	29 85       	ldd	r18, Y+9	; 0x09
    290e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2910:	4b 85       	ldd	r20, Y+11	; 0x0b
    2912:	5c 85       	ldd	r21, Y+12	; 0x0c
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	9c 01       	movw	r18, r24
    2922:	ad 01       	movw	r20, r26
    2924:	c7 01       	movw	r24, r14
    2926:	b6 01       	movw	r22, r12
    2928:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__addsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	6c 01       	movw	r12, r24
    2932:	7d 01       	movw	r14, r26
    2934:	2a e6       	ldi	r18, 0x6A	; 106
    2936:	33 e1       	ldi	r19, 0x13	; 19
    2938:	49 e8       	ldi	r20, 0x89	; 137
    293a:	53 e3       	ldi	r21, 0x33	; 51
    293c:	69 85       	ldd	r22, Y+9	; 0x09
    293e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2940:	8b 85       	ldd	r24, Y+11	; 0x0b
    2942:	9c 85       	ldd	r25, Y+12	; 0x0c
    2944:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	29 85       	ldd	r18, Y+9	; 0x09
    294e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2950:	4b 85       	ldd	r20, Y+11	; 0x0b
    2952:	5c 85       	ldd	r21, Y+12	; 0x0c
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	29 85       	ldd	r18, Y+9	; 0x09
    2962:	3a 85       	ldd	r19, Y+10	; 0x0a
    2964:	4b 85       	ldd	r20, Y+11	; 0x0b
    2966:	5c 85       	ldd	r21, Y+12	; 0x0c
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9c 01       	movw	r18, r24
    2976:	ad 01       	movw	r20, r26
    2978:	c7 01       	movw	r24, r14
    297a:	b6 01       	movw	r22, r12
    297c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__addsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9c 01       	movw	r18, r24
    2986:	ad 01       	movw	r20, r26
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	80 e8       	ldi	r24, 0x80	; 128
    298e:	9f e3       	ldi	r25, 0x3F	; 63
    2990:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	23 e3       	ldi	r18, 0x33	; 51
    299a:	33 e9       	ldi	r19, 0x93	; 147
    299c:	48 e8       	ldi	r20, 0x88	; 136
    299e:	53 e4       	ldi	r21, 0x43	; 67
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <__subsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 1a 18 	call	0x3034	; 0x3034 <__fixsfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9e 87       	std	Y+14, r25	; 0x0e
    29ba:	8d 87       	std	Y+13, r24	; 0x0d
	
	return temp;
    29bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29be:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    29c0:	2e 96       	adiw	r28, 0x0e	; 14
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	ff 90       	pop	r15
    29d2:	ef 90       	pop	r14
    29d4:	df 90       	pop	r13
    29d6:	cf 90       	pop	r12
    29d8:	08 95       	ret

000029da <motor_init>:
#include "wyk_step_stick.h"

void motor_init(void)
{
    29da:	cf 93       	push	r28
    29dc:	df 93       	push	r29
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ENA_DDR |= MOTOR_ENA_PIN;
    29e2:	8a e2       	ldi	r24, 0x2A	; 42
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	2a e2       	ldi	r18, 0x2A	; 42
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	f9 01       	movw	r30, r18
    29ec:	20 81       	ld	r18, Z
    29ee:	20 68       	ori	r18, 0x80	; 128
    29f0:	fc 01       	movw	r30, r24
    29f2:	20 83       	st	Z, r18
	MOTOR_DIR_DDR |= MOTOR_DIR_PIN;
    29f4:	8a e2       	ldi	r24, 0x2A	; 42
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	2a e2       	ldi	r18, 0x2A	; 42
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	f9 01       	movw	r30, r18
    29fe:	20 81       	ld	r18, Z
    2a00:	20 62       	ori	r18, 0x20	; 32
    2a02:	fc 01       	movw	r30, r24
    2a04:	20 83       	st	Z, r18
	MOTOR_STEP_DDR |= MOTOR_STEP_PIN;
    2a06:	84 e2       	ldi	r24, 0x24	; 36
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	24 e2       	ldi	r18, 0x24	; 36
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	f9 01       	movw	r30, r18
    2a10:	20 81       	ld	r18, Z
    2a12:	28 60       	ori	r18, 0x08	; 8
    2a14:	fc 01       	movw	r30, r24
    2a16:	20 83       	st	Z, r18

	MOTOR_DRIVER_OFF;
    2a18:	8b e2       	ldi	r24, 0x2B	; 43
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	2b e2       	ldi	r18, 0x2B	; 43
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	f9 01       	movw	r30, r18
    2a22:	20 81       	ld	r18, Z
    2a24:	20 68       	ori	r18, 0x80	; 128
    2a26:	fc 01       	movw	r30, r24
    2a28:	20 83       	st	Z, r18
			MOTOR_MS1_1;
			MOTOR_MS2_1;
			MOTOR_MS3_0;
			break;
		default:
			MOTOR_MS1_1;
    2a2a:	85 e2       	ldi	r24, 0x25	; 37
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	25 e2       	ldi	r18, 0x25	; 37
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	f9 01       	movw	r30, r18
    2a34:	20 81       	ld	r18, Z
    2a36:	21 60       	ori	r18, 0x01	; 1
    2a38:	fc 01       	movw	r30, r24
    2a3a:	20 83       	st	Z, r18
			MOTOR_MS2_1;
    2a3c:	85 e2       	ldi	r24, 0x25	; 37
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	25 e2       	ldi	r18, 0x25	; 37
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	f9 01       	movw	r30, r18
    2a46:	20 81       	ld	r18, Z
    2a48:	22 60       	ori	r18, 0x02	; 2
    2a4a:	fc 01       	movw	r30, r24
    2a4c:	20 83       	st	Z, r18
			MOTOR_MS3_1;
    2a4e:	85 e2       	ldi	r24, 0x25	; 37
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	25 e2       	ldi	r18, 0x25	; 37
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	f9 01       	movw	r30, r18
    2a58:	20 81       	ld	r18, Z
    2a5a:	24 60       	ori	r18, 0x04	; 4
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	20 83       	st	Z, r18
	}

	

	TCCR2A = (1<<COM2A0) | (1<<WGM21);				// toggle OCR2A CTC mode
    2a60:	80 eb       	ldi	r24, 0xB0	; 176
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	22 e4       	ldi	r18, 0x42	; 66
    2a66:	fc 01       	movw	r30, r24
    2a68:	20 83       	st	Z, r18
	TCCR2B = 0;										// clock off
    2a6a:	81 eb       	ldi	r24, 0xB1	; 177
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	fc 01       	movw	r30, r24
    2a70:	10 82       	st	Z, r1
	OCR2A = 0;
    2a72:	83 eb       	ldi	r24, 0xB3	; 179
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	fc 01       	movw	r30, r24
    2a78:	10 82       	st	Z, r1
	TCNT2 = 0;
    2a7a:	82 eb       	ldi	r24, 0xB2	; 178
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	fc 01       	movw	r30, r24
    2a80:	10 82       	st	Z, r1
	MOTOR_DIR0;
    2a82:	8b e2       	ldi	r24, 0x2B	; 43
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	2b e2       	ldi	r18, 0x2B	; 43
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	f9 01       	movw	r30, r18
    2a8c:	20 81       	ld	r18, Z
    2a8e:	2f 7d       	andi	r18, 0xDF	; 223
    2a90:	fc 01       	movw	r30, r24
    2a92:	20 83       	st	Z, r18
}
    2a94:	00 00       	nop
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	08 95       	ret

00002a9c <motor_set_rpm>:

void motor_set_rpm(uint16_t rpm)					// rote per minute
{
    2a9c:	8f 92       	push	r8
    2a9e:	9f 92       	push	r9
    2aa0:	af 92       	push	r10
    2aa2:	bf 92       	push	r11
    2aa4:	cf 92       	push	r12
    2aa6:	df 92       	push	r13
    2aa8:	ef 92       	push	r14
    2aaa:	ff 92       	push	r15
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	6a 97       	sbiw	r28, 0x1a	; 26
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac2:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t buf;
	const uint32_t freq = F_CPU*60;
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	98 e3       	ldi	r25, 0x38	; 56
    2ac8:	ac e9       	ldi	r26, 0x9C	; 156
    2aca:	bc e1       	ldi	r27, 0x1C	; 28
    2acc:	8a 83       	std	Y+2, r24	; 0x02
    2ace:	9b 83       	std	Y+3, r25	; 0x03
    2ad0:	ac 83       	std	Y+4, r26	; 0x04
    2ad2:	bd 83       	std	Y+5, r27	; 0x05
	const uint16_t div[] = {1, 8, 32, 64, 128, 256, 1024};
    2ad4:	8e e0       	ldi	r24, 0x0E	; 14
    2ad6:	e5 eb       	ldi	r30, 0xB5	; 181
    2ad8:	f2 e0       	ldi	r31, 0x02	; 2
    2ada:	de 01       	movw	r26, r28
    2adc:	1b 96       	adiw	r26, 0x0b	; 11
    2ade:	01 90       	ld	r0, Z+
    2ae0:	0d 92       	st	X+, r0
    2ae2:	8a 95       	dec	r24
    2ae4:	e1 f7       	brne	.-8      	; 0x2ade <motor_set_rpm+0x42>
	const uint8_t div_len = 7;
    2ae6:	87 e0       	ldi	r24, 0x07	; 7
    2ae8:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t i;

	if (rpm)
    2aea:	89 8d       	ldd	r24, Y+25	; 0x19
    2aec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2aee:	89 2b       	or	r24, r25
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <motor_set_rpm+0x58>
    2af2:	94 c0       	rjmp	.+296    	; 0x2c1c <motor_set_rpm+0x180>
	{
		for (i=0; i<div_len; i++)
    2af4:	19 82       	std	Y+1, r1	; 0x01
    2af6:	8c c0       	rjmp	.+280    	; 0x2c10 <motor_set_rpm+0x174>
		{
			buf = freq / ( ((uint32_t)rpm) * MOTOR_PERIOD * 2 * div[i] );
    2af8:	6a 81       	ldd	r22, Y+2	; 0x02
    2afa:	7b 81       	ldd	r23, Y+3	; 0x03
    2afc:	8c 81       	ldd	r24, Y+4	; 0x04
    2afe:	9d 81       	ldd	r25, Y+5	; 0x05
    2b00:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__floatunsisf>
    2b04:	6b 01       	movw	r12, r22
    2b06:	7c 01       	movw	r14, r24
    2b08:	89 8d       	ldd	r24, Y+25	; 0x19
    2b0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b0c:	9c 01       	movw	r18, r24
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	88 e6       	ldi	r24, 0x68	; 104
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	dc 01       	movw	r26, r24
    2b18:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__muluhisi3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__floatunsisf>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	26 e6       	ldi	r18, 0x66	; 102
    2b2e:	36 e6       	ldi	r19, 0x66	; 102
    2b30:	46 ee       	ldi	r20, 0xE6	; 230
    2b32:	5d e3       	ldi	r21, 0x3D	; 61
    2b34:	bc 01       	movw	r22, r24
    2b36:	cd 01       	movw	r24, r26
    2b38:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	9c 01       	movw	r18, r24
    2b42:	ad 01       	movw	r20, r26
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__addsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	4c 01       	movw	r8, r24
    2b52:	5d 01       	movw	r10, r26
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	9e 01       	movw	r18, r28
    2b60:	2f 5f       	subi	r18, 0xFF	; 255
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	82 0f       	add	r24, r18
    2b66:	93 1f       	adc	r25, r19
    2b68:	0a 96       	adiw	r24, 0x0a	; 10
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	80 81       	ld	r24, Z
    2b6e:	91 81       	ldd	r25, Z+1	; 0x01
    2b70:	cc 01       	movw	r24, r24
    2b72:	a0 e0       	ldi	r26, 0x00	; 0
    2b74:	b0 e0       	ldi	r27, 0x00	; 0
    2b76:	bc 01       	movw	r22, r24
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__floatunsisf>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	9c 01       	movw	r18, r24
    2b84:	ad 01       	movw	r20, r26
    2b86:	c5 01       	movw	r24, r10
    2b88:	b4 01       	movw	r22, r8
    2b8a:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9c 01       	movw	r18, r24
    2b94:	ad 01       	movw	r20, r26
    2b96:	c7 01       	movw	r24, r14
    2b98:	b6 01       	movw	r22, r12
    2b9a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__divsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	8f 83       	std	Y+7, r24	; 0x07
    2bb0:	98 87       	std	Y+8, r25	; 0x08
    2bb2:	a9 87       	std	Y+9, r26	; 0x09
    2bb4:	ba 87       	std	Y+10, r27	; 0x0a
			if (buf < 0xFF && buf > 0)
    2bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb8:	98 85       	ldd	r25, Y+8	; 0x08
    2bba:	a9 85       	ldd	r26, Y+9	; 0x09
    2bbc:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc0:	91 05       	cpc	r25, r1
    2bc2:	a1 05       	cpc	r26, r1
    2bc4:	b1 05       	cpc	r27, r1
    2bc6:	08 f5       	brcc	.+66     	; 0x2c0a <motor_set_rpm+0x16e>
    2bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bca:	98 85       	ldd	r25, Y+8	; 0x08
    2bcc:	a9 85       	ldd	r26, Y+9	; 0x09
    2bce:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bd0:	89 2b       	or	r24, r25
    2bd2:	8a 2b       	or	r24, r26
    2bd4:	8b 2b       	or	r24, r27
    2bd6:	c9 f0       	breq	.+50     	; 0x2c0a <motor_set_rpm+0x16e>
			{
				TCCR2B = i+1;						// clock/div[i]
    2bd8:	81 eb       	ldi	r24, 0xB1	; 177
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	29 81       	ldd	r18, Y+1	; 0x01
    2bde:	2f 5f       	subi	r18, 0xFF	; 255
    2be0:	fc 01       	movw	r30, r24
    2be2:	20 83       	st	Z, r18
				OCR2A = (uint8_t )buf;
    2be4:	83 eb       	ldi	r24, 0xB3	; 179
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	2f 81       	ldd	r18, Y+7	; 0x07
    2bea:	fc 01       	movw	r30, r24
    2bec:	20 83       	st	Z, r18
				TCNT2 = 0;
    2bee:	82 eb       	ldi	r24, 0xB2	; 178
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	10 82       	st	Z, r1
				MOTOR_DRIVER_ON;
    2bf6:	8b e2       	ldi	r24, 0x2B	; 43
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	2b e2       	ldi	r18, 0x2B	; 43
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	f9 01       	movw	r30, r18
    2c00:	20 81       	ld	r18, Z
    2c02:	2f 77       	andi	r18, 0x7F	; 127
    2c04:	fc 01       	movw	r30, r24
    2c06:	20 83       	st	Z, r18
				break;
    2c08:	16 c0       	rjmp	.+44     	; 0x2c36 <motor_set_rpm+0x19a>

	uint8_t i;

	if (rpm)
	{
		for (i=0; i<div_len; i++)
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	8f 5f       	subi	r24, 0xFF	; 255
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	99 81       	ldd	r25, Y+1	; 0x01
    2c12:	8e 81       	ldd	r24, Y+6	; 0x06
    2c14:	98 17       	cp	r25, r24
    2c16:	08 f4       	brcc	.+2      	; 0x2c1a <motor_set_rpm+0x17e>
    2c18:	6f cf       	rjmp	.-290    	; 0x2af8 <motor_set_rpm+0x5c>
    2c1a:	0d c0       	rjmp	.+26     	; 0x2c36 <motor_set_rpm+0x19a>
			}
		}
	}
	else
	{
		TCCR2B = 0x00;
    2c1c:	81 eb       	ldi	r24, 0xB1	; 177
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	fc 01       	movw	r30, r24
    2c22:	10 82       	st	Z, r1
		MOTOR_DRIVER_OFF;
    2c24:	8b e2       	ldi	r24, 0x2B	; 43
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	2b e2       	ldi	r18, 0x2B	; 43
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	f9 01       	movw	r30, r18
    2c2e:	20 81       	ld	r18, Z
    2c30:	20 68       	ori	r18, 0x80	; 128
    2c32:	fc 01       	movw	r30, r24
    2c34:	20 83       	st	Z, r18
	}
	actual_rmp = rpm;
    2c36:	89 8d       	ldd	r24, Y+25	; 0x19
    2c38:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c3a:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <actual_rmp+0x1>
    2c3e:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <actual_rmp>
}
    2c42:	00 00       	nop
    2c44:	6a 96       	adiw	r28, 0x1a	; 26
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	ff 90       	pop	r15
    2c56:	ef 90       	pop	r14
    2c58:	df 90       	pop	r13
    2c5a:	cf 90       	pop	r12
    2c5c:	bf 90       	pop	r11
    2c5e:	af 90       	pop	r10
    2c60:	9f 90       	pop	r9
    2c62:	8f 90       	pop	r8
    2c64:	08 95       	ret

00002c66 <motor_smoothly_rmp>:


void motor_smoothly_rmp(uint16_t rpm_start, uint16_t rpm_end)
{
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	65 97       	sbiw	r28, 0x15	; 21
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	9b 8b       	std	Y+19, r25	; 0x13
    2c7c:	8a 8b       	std	Y+18, r24	; 0x12
    2c7e:	7d 8b       	std	Y+21, r23	; 0x15
    2c80:	6c 8b       	std	Y+20, r22	; 0x14
	uint16_t rpm;
	int8_t step;
	
	if (rpm_start < rpm_end)
    2c82:	2a 89       	ldd	r18, Y+18	; 0x12
    2c84:	3b 89       	ldd	r19, Y+19	; 0x13
    2c86:	8c 89       	ldd	r24, Y+20	; 0x14
    2c88:	9d 89       	ldd	r25, Y+21	; 0x15
    2c8a:	28 17       	cp	r18, r24
    2c8c:	39 07       	cpc	r19, r25
    2c8e:	18 f4       	brcc	.+6      	; 0x2c96 <motor_smoothly_rmp+0x30>
	{
		step = 1;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	8b 83       	std	Y+3, r24	; 0x03
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <motor_smoothly_rmp+0x34>
	}
	else
	{
		step = -1;
    2c96:	8f ef       	ldi	r24, 0xFF	; 255
    2c98:	8b 83       	std	Y+3, r24	; 0x03
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2c9a:	8a 89       	ldd	r24, Y+18	; 0x12
    2c9c:	9b 89       	ldd	r25, Y+19	; 0x13
    2c9e:	9a 83       	std	Y+2, r25	; 0x02
    2ca0:	89 83       	std	Y+1, r24	; 0x01
    2ca2:	a5 c0       	rjmp	.+330    	; 0x2dee <motor_smoothly_rmp+0x188>
	{
		user_profile.rpm = rpm;
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca8:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
    2cac:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
		if (!(user_profile.rpm % 20))
    2cb0:	40 91 cb 02 	lds	r20, 0x02CB	; 0x8002cb <user_profile>
    2cb4:	50 91 cc 02 	lds	r21, 0x02CC	; 0x8002cc <user_profile+0x1>
    2cb8:	9a 01       	movw	r18, r20
    2cba:	ad ec       	ldi	r26, 0xCD	; 205
    2cbc:	bc ec       	ldi	r27, 0xCC	; 204
    2cbe:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    2cc2:	92 95       	swap	r25
    2cc4:	82 95       	swap	r24
    2cc6:	8f 70       	andi	r24, 0x0F	; 15
    2cc8:	89 27       	eor	r24, r25
    2cca:	9f 70       	andi	r25, 0x0F	; 15
    2ccc:	89 27       	eor	r24, r25
    2cce:	64 e1       	ldi	r22, 0x14	; 20
    2cd0:	68 9f       	mul	r22, r24
    2cd2:	90 01       	movw	r18, r0
    2cd4:	69 9f       	mul	r22, r25
    2cd6:	30 0d       	add	r19, r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	ca 01       	movw	r24, r20
    2cdc:	82 1b       	sub	r24, r18
    2cde:	93 0b       	sbc	r25, r19
    2ce0:	89 2b       	or	r24, r25
    2ce2:	19 f4       	brne	.+6      	; 0x2cea <motor_smoothly_rmp+0x84>
			TUI('s');
    2ce4:	83 e7       	ldi	r24, 0x73	; 115
    2ce6:	0e 94 0f 03 	call	0x61e	; 0x61e <TUI>
		motor_set_rpm(user_profile.rpm);
    2cea:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
    2cee:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
    2cf2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <motor_set_rpm>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 ef       	ldi	r26, 0xF0	; 240
    2cfc:	b1 e4       	ldi	r27, 0x41	; 65
    2cfe:	8c 83       	std	Y+4, r24	; 0x04
    2d00:	9d 83       	std	Y+5, r25	; 0x05
    2d02:	ae 83       	std	Y+6, r26	; 0x06
    2d04:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	4a ef       	ldi	r20, 0xFA	; 250
    2d0c:	54 e4       	ldi	r21, 0x44	; 68
    2d0e:	6c 81       	ldd	r22, Y+4	; 0x04
    2d10:	7d 81       	ldd	r23, Y+5	; 0x05
    2d12:	8e 81       	ldd	r24, Y+6	; 0x06
    2d14:	9f 81       	ldd	r25, Y+7	; 0x07
    2d16:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	88 87       	std	Y+8, r24	; 0x08
    2d20:	99 87       	std	Y+9, r25	; 0x09
    2d22:	aa 87       	std	Y+10, r26	; 0x0a
    2d24:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e8       	ldi	r20, 0x80	; 128
    2d2c:	5f e3       	ldi	r21, 0x3F	; 63
    2d2e:	68 85       	ldd	r22, Y+8	; 0x08
    2d30:	79 85       	ldd	r23, Y+9	; 0x09
    2d32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d36:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__cmpsf2>
    2d3a:	88 23       	and	r24, r24
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <motor_smoothly_rmp+0xe2>
		__ticks = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9d 87       	std	Y+13, r25	; 0x0d
    2d44:	8c 87       	std	Y+12, r24	; 0x0c
    2d46:	3f c0       	rjmp	.+126    	; 0x2dc6 <motor_smoothly_rmp+0x160>
	else if (__tmp > 65535)
    2d48:	20 e0       	ldi	r18, 0x00	; 0
    2d4a:	3f ef       	ldi	r19, 0xFF	; 255
    2d4c:	4f e7       	ldi	r20, 0x7F	; 127
    2d4e:	57 e4       	ldi	r21, 0x47	; 71
    2d50:	68 85       	ldd	r22, Y+8	; 0x08
    2d52:	79 85       	ldd	r23, Y+9	; 0x09
    2d54:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d56:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d58:	0e 94 02 19 	call	0x3204	; 0x3204 <__gesf2>
    2d5c:	18 16       	cp	r1, r24
    2d5e:	4c f5       	brge	.+82     	; 0x2db2 <motor_smoothly_rmp+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e2       	ldi	r20, 0x20	; 32
    2d66:	51 e4       	ldi	r21, 0x41	; 65
    2d68:	6c 81       	ldd	r22, Y+4	; 0x04
    2d6a:	7d 81       	ldd	r23, Y+5	; 0x05
    2d6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d6e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d70:	0e 94 57 19 	call	0x32ae	; 0x32ae <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9d 87       	std	Y+13, r25	; 0x0d
    2d86:	8c 87       	std	Y+12, r24	; 0x0c
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <motor_smoothly_rmp+0x142>
    2d8a:	88 ec       	ldi	r24, 0xC8	; 200
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	9f 87       	std	Y+15, r25	; 0x0f
    2d90:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d92:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d94:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <motor_smoothly_rmp+0x130>
    2d9a:	9f 87       	std	Y+15, r25	; 0x0f
    2d9c:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2da0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	9d 87       	std	Y+13, r25	; 0x0d
    2da6:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2daa:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dac:	89 2b       	or	r24, r25
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <motor_smoothly_rmp+0x124>
    2db0:	14 c0       	rjmp	.+40     	; 0x2dda <motor_smoothly_rmp+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db2:	68 85       	ldd	r22, Y+8	; 0x08
    2db4:	79 85       	ldd	r23, Y+9	; 0x09
    2db6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2db8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dba:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	9d 87       	std	Y+13, r25	; 0x0d
    2dc4:	8c 87       	std	Y+12, r24	; 0x0c
    2dc6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dc8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dca:	99 8b       	std	Y+17, r25	; 0x11
    2dcc:	88 8b       	std	Y+16, r24	; 0x10
    2dce:	88 89       	ldd	r24, Y+16	; 0x10
    2dd0:	99 89       	ldd	r25, Y+17	; 0x11
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <motor_smoothly_rmp+0x16c>
    2dd6:	99 8b       	std	Y+17, r25	; 0x11
    2dd8:	88 8b       	std	Y+16, r24	; 0x10
	else
	{
		step = -1;
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	08 2e       	mov	r0, r24
    2dde:	00 0c       	add	r0, r0
    2de0:	99 0b       	sbc	r25, r25
    2de2:	29 81       	ldd	r18, Y+1	; 0x01
    2de4:	3a 81       	ldd	r19, Y+2	; 0x02
    2de6:	82 0f       	add	r24, r18
    2de8:	93 1f       	adc	r25, r19
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	28 2f       	mov	r18, r24
    2df2:	88 0f       	add	r24, r24
    2df4:	33 0b       	sbc	r19, r19
    2df6:	8c 89       	ldd	r24, Y+20	; 0x14
    2df8:	9d 89       	ldd	r25, Y+21	; 0x15
    2dfa:	28 0f       	add	r18, r24
    2dfc:	39 1f       	adc	r19, r25
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	9a 81       	ldd	r25, Y+2	; 0x02
    2e02:	28 17       	cp	r18, r24
    2e04:	39 07       	cpc	r19, r25
    2e06:	59 f0       	breq	.+22     	; 0x2e1e <motor_smoothly_rmp+0x1b8>
    2e08:	8c e3       	ldi	r24, 0x3C	; 60
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	80 81       	ld	r24, Z
    2e10:	88 2f       	mov	r24, r24
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	81 70       	andi	r24, 0x01	; 1
    2e16:	99 27       	eor	r25, r25
    2e18:	89 2b       	or	r24, r25
    2e1a:	09 f4       	brne	.+2      	; 0x2e1e <motor_smoothly_rmp+0x1b8>
    2e1c:	43 cf       	rjmp	.-378    	; 0x2ca4 <motor_smoothly_rmp+0x3e>
		if (!(user_profile.rpm % 20))
			TUI('s');
		motor_set_rpm(user_profile.rpm);
		_delay_ms(30);
	}
	TUI('s');
    2e1e:	83 e7       	ldi	r24, 0x73	; 115
    2e20:	0e 94 0f 03 	call	0x61e	; 0x61e <TUI>
}
    2e24:	00 00       	nop
    2e26:	65 96       	adiw	r28, 0x15	; 21
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	cd bf       	out	0x3d, r28	; 61
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	08 95       	ret

00002e38 <valve_init>:
#include "wyk_valve.h"

void valve_init(void)
{
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
    2e3c:	cd b7       	in	r28, 0x3d	; 61
    2e3e:	de b7       	in	r29, 0x3e	; 62
	VALVE_DDR |= VALVE_PIN;
    2e40:	8a e2       	ldi	r24, 0x2A	; 42
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	2a e2       	ldi	r18, 0x2A	; 42
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	f9 01       	movw	r30, r18
    2e4a:	20 81       	ld	r18, Z
    2e4c:	22 60       	ori	r18, 0x02	; 2
    2e4e:	fc 01       	movw	r30, r24
    2e50:	20 83       	st	Z, r18
	VALVE_OUT_0;
    2e52:	8b e2       	ldi	r24, 0x2B	; 43
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	2b e2       	ldi	r18, 0x2B	; 43
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	f9 01       	movw	r30, r18
    2e5c:	20 81       	ld	r18, Z
    2e5e:	2d 7f       	andi	r18, 0xFD	; 253
    2e60:	fc 01       	movw	r30, r24
    2e62:	20 83       	st	Z, r18
}
    2e64:	00 00       	nop
    2e66:	df 91       	pop	r29
    2e68:	cf 91       	pop	r28
    2e6a:	08 95       	ret

00002e6c <__subsf3>:
    2e6c:	50 58       	subi	r21, 0x80	; 128

00002e6e <__addsf3>:
    2e6e:	bb 27       	eor	r27, r27
    2e70:	aa 27       	eor	r26, r26
    2e72:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__addsf3x>
    2e76:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_round>
    2e7a:	0e 94 ba 18 	call	0x3174	; 0x3174 <__fp_pscA>
    2e7e:	38 f0       	brcs	.+14     	; 0x2e8e <__addsf3+0x20>
    2e80:	0e 94 c1 18 	call	0x3182	; 0x3182 <__fp_pscB>
    2e84:	20 f0       	brcs	.+8      	; 0x2e8e <__addsf3+0x20>
    2e86:	39 f4       	brne	.+14     	; 0x2e96 <__addsf3+0x28>
    2e88:	9f 3f       	cpi	r25, 0xFF	; 255
    2e8a:	19 f4       	brne	.+6      	; 0x2e92 <__addsf3+0x24>
    2e8c:	26 f4       	brtc	.+8      	; 0x2e96 <__addsf3+0x28>
    2e8e:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__fp_nan>
    2e92:	0e f4       	brtc	.+2      	; 0x2e96 <__addsf3+0x28>
    2e94:	e0 95       	com	r30
    2e96:	e7 fb       	bst	r30, 7
    2e98:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_inf>

00002e9c <__addsf3x>:
    2e9c:	e9 2f       	mov	r30, r25
    2e9e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__fp_split3>
    2ea2:	58 f3       	brcs	.-42     	; 0x2e7a <__addsf3+0xc>
    2ea4:	ba 17       	cp	r27, r26
    2ea6:	62 07       	cpc	r22, r18
    2ea8:	73 07       	cpc	r23, r19
    2eaa:	84 07       	cpc	r24, r20
    2eac:	95 07       	cpc	r25, r21
    2eae:	20 f0       	brcs	.+8      	; 0x2eb8 <__addsf3x+0x1c>
    2eb0:	79 f4       	brne	.+30     	; 0x2ed0 <__addsf3x+0x34>
    2eb2:	a6 f5       	brtc	.+104    	; 0x2f1c <__addsf3x+0x80>
    2eb4:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__fp_zero>
    2eb8:	0e f4       	brtc	.+2      	; 0x2ebc <__addsf3x+0x20>
    2eba:	e0 95       	com	r30
    2ebc:	0b 2e       	mov	r0, r27
    2ebe:	ba 2f       	mov	r27, r26
    2ec0:	a0 2d       	mov	r26, r0
    2ec2:	0b 01       	movw	r0, r22
    2ec4:	b9 01       	movw	r22, r18
    2ec6:	90 01       	movw	r18, r0
    2ec8:	0c 01       	movw	r0, r24
    2eca:	ca 01       	movw	r24, r20
    2ecc:	a0 01       	movw	r20, r0
    2ece:	11 24       	eor	r1, r1
    2ed0:	ff 27       	eor	r31, r31
    2ed2:	59 1b       	sub	r21, r25
    2ed4:	99 f0       	breq	.+38     	; 0x2efc <__addsf3x+0x60>
    2ed6:	59 3f       	cpi	r21, 0xF9	; 249
    2ed8:	50 f4       	brcc	.+20     	; 0x2eee <__addsf3x+0x52>
    2eda:	50 3e       	cpi	r21, 0xE0	; 224
    2edc:	68 f1       	brcs	.+90     	; 0x2f38 <__addsf3x+0x9c>
    2ede:	1a 16       	cp	r1, r26
    2ee0:	f0 40       	sbci	r31, 0x00	; 0
    2ee2:	a2 2f       	mov	r26, r18
    2ee4:	23 2f       	mov	r18, r19
    2ee6:	34 2f       	mov	r19, r20
    2ee8:	44 27       	eor	r20, r20
    2eea:	58 5f       	subi	r21, 0xF8	; 248
    2eec:	f3 cf       	rjmp	.-26     	; 0x2ed4 <__addsf3x+0x38>
    2eee:	46 95       	lsr	r20
    2ef0:	37 95       	ror	r19
    2ef2:	27 95       	ror	r18
    2ef4:	a7 95       	ror	r26
    2ef6:	f0 40       	sbci	r31, 0x00	; 0
    2ef8:	53 95       	inc	r21
    2efa:	c9 f7       	brne	.-14     	; 0x2eee <__addsf3x+0x52>
    2efc:	7e f4       	brtc	.+30     	; 0x2f1c <__addsf3x+0x80>
    2efe:	1f 16       	cp	r1, r31
    2f00:	ba 0b       	sbc	r27, r26
    2f02:	62 0b       	sbc	r22, r18
    2f04:	73 0b       	sbc	r23, r19
    2f06:	84 0b       	sbc	r24, r20
    2f08:	ba f0       	brmi	.+46     	; 0x2f38 <__addsf3x+0x9c>
    2f0a:	91 50       	subi	r25, 0x01	; 1
    2f0c:	a1 f0       	breq	.+40     	; 0x2f36 <__addsf3x+0x9a>
    2f0e:	ff 0f       	add	r31, r31
    2f10:	bb 1f       	adc	r27, r27
    2f12:	66 1f       	adc	r22, r22
    2f14:	77 1f       	adc	r23, r23
    2f16:	88 1f       	adc	r24, r24
    2f18:	c2 f7       	brpl	.-16     	; 0x2f0a <__addsf3x+0x6e>
    2f1a:	0e c0       	rjmp	.+28     	; 0x2f38 <__addsf3x+0x9c>
    2f1c:	ba 0f       	add	r27, r26
    2f1e:	62 1f       	adc	r22, r18
    2f20:	73 1f       	adc	r23, r19
    2f22:	84 1f       	adc	r24, r20
    2f24:	48 f4       	brcc	.+18     	; 0x2f38 <__addsf3x+0x9c>
    2f26:	87 95       	ror	r24
    2f28:	77 95       	ror	r23
    2f2a:	67 95       	ror	r22
    2f2c:	b7 95       	ror	r27
    2f2e:	f7 95       	ror	r31
    2f30:	9e 3f       	cpi	r25, 0xFE	; 254
    2f32:	08 f0       	brcs	.+2      	; 0x2f36 <__addsf3x+0x9a>
    2f34:	b0 cf       	rjmp	.-160    	; 0x2e96 <__addsf3+0x28>
    2f36:	93 95       	inc	r25
    2f38:	88 0f       	add	r24, r24
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <__addsf3x+0xa2>
    2f3c:	99 27       	eor	r25, r25
    2f3e:	ee 0f       	add	r30, r30
    2f40:	97 95       	ror	r25
    2f42:	87 95       	ror	r24
    2f44:	08 95       	ret

00002f46 <__cmpsf2>:
    2f46:	0e 94 8d 18 	call	0x311a	; 0x311a <__fp_cmp>
    2f4a:	08 f4       	brcc	.+2      	; 0x2f4e <__cmpsf2+0x8>
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	08 95       	ret

00002f50 <__divsf3>:
    2f50:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divsf3x>
    2f54:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_round>
    2f58:	0e 94 c1 18 	call	0x3182	; 0x3182 <__fp_pscB>
    2f5c:	58 f0       	brcs	.+22     	; 0x2f74 <__divsf3+0x24>
    2f5e:	0e 94 ba 18 	call	0x3174	; 0x3174 <__fp_pscA>
    2f62:	40 f0       	brcs	.+16     	; 0x2f74 <__divsf3+0x24>
    2f64:	29 f4       	brne	.+10     	; 0x2f70 <__divsf3+0x20>
    2f66:	5f 3f       	cpi	r21, 0xFF	; 255
    2f68:	29 f0       	breq	.+10     	; 0x2f74 <__divsf3+0x24>
    2f6a:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_inf>
    2f6e:	51 11       	cpse	r21, r1
    2f70:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__fp_szero>
    2f74:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__fp_nan>

00002f78 <__divsf3x>:
    2f78:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__fp_split3>
    2f7c:	68 f3       	brcs	.-38     	; 0x2f58 <__divsf3+0x8>

00002f7e <__divsf3_pse>:
    2f7e:	99 23       	and	r25, r25
    2f80:	b1 f3       	breq	.-20     	; 0x2f6e <__divsf3+0x1e>
    2f82:	55 23       	and	r21, r21
    2f84:	91 f3       	breq	.-28     	; 0x2f6a <__divsf3+0x1a>
    2f86:	95 1b       	sub	r25, r21
    2f88:	55 0b       	sbc	r21, r21
    2f8a:	bb 27       	eor	r27, r27
    2f8c:	aa 27       	eor	r26, r26
    2f8e:	62 17       	cp	r22, r18
    2f90:	73 07       	cpc	r23, r19
    2f92:	84 07       	cpc	r24, r20
    2f94:	38 f0       	brcs	.+14     	; 0x2fa4 <__divsf3_pse+0x26>
    2f96:	9f 5f       	subi	r25, 0xFF	; 255
    2f98:	5f 4f       	sbci	r21, 0xFF	; 255
    2f9a:	22 0f       	add	r18, r18
    2f9c:	33 1f       	adc	r19, r19
    2f9e:	44 1f       	adc	r20, r20
    2fa0:	aa 1f       	adc	r26, r26
    2fa2:	a9 f3       	breq	.-22     	; 0x2f8e <__divsf3_pse+0x10>
    2fa4:	35 d0       	rcall	.+106    	; 0x3010 <__divsf3_pse+0x92>
    2fa6:	0e 2e       	mov	r0, r30
    2fa8:	3a f0       	brmi	.+14     	; 0x2fb8 <__divsf3_pse+0x3a>
    2faa:	e0 e8       	ldi	r30, 0x80	; 128
    2fac:	32 d0       	rcall	.+100    	; 0x3012 <__divsf3_pse+0x94>
    2fae:	91 50       	subi	r25, 0x01	; 1
    2fb0:	50 40       	sbci	r21, 0x00	; 0
    2fb2:	e6 95       	lsr	r30
    2fb4:	00 1c       	adc	r0, r0
    2fb6:	ca f7       	brpl	.-14     	; 0x2faa <__divsf3_pse+0x2c>
    2fb8:	2b d0       	rcall	.+86     	; 0x3010 <__divsf3_pse+0x92>
    2fba:	fe 2f       	mov	r31, r30
    2fbc:	29 d0       	rcall	.+82     	; 0x3010 <__divsf3_pse+0x92>
    2fbe:	66 0f       	add	r22, r22
    2fc0:	77 1f       	adc	r23, r23
    2fc2:	88 1f       	adc	r24, r24
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	26 17       	cp	r18, r22
    2fc8:	37 07       	cpc	r19, r23
    2fca:	48 07       	cpc	r20, r24
    2fcc:	ab 07       	cpc	r26, r27
    2fce:	b0 e8       	ldi	r27, 0x80	; 128
    2fd0:	09 f0       	breq	.+2      	; 0x2fd4 <__divsf3_pse+0x56>
    2fd2:	bb 0b       	sbc	r27, r27
    2fd4:	80 2d       	mov	r24, r0
    2fd6:	bf 01       	movw	r22, r30
    2fd8:	ff 27       	eor	r31, r31
    2fda:	93 58       	subi	r25, 0x83	; 131
    2fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    2fde:	3a f0       	brmi	.+14     	; 0x2fee <__divsf3_pse+0x70>
    2fe0:	9e 3f       	cpi	r25, 0xFE	; 254
    2fe2:	51 05       	cpc	r21, r1
    2fe4:	78 f0       	brcs	.+30     	; 0x3004 <__divsf3_pse+0x86>
    2fe6:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_inf>
    2fea:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__fp_szero>
    2fee:	5f 3f       	cpi	r21, 0xFF	; 255
    2ff0:	e4 f3       	brlt	.-8      	; 0x2fea <__divsf3_pse+0x6c>
    2ff2:	98 3e       	cpi	r25, 0xE8	; 232
    2ff4:	d4 f3       	brlt	.-12     	; 0x2fea <__divsf3_pse+0x6c>
    2ff6:	86 95       	lsr	r24
    2ff8:	77 95       	ror	r23
    2ffa:	67 95       	ror	r22
    2ffc:	b7 95       	ror	r27
    2ffe:	f7 95       	ror	r31
    3000:	9f 5f       	subi	r25, 0xFF	; 255
    3002:	c9 f7       	brne	.-14     	; 0x2ff6 <__divsf3_pse+0x78>
    3004:	88 0f       	add	r24, r24
    3006:	91 1d       	adc	r25, r1
    3008:	96 95       	lsr	r25
    300a:	87 95       	ror	r24
    300c:	97 f9       	bld	r25, 7
    300e:	08 95       	ret
    3010:	e1 e0       	ldi	r30, 0x01	; 1
    3012:	66 0f       	add	r22, r22
    3014:	77 1f       	adc	r23, r23
    3016:	88 1f       	adc	r24, r24
    3018:	bb 1f       	adc	r27, r27
    301a:	62 17       	cp	r22, r18
    301c:	73 07       	cpc	r23, r19
    301e:	84 07       	cpc	r24, r20
    3020:	ba 07       	cpc	r27, r26
    3022:	20 f0       	brcs	.+8      	; 0x302c <__divsf3_pse+0xae>
    3024:	62 1b       	sub	r22, r18
    3026:	73 0b       	sbc	r23, r19
    3028:	84 0b       	sbc	r24, r20
    302a:	ba 0b       	sbc	r27, r26
    302c:	ee 1f       	adc	r30, r30
    302e:	88 f7       	brcc	.-30     	; 0x3012 <__divsf3_pse+0x94>
    3030:	e0 95       	com	r30
    3032:	08 95       	ret

00003034 <__fixsfsi>:
    3034:	0e 94 21 18 	call	0x3042	; 0x3042 <__fixunssfsi>
    3038:	68 94       	set
    303a:	b1 11       	cpse	r27, r1
    303c:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__fp_szero>
    3040:	08 95       	ret

00003042 <__fixunssfsi>:
    3042:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__fp_splitA>
    3046:	88 f0       	brcs	.+34     	; 0x306a <__fixunssfsi+0x28>
    3048:	9f 57       	subi	r25, 0x7F	; 127
    304a:	98 f0       	brcs	.+38     	; 0x3072 <__fixunssfsi+0x30>
    304c:	b9 2f       	mov	r27, r25
    304e:	99 27       	eor	r25, r25
    3050:	b7 51       	subi	r27, 0x17	; 23
    3052:	b0 f0       	brcs	.+44     	; 0x3080 <__fixunssfsi+0x3e>
    3054:	e1 f0       	breq	.+56     	; 0x308e <__fixunssfsi+0x4c>
    3056:	66 0f       	add	r22, r22
    3058:	77 1f       	adc	r23, r23
    305a:	88 1f       	adc	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	1a f0       	brmi	.+6      	; 0x3066 <__fixunssfsi+0x24>
    3060:	ba 95       	dec	r27
    3062:	c9 f7       	brne	.-14     	; 0x3056 <__fixunssfsi+0x14>
    3064:	14 c0       	rjmp	.+40     	; 0x308e <__fixunssfsi+0x4c>
    3066:	b1 30       	cpi	r27, 0x01	; 1
    3068:	91 f0       	breq	.+36     	; 0x308e <__fixunssfsi+0x4c>
    306a:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__fp_zero>
    306e:	b1 e0       	ldi	r27, 0x01	; 1
    3070:	08 95       	ret
    3072:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__fp_zero>
    3076:	67 2f       	mov	r22, r23
    3078:	78 2f       	mov	r23, r24
    307a:	88 27       	eor	r24, r24
    307c:	b8 5f       	subi	r27, 0xF8	; 248
    307e:	39 f0       	breq	.+14     	; 0x308e <__fixunssfsi+0x4c>
    3080:	b9 3f       	cpi	r27, 0xF9	; 249
    3082:	cc f3       	brlt	.-14     	; 0x3076 <__fixunssfsi+0x34>
    3084:	86 95       	lsr	r24
    3086:	77 95       	ror	r23
    3088:	67 95       	ror	r22
    308a:	b3 95       	inc	r27
    308c:	d9 f7       	brne	.-10     	; 0x3084 <__fixunssfsi+0x42>
    308e:	3e f4       	brtc	.+14     	; 0x309e <__fixunssfsi+0x5c>
    3090:	90 95       	com	r25
    3092:	80 95       	com	r24
    3094:	70 95       	com	r23
    3096:	61 95       	neg	r22
    3098:	7f 4f       	sbci	r23, 0xFF	; 255
    309a:	8f 4f       	sbci	r24, 0xFF	; 255
    309c:	9f 4f       	sbci	r25, 0xFF	; 255
    309e:	08 95       	ret

000030a0 <__floatunsisf>:
    30a0:	e8 94       	clt
    30a2:	09 c0       	rjmp	.+18     	; 0x30b6 <__floatsisf+0x12>

000030a4 <__floatsisf>:
    30a4:	97 fb       	bst	r25, 7
    30a6:	3e f4       	brtc	.+14     	; 0x30b6 <__floatsisf+0x12>
    30a8:	90 95       	com	r25
    30aa:	80 95       	com	r24
    30ac:	70 95       	com	r23
    30ae:	61 95       	neg	r22
    30b0:	7f 4f       	sbci	r23, 0xFF	; 255
    30b2:	8f 4f       	sbci	r24, 0xFF	; 255
    30b4:	9f 4f       	sbci	r25, 0xFF	; 255
    30b6:	99 23       	and	r25, r25
    30b8:	a9 f0       	breq	.+42     	; 0x30e4 <__floatsisf+0x40>
    30ba:	f9 2f       	mov	r31, r25
    30bc:	96 e9       	ldi	r25, 0x96	; 150
    30be:	bb 27       	eor	r27, r27
    30c0:	93 95       	inc	r25
    30c2:	f6 95       	lsr	r31
    30c4:	87 95       	ror	r24
    30c6:	77 95       	ror	r23
    30c8:	67 95       	ror	r22
    30ca:	b7 95       	ror	r27
    30cc:	f1 11       	cpse	r31, r1
    30ce:	f8 cf       	rjmp	.-16     	; 0x30c0 <__floatsisf+0x1c>
    30d0:	fa f4       	brpl	.+62     	; 0x3110 <__floatsisf+0x6c>
    30d2:	bb 0f       	add	r27, r27
    30d4:	11 f4       	brne	.+4      	; 0x30da <__floatsisf+0x36>
    30d6:	60 ff       	sbrs	r22, 0
    30d8:	1b c0       	rjmp	.+54     	; 0x3110 <__floatsisf+0x6c>
    30da:	6f 5f       	subi	r22, 0xFF	; 255
    30dc:	7f 4f       	sbci	r23, 0xFF	; 255
    30de:	8f 4f       	sbci	r24, 0xFF	; 255
    30e0:	9f 4f       	sbci	r25, 0xFF	; 255
    30e2:	16 c0       	rjmp	.+44     	; 0x3110 <__floatsisf+0x6c>
    30e4:	88 23       	and	r24, r24
    30e6:	11 f0       	breq	.+4      	; 0x30ec <__floatsisf+0x48>
    30e8:	96 e9       	ldi	r25, 0x96	; 150
    30ea:	11 c0       	rjmp	.+34     	; 0x310e <__floatsisf+0x6a>
    30ec:	77 23       	and	r23, r23
    30ee:	21 f0       	breq	.+8      	; 0x30f8 <__floatsisf+0x54>
    30f0:	9e e8       	ldi	r25, 0x8E	; 142
    30f2:	87 2f       	mov	r24, r23
    30f4:	76 2f       	mov	r23, r22
    30f6:	05 c0       	rjmp	.+10     	; 0x3102 <__floatsisf+0x5e>
    30f8:	66 23       	and	r22, r22
    30fa:	71 f0       	breq	.+28     	; 0x3118 <__floatsisf+0x74>
    30fc:	96 e8       	ldi	r25, 0x86	; 134
    30fe:	86 2f       	mov	r24, r22
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	60 e0       	ldi	r22, 0x00	; 0
    3104:	2a f0       	brmi	.+10     	; 0x3110 <__floatsisf+0x6c>
    3106:	9a 95       	dec	r25
    3108:	66 0f       	add	r22, r22
    310a:	77 1f       	adc	r23, r23
    310c:	88 1f       	adc	r24, r24
    310e:	da f7       	brpl	.-10     	; 0x3106 <__floatsisf+0x62>
    3110:	88 0f       	add	r24, r24
    3112:	96 95       	lsr	r25
    3114:	87 95       	ror	r24
    3116:	97 f9       	bld	r25, 7
    3118:	08 95       	ret

0000311a <__fp_cmp>:
    311a:	99 0f       	add	r25, r25
    311c:	00 08       	sbc	r0, r0
    311e:	55 0f       	add	r21, r21
    3120:	aa 0b       	sbc	r26, r26
    3122:	e0 e8       	ldi	r30, 0x80	; 128
    3124:	fe ef       	ldi	r31, 0xFE	; 254
    3126:	16 16       	cp	r1, r22
    3128:	17 06       	cpc	r1, r23
    312a:	e8 07       	cpc	r30, r24
    312c:	f9 07       	cpc	r31, r25
    312e:	c0 f0       	brcs	.+48     	; 0x3160 <__fp_cmp+0x46>
    3130:	12 16       	cp	r1, r18
    3132:	13 06       	cpc	r1, r19
    3134:	e4 07       	cpc	r30, r20
    3136:	f5 07       	cpc	r31, r21
    3138:	98 f0       	brcs	.+38     	; 0x3160 <__fp_cmp+0x46>
    313a:	62 1b       	sub	r22, r18
    313c:	73 0b       	sbc	r23, r19
    313e:	84 0b       	sbc	r24, r20
    3140:	95 0b       	sbc	r25, r21
    3142:	39 f4       	brne	.+14     	; 0x3152 <__fp_cmp+0x38>
    3144:	0a 26       	eor	r0, r26
    3146:	61 f0       	breq	.+24     	; 0x3160 <__fp_cmp+0x46>
    3148:	23 2b       	or	r18, r19
    314a:	24 2b       	or	r18, r20
    314c:	25 2b       	or	r18, r21
    314e:	21 f4       	brne	.+8      	; 0x3158 <__fp_cmp+0x3e>
    3150:	08 95       	ret
    3152:	0a 26       	eor	r0, r26
    3154:	09 f4       	brne	.+2      	; 0x3158 <__fp_cmp+0x3e>
    3156:	a1 40       	sbci	r26, 0x01	; 1
    3158:	a6 95       	lsr	r26
    315a:	8f ef       	ldi	r24, 0xFF	; 255
    315c:	81 1d       	adc	r24, r1
    315e:	81 1d       	adc	r24, r1
    3160:	08 95       	ret

00003162 <__fp_inf>:
    3162:	97 f9       	bld	r25, 7
    3164:	9f 67       	ori	r25, 0x7F	; 127
    3166:	80 e8       	ldi	r24, 0x80	; 128
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	08 95       	ret

0000316e <__fp_nan>:
    316e:	9f ef       	ldi	r25, 0xFF	; 255
    3170:	80 ec       	ldi	r24, 0xC0	; 192
    3172:	08 95       	ret

00003174 <__fp_pscA>:
    3174:	00 24       	eor	r0, r0
    3176:	0a 94       	dec	r0
    3178:	16 16       	cp	r1, r22
    317a:	17 06       	cpc	r1, r23
    317c:	18 06       	cpc	r1, r24
    317e:	09 06       	cpc	r0, r25
    3180:	08 95       	ret

00003182 <__fp_pscB>:
    3182:	00 24       	eor	r0, r0
    3184:	0a 94       	dec	r0
    3186:	12 16       	cp	r1, r18
    3188:	13 06       	cpc	r1, r19
    318a:	14 06       	cpc	r1, r20
    318c:	05 06       	cpc	r0, r21
    318e:	08 95       	ret

00003190 <__fp_round>:
    3190:	09 2e       	mov	r0, r25
    3192:	03 94       	inc	r0
    3194:	00 0c       	add	r0, r0
    3196:	11 f4       	brne	.+4      	; 0x319c <__fp_round+0xc>
    3198:	88 23       	and	r24, r24
    319a:	52 f0       	brmi	.+20     	; 0x31b0 <__fp_round+0x20>
    319c:	bb 0f       	add	r27, r27
    319e:	40 f4       	brcc	.+16     	; 0x31b0 <__fp_round+0x20>
    31a0:	bf 2b       	or	r27, r31
    31a2:	11 f4       	brne	.+4      	; 0x31a8 <__fp_round+0x18>
    31a4:	60 ff       	sbrs	r22, 0
    31a6:	04 c0       	rjmp	.+8      	; 0x31b0 <__fp_round+0x20>
    31a8:	6f 5f       	subi	r22, 0xFF	; 255
    31aa:	7f 4f       	sbci	r23, 0xFF	; 255
    31ac:	8f 4f       	sbci	r24, 0xFF	; 255
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	08 95       	ret

000031b2 <__fp_split3>:
    31b2:	57 fd       	sbrc	r21, 7
    31b4:	90 58       	subi	r25, 0x80	; 128
    31b6:	44 0f       	add	r20, r20
    31b8:	55 1f       	adc	r21, r21
    31ba:	59 f0       	breq	.+22     	; 0x31d2 <__fp_splitA+0x10>
    31bc:	5f 3f       	cpi	r21, 0xFF	; 255
    31be:	71 f0       	breq	.+28     	; 0x31dc <__fp_splitA+0x1a>
    31c0:	47 95       	ror	r20

000031c2 <__fp_splitA>:
    31c2:	88 0f       	add	r24, r24
    31c4:	97 fb       	bst	r25, 7
    31c6:	99 1f       	adc	r25, r25
    31c8:	61 f0       	breq	.+24     	; 0x31e2 <__fp_splitA+0x20>
    31ca:	9f 3f       	cpi	r25, 0xFF	; 255
    31cc:	79 f0       	breq	.+30     	; 0x31ec <__fp_splitA+0x2a>
    31ce:	87 95       	ror	r24
    31d0:	08 95       	ret
    31d2:	12 16       	cp	r1, r18
    31d4:	13 06       	cpc	r1, r19
    31d6:	14 06       	cpc	r1, r20
    31d8:	55 1f       	adc	r21, r21
    31da:	f2 cf       	rjmp	.-28     	; 0x31c0 <__fp_split3+0xe>
    31dc:	46 95       	lsr	r20
    31de:	f1 df       	rcall	.-30     	; 0x31c2 <__fp_splitA>
    31e0:	08 c0       	rjmp	.+16     	; 0x31f2 <__fp_splitA+0x30>
    31e2:	16 16       	cp	r1, r22
    31e4:	17 06       	cpc	r1, r23
    31e6:	18 06       	cpc	r1, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	f1 cf       	rjmp	.-30     	; 0x31ce <__fp_splitA+0xc>
    31ec:	86 95       	lsr	r24
    31ee:	71 05       	cpc	r23, r1
    31f0:	61 05       	cpc	r22, r1
    31f2:	08 94       	sec
    31f4:	08 95       	ret

000031f6 <__fp_zero>:
    31f6:	e8 94       	clt

000031f8 <__fp_szero>:
    31f8:	bb 27       	eor	r27, r27
    31fa:	66 27       	eor	r22, r22
    31fc:	77 27       	eor	r23, r23
    31fe:	cb 01       	movw	r24, r22
    3200:	97 f9       	bld	r25, 7
    3202:	08 95       	ret

00003204 <__gesf2>:
    3204:	0e 94 8d 18 	call	0x311a	; 0x311a <__fp_cmp>
    3208:	08 f4       	brcc	.+2      	; 0x320c <__gesf2+0x8>
    320a:	8f ef       	ldi	r24, 0xFF	; 255
    320c:	08 95       	ret
    320e:	16 f0       	brts	.+4      	; 0x3214 <__gesf2+0x10>
    3210:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_mpack>
    3214:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__fp_nan>
    3218:	68 94       	set
    321a:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_inf>

0000321e <log>:
    321e:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__fp_splitA>
    3222:	a8 f3       	brcs	.-22     	; 0x320e <__gesf2+0xa>
    3224:	99 23       	and	r25, r25
    3226:	c1 f3       	breq	.-16     	; 0x3218 <__gesf2+0x14>
    3228:	ae f3       	brts	.-22     	; 0x3214 <__gesf2+0x10>
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	1f 93       	push	r17
    3230:	0f 93       	push	r16
    3232:	ff 92       	push	r15
    3234:	c9 2f       	mov	r28, r25
    3236:	dd 27       	eor	r29, r29
    3238:	88 23       	and	r24, r24
    323a:	2a f0       	brmi	.+10     	; 0x3246 <log+0x28>
    323c:	21 97       	sbiw	r28, 0x01	; 1
    323e:	66 0f       	add	r22, r22
    3240:	77 1f       	adc	r23, r23
    3242:	88 1f       	adc	r24, r24
    3244:	da f7       	brpl	.-10     	; 0x323c <log+0x1e>
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5f eb       	ldi	r21, 0xBF	; 191
    324e:	9f e3       	ldi	r25, 0x3F	; 63
    3250:	88 39       	cpi	r24, 0x98	; 152
    3252:	20 f0       	brcs	.+8      	; 0x325c <log+0x3e>
    3254:	80 3e       	cpi	r24, 0xE0	; 224
    3256:	38 f0       	brcs	.+14     	; 0x3266 <log+0x48>
    3258:	21 96       	adiw	r28, 0x01	; 1
    325a:	8f 77       	andi	r24, 0x7F	; 127
    325c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__addsf3>
    3260:	e8 e6       	ldi	r30, 0x68	; 104
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	04 c0       	rjmp	.+8      	; 0x326e <log+0x50>
    3266:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__addsf3>
    326a:	e5 e9       	ldi	r30, 0x95	; 149
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__fp_powser>
    3272:	8b 01       	movw	r16, r22
    3274:	be 01       	movw	r22, r28
    3276:	ec 01       	movw	r28, r24
    3278:	fb 2e       	mov	r15, r27
    327a:	6f 57       	subi	r22, 0x7F	; 127
    327c:	71 09       	sbc	r23, r1
    327e:	75 95       	asr	r23
    3280:	77 1f       	adc	r23, r23
    3282:	88 0b       	sbc	r24, r24
    3284:	99 0b       	sbc	r25, r25
    3286:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__floatsisf>
    328a:	28 e1       	ldi	r18, 0x18	; 24
    328c:	32 e7       	ldi	r19, 0x72	; 114
    328e:	41 e3       	ldi	r20, 0x31	; 49
    3290:	5f e3       	ldi	r21, 0x3F	; 63
    3292:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__mulsf3x>
    3296:	af 2d       	mov	r26, r15
    3298:	98 01       	movw	r18, r16
    329a:	ae 01       	movw	r20, r28
    329c:	ff 90       	pop	r15
    329e:	0f 91       	pop	r16
    32a0:	1f 91       	pop	r17
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__addsf3x>
    32aa:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_round>

000032ae <__mulsf3>:
    32ae:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__mulsf3x>
    32b2:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__fp_round>
    32b6:	0e 94 ba 18 	call	0x3174	; 0x3174 <__fp_pscA>
    32ba:	38 f0       	brcs	.+14     	; 0x32ca <__mulsf3+0x1c>
    32bc:	0e 94 c1 18 	call	0x3182	; 0x3182 <__fp_pscB>
    32c0:	20 f0       	brcs	.+8      	; 0x32ca <__mulsf3+0x1c>
    32c2:	95 23       	and	r25, r21
    32c4:	11 f0       	breq	.+4      	; 0x32ca <__mulsf3+0x1c>
    32c6:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_inf>
    32ca:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__fp_nan>
    32ce:	11 24       	eor	r1, r1
    32d0:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__fp_szero>

000032d4 <__mulsf3x>:
    32d4:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__fp_split3>
    32d8:	70 f3       	brcs	.-36     	; 0x32b6 <__mulsf3+0x8>

000032da <__mulsf3_pse>:
    32da:	95 9f       	mul	r25, r21
    32dc:	c1 f3       	breq	.-16     	; 0x32ce <__mulsf3+0x20>
    32de:	95 0f       	add	r25, r21
    32e0:	50 e0       	ldi	r21, 0x00	; 0
    32e2:	55 1f       	adc	r21, r21
    32e4:	62 9f       	mul	r22, r18
    32e6:	f0 01       	movw	r30, r0
    32e8:	72 9f       	mul	r23, r18
    32ea:	bb 27       	eor	r27, r27
    32ec:	f0 0d       	add	r31, r0
    32ee:	b1 1d       	adc	r27, r1
    32f0:	63 9f       	mul	r22, r19
    32f2:	aa 27       	eor	r26, r26
    32f4:	f0 0d       	add	r31, r0
    32f6:	b1 1d       	adc	r27, r1
    32f8:	aa 1f       	adc	r26, r26
    32fa:	64 9f       	mul	r22, r20
    32fc:	66 27       	eor	r22, r22
    32fe:	b0 0d       	add	r27, r0
    3300:	a1 1d       	adc	r26, r1
    3302:	66 1f       	adc	r22, r22
    3304:	82 9f       	mul	r24, r18
    3306:	22 27       	eor	r18, r18
    3308:	b0 0d       	add	r27, r0
    330a:	a1 1d       	adc	r26, r1
    330c:	62 1f       	adc	r22, r18
    330e:	73 9f       	mul	r23, r19
    3310:	b0 0d       	add	r27, r0
    3312:	a1 1d       	adc	r26, r1
    3314:	62 1f       	adc	r22, r18
    3316:	83 9f       	mul	r24, r19
    3318:	a0 0d       	add	r26, r0
    331a:	61 1d       	adc	r22, r1
    331c:	22 1f       	adc	r18, r18
    331e:	74 9f       	mul	r23, r20
    3320:	33 27       	eor	r19, r19
    3322:	a0 0d       	add	r26, r0
    3324:	61 1d       	adc	r22, r1
    3326:	23 1f       	adc	r18, r19
    3328:	84 9f       	mul	r24, r20
    332a:	60 0d       	add	r22, r0
    332c:	21 1d       	adc	r18, r1
    332e:	82 2f       	mov	r24, r18
    3330:	76 2f       	mov	r23, r22
    3332:	6a 2f       	mov	r22, r26
    3334:	11 24       	eor	r1, r1
    3336:	9f 57       	subi	r25, 0x7F	; 127
    3338:	50 40       	sbci	r21, 0x00	; 0
    333a:	9a f0       	brmi	.+38     	; 0x3362 <__mulsf3_pse+0x88>
    333c:	f1 f0       	breq	.+60     	; 0x337a <__mulsf3_pse+0xa0>
    333e:	88 23       	and	r24, r24
    3340:	4a f0       	brmi	.+18     	; 0x3354 <__mulsf3_pse+0x7a>
    3342:	ee 0f       	add	r30, r30
    3344:	ff 1f       	adc	r31, r31
    3346:	bb 1f       	adc	r27, r27
    3348:	66 1f       	adc	r22, r22
    334a:	77 1f       	adc	r23, r23
    334c:	88 1f       	adc	r24, r24
    334e:	91 50       	subi	r25, 0x01	; 1
    3350:	50 40       	sbci	r21, 0x00	; 0
    3352:	a9 f7       	brne	.-22     	; 0x333e <__mulsf3_pse+0x64>
    3354:	9e 3f       	cpi	r25, 0xFE	; 254
    3356:	51 05       	cpc	r21, r1
    3358:	80 f0       	brcs	.+32     	; 0x337a <__mulsf3_pse+0xa0>
    335a:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__fp_inf>
    335e:	0c 94 fc 18 	jmp	0x31f8	; 0x31f8 <__fp_szero>
    3362:	5f 3f       	cpi	r21, 0xFF	; 255
    3364:	e4 f3       	brlt	.-8      	; 0x335e <__mulsf3_pse+0x84>
    3366:	98 3e       	cpi	r25, 0xE8	; 232
    3368:	d4 f3       	brlt	.-12     	; 0x335e <__mulsf3_pse+0x84>
    336a:	86 95       	lsr	r24
    336c:	77 95       	ror	r23
    336e:	67 95       	ror	r22
    3370:	b7 95       	ror	r27
    3372:	f7 95       	ror	r31
    3374:	e7 95       	ror	r30
    3376:	9f 5f       	subi	r25, 0xFF	; 255
    3378:	c1 f7       	brne	.-16     	; 0x336a <__mulsf3_pse+0x90>
    337a:	fe 2b       	or	r31, r30
    337c:	88 0f       	add	r24, r24
    337e:	91 1d       	adc	r25, r1
    3380:	96 95       	lsr	r25
    3382:	87 95       	ror	r24
    3384:	97 f9       	bld	r25, 7
    3386:	08 95       	ret

00003388 <__fp_mpack>:
    3388:	9f 3f       	cpi	r25, 0xFF	; 255
    338a:	31 f0       	breq	.+12     	; 0x3398 <__fp_mpack_finite+0xc>

0000338c <__fp_mpack_finite>:
    338c:	91 50       	subi	r25, 0x01	; 1
    338e:	20 f4       	brcc	.+8      	; 0x3398 <__fp_mpack_finite+0xc>
    3390:	87 95       	ror	r24
    3392:	77 95       	ror	r23
    3394:	67 95       	ror	r22
    3396:	b7 95       	ror	r27
    3398:	88 0f       	add	r24, r24
    339a:	91 1d       	adc	r25, r1
    339c:	96 95       	lsr	r25
    339e:	87 95       	ror	r24
    33a0:	97 f9       	bld	r25, 7
    33a2:	08 95       	ret

000033a4 <__fp_powser>:
    33a4:	df 93       	push	r29
    33a6:	cf 93       	push	r28
    33a8:	1f 93       	push	r17
    33aa:	0f 93       	push	r16
    33ac:	ff 92       	push	r15
    33ae:	ef 92       	push	r14
    33b0:	df 92       	push	r13
    33b2:	7b 01       	movw	r14, r22
    33b4:	8c 01       	movw	r16, r24
    33b6:	68 94       	set
    33b8:	06 c0       	rjmp	.+12     	; 0x33c6 <__fp_powser+0x22>
    33ba:	da 2e       	mov	r13, r26
    33bc:	ef 01       	movw	r28, r30
    33be:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__mulsf3x>
    33c2:	fe 01       	movw	r30, r28
    33c4:	e8 94       	clt
    33c6:	a5 91       	lpm	r26, Z+
    33c8:	25 91       	lpm	r18, Z+
    33ca:	35 91       	lpm	r19, Z+
    33cc:	45 91       	lpm	r20, Z+
    33ce:	55 91       	lpm	r21, Z+
    33d0:	a6 f3       	brts	.-24     	; 0x33ba <__fp_powser+0x16>
    33d2:	ef 01       	movw	r28, r30
    33d4:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <__addsf3x>
    33d8:	fe 01       	movw	r30, r28
    33da:	97 01       	movw	r18, r14
    33dc:	a8 01       	movw	r20, r16
    33de:	da 94       	dec	r13
    33e0:	69 f7       	brne	.-38     	; 0x33bc <__fp_powser+0x18>
    33e2:	df 90       	pop	r13
    33e4:	ef 90       	pop	r14
    33e6:	ff 90       	pop	r15
    33e8:	0f 91       	pop	r16
    33ea:	1f 91       	pop	r17
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <__mulsi3>:
    33f2:	db 01       	movw	r26, r22
    33f4:	8f 93       	push	r24
    33f6:	9f 93       	push	r25
    33f8:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <__muluhisi3>
    33fc:	bf 91       	pop	r27
    33fe:	af 91       	pop	r26
    3400:	a2 9f       	mul	r26, r18
    3402:	80 0d       	add	r24, r0
    3404:	91 1d       	adc	r25, r1
    3406:	a3 9f       	mul	r26, r19
    3408:	90 0d       	add	r25, r0
    340a:	b2 9f       	mul	r27, r18
    340c:	90 0d       	add	r25, r0
    340e:	11 24       	eor	r1, r1
    3410:	08 95       	ret

00003412 <__udivmodhi4>:
    3412:	aa 1b       	sub	r26, r26
    3414:	bb 1b       	sub	r27, r27
    3416:	51 e1       	ldi	r21, 0x11	; 17
    3418:	07 c0       	rjmp	.+14     	; 0x3428 <__udivmodhi4_ep>

0000341a <__udivmodhi4_loop>:
    341a:	aa 1f       	adc	r26, r26
    341c:	bb 1f       	adc	r27, r27
    341e:	a6 17       	cp	r26, r22
    3420:	b7 07       	cpc	r27, r23
    3422:	10 f0       	brcs	.+4      	; 0x3428 <__udivmodhi4_ep>
    3424:	a6 1b       	sub	r26, r22
    3426:	b7 0b       	sbc	r27, r23

00003428 <__udivmodhi4_ep>:
    3428:	88 1f       	adc	r24, r24
    342a:	99 1f       	adc	r25, r25
    342c:	5a 95       	dec	r21
    342e:	a9 f7       	brne	.-22     	; 0x341a <__udivmodhi4_loop>
    3430:	80 95       	com	r24
    3432:	90 95       	com	r25
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	08 95       	ret

0000343a <__divmodhi4>:
    343a:	97 fb       	bst	r25, 7
    343c:	07 2e       	mov	r0, r23
    343e:	16 f4       	brtc	.+4      	; 0x3444 <__divmodhi4+0xa>
    3440:	00 94       	com	r0
    3442:	07 d0       	rcall	.+14     	; 0x3452 <__divmodhi4_neg1>
    3444:	77 fd       	sbrc	r23, 7
    3446:	09 d0       	rcall	.+18     	; 0x345a <__divmodhi4_neg2>
    3448:	0e 94 09 1a 	call	0x3412	; 0x3412 <__udivmodhi4>
    344c:	07 fc       	sbrc	r0, 7
    344e:	05 d0       	rcall	.+10     	; 0x345a <__divmodhi4_neg2>
    3450:	3e f4       	brtc	.+14     	; 0x3460 <__divmodhi4_exit>

00003452 <__divmodhi4_neg1>:
    3452:	90 95       	com	r25
    3454:	81 95       	neg	r24
    3456:	9f 4f       	sbci	r25, 0xFF	; 255
    3458:	08 95       	ret

0000345a <__divmodhi4_neg2>:
    345a:	70 95       	com	r23
    345c:	61 95       	neg	r22
    345e:	7f 4f       	sbci	r23, 0xFF	; 255

00003460 <__divmodhi4_exit>:
    3460:	08 95       	ret

00003462 <__udivmodsi4>:
    3462:	a1 e2       	ldi	r26, 0x21	; 33
    3464:	1a 2e       	mov	r1, r26
    3466:	aa 1b       	sub	r26, r26
    3468:	bb 1b       	sub	r27, r27
    346a:	fd 01       	movw	r30, r26
    346c:	0d c0       	rjmp	.+26     	; 0x3488 <__udivmodsi4_ep>

0000346e <__udivmodsi4_loop>:
    346e:	aa 1f       	adc	r26, r26
    3470:	bb 1f       	adc	r27, r27
    3472:	ee 1f       	adc	r30, r30
    3474:	ff 1f       	adc	r31, r31
    3476:	a2 17       	cp	r26, r18
    3478:	b3 07       	cpc	r27, r19
    347a:	e4 07       	cpc	r30, r20
    347c:	f5 07       	cpc	r31, r21
    347e:	20 f0       	brcs	.+8      	; 0x3488 <__udivmodsi4_ep>
    3480:	a2 1b       	sub	r26, r18
    3482:	b3 0b       	sbc	r27, r19
    3484:	e4 0b       	sbc	r30, r20
    3486:	f5 0b       	sbc	r31, r21

00003488 <__udivmodsi4_ep>:
    3488:	66 1f       	adc	r22, r22
    348a:	77 1f       	adc	r23, r23
    348c:	88 1f       	adc	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	1a 94       	dec	r1
    3492:	69 f7       	brne	.-38     	; 0x346e <__udivmodsi4_loop>
    3494:	60 95       	com	r22
    3496:	70 95       	com	r23
    3498:	80 95       	com	r24
    349a:	90 95       	com	r25
    349c:	9b 01       	movw	r18, r22
    349e:	ac 01       	movw	r20, r24
    34a0:	bd 01       	movw	r22, r26
    34a2:	cf 01       	movw	r24, r30
    34a4:	08 95       	ret

000034a6 <__umulhisi3>:
    34a6:	a2 9f       	mul	r26, r18
    34a8:	b0 01       	movw	r22, r0
    34aa:	b3 9f       	mul	r27, r19
    34ac:	c0 01       	movw	r24, r0
    34ae:	a3 9f       	mul	r26, r19
    34b0:	70 0d       	add	r23, r0
    34b2:	81 1d       	adc	r24, r1
    34b4:	11 24       	eor	r1, r1
    34b6:	91 1d       	adc	r25, r1
    34b8:	b2 9f       	mul	r27, r18
    34ba:	70 0d       	add	r23, r0
    34bc:	81 1d       	adc	r24, r1
    34be:	11 24       	eor	r1, r1
    34c0:	91 1d       	adc	r25, r1
    34c2:	08 95       	ret

000034c4 <__muluhisi3>:
    34c4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__umulhisi3>
    34c8:	a5 9f       	mul	r26, r21
    34ca:	90 0d       	add	r25, r0
    34cc:	b4 9f       	mul	r27, r20
    34ce:	90 0d       	add	r25, r0
    34d0:	a4 9f       	mul	r26, r20
    34d2:	80 0d       	add	r24, r0
    34d4:	91 1d       	adc	r25, r1
    34d6:	11 24       	eor	r1, r1
    34d8:	08 95       	ret

000034da <eeprom_read_block>:
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22

000034de <eeprom_read_blraw>:
    34de:	fc 01       	movw	r30, r24
    34e0:	f9 99       	sbic	0x1f, 1	; 31
    34e2:	fe cf       	rjmp	.-4      	; 0x34e0 <eeprom_read_blraw+0x2>
    34e4:	06 c0       	rjmp	.+12     	; 0x34f2 <eeprom_read_blraw+0x14>
    34e6:	f2 bd       	out	0x22, r31	; 34
    34e8:	e1 bd       	out	0x21, r30	; 33
    34ea:	f8 9a       	sbi	0x1f, 0	; 31
    34ec:	31 96       	adiw	r30, 0x01	; 1
    34ee:	00 b4       	in	r0, 0x20	; 32
    34f0:	0d 92       	st	X+, r0
    34f2:	41 50       	subi	r20, 0x01	; 1
    34f4:	50 40       	sbci	r21, 0x00	; 0
    34f6:	b8 f7       	brcc	.-18     	; 0x34e6 <eeprom_read_blraw+0x8>
    34f8:	08 95       	ret

000034fa <eeprom_read_byte>:
    34fa:	f9 99       	sbic	0x1f, 1	; 31
    34fc:	fe cf       	rjmp	.-4      	; 0x34fa <eeprom_read_byte>
    34fe:	92 bd       	out	0x22, r25	; 34
    3500:	81 bd       	out	0x21, r24	; 33
    3502:	f8 9a       	sbi	0x1f, 0	; 31
    3504:	99 27       	eor	r25, r25
    3506:	80 b5       	in	r24, 0x20	; 32
    3508:	08 95       	ret

0000350a <eeprom_update_block>:
    350a:	dc 01       	movw	r26, r24
    350c:	a4 0f       	add	r26, r20
    350e:	b5 1f       	adc	r27, r21
    3510:	41 50       	subi	r20, 0x01	; 1
    3512:	50 40       	sbci	r21, 0x00	; 0
    3514:	48 f0       	brcs	.+18     	; 0x3528 <eeprom_update_block+0x1e>
    3516:	cb 01       	movw	r24, r22
    3518:	84 0f       	add	r24, r20
    351a:	95 1f       	adc	r25, r21
    351c:	2e 91       	ld	r18, -X
    351e:	0e 94 96 1a 	call	0x352c	; 0x352c <eeprom_update_r18>
    3522:	41 50       	subi	r20, 0x01	; 1
    3524:	50 40       	sbci	r21, 0x00	; 0
    3526:	d0 f7       	brcc	.-12     	; 0x351c <eeprom_update_block+0x12>
    3528:	08 95       	ret

0000352a <eeprom_update_byte>:
    352a:	26 2f       	mov	r18, r22

0000352c <eeprom_update_r18>:
    352c:	f9 99       	sbic	0x1f, 1	; 31
    352e:	fe cf       	rjmp	.-4      	; 0x352c <eeprom_update_r18>
    3530:	92 bd       	out	0x22, r25	; 34
    3532:	81 bd       	out	0x21, r24	; 33
    3534:	f8 9a       	sbi	0x1f, 0	; 31
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	00 b4       	in	r0, 0x20	; 32
    353a:	02 16       	cp	r0, r18
    353c:	39 f0       	breq	.+14     	; 0x354c <eeprom_update_r18+0x20>
    353e:	1f ba       	out	0x1f, r1	; 31
    3540:	20 bd       	out	0x20, r18	; 32
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	fa 9a       	sbi	0x1f, 2	; 31
    3548:	f9 9a       	sbi	0x1f, 1	; 31
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	08 95       	ret

0000354e <_exit>:
    354e:	f8 94       	cli

00003550 <__stop_program>:
    3550:	ff cf       	rjmp	.-2      	; 0x3550 <__stop_program>
