
koky_engine_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e4  00800100  000035e2  00003696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035e2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002e4  008002e4  0000387a  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000387a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000387d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000038b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001d0  00000000  00000000  000038f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000019a6  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c13  00000000  00000000  00005466  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d3a  00000000  00000000  00006079  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000053c  00000000  00000000  00007db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008de  00000000  00000000  000082f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000acf  00000000  00000000  00008bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  0000969d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_2>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_11>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_16>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__fuse+0xff7dfbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__fuse+0xff7dfa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <TUI+0x190>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e2 ee       	ldi	r30, 0xE2	; 226
      d6:	f5 e3       	ldi	r31, 0x35	; 53
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a4 3e       	cpi	r26, 0xE4	; 228
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	22 e0       	ldi	r18, 0x02	; 2
      e6:	a4 ee       	ldi	r26, 0xE4	; 228
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	aa 3f       	cpi	r26, 0xFA	; 250
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
      f8:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <__vector_1>:
#define ENC_B_PORT	PORTD
// ============================================================================


ISR(INT0_vect)
{
     100:	1f 92       	push	r1
     102:	0f 92       	push	r0
     104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	2f 93       	push	r18
     10e:	3f 93       	push	r19
     110:	4f 93       	push	r20
     112:	5f 93       	push	r21
     114:	6f 93       	push	r22
     116:	7f 93       	push	r23
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	af 93       	push	r26
     11e:	bf 93       	push	r27
     120:	ef 93       	push	r30
     122:	ff 93       	push	r31
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
	TUI_back_timer_clear();
     12c:	0e 94 bc 02 	call	0x578	; 0x578 <TUI_back_timer_clear>
	TUI('b');
     130:	82 e6       	ldi	r24, 0x62	; 98
     132:	0e 94 96 03 	call	0x72c	; 0x72c <TUI>
}
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	ff 91       	pop	r31
     13e:	ef 91       	pop	r30
     140:	bf 91       	pop	r27
     142:	af 91       	pop	r26
     144:	9f 91       	pop	r25
     146:	8f 91       	pop	r24
     148:	7f 91       	pop	r23
     14a:	6f 91       	pop	r22
     14c:	5f 91       	pop	r21
     14e:	4f 91       	pop	r20
     150:	3f 91       	pop	r19
     152:	2f 91       	pop	r18
     154:	0f 90       	pop	r0
     156:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <__vector_2>:

ISR(INT1_vect)
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	2f 93       	push	r18
     16e:	3f 93       	push	r19
     170:	4f 93       	push	r20
     172:	5f 93       	push	r21
     174:	6f 93       	push	r22
     176:	7f 93       	push	r23
     178:	8f 93       	push	r24
     17a:	9f 93       	push	r25
     17c:	af 93       	push	r26
     17e:	bf 93       	push	r27
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t step = 0;
	static uint8_t dir = 0;

	TUI_back_timer_clear();
     18c:	0e 94 bc 02 	call	0x578	; 0x578 <TUI_back_timer_clear>
	if (ENC_A_PIN & ENC_A)
     190:	89 e2       	ldi	r24, 0x29	; 41
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	80 81       	ld	r24, Z
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 71       	andi	r24, 0x10	; 16
     19e:	99 27       	eor	r25, r25
     1a0:	89 2b       	or	r24, r25
     1a2:	b1 f0       	breq	.+44     	; 0x1d0 <__vector_2+0x70>
	{
		
		if (!dir)
     1a4:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__data_end>
     1a8:	88 23       	and	r24, r24
     1aa:	69 f4       	brne	.+26     	; 0x1c6 <__vector_2+0x66>
		{
			step++;
     1ac:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <step.1882>
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <step.1882>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1b6:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <step.1882>
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	f8 f0       	brcs	.+62     	; 0x1fc <__vector_2+0x9c>
				TUI('-');
     1be:	8d e2       	ldi	r24, 0x2D	; 45
     1c0:	0e 94 96 03 	call	0x72c	; 0x72c <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1c4:	1b c0       	rjmp	.+54     	; 0x1fc <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('-');
		}
		else
		{
			dir = 0;
     1c6:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <__data_end>
			step = 0;
     1ca:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <step.1882>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1ce:	16 c0       	rjmp	.+44     	; 0x1fc <__vector_2+0x9c>
			step = 0;
		}
	}
	else
	{
		if (dir)
     1d0:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__data_end>
     1d4:	88 23       	and	r24, r24
     1d6:	69 f0       	breq	.+26     	; 0x1f2 <__vector_2+0x92>
		{
			step++;
     1d8:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <step.1882>
     1dc:	8f 5f       	subi	r24, 0xFF	; 255
     1de:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <step.1882>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1e2:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <step.1882>
     1e6:	85 30       	cpi	r24, 0x05	; 5
     1e8:	48 f0       	brcs	.+18     	; 0x1fc <__vector_2+0x9c>
				TUI('+');
     1ea:	8b e2       	ldi	r24, 0x2B	; 43
     1ec:	0e 94 96 03 	call	0x72c	; 0x72c <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('+');
		}
		else
		{
			dir = 1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <__data_end>
			step = 0;
     1f8:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <step.1882>
		}
	}
}
     1fc:	00 00       	nop
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	3f 91       	pop	r19
     218:	2f 91       	pop	r18
     21a:	0f 90       	pop	r0
     21c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <encoder_init>:

// encoder initialization
void encoder_init(void)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
	// set button
	BTN_PORT |= BTN;		// pull-up
     22e:	8b e2       	ldi	r24, 0x2B	; 43
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	2b e2       	ldi	r18, 0x2B	; 43
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	f9 01       	movw	r30, r18
     238:	20 81       	ld	r18, Z
     23a:	24 60       	ori	r18, 0x04	; 4
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
	EICRA = (1<<ISC01);		// falling edge
     240:	89 e6       	ldi	r24, 0x69	; 105
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	22 e0       	ldi	r18, 0x02	; 2
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);		// int enable from INT0
     24a:	8d e3       	ldi	r24, 0x3D	; 61
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	fc 01       	movw	r30, r24
     252:	20 83       	st	Z, r18

	// set encoder	
	ENC_A_PORT |= ENC_A;	// pull-up
     254:	8b e2       	ldi	r24, 0x2B	; 43
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	2b e2       	ldi	r18, 0x2B	; 43
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	20 81       	ld	r18, Z
     260:	20 61       	ori	r18, 0x10	; 16
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
	ENC_B_PORT |= ENC_B;	// pull-up
     266:	8b e2       	ldi	r24, 0x2B	; 43
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	2b e2       	ldi	r18, 0x2B	; 43
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	f9 01       	movw	r30, r18
     270:	20 81       	ld	r18, Z
     272:	28 60       	ori	r18, 0x08	; 8
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18

	EICRA |= (1<<ISC11);	// falling edge
     278:	89 e6       	ldi	r24, 0x69	; 105
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	29 e6       	ldi	r18, 0x69	; 105
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	28 60       	ori	r18, 0x08	; 8
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
	EIMSK |= (1<<INT1);		// int enable from INT0
     28a:	8d e3       	ldi	r24, 0x3D	; 61
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2d e3       	ldi	r18, 0x3D	; 61
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	22 60       	ori	r18, 0x02	; 2
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
}
     29c:	00 00       	nop
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <main>:

int main(void)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	2e 97       	sbiw	r28, 0x0e	; 14
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0x00;
     2b8:	84 e2       	ldi	r24, 0x24	; 36
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	10 82       	st	Z, r1
	DDRC = 0x00;
     2c0:	87 e2       	ldi	r24, 0x27	; 39
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	fc 01       	movw	r30, r24
     2c6:	10 82       	st	Z, r1
	DDRD = 0x00;
     2c8:	8a e2       	ldi	r24, 0x2A	; 42
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	fc 01       	movw	r30, r24
     2ce:	10 82       	st	Z, r1

	PORTB = 0x00;
     2d0:	85 e2       	ldi	r24, 0x25	; 37
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	10 82       	st	Z, r1
	PORTC = 0x00;
     2d8:	88 e2       	ldi	r24, 0x28	; 40
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	fc 01       	movw	r30, r24
     2de:	10 82       	st	Z, r1
	PORTD = 0x00;
     2e0:	8b e2       	ldi	r24, 0x2B	; 43
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	fc 01       	movw	r30, r24
     2e6:	10 82       	st	Z, r1

	motor_init();
     2e8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <motor_init>
	encoder_init();
     2ec:	0e 94 13 01 	call	0x226	; 0x226 <encoder_init>
	lcd_init();
     2f0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <lcd_init>
	ntc_init();
     2f4:	0e 94 10 14 	call	0x2820	; 0x2820 <ntc_init>

	sei();
     2f8:	78 94       	sei

	TUI_inti();
     2fa:	0e 94 44 03 	call	0x688	; 0x688 <TUI_inti>
	TUI('s');
     2fe:	83 e7       	ldi	r24, 0x73	; 115
     300:	0e 94 96 03 	call	0x72c	; 0x72c <TUI>
		
	for(;;)
    {
		lcd_printf("\fTeplota: %d%cC", ntc_measure(), 223);
     304:	0e 94 22 14 	call	0x2844	; 0x2844 <ntc_measure>
     308:	1f 92       	push	r1
     30a:	2f ed       	ldi	r18, 0xDF	; 223
     30c:	2f 93       	push	r18
     30e:	29 2f       	mov	r18, r25
     310:	2f 93       	push	r18
     312:	8f 93       	push	r24
     314:	8e e0       	ldi	r24, 0x0E	; 14
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	89 2f       	mov	r24, r25
     31a:	8f 93       	push	r24
     31c:	8e e0       	ldi	r24, 0x0E	; 14
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	8f 93       	push	r24
     322:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	aa e7       	ldi	r26, 0x7A	; 122
     338:	b4 e4       	ldi	r27, 0x44	; 68
     33a:	89 83       	std	Y+1, r24	; 0x01
     33c:	9a 83       	std	Y+2, r25	; 0x02
     33e:	ab 83       	std	Y+3, r26	; 0x03
     340:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e8       	ldi	r19, 0x80	; 128
     346:	4b eb       	ldi	r20, 0xBB	; 187
     348:	55 e4       	ldi	r21, 0x45	; 69
     34a:	69 81       	ldd	r22, Y+1	; 0x01
     34c:	7a 81       	ldd	r23, Y+2	; 0x02
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	9c 81       	ldd	r25, Y+4	; 0x04
     352:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	8d 83       	std	Y+5, r24	; 0x05
     35c:	9e 83       	std	Y+6, r25	; 0x06
     35e:	af 83       	std	Y+7, r26	; 0x07
     360:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e8       	ldi	r20, 0x80	; 128
     368:	5f e3       	ldi	r21, 0x3F	; 63
     36a:	6d 81       	ldd	r22, Y+5	; 0x05
     36c:	7e 81       	ldd	r23, Y+6	; 0x06
     36e:	8f 81       	ldd	r24, Y+7	; 0x07
     370:	98 85       	ldd	r25, Y+8	; 0x08
     372:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
     376:	88 23       	and	r24, r24
     378:	2c f4       	brge	.+10     	; 0x384 <main+0xe0>
		__ticks = 1;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	9a 87       	std	Y+10, r25	; 0x0a
     380:	89 87       	std	Y+9, r24	; 0x09
     382:	3f c0       	rjmp	.+126    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	else if (__tmp > 65535)
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	3f ef       	ldi	r19, 0xFF	; 255
     388:	4f e7       	ldi	r20, 0x7F	; 127
     38a:	57 e4       	ldi	r21, 0x47	; 71
     38c:	6d 81       	ldd	r22, Y+5	; 0x05
     38e:	7e 81       	ldd	r23, Y+6	; 0x06
     390:	8f 81       	ldd	r24, Y+7	; 0x07
     392:	98 85       	ldd	r25, Y+8	; 0x08
     394:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
     398:	18 16       	cp	r1, r24
     39a:	4c f5       	brge	.+82     	; 0x3ee <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	40 e2       	ldi	r20, 0x20	; 32
     3a2:	51 e4       	ldi	r21, 0x41	; 65
     3a4:	69 81       	ldd	r22, Y+1	; 0x01
     3a6:	7a 81       	ldd	r23, Y+2	; 0x02
     3a8:	8b 81       	ldd	r24, Y+3	; 0x03
     3aa:	9c 81       	ldd	r25, Y+4	; 0x04
     3ac:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	bc 01       	movw	r22, r24
     3b6:	cd 01       	movw	r24, r26
     3b8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	9a 87       	std	Y+10, r25	; 0x0a
     3c2:	89 87       	std	Y+9, r24	; 0x09
     3c4:	0f c0       	rjmp	.+30     	; 0x3e4 <main+0x140>
     3c6:	88 e5       	ldi	r24, 0x58	; 88
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	9c 87       	std	Y+12, r25	; 0x0c
     3cc:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     3d0:	9c 85       	ldd	r25, Y+12	; 0x0c
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <main+0x12e>
     3d6:	9c 87       	std	Y+12, r25	; 0x0c
     3d8:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3da:	89 85       	ldd	r24, Y+9	; 0x09
     3dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     3de:	01 97       	sbiw	r24, 0x01	; 1
     3e0:	9a 87       	std	Y+10, r25	; 0x0a
     3e2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	89 85       	ldd	r24, Y+9	; 0x09
     3e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e8:	89 2b       	or	r24, r25
     3ea:	69 f7       	brne	.-38     	; 0x3c6 <main+0x122>
     3ec:	14 c0       	rjmp	.+40     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ee:	6d 81       	ldd	r22, Y+5	; 0x05
     3f0:	7e 81       	ldd	r23, Y+6	; 0x06
     3f2:	8f 81       	ldd	r24, Y+7	; 0x07
     3f4:	98 85       	ldd	r25, Y+8	; 0x08
     3f6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
     3fa:	dc 01       	movw	r26, r24
     3fc:	cb 01       	movw	r24, r22
     3fe:	9a 87       	std	Y+10, r25	; 0x0a
     400:	89 87       	std	Y+9, r24	; 0x09
     402:	89 85       	ldd	r24, Y+9	; 0x09
     404:	9a 85       	ldd	r25, Y+10	; 0x0a
     406:	9e 87       	std	Y+14, r25	; 0x0e
     408:	8d 87       	std	Y+13, r24	; 0x0d
     40a:	8d 85       	ldd	r24, Y+13	; 0x0d
     40c:	9e 85       	ldd	r25, Y+14	; 0x0e
     40e:	01 97       	sbiw	r24, 0x01	; 1
     410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     412:	9e 87       	std	Y+14, r25	; 0x0e
     414:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(1000);
    }
     416:	76 cf       	rjmp	.-276    	; 0x304 <main+0x60>

00000418 <TUI_sec_timer_init>:
#define EEP_ADDR		(void *)0x10
#define eep_read()		eeprom_read_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))
#define eep_update()	eeprom_update_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))

void TUI_sec_timer_init(void)
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	TUI_sec_timer_stop();
     420:	0e 94 33 02 	call	0x466	; 0x466 <TUI_sec_timer_stop>
	TCCR1A = 0;
     424:	80 e8       	ldi	r24, 0x80	; 128
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	fc 01       	movw	r30, r24
     42a:	10 82       	st	Z, r1
	OCR1A = F_CPU / 1024;							// TOP value for 1 sec
     42c:	88 e8       	ldi	r24, 0x88	; 136
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2d e8       	ldi	r18, 0x8D	; 141
     432:	3b e5       	ldi	r19, 0x5B	; 91
     434:	fc 01       	movw	r30, r24
     436:	31 83       	std	Z+1, r19	; 0x01
     438:	20 83       	st	Z, r18
	TIMSK1 = (1<<OCIE1A);							// compare IT enable
     43a:	8f e6       	ldi	r24, 0x6F	; 111
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	22 e0       	ldi	r18, 0x02	; 2
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
}
     444:	00 00       	nop
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <TUI_sec_timer_start>:
void TUI_sec_timer_start(void)
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);	// CTC mode clk/1024
     454:	81 e8       	ldi	r24, 0x81	; 129
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	2d e0       	ldi	r18, 0x0D	; 13
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
}
     45e:	00 00       	nop
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <TUI_sec_timer_stop>:
void TUI_sec_timer_stop(void)
{
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12);							// CTC mode clk = 0
     46e:	81 e8       	ldi	r24, 0x81	; 129
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	28 e0       	ldi	r18, 0x08	; 8
     474:	fc 01       	movw	r30, r24
     476:	20 83       	st	Z, r18
}
     478:	00 00       	nop
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
     480:	1f 92       	push	r1
     482:	0f 92       	push	r0
     484:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
	if (machine_state == MACHINE_START)
     4ac:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <machine_state>
     4b0:	88 23       	and	r24, r24
     4b2:	a9 f5       	brne	.+106    	; 0x51e <__vector_11+0x9e>
	{
		if (user_profile.sec > 0)
     4b4:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     4b8:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     4bc:	89 2b       	or	r24, r25
     4be:	49 f0       	breq	.+18     	; 0x4d2 <__vector_11+0x52>
		{
			user_profile.sec--;
     4c0:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     4c4:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <user_profile+0x3>
     4ce:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <user_profile+0x2>
		}
		if (!user_profile.sec)
     4d2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     4d6:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     4da:	89 2b       	or	r24, r25
     4dc:	e9 f4       	brne	.+58     	; 0x518 <__vector_11+0x98>
		{
			motor_smoothly_rmp(user_profile.rpm, 0);
     4de:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
     4e2:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <motor_smoothly_rmp>
			TUI_sec_timer_stop();
     4ee:	0e 94 33 02 	call	0x466	; 0x466 <TUI_sec_timer_stop>
			machine_state = MACHINE_STOP;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <machine_state>
			user_profile = backup_profile;
     4f8:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
     4fc:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
     500:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     504:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     508:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <user_profile>
     50c:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <user_profile+0x1>
     510:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <user_profile+0x2>
     514:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <user_profile+0x3>
		}
		TUI('s');
     518:	83 e7       	ldi	r24, 0x73	; 115
     51a:	0e 94 96 03 	call	0x72c	; 0x72c <TUI>
	}
}
     51e:	00 00       	nop
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	ff 91       	pop	r31
     526:	ef 91       	pop	r30
     528:	bf 91       	pop	r27
     52a:	af 91       	pop	r26
     52c:	9f 91       	pop	r25
     52e:	8f 91       	pop	r24
     530:	7f 91       	pop	r23
     532:	6f 91       	pop	r22
     534:	5f 91       	pop	r21
     536:	4f 91       	pop	r20
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <TUI_back_timer_init>:


void TUI_back_timer_init(void)
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;									// normal mode
     550:	84 e4       	ldi	r24, 0x44	; 68
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	fc 01       	movw	r30, r24
     556:	10 82       	st	Z, r1
	TCCR0B = (1<<CS02) | (1<<CS00);				// clk/1024
     558:	85 e4       	ldi	r24, 0x45	; 69
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	25 e0       	ldi	r18, 0x05	; 5
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
	TIMSK0 = (1<<TOIE0);						// compare IT enable
     562:	8e e6       	ldi	r24, 0x6E	; 110
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	fc 01       	movw	r30, r24
     56a:	20 83       	st	Z, r18
	TUI_back_timer_clear();
     56c:	0e 94 bc 02 	call	0x578	; 0x578 <TUI_back_timer_clear>
}
     570:	00 00       	nop
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <TUI_back_timer_clear>:
void TUI_back_timer_clear(void)
{
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
	back_tick = 0;
     580:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <back_tick>
     584:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <back_tick+0x1>
     588:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <back_tick+0x2>
     58c:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <back_tick+0x3>
	TCNT0 = 0;
     590:	86 e4       	ldi	r24, 0x46	; 70
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	10 82       	st	Z, r1
}
     598:	00 00       	nop
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     5a8:	0f 92       	push	r0
     5aa:	11 24       	eor	r1, r1
     5ac:	2f 93       	push	r18
     5ae:	3f 93       	push	r19
     5b0:	4f 93       	push	r20
     5b2:	5f 93       	push	r21
     5b4:	6f 93       	push	r22
     5b6:	7f 93       	push	r23
     5b8:	8f 93       	push	r24
     5ba:	9f 93       	push	r25
     5bc:	af 93       	push	r26
     5be:	bf 93       	push	r27
     5c0:	ef 93       	push	r30
     5c2:	ff 93       	push	r31
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	1f 92       	push	r1
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
	const uint8_t sec_to_return = 3;
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	89 83       	std	Y+1, r24	; 0x01
	back_tick++;
     5d2:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <back_tick>
     5d6:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <back_tick+0x1>
     5da:	a0 91 f1 02 	lds	r26, 0x02F1	; 0x8002f1 <back_tick+0x2>
     5de:	b0 91 f2 02 	lds	r27, 0x02F2	; 0x8002f2 <back_tick+0x3>
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	a1 1d       	adc	r26, r1
     5e6:	b1 1d       	adc	r27, r1
     5e8:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <back_tick>
     5ec:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <back_tick+0x1>
     5f0:	a0 93 f1 02 	sts	0x02F1, r26	; 0x8002f1 <back_tick+0x2>
     5f4:	b0 93 f2 02 	sts	0x02F2, r27	; 0x8002f2 <back_tick+0x3>
	if (back_tick == ( (((uint32_t) sec_to_return) * ((uint32_t) F_CPU)) / (((uint32_t) 256) * ((uint32_t) 1024))) )
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	88 2f       	mov	r24, r24
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	a0 e0       	ldi	r26, 0x00	; 0
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	9c 01       	movw	r18, r24
     604:	ad 01       	movw	r20, r26
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	76 e3       	ldi	r23, 0x36	; 54
     60a:	8e e6       	ldi	r24, 0x6E	; 110
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 41 1a 	call	0x3482	; 0x3482 <__mulsi3>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	9c 01       	movw	r18, r24
     618:	ad 01       	movw	r20, r26
     61a:	01 2e       	mov	r0, r17
     61c:	12 e1       	ldi	r17, 0x12	; 18
     61e:	56 95       	lsr	r21
     620:	47 95       	ror	r20
     622:	37 95       	ror	r19
     624:	27 95       	ror	r18
     626:	1a 95       	dec	r17
     628:	d1 f7       	brne	.-12     	; 0x61e <__vector_16+0x7e>
     62a:	10 2d       	mov	r17, r0
     62c:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <back_tick>
     630:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <back_tick+0x1>
     634:	a0 91 f1 02 	lds	r26, 0x02F1	; 0x8002f1 <back_tick+0x2>
     638:	b0 91 f2 02 	lds	r27, 0x02F2	; 0x8002f2 <back_tick+0x3>
     63c:	28 17       	cp	r18, r24
     63e:	39 07       	cpc	r19, r25
     640:	4a 07       	cpc	r20, r26
     642:	5b 07       	cpc	r21, r27
     644:	59 f4       	brne	.+22     	; 0x65c <__vector_16+0xbc>
	{
		TUI_back_timer_clear();
     646:	0e 94 bc 02 	call	0x578	; 0x578 <TUI_back_timer_clear>
		if (menu != MAIN_MENU)
     64a:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <menu>
     64e:	88 23       	and	r24, r24
     650:	29 f0       	breq	.+10     	; 0x65c <__vector_16+0xbc>
		{
			menu = MAIN_MENU;
     652:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <menu>
			TUI('s');
     656:	83 e7       	ldi	r24, 0x73	; 115
     658:	0e 94 96 03 	call	0x72c	; 0x72c <TUI>
		}
	}
}
     65c:	00 00       	nop
     65e:	0f 90       	pop	r0
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <TUI_inti>:

void TUI_inti(void)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	menu = MAIN_MENU;
     690:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <menu>
	machine_state = MACHINE_STOP;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <machine_state>
	actual_rmp = 0;
     69a:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <actual_rmp+0x1>
     69e:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <actual_rmp>

	TUI_sec_timer_init();
     6a2:	0e 94 0c 02 	call	0x418	; 0x418 <TUI_sec_timer_init>
	TUI_back_timer_init();
     6a6:	0e 94 a4 02 	call	0x548	; 0x548 <TUI_back_timer_init>

	// EEPROM is empty
	if (eeprom_read_byte(EEP_ADDR) == 0xFF)
     6aa:	80 e1       	ldi	r24, 0x10	; 16
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 c5 1a 	call	0x358a	; 0x358a <eeprom_read_byte>
     6b2:	8f 3f       	cpi	r24, 0xFF	; 255
     6b4:	41 f4       	brne	.+16     	; 0x6c6 <TUI_inti+0x3e>
	{
		eep_update();
     6b6:	4d e0       	ldi	r20, 0x0D	; 13
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e1       	ldi	r22, 0x10	; 16
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	0e 94 cd 1a 	call	0x359a	; 0x359a <eeprom_update_block>
	}
	eep_read();
     6c6:	4d e0       	ldi	r20, 0x0D	; 13
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e1       	ldi	r22, 0x10	; 16
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 b5 1a 	call	0x356a	; 0x356a <eeprom_read_block>

	user_profile = eeprom_data.profile[eeprom_data.profile_id];
     6d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6da:	88 2f       	mov	r24, r24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	8f 5f       	subi	r24, 0xFF	; 255
     6e8:	9e 4f       	sbci	r25, 0xFE	; 254
     6ea:	fc 01       	movw	r30, r24
     6ec:	80 81       	ld	r24, Z
     6ee:	91 81       	ldd	r25, Z+1	; 0x01
     6f0:	a2 81       	ldd	r26, Z+2	; 0x02
     6f2:	b3 81       	ldd	r27, Z+3	; 0x03
     6f4:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <user_profile>
     6f8:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <user_profile+0x1>
     6fc:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <user_profile+0x2>
     700:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <user_profile+0x3>
	backup_profile = user_profile;
     704:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
     708:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
     70c:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <user_profile+0x2>
     710:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <user_profile+0x3>
     714:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <backup_profile>
     718:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <backup_profile+0x1>
     71c:	a0 93 f5 02 	sts	0x02F5, r26	; 0x8002f5 <backup_profile+0x2>
     720:	b0 93 f6 02 	sts	0x02F6, r27	; 0x8002f6 <backup_profile+0x3>
}
     724:	00 00       	nop
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <TUI>:

void TUI(char action)
{
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	00 d0       	rcall	.+0      	; 0x732 <TUI+0x6>
     732:	00 d0       	rcall	.+0      	; 0x734 <TUI+0x8>
     734:	1f 92       	push	r1
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	8d 83       	std	Y+5, r24	; 0x05
	static item_menu_select_t item_menu_secect = ITEM_MENU_SELECT_RPM;
	static load_menu_select_t load_menu_select = LOAD_MENU_SELECT_PROFILE1;
	static save_menu_select_t save_menu_select = SAVE_MENU_SELECT_PROFILE1;

	// nastaveni
	switch (menu)
     73c:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <menu>
     740:	88 2f       	mov	r24, r24
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	82 30       	cpi	r24, 0x02	; 2
     746:	91 05       	cpc	r25, r1
     748:	09 f4       	brne	.+2      	; 0x74c <TUI+0x20>
     74a:	ee c0       	rjmp	.+476    	; 0x928 <__stack+0x29>
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	91 05       	cpc	r25, r1
     750:	34 f4       	brge	.+12     	; 0x75e <TUI+0x32>
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	81 f0       	breq	.+32     	; 0x776 <TUI+0x4a>
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	09 f4       	brne	.+2      	; 0x75c <TUI+0x30>
     75a:	84 c0       	rjmp	.+264    	; 0x864 <TUI+0x138>
     75c:	28 c2       	rjmp	.+1104   	; 0xbae <__stack+0x2af>
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	91 05       	cpc	r25, r1
     762:	09 f4       	brne	.+2      	; 0x766 <TUI+0x3a>
     764:	69 c1       	rjmp	.+722    	; 0xa38 <__stack+0x139>
     766:	84 30       	cpi	r24, 0x04	; 4
     768:	91 05       	cpc	r25, r1
     76a:	0c f4       	brge	.+2      	; 0x76e <TUI+0x42>
     76c:	21 c1       	rjmp	.+578    	; 0x9b0 <__stack+0xb1>
     76e:	05 97       	sbiw	r24, 0x05	; 5
     770:	09 f4       	brne	.+2      	; 0x774 <TUI+0x48>
     772:	bf c1       	rjmp	.+894    	; 0xaf2 <__stack+0x1f3>
     774:	1c c2       	rjmp	.+1080   	; 0xbae <__stack+0x2af>
	{
		case MAIN_MENU:
			switch (action)
     776:	8d 81       	ldd	r24, Y+5	; 0x05
     778:	88 2f       	mov	r24, r24
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	8d 32       	cpi	r24, 0x2D	; 45
     77e:	91 05       	cpc	r25, r1
     780:	31 f0       	breq	.+12     	; 0x78e <TUI+0x62>
     782:	82 36       	cpi	r24, 0x62	; 98
     784:	91 05       	cpc	r25, r1
     786:	89 f0       	breq	.+34     	; 0x7aa <TUI+0x7e>
     788:	8b 97       	sbiw	r24, 0x2b	; 43
     78a:	09 f0       	breq	.+2      	; 0x78e <TUI+0x62>
					break;

				default:
					;
			}
			break;
     78c:	10 c2       	rjmp	.+1056   	; 0xbae <__stack+0x2af>
			{
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
     78e:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <machine_state>
     792:	88 23       	and	r24, r24
     794:	09 f4       	brne	.+2      	; 0x798 <TUI+0x6c>
     796:	64 c0       	rjmp	.+200    	; 0x860 <TUI+0x134>
						break;
					main_menu_secelt = (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ? MAIN_MENU_SELECT_MENU : MAIN_MENU_SELECT_CONTOL;
     798:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <main_menu_secelt.1906>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	99 23       	and	r25, r25
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <TUI+0x78>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <main_menu_secelt.1906>
					break;
     7a8:	5c c0       	rjmp	.+184    	; 0x862 <TUI+0x136>

				// stisk tlacitka
				case 'b':
					if (main_menu_secelt == MAIN_MENU_SELECT_CONTOL)
     7aa:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <main_menu_secelt.1906>
     7ae:	88 23       	and	r24, r24
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <TUI+0x88>
     7b2:	42 c0       	rjmp	.+132    	; 0x838 <TUI+0x10c>
					{
						if (machine_state == MACHINE_STOP)
     7b4:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <machine_state>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	01 f5       	brne	.+64     	; 0x7fc <TUI+0xd0>
						{
							machine_state = MACHINE_START;
     7bc:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <machine_state>
							backup_profile = user_profile;
     7c0:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
     7c4:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
     7c8:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <user_profile+0x2>
     7cc:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <user_profile+0x3>
     7d0:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <backup_profile>
     7d4:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <backup_profile+0x1>
     7d8:	a0 93 f5 02 	sts	0x02F5, r26	; 0x8002f5 <backup_profile+0x2>
     7dc:	b0 93 f6 02 	sts	0x02F6, r27	; 0x8002f6 <backup_profile+0x3>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);
     7e0:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <user_profile>
     7e4:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <user_profile+0x1>
     7e8:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <actual_rmp>
     7ec:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <actual_rmp+0x1>
     7f0:	b9 01       	movw	r22, r18
     7f2:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <motor_smoothly_rmp>
							TUI_sec_timer_start();
     7f6:	0e 94 26 02 	call	0x44c	; 0x44c <TUI_sec_timer_start>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     7fa:	33 c0       	rjmp	.+102    	; 0x862 <TUI+0x136>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);
							TUI_sec_timer_start();
						}
						else
						{
							machine_state = MACHINE_STOP;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <machine_state>
							motor_smoothly_rmp(user_profile.rpm, 0);
     802:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
     806:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <motor_smoothly_rmp>
							TUI_sec_timer_stop();
     812:	0e 94 33 02 	call	0x466	; 0x466 <TUI_sec_timer_stop>
							user_profile = backup_profile;
     816:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
     81a:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
     81e:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     822:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     826:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <user_profile>
     82a:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <user_profile+0x1>
     82e:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <user_profile+0x2>
     832:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <user_profile+0x3>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     836:	15 c0       	rjmp	.+42     	; 0x862 <TUI+0x136>
							user_profile = backup_profile;
						}
					}
					else
					{
						menu = ITEM_MENU;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <menu>
						backup_profile = user_profile;
     83e:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
     842:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
     846:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <user_profile+0x2>
     84a:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <user_profile+0x3>
     84e:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <backup_profile>
     852:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <backup_profile+0x1>
     856:	a0 93 f5 02 	sts	0x02F5, r26	; 0x8002f5 <backup_profile+0x2>
     85a:	b0 93 f6 02 	sts	0x02F6, r27	; 0x8002f6 <backup_profile+0x3>
					}
					break;
     85e:	01 c0       	rjmp	.+2      	; 0x862 <TUI+0x136>
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
						break;
     860:	00 00       	nop
					break;

				default:
					;
			}
			break;
     862:	a5 c1       	rjmp	.+842    	; 0xbae <__stack+0x2af>

		case ITEM_MENU:
			switch (action)
     864:	8d 81       	ldd	r24, Y+5	; 0x05
     866:	88 2f       	mov	r24, r24
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	8d 32       	cpi	r24, 0x2D	; 45
     86c:	91 05       	cpc	r25, r1
     86e:	11 f1       	breq	.+68     	; 0x8b4 <TUI+0x188>
     870:	82 36       	cpi	r24, 0x62	; 98
     872:	91 05       	cpc	r25, r1
     874:	d9 f1       	breq	.+118    	; 0x8ec <TUI+0x1c0>
     876:	8b 97       	sbiw	r24, 0x2b	; 43
     878:	09 f0       	breq	.+2      	; 0x87c <TUI+0x150>
					break;

				default:
					;
			}
			break;
     87a:	99 c1       	rjmp	.+818    	; 0xbae <__stack+0x2af>

		case ITEM_MENU:
			switch (action)
			{
				case '+':
					switch (item_menu_secect)
     87c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <item_menu_secect.1907>
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	91 05       	cpc	r25, r1
     888:	49 f0       	breq	.+18     	; 0x89c <TUI+0x170>
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	91 05       	cpc	r25, r1
     88e:	51 f0       	breq	.+20     	; 0x8a4 <TUI+0x178>
     890:	89 2b       	or	r24, r25
     892:	61 f4       	brne	.+24     	; 0x8ac <TUI+0x180>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <item_menu_secect.1907>
							break;
     89a:	0b c0       	rjmp	.+22     	; 0x8b2 <TUI+0x186>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <item_menu_secect.1907>
							break;
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <TUI+0x186>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <item_menu_secect.1907>
							break;
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <TUI+0x186>
						default:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     8ac:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <item_menu_secect.1907>
					}
					break;
     8b0:	3a c0       	rjmp	.+116    	; 0x926 <__stack+0x27>
     8b2:	39 c0       	rjmp	.+114    	; 0x926 <__stack+0x27>

				case  '-':
					switch (item_menu_secect)
     8b4:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <item_menu_secect.1907>
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	91 05       	cpc	r25, r1
     8c0:	49 f0       	breq	.+18     	; 0x8d4 <TUI+0x1a8>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	91 05       	cpc	r25, r1
     8c6:	49 f0       	breq	.+18     	; 0x8da <TUI+0x1ae>
     8c8:	89 2b       	or	r24, r25
     8ca:	59 f4       	brne	.+22     	; 0x8e2 <TUI+0x1b6>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <item_menu_secect.1907>
							break;
     8d2:	0b c0       	rjmp	.+22     	; 0x8ea <TUI+0x1be>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     8d4:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <item_menu_secect.1907>
							break;
     8d8:	08 c0       	rjmp	.+16     	; 0x8ea <TUI+0x1be>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <item_menu_secect.1907>
							break;
     8e0:	04 c0       	rjmp	.+8      	; 0x8ea <TUI+0x1be>
						default:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <item_menu_secect.1907>
					}
					break;
     8e8:	1e c0       	rjmp	.+60     	; 0x926 <__stack+0x27>
     8ea:	1d c0       	rjmp	.+58     	; 0x926 <__stack+0x27>

				case 'b':
					switch (item_menu_secect)
     8ec:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <item_menu_secect.1907>
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	91 05       	cpc	r25, r1
     8f8:	49 f0       	breq	.+18     	; 0x90c <__stack+0xd>
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	91 05       	cpc	r25, r1
     8fe:	51 f0       	breq	.+20     	; 0x914 <__stack+0x15>
     900:	89 2b       	or	r24, r25
     902:	61 f4       	brne	.+24     	; 0x91c <__stack+0x1d>
					{
						case ITEM_MENU_SELECT_RPM:
							menu = RPM_MENU;
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <menu>
							break;
     90a:	0c c0       	rjmp	.+24     	; 0x924 <__stack+0x25>
						case ITEM_MENU_SELECT_TIME:
							menu = TIME_MENU;
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <menu>
							break;
     912:	08 c0       	rjmp	.+16     	; 0x924 <__stack+0x25>
						case ITEM_MENU_SELECT_LOAD:
							menu = LOAD_MENU;
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <menu>
							break;
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0x25>
						default:
							menu = SAVE_MENU;
     91c:	85 e0       	ldi	r24, 0x05	; 5
     91e:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <menu>
					}
					break;
     922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0x25>
     924:	00 00       	nop

				default:
					;
			}
			break;
     926:	43 c1       	rjmp	.+646    	; 0xbae <__stack+0x2af>

		case RPM_MENU:
			switch (action)
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	8d 32       	cpi	r24, 0x2D	; 45
     930:	91 05       	cpc	r25, r1
     932:	b9 f0       	breq	.+46     	; 0x962 <__stack+0x63>
     934:	82 36       	cpi	r24, 0x62	; 98
     936:	91 05       	cpc	r25, r1
     938:	21 f1       	breq	.+72     	; 0x982 <__stack+0x83>
     93a:	8b 97       	sbiw	r24, 0x2b	; 43
     93c:	09 f0       	breq	.+2      	; 0x940 <__stack+0x41>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     93e:	37 c1       	rjmp	.+622    	; 0xbae <__stack+0x2af>

		case RPM_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
     940:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
     944:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
     948:	8c 32       	cpi	r24, 0x2C	; 44
     94a:	91 40       	sbci	r25, 0x01	; 1
     94c:	68 f5       	brcc	.+90     	; 0x9a8 <__stack+0xa9>
						backup_profile.rpm++;
     94e:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
     952:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <backup_profile+0x1>
     95c:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <backup_profile>
					break;
     960:	23 c0       	rjmp	.+70     	; 0x9a8 <__stack+0xa9>
				case '-':
					if (backup_profile.rpm > 0)
     962:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
     966:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
     96a:	89 2b       	or	r24, r25
     96c:	f9 f0       	breq	.+62     	; 0x9ac <__stack+0xad>
						backup_profile.rpm--;
     96e:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
     972:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	90 93 f4 02 	sts	0x02F4, r25	; 0x8002f4 <backup_profile+0x1>
     97c:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <backup_profile>
					break;
     980:	15 c0       	rjmp	.+42     	; 0x9ac <__stack+0xad>
				case  'b':
					menu = MAIN_MENU;
     982:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <menu>
					user_profile = backup_profile;
     986:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
     98a:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
     98e:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     992:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     996:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <user_profile>
     99a:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <user_profile+0x1>
     99e:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <user_profile+0x2>
     9a2:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <user_profile+0x3>
					break;
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <__stack+0xaf>
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
						backup_profile.rpm++;
					break;
     9a8:	00 00       	nop
     9aa:	01 c1       	rjmp	.+514    	; 0xbae <__stack+0x2af>
				case '-':
					if (backup_profile.rpm > 0)
						backup_profile.rpm--;
					break;
     9ac:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     9ae:	ff c0       	rjmp	.+510    	; 0xbae <__stack+0x2af>

		case TIME_MENU:
			switch (action)
     9b0:	8d 81       	ldd	r24, Y+5	; 0x05
     9b2:	88 2f       	mov	r24, r24
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	8d 32       	cpi	r24, 0x2D	; 45
     9b8:	91 05       	cpc	r25, r1
     9ba:	b9 f0       	breq	.+46     	; 0x9ea <__stack+0xeb>
     9bc:	82 36       	cpi	r24, 0x62	; 98
     9be:	91 05       	cpc	r25, r1
     9c0:	21 f1       	breq	.+72     	; 0xa0a <__stack+0x10b>
     9c2:	8b 97       	sbiw	r24, 0x2b	; 43
     9c4:	09 f0       	breq	.+2      	; 0x9c8 <__stack+0xc9>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     9c6:	f3 c0       	rjmp	.+486    	; 0xbae <__stack+0x2af>

		case TIME_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
     9c8:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     9cc:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     9d0:	80 3a       	cpi	r24, 0xA0	; 160
     9d2:	9c 48       	sbci	r25, 0x8C	; 140
     9d4:	68 f5       	brcc	.+90     	; 0xa30 <__stack+0x131>
						backup_profile.sec+=60;
     9d6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     9da:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     9de:	cc 96       	adiw	r24, 0x3c	; 60
     9e0:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <backup_profile+0x3>
     9e4:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <backup_profile+0x2>
					break;
     9e8:	23 c0       	rjmp	.+70     	; 0xa30 <__stack+0x131>
				case '-':
					if (backup_profile.sec > 0)
     9ea:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     9ee:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     9f2:	89 2b       	or	r24, r25
     9f4:	f9 f0       	breq	.+62     	; 0xa34 <__stack+0x135>
						backup_profile.sec-=60;
     9f6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     9fa:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     9fe:	cc 97       	sbiw	r24, 0x3c	; 60
     a00:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <backup_profile+0x3>
     a04:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <backup_profile+0x2>
					break;
     a08:	15 c0       	rjmp	.+42     	; 0xa34 <__stack+0x135>
				case  'b':
					menu = MAIN_MENU;
     a0a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <menu>
					user_profile = backup_profile;
     a0e:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
     a12:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
     a16:	a0 91 f5 02 	lds	r26, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     a1a:	b0 91 f6 02 	lds	r27, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     a1e:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <user_profile>
     a22:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <user_profile+0x1>
     a26:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <user_profile+0x2>
     a2a:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <user_profile+0x3>
					break;
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <__stack+0x137>
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
						backup_profile.sec+=60;
					break;
     a30:	00 00       	nop
     a32:	bd c0       	rjmp	.+378    	; 0xbae <__stack+0x2af>
				case '-':
					if (backup_profile.sec > 0)
						backup_profile.sec-=60;
					break;
     a34:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     a36:	bb c0       	rjmp	.+374    	; 0xbae <__stack+0x2af>

		case LOAD_MENU:
			switch (action)
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	88 2f       	mov	r24, r24
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	8d 32       	cpi	r24, 0x2D	; 45
     a40:	91 05       	cpc	r25, r1
     a42:	d9 f0       	breq	.+54     	; 0xa7a <__stack+0x17b>
     a44:	82 36       	cpi	r24, 0x62	; 98
     a46:	91 05       	cpc	r25, r1
     a48:	69 f1       	breq	.+90     	; 0xaa4 <__stack+0x1a5>
     a4a:	8b 97       	sbiw	r24, 0x2b	; 43
     a4c:	09 f0       	breq	.+2      	; 0xa50 <__stack+0x151>
					eep_update();
					break;
				default:
				;
			}
			break;
     a4e:	af c0       	rjmp	.+350    	; 0xbae <__stack+0x2af>

		case LOAD_MENU:
			switch (action)
			{
				case '+':
					switch (load_menu_select)
     a50:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <load_menu_select.1908>
     a54:	88 2f       	mov	r24, r24
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	19 f0       	breq	.+6      	; 0xa62 <__stack+0x163>
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	29 f0       	breq	.+10     	; 0xa6a <__stack+0x16b>
     a60:	08 c0       	rjmp	.+16     	; 0xa72 <__stack+0x173>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <load_menu_select.1908>
							break;
     a68:	07 c0       	rjmp	.+14     	; 0xa78 <__stack+0x179>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <load_menu_select.1908>
							break;
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <__stack+0x179>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     a72:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <load_menu_select.1908>
					}
					break;
     a76:	3c c0       	rjmp	.+120    	; 0xaf0 <__stack+0x1f1>
     a78:	3b c0       	rjmp	.+118    	; 0xaf0 <__stack+0x1f1>
				case '-':
					switch (load_menu_select)
     a7a:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <load_menu_select.1908>
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	00 97       	sbiw	r24, 0x00	; 0
     a84:	19 f0       	breq	.+6      	; 0xa8c <__stack+0x18d>
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	29 f0       	breq	.+10     	; 0xa94 <__stack+0x195>
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <__stack+0x19b>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <load_menu_select.1908>
							break;
     a92:	07 c0       	rjmp	.+14     	; 0xaa2 <__stack+0x1a3>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     a94:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <load_menu_select.1908>
							break;
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <__stack+0x1a3>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <load_menu_select.1908>
					}
					break;
     aa0:	27 c0       	rjmp	.+78     	; 0xaf0 <__stack+0x1f1>
     aa2:	26 c0       	rjmp	.+76     	; 0xaf0 <__stack+0x1f1>
				case  'b':
					menu = MAIN_MENU;
     aa4:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <menu>
					eeprom_data.profile_id = load_menu_select;
     aa8:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <load_menu_select.1908>
     aac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					user_profile = eeprom_data.profile[eeprom_data.profile_id];
     ab0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ab4:	88 2f       	mov	r24, r24
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	88 0f       	add	r24, r24
     abe:	99 1f       	adc	r25, r25
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	9e 4f       	sbci	r25, 0xFE	; 254
     ac4:	fc 01       	movw	r30, r24
     ac6:	80 81       	ld	r24, Z
     ac8:	91 81       	ldd	r25, Z+1	; 0x01
     aca:	a2 81       	ldd	r26, Z+2	; 0x02
     acc:	b3 81       	ldd	r27, Z+3	; 0x03
     ace:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <user_profile>
     ad2:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <user_profile+0x1>
     ad6:	a0 93 ed 02 	sts	0x02ED, r26	; 0x8002ed <user_profile+0x2>
     ada:	b0 93 ee 02 	sts	0x02EE, r27	; 0x8002ee <user_profile+0x3>
					eep_update();
     ade:	4d e0       	ldi	r20, 0x0D	; 13
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	60 e1       	ldi	r22, 0x10	; 16
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	0e 94 cd 1a 	call	0x359a	; 0x359a <eeprom_update_block>
					break;
     aee:	00 00       	nop
				default:
				;
			}
			break;
     af0:	5e c0       	rjmp	.+188    	; 0xbae <__stack+0x2af>

		case SAVE_MENU:
			switch (action)
     af2:	8d 81       	ldd	r24, Y+5	; 0x05
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	8d 32       	cpi	r24, 0x2D	; 45
     afa:	91 05       	cpc	r25, r1
     afc:	d9 f0       	breq	.+54     	; 0xb34 <__stack+0x235>
     afe:	82 36       	cpi	r24, 0x62	; 98
     b00:	91 05       	cpc	r25, r1
     b02:	69 f1       	breq	.+90     	; 0xb5e <__stack+0x25f>
     b04:	8b 97       	sbiw	r24, 0x2b	; 43
     b06:	09 f0       	breq	.+2      	; 0xb0a <__stack+0x20b>
					eep_update();
					break;
				default:
				;
			}
			break;
     b08:	51 c0       	rjmp	.+162    	; 0xbac <__stack+0x2ad>

		case SAVE_MENU:
			switch (action)
			{
				case '+':
					switch (save_menu_select)
     b0a:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <save_menu_select.1909>
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	00 97       	sbiw	r24, 0x00	; 0
     b14:	19 f0       	breq	.+6      	; 0xb1c <__stack+0x21d>
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	29 f0       	breq	.+10     	; 0xb24 <__stack+0x225>
     b1a:	08 c0       	rjmp	.+16     	; 0xb2c <__stack+0x22d>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <save_menu_select.1909>
							break;
     b22:	07 c0       	rjmp	.+14     	; 0xb32 <__stack+0x233>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     b24:	82 e0       	ldi	r24, 0x02	; 2
     b26:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <save_menu_select.1909>
							break;
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__stack+0x233>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     b2c:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <save_menu_select.1909>
					}
					break;
     b30:	3d c0       	rjmp	.+122    	; 0xbac <__stack+0x2ad>
     b32:	3c c0       	rjmp	.+120    	; 0xbac <__stack+0x2ad>
				case '-':
					switch (save_menu_select)
     b34:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <save_menu_select.1909>
     b38:	88 2f       	mov	r24, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	19 f0       	breq	.+6      	; 0xb46 <__stack+0x247>
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	29 f0       	breq	.+10     	; 0xb4e <__stack+0x24f>
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <__stack+0x255>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <save_menu_select.1909>
							break;
     b4c:	07 c0       	rjmp	.+14     	; 0xb5c <__stack+0x25d>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     b4e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <save_menu_select.1909>
							break;
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__stack+0x25d>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <save_menu_select.1909>
					}
					break;
     b5a:	28 c0       	rjmp	.+80     	; 0xbac <__stack+0x2ad>
     b5c:	27 c0       	rjmp	.+78     	; 0xbac <__stack+0x2ad>
				case  'b':
					menu = MAIN_MENU;
     b5e:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <menu>
					eeprom_data.profile_id = save_menu_select;
     b62:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <save_menu_select.1909>
     b66:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					eeprom_data.profile[eeprom_data.profile_id] = user_profile;
     b6a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	9c 01       	movw	r18, r24
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3e 4f       	sbci	r19, 0xFE	; 254
     b80:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
     b84:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
     b88:	a0 91 ed 02 	lds	r26, 0x02ED	; 0x8002ed <user_profile+0x2>
     b8c:	b0 91 ee 02 	lds	r27, 0x02EE	; 0x8002ee <user_profile+0x3>
     b90:	f9 01       	movw	r30, r18
     b92:	80 83       	st	Z, r24
     b94:	91 83       	std	Z+1, r25	; 0x01
     b96:	a2 83       	std	Z+2, r26	; 0x02
     b98:	b3 83       	std	Z+3, r27	; 0x03
					eep_update();
     b9a:	4d e0       	ldi	r20, 0x0D	; 13
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e1       	ldi	r22, 0x10	; 16
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 cd 1a 	call	0x359a	; 0x359a <eeprom_update_block>
					break;
     baa:	00 00       	nop
				default:
				;
			}
			break;
     bac:	00 00       	nop
		default:
			;
	}

	// zobrazeni
	switch (menu)
     bae:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <menu>
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	91 05       	cpc	r25, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <__stack+0x2bf>
     bbc:	09 c2       	rjmp	.+1042   	; 0xfd0 <__stack+0x6d1>
     bbe:	83 30       	cpi	r24, 0x03	; 3
     bc0:	91 05       	cpc	r25, r1
     bc2:	34 f4       	brge	.+12     	; 0xbd0 <__stack+0x2d1>
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <__stack+0x2e9>
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	09 f4       	brne	.+2      	; 0xbce <__stack+0x2cf>
     bcc:	9c c1       	rjmp	.+824    	; 0xf06 <__stack+0x607>
			break;

		default:
		;
	}
}
     bce:	b0 c4       	rjmp	.+2400   	; 0x1530 <__stack+0xc31>
		default:
			;
	}

	// zobrazeni
	switch (menu)
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	91 05       	cpc	r25, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <__stack+0x2d9>
     bd6:	be c2       	rjmp	.+1404   	; 0x1154 <__stack+0x855>
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	91 05       	cpc	r25, r1
     bdc:	0c f4       	brge	.+2      	; 0xbe0 <__stack+0x2e1>
     bde:	37 c2       	rjmp	.+1134   	; 0x104e <__stack+0x74f>
     be0:	05 97       	sbiw	r24, 0x05	; 5
     be2:	09 f4       	brne	.+2      	; 0xbe6 <__stack+0x2e7>
     be4:	ae c3       	rjmp	.+1884   	; 0x1342 <__stack+0xa43>
			break;

		default:
		;
	}
}
     be6:	a4 c4       	rjmp	.+2376   	; 0x1530 <__stack+0xc31>
	// zobrazeni
	switch (menu)
	{
		case MAIN_MENU:

			if (user_profile.sec/3600)
     be8:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     bec:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     bf0:	80 31       	cpi	r24, 0x10	; 16
     bf2:	9e 40       	sbci	r25, 0x0E	; 14
     bf4:	08 f4       	brcc	.+2      	; 0xbf8 <__stack+0x2f9>
     bf6:	5f c0       	rjmp	.+190    	; 0xcb6 <__stack+0x3b7>
				lcd_printf("\fCas:        %2d:%02d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     bf8:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     bfc:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     c00:	20 e1       	ldi	r18, 0x10	; 16
     c02:	3e e0       	ldi	r19, 0x0E	; 14
     c04:	b9 01       	movw	r22, r18
     c06:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
     c0a:	ac 01       	movw	r20, r24
     c0c:	9a 01       	movw	r18, r20
     c0e:	a9 e8       	ldi	r26, 0x89	; 137
     c10:	b8 e8       	ldi	r27, 0x88	; 136
     c12:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
     c16:	fc 01       	movw	r30, r24
     c18:	f6 95       	lsr	r31
     c1a:	e7 95       	ror	r30
     c1c:	f2 95       	swap	r31
     c1e:	e2 95       	swap	r30
     c20:	ef 70       	andi	r30, 0x0F	; 15
     c22:	ef 27       	eor	r30, r31
     c24:	ff 70       	andi	r31, 0x0F	; 15
     c26:	ef 27       	eor	r30, r31
     c28:	2c e3       	ldi	r18, 0x3C	; 60
     c2a:	2e 9f       	mul	r18, r30
     c2c:	c0 01       	movw	r24, r0
     c2e:	2f 9f       	mul	r18, r31
     c30:	90 0d       	add	r25, r0
     c32:	11 24       	eor	r1, r1
     c34:	fa 01       	movw	r30, r20
     c36:	e8 1b       	sub	r30, r24
     c38:	f9 0b       	sbc	r31, r25
     c3a:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     c3e:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     c42:	20 e1       	ldi	r18, 0x10	; 16
     c44:	3e e0       	ldi	r19, 0x0E	; 14
     c46:	b9 01       	movw	r22, r18
     c48:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
     c4c:	9c 01       	movw	r18, r24
     c4e:	a9 e8       	ldi	r26, 0x89	; 137
     c50:	b8 e8       	ldi	r27, 0x88	; 136
     c52:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
     c56:	9c 01       	movw	r18, r24
     c58:	36 95       	lsr	r19
     c5a:	27 95       	ror	r18
     c5c:	32 95       	swap	r19
     c5e:	22 95       	swap	r18
     c60:	2f 70       	andi	r18, 0x0F	; 15
     c62:	23 27       	eor	r18, r19
     c64:	3f 70       	andi	r19, 0x0F	; 15
     c66:	23 27       	eor	r18, r19
     c68:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     c6c:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     c70:	40 e1       	ldi	r20, 0x10	; 16
     c72:	5e e0       	ldi	r21, 0x0E	; 14
     c74:	ba 01       	movw	r22, r20
     c76:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
     c7a:	cb 01       	movw	r24, r22
     c7c:	4f 2f       	mov	r20, r31
     c7e:	4f 93       	push	r20
     c80:	4e 2f       	mov	r20, r30
     c82:	4f 93       	push	r20
     c84:	43 2f       	mov	r20, r19
     c86:	4f 93       	push	r20
     c88:	2f 93       	push	r18
     c8a:	29 2f       	mov	r18, r25
     c8c:	2f 93       	push	r18
     c8e:	8f 93       	push	r24
     c90:	8e e1       	ldi	r24, 0x1E	; 30
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	89 2f       	mov	r24, r25
     c96:	8f 93       	push	r24
     c98:	8e e1       	ldi	r24, 0x1E	; 30
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	8f 93       	push	r24
     c9e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     ca2:	4d b7       	in	r20, 0x3d	; 61
     ca4:	5e b7       	in	r21, 0x3e	; 62
     ca6:	48 5f       	subi	r20, 0xF8	; 248
     ca8:	5f 4f       	sbci	r21, 0xFF	; 255
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	4d c0       	rjmp	.+154    	; 0xd50 <__stack+0x451>
			else
				lcd_printf("\fCas:           %2d:%02d", (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     cb6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     cba:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     cbe:	20 e1       	ldi	r18, 0x10	; 16
     cc0:	3e e0       	ldi	r19, 0x0E	; 14
     cc2:	b9 01       	movw	r22, r18
     cc4:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
     cc8:	ac 01       	movw	r20, r24
     cca:	9a 01       	movw	r18, r20
     ccc:	a9 e8       	ldi	r26, 0x89	; 137
     cce:	b8 e8       	ldi	r27, 0x88	; 136
     cd0:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
     cd4:	fc 01       	movw	r30, r24
     cd6:	f6 95       	lsr	r31
     cd8:	e7 95       	ror	r30
     cda:	f2 95       	swap	r31
     cdc:	e2 95       	swap	r30
     cde:	ef 70       	andi	r30, 0x0F	; 15
     ce0:	ef 27       	eor	r30, r31
     ce2:	ff 70       	andi	r31, 0x0F	; 15
     ce4:	ef 27       	eor	r30, r31
     ce6:	2c e3       	ldi	r18, 0x3C	; 60
     ce8:	2e 9f       	mul	r18, r30
     cea:	c0 01       	movw	r24, r0
     cec:	2f 9f       	mul	r18, r31
     cee:	90 0d       	add	r25, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	fa 01       	movw	r30, r20
     cf4:	e8 1b       	sub	r30, r24
     cf6:	f9 0b       	sbc	r31, r25
     cf8:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     cfc:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     d00:	20 e1       	ldi	r18, 0x10	; 16
     d02:	3e e0       	ldi	r19, 0x0E	; 14
     d04:	b9 01       	movw	r22, r18
     d06:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
     d0a:	9c 01       	movw	r18, r24
     d0c:	a9 e8       	ldi	r26, 0x89	; 137
     d0e:	b8 e8       	ldi	r27, 0x88	; 136
     d10:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
     d14:	96 95       	lsr	r25
     d16:	87 95       	ror	r24
     d18:	92 95       	swap	r25
     d1a:	82 95       	swap	r24
     d1c:	8f 70       	andi	r24, 0x0F	; 15
     d1e:	89 27       	eor	r24, r25
     d20:	9f 70       	andi	r25, 0x0F	; 15
     d22:	89 27       	eor	r24, r25
     d24:	2f 2f       	mov	r18, r31
     d26:	2f 93       	push	r18
     d28:	2e 2f       	mov	r18, r30
     d2a:	2f 93       	push	r18
     d2c:	29 2f       	mov	r18, r25
     d2e:	2f 93       	push	r18
     d30:	8f 93       	push	r24
     d32:	89 e3       	ldi	r24, 0x39	; 57
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	89 2f       	mov	r24, r25
     d38:	8f 93       	push	r24
     d3a:	89 e3       	ldi	r24, 0x39	; 57
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	8f 93       	push	r24
     d40:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
			lcd_printf("\nOtacky:         %4d", user_profile.rpm);
     d50:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
     d54:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
     d58:	29 2f       	mov	r18, r25
     d5a:	2f 93       	push	r18
     d5c:	8f 93       	push	r24
     d5e:	82 e5       	ldi	r24, 0x52	; 82
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	89 2f       	mov	r24, r25
     d64:	8f 93       	push	r24
     d66:	82 e5       	ldi	r24, 0x52	; 82
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	8f 93       	push	r24
     d6c:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0

			switch (machine_state)
     d78:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <machine_state>
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	41 f5       	brne	.+80     	; 0xdd4 <__stack+0x4d5>
			{
				case MACHINE_STOP:
					lcd_printf("\n\n%cStart        %cMenu ", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, (main_menu_secelt == MAIN_MENU_SELECT_MENU) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     d84:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <main_menu_secelt.1906>
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	19 f4       	brne	.+6      	; 0xd92 <__stack+0x493>
     d8c:	28 e0       	ldi	r18, 0x08	; 8
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <__stack+0x497>
     d92:	20 e2       	ldi	r18, 0x20	; 32
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <main_menu_secelt.1906>
     d9a:	88 23       	and	r24, r24
     d9c:	19 f4       	brne	.+6      	; 0xda4 <__stack+0x4a5>
     d9e:	88 e0       	ldi	r24, 0x08	; 8
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <__stack+0x4a9>
     da4:	80 e2       	ldi	r24, 0x20	; 32
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	43 2f       	mov	r20, r19
     daa:	4f 93       	push	r20
     dac:	2f 93       	push	r18
     dae:	29 2f       	mov	r18, r25
     db0:	2f 93       	push	r18
     db2:	8f 93       	push	r24
     db4:	87 e6       	ldi	r24, 0x67	; 103
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	89 2f       	mov	r24, r25
     dba:	8f 93       	push	r24
     dbc:	87 e6       	ldi	r24, 0x67	; 103
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	8f 93       	push	r24
     dc2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
					break;
     dd2:	98 c0       	rjmp	.+304    	; 0xf04 <__stack+0x605>
				default:
					lcd_printf("\n");
     dd4:	80 e8       	ldi	r24, 0x80	; 128
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	89 2f       	mov	r24, r25
     dda:	8f 93       	push	r24
     ddc:	80 e8       	ldi	r24, 0x80	; 128
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	8f 93       	push	r24
     de2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
					// bar to end
					uint32_t bar;
					bar = backup_profile.sec - user_profile.sec;
     dea:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     dee:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     df2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
     df6:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
     dfa:	f9 01       	movw	r30, r18
     dfc:	e8 1b       	sub	r30, r24
     dfe:	f9 0b       	sbc	r31, r25
     e00:	cf 01       	movw	r24, r30
     e02:	cc 01       	movw	r24, r24
     e04:	a0 e0       	ldi	r26, 0x00	; 0
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	ab 83       	std	Y+3, r26	; 0x03
     e0e:	bc 83       	std	Y+4, r27	; 0x04
					if (bar)	// div zero
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	ab 81       	ldd	r26, Y+3	; 0x03
     e16:	bc 81       	ldd	r27, Y+4	; 0x04
     e18:	89 2b       	or	r24, r25
     e1a:	8a 2b       	or	r24, r26
     e1c:	8b 2b       	or	r24, r27
     e1e:	09 f4       	brne	.+2      	; 0xe22 <__stack+0x523>
     e20:	4f c0       	rjmp	.+158    	; 0xec0 <__stack+0x5c1>
					{
						bar *= 20;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	ab 81       	ldd	r26, Y+3	; 0x03
     e28:	bc 81       	ldd	r27, Y+4	; 0x04
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	aa 1f       	adc	r26, r26
     e30:	bb 1f       	adc	r27, r27
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	aa 1f       	adc	r26, r26
     e38:	bb 1f       	adc	r27, r27
     e3a:	9c 01       	movw	r18, r24
     e3c:	ad 01       	movw	r20, r26
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	44 1f       	adc	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	44 1f       	adc	r20, r20
     e4c:	55 1f       	adc	r21, r21
     e4e:	82 0f       	add	r24, r18
     e50:	93 1f       	adc	r25, r19
     e52:	a4 1f       	adc	r26, r20
     e54:	b5 1f       	adc	r27, r21
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	9a 83       	std	Y+2, r25	; 0x02
     e5a:	ab 83       	std	Y+3, r26	; 0x03
     e5c:	bc 83       	std	Y+4, r27	; 0x04
						bar = bar / backup_profile.sec;
     e5e:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <backup_profile+0x2>
     e62:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <backup_profile+0x3>
     e66:	9c 01       	movw	r18, r24
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	ab 81       	ldd	r26, Y+3	; 0x03
     e72:	bc 81       	ldd	r27, Y+4	; 0x04
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <__udivmodsi4>
     e7c:	da 01       	movw	r26, r20
     e7e:	c9 01       	movw	r24, r18
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	ab 83       	std	Y+3, r26	; 0x03
     e86:	bc 83       	std	Y+4, r27	; 0x04
					}
					for (; bar > 0; bar--)
     e88:	1b c0       	rjmp	.+54     	; 0xec0 <__stack+0x5c1>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
     e8a:	1f 92       	push	r1
     e8c:	89 e0       	ldi	r24, 0x09	; 9
     e8e:	8f 93       	push	r24
     e90:	82 e8       	ldi	r24, 0x82	; 130
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	89 2f       	mov	r24, r25
     e96:	8f 93       	push	r24
     e98:	82 e8       	ldi	r24, 0x82	; 130
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	8f 93       	push	r24
     e9e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
					if (bar)	// div zero
					{
						bar *= 20;
						bar = bar / backup_profile.sec;
					}
					for (; bar > 0; bar--)
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	ab 81       	ldd	r26, Y+3	; 0x03
     eb0:	bc 81       	ldd	r27, Y+4	; 0x04
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	a1 09       	sbc	r26, r1
     eb6:	b1 09       	sbc	r27, r1
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	ab 83       	std	Y+3, r26	; 0x03
     ebe:	bc 83       	std	Y+4, r27	; 0x04
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	ab 81       	ldd	r26, Y+3	; 0x03
     ec6:	bc 81       	ldd	r27, Y+4	; 0x04
     ec8:	89 2b       	or	r24, r25
     eca:	8a 2b       	or	r24, r26
     ecc:	8b 2b       	or	r24, r27
     ece:	e9 f6       	brne	.-70     	; 0xe8a <__stack+0x58b>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
					}

					lcd_printf("\n%cStop", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     ed0:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <main_menu_secelt.1906>
     ed4:	88 23       	and	r24, r24
     ed6:	19 f4       	brne	.+6      	; 0xede <__stack+0x5df>
     ed8:	88 e0       	ldi	r24, 0x08	; 8
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <__stack+0x5e3>
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	29 2f       	mov	r18, r25
     ee4:	2f 93       	push	r18
     ee6:	8f 93       	push	r24
     ee8:	85 e8       	ldi	r24, 0x85	; 133
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	89 2f       	mov	r24, r25
     eee:	8f 93       	push	r24
     ef0:	85 e8       	ldi	r24, 0x85	; 133
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	8f 93       	push	r24
     ef6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
					break;
     f02:	00 00       	nop
			}
			break;
     f04:	15 c3       	rjmp	.+1578   	; 0x1530 <__stack+0xc31>

		case ITEM_MENU:
			lcd_printf("\f%cRychlost omylani", (item_menu_secect == ITEM_MENU_SELECT_RPM) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     f06:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <item_menu_secect.1907>
     f0a:	88 23       	and	r24, r24
     f0c:	19 f4       	brne	.+6      	; 0xf14 <__stack+0x615>
     f0e:	88 e0       	ldi	r24, 0x08	; 8
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <__stack+0x619>
     f14:	80 e2       	ldi	r24, 0x20	; 32
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	29 2f       	mov	r18, r25
     f1a:	2f 93       	push	r18
     f1c:	8f 93       	push	r24
     f1e:	8d e8       	ldi	r24, 0x8D	; 141
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	89 2f       	mov	r24, r25
     f24:	8f 93       	push	r24
     f26:	8d e8       	ldi	r24, 0x8D	; 141
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	8f 93       	push	r24
     f2c:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
			lcd_printf("\n%cDelka omylani", (item_menu_secect == ITEM_MENU_SELECT_TIME) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     f38:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <item_menu_secect.1907>
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	19 f4       	brne	.+6      	; 0xf46 <__stack+0x647>
     f40:	88 e0       	ldi	r24, 0x08	; 8
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <__stack+0x64b>
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	29 2f       	mov	r18, r25
     f4c:	2f 93       	push	r18
     f4e:	8f 93       	push	r24
     f50:	81 ea       	ldi	r24, 0xA1	; 161
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	89 2f       	mov	r24, r25
     f56:	8f 93       	push	r24
     f58:	81 ea       	ldi	r24, 0xA1	; 161
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	8f 93       	push	r24
     f5e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
			lcd_printf("\n%cNacist profil", (item_menu_secect == ITEM_MENU_SELECT_LOAD) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     f6a:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <item_menu_secect.1907>
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	19 f4       	brne	.+6      	; 0xf78 <__stack+0x679>
     f72:	88 e0       	ldi	r24, 0x08	; 8
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <__stack+0x67d>
     f78:	80 e2       	ldi	r24, 0x20	; 32
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	29 2f       	mov	r18, r25
     f7e:	2f 93       	push	r18
     f80:	8f 93       	push	r24
     f82:	82 eb       	ldi	r24, 0xB2	; 178
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	89 2f       	mov	r24, r25
     f88:	8f 93       	push	r24
     f8a:	82 eb       	ldi	r24, 0xB2	; 178
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	8f 93       	push	r24
     f90:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
			lcd_printf("\n%cUlozit profil", (item_menu_secect == ITEM_MENU_SELECT_SAVE) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     f9c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <item_menu_secect.1907>
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	19 f4       	brne	.+6      	; 0xfaa <__stack+0x6ab>
     fa4:	88 e0       	ldi	r24, 0x08	; 8
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <__stack+0x6af>
     faa:	80 e2       	ldi	r24, 0x20	; 32
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	29 2f       	mov	r18, r25
     fb0:	2f 93       	push	r18
     fb2:	8f 93       	push	r24
     fb4:	83 ec       	ldi	r24, 0xC3	; 195
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	89 2f       	mov	r24, r25
     fba:	8f 93       	push	r24
     fbc:	83 ec       	ldi	r24, 0xC3	; 195
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	8f 93       	push	r24
     fc2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
			break;
     fce:	b0 c2       	rjmp	.+1376   	; 0x1530 <__stack+0xc31>

		case RPM_MENU:
			lcd_printf("\fNastaveni otacek");
     fd0:	84 ed       	ldi	r24, 0xD4	; 212
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	89 2f       	mov	r24, r25
     fd6:	8f 93       	push	r24
     fd8:	84 ed       	ldi	r24, 0xD4	; 212
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	8f 93       	push	r24
     fde:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
			lcd_printf("\nza minutu");
     fe6:	86 ee       	ldi	r24, 0xE6	; 230
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	89 2f       	mov	r24, r25
     fec:	8f 93       	push	r24
     fee:	86 ee       	ldi	r24, 0xE6	; 230
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	8f 93       	push	r24
     ff4:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
			lcd_printf("\nStara hodnota:%6d", user_profile.rpm);
     ffc:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
    1000:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
    1004:	29 2f       	mov	r18, r25
    1006:	2f 93       	push	r18
    1008:	8f 93       	push	r24
    100a:	81 ef       	ldi	r24, 0xF1	; 241
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	89 2f       	mov	r24, r25
    1010:	8f 93       	push	r24
    1012:	81 ef       	ldi	r24, 0xF1	; 241
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	8f 93       	push	r24
    1018:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
			lcd_printf("\nNova  hodnota:%6d", backup_profile.rpm);
    1024:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <backup_profile>
    1028:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <backup_profile+0x1>
    102c:	29 2f       	mov	r18, r25
    102e:	2f 93       	push	r18
    1030:	8f 93       	push	r24
    1032:	84 e0       	ldi	r24, 0x04	; 4
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	89 2f       	mov	r24, r25
    1038:	8f 93       	push	r24
    103a:	84 e0       	ldi	r24, 0x04	; 4
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	8f 93       	push	r24
    1040:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
			break;
    104c:	71 c2       	rjmp	.+1250   	; 0x1530 <__stack+0xc31>

		case TIME_MENU:
			lcd_printf("\fNastaveni delky");
    104e:	87 e1       	ldi	r24, 0x17	; 23
    1050:	92 e0       	ldi	r25, 0x02	; 2
    1052:	89 2f       	mov	r24, r25
    1054:	8f 93       	push	r24
    1056:	87 e1       	ldi	r24, 0x17	; 23
    1058:	92 e0       	ldi	r25, 0x02	; 2
    105a:	8f 93       	push	r24
    105c:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
			lcd_printf("\nomylani [HH:MM]");
    1064:	88 e2       	ldi	r24, 0x28	; 40
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	89 2f       	mov	r24, r25
    106a:	8f 93       	push	r24
    106c:	88 e2       	ldi	r24, 0x28	; 40
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	8f 93       	push	r24
    1072:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
			lcd_printf("\nStary cas:     %2d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60);
    107a:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
    107e:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
    1082:	20 e1       	ldi	r18, 0x10	; 16
    1084:	3e e0       	ldi	r19, 0x0E	; 14
    1086:	b9 01       	movw	r22, r18
    1088:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    108c:	9c 01       	movw	r18, r24
    108e:	a9 e8       	ldi	r26, 0x89	; 137
    1090:	b8 e8       	ldi	r27, 0x88	; 136
    1092:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    1096:	9c 01       	movw	r18, r24
    1098:	36 95       	lsr	r19
    109a:	27 95       	ror	r18
    109c:	32 95       	swap	r19
    109e:	22 95       	swap	r18
    10a0:	2f 70       	andi	r18, 0x0F	; 15
    10a2:	23 27       	eor	r18, r19
    10a4:	3f 70       	andi	r19, 0x0F	; 15
    10a6:	23 27       	eor	r18, r19
    10a8:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <user_profile+0x2>
    10ac:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <user_profile+0x3>
    10b0:	40 e1       	ldi	r20, 0x10	; 16
    10b2:	5e e0       	ldi	r21, 0x0E	; 14
    10b4:	ba 01       	movw	r22, r20
    10b6:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    10ba:	cb 01       	movw	r24, r22
    10bc:	43 2f       	mov	r20, r19
    10be:	4f 93       	push	r20
    10c0:	2f 93       	push	r18
    10c2:	29 2f       	mov	r18, r25
    10c4:	2f 93       	push	r18
    10c6:	8f 93       	push	r24
    10c8:	89 e3       	ldi	r24, 0x39	; 57
    10ca:	92 e0       	ldi	r25, 0x02	; 2
    10cc:	89 2f       	mov	r24, r25
    10ce:	8f 93       	push	r24
    10d0:	89 e3       	ldi	r24, 0x39	; 57
    10d2:	92 e0       	ldi	r25, 0x02	; 2
    10d4:	8f 93       	push	r24
    10d6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
			lcd_printf("\nNovy  cas:     %2d:%02d", backup_profile.sec/3600, (backup_profile.sec%3600)/60);
    10e6:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <backup_profile+0x2>
    10ea:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <backup_profile+0x3>
    10ee:	20 e1       	ldi	r18, 0x10	; 16
    10f0:	3e e0       	ldi	r19, 0x0E	; 14
    10f2:	b9 01       	movw	r22, r18
    10f4:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    10f8:	9c 01       	movw	r18, r24
    10fa:	a9 e8       	ldi	r26, 0x89	; 137
    10fc:	b8 e8       	ldi	r27, 0x88	; 136
    10fe:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    1102:	9c 01       	movw	r18, r24
    1104:	36 95       	lsr	r19
    1106:	27 95       	ror	r18
    1108:	32 95       	swap	r19
    110a:	22 95       	swap	r18
    110c:	2f 70       	andi	r18, 0x0F	; 15
    110e:	23 27       	eor	r18, r19
    1110:	3f 70       	andi	r19, 0x0F	; 15
    1112:	23 27       	eor	r18, r19
    1114:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <backup_profile+0x2>
    1118:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <backup_profile+0x3>
    111c:	40 e1       	ldi	r20, 0x10	; 16
    111e:	5e e0       	ldi	r21, 0x0E	; 14
    1120:	ba 01       	movw	r22, r20
    1122:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    1126:	cb 01       	movw	r24, r22
    1128:	43 2f       	mov	r20, r19
    112a:	4f 93       	push	r20
    112c:	2f 93       	push	r18
    112e:	29 2f       	mov	r18, r25
    1130:	2f 93       	push	r18
    1132:	8f 93       	push	r24
    1134:	82 e5       	ldi	r24, 0x52	; 82
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	89 2f       	mov	r24, r25
    113a:	8f 93       	push	r24
    113c:	82 e5       	ldi	r24, 0x52	; 82
    113e:	92 e0       	ldi	r25, 0x02	; 2
    1140:	8f 93       	push	r24
    1142:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
			break;
    1152:	ee c1       	rjmp	.+988    	; 0x1530 <__stack+0xc31>

		case LOAD_MENU:
			lcd_printf("\fNacteni profilu");
    1154:	8b e6       	ldi	r24, 0x6B	; 107
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	89 2f       	mov	r24, r25
    115a:	8f 93       	push	r24
    115c:	8b e6       	ldi	r24, 0x6B	; 107
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	8f 93       	push	r24
    1162:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    116a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    116e:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    1172:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    1176:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    117a:	20 e1       	ldi	r18, 0x10	; 16
    117c:	3e e0       	ldi	r19, 0x0E	; 14
    117e:	b9 01       	movw	r22, r18
    1180:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    1184:	9c 01       	movw	r18, r24
    1186:	a9 e8       	ldi	r26, 0x89	; 137
    1188:	b8 e8       	ldi	r27, 0x88	; 136
    118a:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    118e:	9c 01       	movw	r18, r24
    1190:	36 95       	lsr	r19
    1192:	27 95       	ror	r18
    1194:	32 95       	swap	r19
    1196:	22 95       	swap	r18
    1198:	2f 70       	andi	r18, 0x0F	; 15
    119a:	23 27       	eor	r18, r19
    119c:	3f 70       	andi	r19, 0x0F	; 15
    119e:	23 27       	eor	r18, r19
    11a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    11a4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    11a8:	40 e1       	ldi	r20, 0x10	; 16
    11aa:	5e e0       	ldi	r21, 0x0E	; 14
    11ac:	ba 01       	movw	r22, r20
    11ae:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    11b2:	cb 01       	movw	r24, r22
    11b4:	ac 01       	movw	r20, r24
    11b6:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <load_menu_select.1908>
    11ba:	88 23       	and	r24, r24
    11bc:	19 f4       	brne	.+6      	; 0x11c4 <__stack+0x8c5>
    11be:	88 e0       	ldi	r24, 0x08	; 8
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <__stack+0x8c9>
    11c4:	80 e2       	ldi	r24, 0x20	; 32
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	6f 2f       	mov	r22, r31
    11ca:	6f 93       	push	r22
    11cc:	6e 2f       	mov	r22, r30
    11ce:	6f 93       	push	r22
    11d0:	63 2f       	mov	r22, r19
    11d2:	6f 93       	push	r22
    11d4:	2f 93       	push	r18
    11d6:	25 2f       	mov	r18, r21
    11d8:	2f 93       	push	r18
    11da:	24 2f       	mov	r18, r20
    11dc:	2f 93       	push	r18
    11de:	29 2f       	mov	r18, r25
    11e0:	2f 93       	push	r18
    11e2:	8f 93       	push	r24
    11e4:	8c e7       	ldi	r24, 0x7C	; 124
    11e6:	92 e0       	ldi	r25, 0x02	; 2
    11e8:	89 2f       	mov	r24, r25
    11ea:	8f 93       	push	r24
    11ec:	8c e7       	ldi	r24, 0x7C	; 124
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	8f 93       	push	r24
    11f2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    11f6:	4d b7       	in	r20, 0x3d	; 61
    11f8:	5e b7       	in	r21, 0x3e	; 62
    11fa:	46 5f       	subi	r20, 0xF6	; 246
    11fc:	5f 4f       	sbci	r21, 0xFF	; 255
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    1208:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    120c:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1210:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1214:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1218:	20 e1       	ldi	r18, 0x10	; 16
    121a:	3e e0       	ldi	r19, 0x0E	; 14
    121c:	b9 01       	movw	r22, r18
    121e:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    1222:	9c 01       	movw	r18, r24
    1224:	a9 e8       	ldi	r26, 0x89	; 137
    1226:	b8 e8       	ldi	r27, 0x88	; 136
    1228:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    122c:	9c 01       	movw	r18, r24
    122e:	36 95       	lsr	r19
    1230:	27 95       	ror	r18
    1232:	32 95       	swap	r19
    1234:	22 95       	swap	r18
    1236:	2f 70       	andi	r18, 0x0F	; 15
    1238:	23 27       	eor	r18, r19
    123a:	3f 70       	andi	r19, 0x0F	; 15
    123c:	23 27       	eor	r18, r19
    123e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1242:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1246:	40 e1       	ldi	r20, 0x10	; 16
    1248:	5e e0       	ldi	r21, 0x0E	; 14
    124a:	ba 01       	movw	r22, r20
    124c:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    1250:	cb 01       	movw	r24, r22
    1252:	ac 01       	movw	r20, r24
    1254:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <load_menu_select.1908>
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	19 f4       	brne	.+6      	; 0x1262 <__stack+0x963>
    125c:	88 e0       	ldi	r24, 0x08	; 8
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <__stack+0x967>
    1262:	80 e2       	ldi	r24, 0x20	; 32
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	6f 2f       	mov	r22, r31
    1268:	6f 93       	push	r22
    126a:	6e 2f       	mov	r22, r30
    126c:	6f 93       	push	r22
    126e:	63 2f       	mov	r22, r19
    1270:	6f 93       	push	r22
    1272:	2f 93       	push	r18
    1274:	25 2f       	mov	r18, r21
    1276:	2f 93       	push	r18
    1278:	24 2f       	mov	r18, r20
    127a:	2f 93       	push	r18
    127c:	29 2f       	mov	r18, r25
    127e:	2f 93       	push	r18
    1280:	8f 93       	push	r24
    1282:	84 e9       	ldi	r24, 0x94	; 148
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	89 2f       	mov	r24, r25
    1288:	8f 93       	push	r24
    128a:	84 e9       	ldi	r24, 0x94	; 148
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	8f 93       	push	r24
    1290:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1294:	8d b7       	in	r24, 0x3d	; 61
    1296:	9e b7       	in	r25, 0x3e	; 62
    1298:	0a 96       	adiw	r24, 0x0a	; 10
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    12a4:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    12a8:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    12ac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    12b0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    12b4:	20 e1       	ldi	r18, 0x10	; 16
    12b6:	3e e0       	ldi	r19, 0x0E	; 14
    12b8:	b9 01       	movw	r22, r18
    12ba:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    12be:	9c 01       	movw	r18, r24
    12c0:	a9 e8       	ldi	r26, 0x89	; 137
    12c2:	b8 e8       	ldi	r27, 0x88	; 136
    12c4:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    12c8:	9c 01       	movw	r18, r24
    12ca:	36 95       	lsr	r19
    12cc:	27 95       	ror	r18
    12ce:	32 95       	swap	r19
    12d0:	22 95       	swap	r18
    12d2:	2f 70       	andi	r18, 0x0F	; 15
    12d4:	23 27       	eor	r18, r19
    12d6:	3f 70       	andi	r19, 0x0F	; 15
    12d8:	23 27       	eor	r18, r19
    12da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    12de:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    12e2:	40 e1       	ldi	r20, 0x10	; 16
    12e4:	5e e0       	ldi	r21, 0x0E	; 14
    12e6:	ba 01       	movw	r22, r20
    12e8:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    12ec:	cb 01       	movw	r24, r22
    12ee:	ac 01       	movw	r20, r24
    12f0:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <load_menu_select.1908>
    12f4:	82 30       	cpi	r24, 0x02	; 2
    12f6:	19 f4       	brne	.+6      	; 0x12fe <__stack+0x9ff>
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <__stack+0xa03>
    12fe:	80 e2       	ldi	r24, 0x20	; 32
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	6f 2f       	mov	r22, r31
    1304:	6f 93       	push	r22
    1306:	6e 2f       	mov	r22, r30
    1308:	6f 93       	push	r22
    130a:	63 2f       	mov	r22, r19
    130c:	6f 93       	push	r22
    130e:	2f 93       	push	r18
    1310:	25 2f       	mov	r18, r21
    1312:	2f 93       	push	r18
    1314:	24 2f       	mov	r18, r20
    1316:	2f 93       	push	r18
    1318:	29 2f       	mov	r18, r25
    131a:	2f 93       	push	r18
    131c:	8f 93       	push	r24
    131e:	8c ea       	ldi	r24, 0xAC	; 172
    1320:	92 e0       	ldi	r25, 0x02	; 2
    1322:	89 2f       	mov	r24, r25
    1324:	8f 93       	push	r24
    1326:	8c ea       	ldi	r24, 0xAC	; 172
    1328:	92 e0       	ldi	r25, 0x02	; 2
    132a:	8f 93       	push	r24
    132c:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1330:	ed b7       	in	r30, 0x3d	; 61
    1332:	fe b7       	in	r31, 0x3e	; 62
    1334:	3a 96       	adiw	r30, 0x0a	; 10
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
			break;
    1340:	f7 c0       	rjmp	.+494    	; 0x1530 <__stack+0xc31>

		case SAVE_MENU:
			lcd_printf("\fUlozeni profilu");
    1342:	84 ec       	ldi	r24, 0xC4	; 196
    1344:	92 e0       	ldi	r25, 0x02	; 2
    1346:	89 2f       	mov	r24, r25
    1348:	8f 93       	push	r24
    134a:	84 ec       	ldi	r24, 0xC4	; 196
    134c:	92 e0       	ldi	r25, 0x02	; 2
    134e:	8f 93       	push	r24
    1350:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    1358:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    135c:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    1360:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    1364:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    1368:	20 e1       	ldi	r18, 0x10	; 16
    136a:	3e e0       	ldi	r19, 0x0E	; 14
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    1372:	9c 01       	movw	r18, r24
    1374:	a9 e8       	ldi	r26, 0x89	; 137
    1376:	b8 e8       	ldi	r27, 0x88	; 136
    1378:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    137c:	9c 01       	movw	r18, r24
    137e:	36 95       	lsr	r19
    1380:	27 95       	ror	r18
    1382:	32 95       	swap	r19
    1384:	22 95       	swap	r18
    1386:	2f 70       	andi	r18, 0x0F	; 15
    1388:	23 27       	eor	r18, r19
    138a:	3f 70       	andi	r19, 0x0F	; 15
    138c:	23 27       	eor	r18, r19
    138e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    1392:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    1396:	40 e1       	ldi	r20, 0x10	; 16
    1398:	5e e0       	ldi	r21, 0x0E	; 14
    139a:	ba 01       	movw	r22, r20
    139c:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    13a0:	cb 01       	movw	r24, r22
    13a2:	ac 01       	movw	r20, r24
    13a4:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <save_menu_select.1909>
    13a8:	88 23       	and	r24, r24
    13aa:	19 f4       	brne	.+6      	; 0x13b2 <__stack+0xab3>
    13ac:	88 e0       	ldi	r24, 0x08	; 8
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <__stack+0xab7>
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	6f 2f       	mov	r22, r31
    13b8:	6f 93       	push	r22
    13ba:	6e 2f       	mov	r22, r30
    13bc:	6f 93       	push	r22
    13be:	63 2f       	mov	r22, r19
    13c0:	6f 93       	push	r22
    13c2:	2f 93       	push	r18
    13c4:	25 2f       	mov	r18, r21
    13c6:	2f 93       	push	r18
    13c8:	24 2f       	mov	r18, r20
    13ca:	2f 93       	push	r18
    13cc:	29 2f       	mov	r18, r25
    13ce:	2f 93       	push	r18
    13d0:	8f 93       	push	r24
    13d2:	8c e7       	ldi	r24, 0x7C	; 124
    13d4:	92 e0       	ldi	r25, 0x02	; 2
    13d6:	89 2f       	mov	r24, r25
    13d8:	8f 93       	push	r24
    13da:	8c e7       	ldi	r24, 0x7C	; 124
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	8f 93       	push	r24
    13e0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    13e4:	4d b7       	in	r20, 0x3d	; 61
    13e6:	5e b7       	in	r21, 0x3e	; 62
    13e8:	46 5f       	subi	r20, 0xF6	; 246
    13ea:	5f 4f       	sbci	r21, 0xFF	; 255
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    13f6:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    13fa:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    13fe:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1402:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1406:	20 e1       	ldi	r18, 0x10	; 16
    1408:	3e e0       	ldi	r19, 0x0E	; 14
    140a:	b9 01       	movw	r22, r18
    140c:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    1410:	9c 01       	movw	r18, r24
    1412:	a9 e8       	ldi	r26, 0x89	; 137
    1414:	b8 e8       	ldi	r27, 0x88	; 136
    1416:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    141a:	9c 01       	movw	r18, r24
    141c:	36 95       	lsr	r19
    141e:	27 95       	ror	r18
    1420:	32 95       	swap	r19
    1422:	22 95       	swap	r18
    1424:	2f 70       	andi	r18, 0x0F	; 15
    1426:	23 27       	eor	r18, r19
    1428:	3f 70       	andi	r19, 0x0F	; 15
    142a:	23 27       	eor	r18, r19
    142c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1430:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1434:	40 e1       	ldi	r20, 0x10	; 16
    1436:	5e e0       	ldi	r21, 0x0E	; 14
    1438:	ba 01       	movw	r22, r20
    143a:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    143e:	cb 01       	movw	r24, r22
    1440:	ac 01       	movw	r20, r24
    1442:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <save_menu_select.1909>
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	19 f4       	brne	.+6      	; 0x1450 <__stack+0xb51>
    144a:	88 e0       	ldi	r24, 0x08	; 8
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <__stack+0xb55>
    1450:	80 e2       	ldi	r24, 0x20	; 32
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	6f 2f       	mov	r22, r31
    1456:	6f 93       	push	r22
    1458:	6e 2f       	mov	r22, r30
    145a:	6f 93       	push	r22
    145c:	63 2f       	mov	r22, r19
    145e:	6f 93       	push	r22
    1460:	2f 93       	push	r18
    1462:	25 2f       	mov	r18, r21
    1464:	2f 93       	push	r18
    1466:	24 2f       	mov	r18, r20
    1468:	2f 93       	push	r18
    146a:	29 2f       	mov	r18, r25
    146c:	2f 93       	push	r18
    146e:	8f 93       	push	r24
    1470:	84 e9       	ldi	r24, 0x94	; 148
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	89 2f       	mov	r24, r25
    1476:	8f 93       	push	r24
    1478:	84 e9       	ldi	r24, 0x94	; 148
    147a:	92 e0       	ldi	r25, 0x02	; 2
    147c:	8f 93       	push	r24
    147e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    1482:	8d b7       	in	r24, 0x3d	; 61
    1484:	9e b7       	in	r25, 0x3e	; 62
    1486:	0a 96       	adiw	r24, 0x0a	; 10
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    1492:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    1496:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    149a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    149e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    14a2:	20 e1       	ldi	r18, 0x10	; 16
    14a4:	3e e0       	ldi	r19, 0x0E	; 14
    14a6:	b9 01       	movw	r22, r18
    14a8:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    14ac:	9c 01       	movw	r18, r24
    14ae:	a9 e8       	ldi	r26, 0x89	; 137
    14b0:	b8 e8       	ldi	r27, 0x88	; 136
    14b2:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    14b6:	9c 01       	movw	r18, r24
    14b8:	36 95       	lsr	r19
    14ba:	27 95       	ror	r18
    14bc:	32 95       	swap	r19
    14be:	22 95       	swap	r18
    14c0:	2f 70       	andi	r18, 0x0F	; 15
    14c2:	23 27       	eor	r18, r19
    14c4:	3f 70       	andi	r19, 0x0F	; 15
    14c6:	23 27       	eor	r18, r19
    14c8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    14cc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    14d0:	40 e1       	ldi	r20, 0x10	; 16
    14d2:	5e e0       	ldi	r21, 0x0E	; 14
    14d4:	ba 01       	movw	r22, r20
    14d6:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    14da:	cb 01       	movw	r24, r22
    14dc:	ac 01       	movw	r20, r24
    14de:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <save_menu_select.1909>
    14e2:	82 30       	cpi	r24, 0x02	; 2
    14e4:	19 f4       	brne	.+6      	; 0x14ec <__stack+0xbed>
    14e6:	88 e0       	ldi	r24, 0x08	; 8
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <__stack+0xbf1>
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	6f 2f       	mov	r22, r31
    14f2:	6f 93       	push	r22
    14f4:	6e 2f       	mov	r22, r30
    14f6:	6f 93       	push	r22
    14f8:	63 2f       	mov	r22, r19
    14fa:	6f 93       	push	r22
    14fc:	2f 93       	push	r18
    14fe:	25 2f       	mov	r18, r21
    1500:	2f 93       	push	r18
    1502:	24 2f       	mov	r18, r20
    1504:	2f 93       	push	r18
    1506:	29 2f       	mov	r18, r25
    1508:	2f 93       	push	r18
    150a:	8f 93       	push	r24
    150c:	8c ea       	ldi	r24, 0xAC	; 172
    150e:	92 e0       	ldi	r25, 0x02	; 2
    1510:	89 2f       	mov	r24, r25
    1512:	8f 93       	push	r24
    1514:	8c ea       	ldi	r24, 0xAC	; 172
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	8f 93       	push	r24
    151a:	0e 94 79 11 	call	0x22f2	; 0x22f2 <lcd_printf>
    151e:	ed b7       	in	r30, 0x3d	; 61
    1520:	fe b7       	in	r31, 0x3e	; 62
    1522:	3a 96       	adiw	r30, 0x0a	; 10
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
			break;
    152e:	00 00       	nop

		default:
		;
	}
}
    1530:	00 00       	nop
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <lcd_init>:
#include "wyk_lcd.h"

// inicializuje lcd
void lcd_init(void)
{
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	2e 97       	sbiw	r28, 0x0e	; 14
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
	LCD_RS_DDR |= LCD_RS;
    1556:	8a e2       	ldi	r24, 0x2A	; 42
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	2a e2       	ldi	r18, 0x2A	; 42
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	f9 01       	movw	r30, r18
    1560:	20 81       	ld	r18, Z
    1562:	21 60       	ori	r18, 0x01	; 1
    1564:	fc 01       	movw	r30, r24
    1566:	20 83       	st	Z, r18
	LCD_RS0;
    1568:	8b e2       	ldi	r24, 0x2B	; 43
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	2b e2       	ldi	r18, 0x2B	; 43
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	f9 01       	movw	r30, r18
    1572:	20 81       	ld	r18, Z
    1574:	2e 7f       	andi	r18, 0xFE	; 254
    1576:	fc 01       	movw	r30, r24
    1578:	20 83       	st	Z, r18

	LCD_EN_DDR |= LCD_EN;
    157a:	87 e2       	ldi	r24, 0x27	; 39
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	27 e2       	ldi	r18, 0x27	; 39
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	f9 01       	movw	r30, r18
    1584:	20 81       	ld	r18, Z
    1586:	20 61       	ori	r18, 0x10	; 16
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
	LCD_EN0;
    158c:	88 e2       	ldi	r24, 0x28	; 40
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	28 e2       	ldi	r18, 0x28	; 40
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	f9 01       	movw	r30, r18
    1596:	20 81       	ld	r18, Z
    1598:	2f 7e       	andi	r18, 0xEF	; 239
    159a:	fc 01       	movw	r30, r24
    159c:	20 83       	st	Z, r18

	LCD_D7_DDR |= LCD_D7;
    159e:	87 e2       	ldi	r24, 0x27	; 39
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	27 e2       	ldi	r18, 0x27	; 39
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	f9 01       	movw	r30, r18
    15a8:	20 81       	ld	r18, Z
    15aa:	21 60       	ori	r18, 0x01	; 1
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 83       	st	Z, r18
	LCD_D6_DDR |= LCD_D6;
    15b0:	87 e2       	ldi	r24, 0x27	; 39
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	27 e2       	ldi	r18, 0x27	; 39
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	f9 01       	movw	r30, r18
    15ba:	20 81       	ld	r18, Z
    15bc:	22 60       	ori	r18, 0x02	; 2
    15be:	fc 01       	movw	r30, r24
    15c0:	20 83       	st	Z, r18
	LCD_D5_DDR |= LCD_D5;
    15c2:	87 e2       	ldi	r24, 0x27	; 39
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	27 e2       	ldi	r18, 0x27	; 39
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	f9 01       	movw	r30, r18
    15cc:	20 81       	ld	r18, Z
    15ce:	24 60       	ori	r18, 0x04	; 4
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 83       	st	Z, r18
	LCD_D4_DDR |= LCD_D4;
    15d4:	87 e2       	ldi	r24, 0x27	; 39
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	27 e2       	ldi	r18, 0x27	; 39
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	f9 01       	movw	r30, r18
    15de:	20 81       	ld	r18, Z
    15e0:	28 60       	ori	r18, 0x08	; 8
    15e2:	fc 01       	movw	r30, r24
    15e4:	20 83       	st	Z, r18

	LCD_D7_0;
    15e6:	88 e2       	ldi	r24, 0x28	; 40
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	28 e2       	ldi	r18, 0x28	; 40
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	f9 01       	movw	r30, r18
    15f0:	20 81       	ld	r18, Z
    15f2:	2e 7f       	andi	r18, 0xFE	; 254
    15f4:	fc 01       	movw	r30, r24
    15f6:	20 83       	st	Z, r18
	LCD_D6_0;
    15f8:	88 e2       	ldi	r24, 0x28	; 40
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	28 e2       	ldi	r18, 0x28	; 40
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	f9 01       	movw	r30, r18
    1602:	20 81       	ld	r18, Z
    1604:	2d 7f       	andi	r18, 0xFD	; 253
    1606:	fc 01       	movw	r30, r24
    1608:	20 83       	st	Z, r18
	LCD_D5_0;
    160a:	88 e2       	ldi	r24, 0x28	; 40
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	28 e2       	ldi	r18, 0x28	; 40
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	f9 01       	movw	r30, r18
    1614:	20 81       	ld	r18, Z
    1616:	2b 7f       	andi	r18, 0xFB	; 251
    1618:	fc 01       	movw	r30, r24
    161a:	20 83       	st	Z, r18
	LCD_D4_0;
    161c:	88 e2       	ldi	r24, 0x28	; 40
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	28 e2       	ldi	r18, 0x28	; 40
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	f9 01       	movw	r30, r18
    1626:	20 81       	ld	r18, Z
    1628:	27 7f       	andi	r18, 0xF7	; 247
    162a:	fc 01       	movw	r30, r24
    162c:	20 83       	st	Z, r18


	lcd_set_nibble(LCD_CMD_INIT>>4);
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <lcd_set_nibble>
	LCD_EN1;
    1636:	88 e2       	ldi	r24, 0x28	; 40
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	28 e2       	ldi	r18, 0x28	; 40
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	f9 01       	movw	r30, r18
    1640:	20 81       	ld	r18, Z
    1642:	20 61       	ori	r18, 0x10	; 16
    1644:	fc 01       	movw	r30, r24
    1646:	20 83       	st	Z, r18
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a0 e0       	ldi	r26, 0x00	; 0
    164e:	b0 e4       	ldi	r27, 0x40	; 64
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	ab 83       	std	Y+3, r26	; 0x03
    1656:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e8       	ldi	r19, 0x80	; 128
    165c:	4b eb       	ldi	r20, 0xBB	; 187
    165e:	55 e4       	ldi	r21, 0x45	; 69
    1660:	69 81       	ldd	r22, Y+1	; 0x01
    1662:	7a 81       	ldd	r23, Y+2	; 0x02
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	9e 83       	std	Y+6, r25	; 0x06
    1674:	af 83       	std	Y+7, r26	; 0x07
    1676:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	6d 81       	ldd	r22, Y+5	; 0x05
    1682:	7e 81       	ldd	r23, Y+6	; 0x06
    1684:	8f 81       	ldd	r24, Y+7	; 0x07
    1686:	98 85       	ldd	r25, Y+8	; 0x08
    1688:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    168c:	88 23       	and	r24, r24
    168e:	2c f4       	brge	.+10     	; 0x169a <lcd_init+0x158>
		__ticks = 1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	9a 87       	std	Y+10, r25	; 0x0a
    1696:	89 87       	std	Y+9, r24	; 0x09
    1698:	3f c0       	rjmp	.+126    	; 0x1718 <lcd_init+0x1d6>
	else if (__tmp > 65535)
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	6d 81       	ldd	r22, Y+5	; 0x05
    16a4:	7e 81       	ldd	r23, Y+6	; 0x06
    16a6:	8f 81       	ldd	r24, Y+7	; 0x07
    16a8:	98 85       	ldd	r25, Y+8	; 0x08
    16aa:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    16ae:	18 16       	cp	r1, r24
    16b0:	4c f5       	brge	.+82     	; 0x1704 <lcd_init+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	69 81       	ldd	r22, Y+1	; 0x01
    16bc:	7a 81       	ldd	r23, Y+2	; 0x02
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	9a 87       	std	Y+10, r25	; 0x0a
    16d8:	89 87       	std	Y+9, r24	; 0x09
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <lcd_init+0x1b8>
    16dc:	88 e5       	ldi	r24, 0x58	; 88
    16de:	92 e0       	ldi	r25, 0x02	; 2
    16e0:	9c 87       	std	Y+12, r25	; 0x0c
    16e2:	8b 87       	std	Y+11, r24	; 0x0b
    16e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <lcd_init+0x1a6>
    16ec:	9c 87       	std	Y+12, r25	; 0x0c
    16ee:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	9a 87       	std	Y+10, r25	; 0x0a
    16f8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	89 2b       	or	r24, r25
    1700:	69 f7       	brne	.-38     	; 0x16dc <lcd_init+0x19a>
    1702:	14 c0       	rjmp	.+40     	; 0x172c <lcd_init+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1704:	6d 81       	ldd	r22, Y+5	; 0x05
    1706:	7e 81       	ldd	r23, Y+6	; 0x06
    1708:	8f 81       	ldd	r24, Y+7	; 0x07
    170a:	98 85       	ldd	r25, Y+8	; 0x08
    170c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9a 87       	std	Y+10, r25	; 0x0a
    1716:	89 87       	std	Y+9, r24	; 0x09
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	9e 87       	std	Y+14, r25	; 0x0e
    171e:	8d 87       	std	Y+13, r24	; 0x0d
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	9e 85       	ldd	r25, Y+14	; 0x0e
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <lcd_init+0x1e2>
    1728:	9e 87       	std	Y+14, r25	; 0x0e
    172a:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
	LCD_EN0;
    172c:	88 e2       	ldi	r24, 0x28	; 40
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	28 e2       	ldi	r18, 0x28	; 40
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	f9 01       	movw	r30, r18
    1736:	20 81       	ld	r18, Z
    1738:	2f 7e       	andi	r18, 0xEF	; 239
    173a:	fc 01       	movw	r30, r24
    173c:	20 83       	st	Z, r18
	lcd_cmd(LCD_CMD_INIT);
    173e:	88 e2       	ldi	r24, 0x28	; 40
    1740:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURS);
    1744:	8c e0       	ldi	r24, 0x0C	; 12
    1746:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
	lcd_cmd(LCD_CMD_CLR);
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>

	// přidání vlastních znaků
	lcd_cmd(LCD_CMD_W_CGRAM);
    1750:	80 e4       	ldi	r24, 0x40	; 64
    1752:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
	// trojuhelnik
	lcd_put(0b00010000);
    1756:	80 e1       	ldi	r24, 0x10	; 16
    1758:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011000);
    175c:	88 e1       	ldi	r24, 0x18	; 24
    175e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011100);
    1762:	8c e1       	ldi	r24, 0x1C	; 28
    1764:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011110);
    1768:	8e e1       	ldi	r24, 0x1E	; 30
    176a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011100);
    176e:	8c e1       	ldi	r24, 0x1C	; 28
    1770:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011000);
    1774:	88 e1       	ldi	r24, 0x18	; 24
    1776:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00010000);
    177a:	80 e1       	ldi	r24, 0x10	; 16
    177c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00000000);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	// bar
	lcd_put(0b00000000);
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00000000);
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011111);
    1792:	8f e1       	ldi	r24, 0x1F	; 31
    1794:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011111);
    1798:	8f e1       	ldi	r24, 0x1F	; 31
    179a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011111);
    179e:	8f e1       	ldi	r24, 0x1F	; 31
    17a0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00011111);
    17a4:	8f e1       	ldi	r24, 0x1F	; 31
    17a6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00000000);
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	lcd_put(0b00000000);
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	
	// přepnutí na zápis do zobrazovací paměti
	lcd_cmd(LCD_CMD_W_DDRAM);
    17b6:	80 e8       	ldi	r24, 0x80	; 128
    17b8:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
}
    17bc:	00 00       	nop
    17be:	2e 96       	adiw	r28, 0x0e	; 14
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <lcd_set_nibble>:

// posílat napřed msn a pak lsn
void lcd_set_nibble(uint8_t nibble)
{
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	1f 92       	push	r1
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	89 83       	std	Y+1, r24	; 0x01
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	88 70       	andi	r24, 0x08	; 8
    17e4:	99 27       	eor	r25, r25
    17e6:	89 2b       	or	r24, r25
    17e8:	51 f0       	breq	.+20     	; 0x17fe <lcd_set_nibble+0x2e>
    17ea:	88 e2       	ldi	r24, 0x28	; 40
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	28 e2       	ldi	r18, 0x28	; 40
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	f9 01       	movw	r30, r18
    17f4:	20 81       	ld	r18, Z
    17f6:	21 60       	ori	r18, 0x01	; 1
    17f8:	fc 01       	movw	r30, r24
    17fa:	20 83       	st	Z, r18
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <lcd_set_nibble+0x40>
    17fe:	88 e2       	ldi	r24, 0x28	; 40
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	28 e2       	ldi	r18, 0x28	; 40
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	f9 01       	movw	r30, r18
    1808:	20 81       	ld	r18, Z
    180a:	2e 7f       	andi	r18, 0xFE	; 254
    180c:	fc 01       	movw	r30, r24
    180e:	20 83       	st	Z, r18
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	84 70       	andi	r24, 0x04	; 4
    1818:	99 27       	eor	r25, r25
    181a:	89 2b       	or	r24, r25
    181c:	51 f0       	breq	.+20     	; 0x1832 <lcd_set_nibble+0x62>
    181e:	88 e2       	ldi	r24, 0x28	; 40
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	28 e2       	ldi	r18, 0x28	; 40
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	f9 01       	movw	r30, r18
    1828:	20 81       	ld	r18, Z
    182a:	22 60       	ori	r18, 0x02	; 2
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <lcd_set_nibble+0x74>
    1832:	88 e2       	ldi	r24, 0x28	; 40
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	28 e2       	ldi	r18, 0x28	; 40
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	f9 01       	movw	r30, r18
    183c:	20 81       	ld	r18, Z
    183e:	2d 7f       	andi	r18, 0xFD	; 253
    1840:	fc 01       	movw	r30, r24
    1842:	20 83       	st	Z, r18
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	82 70       	andi	r24, 0x02	; 2
    184c:	99 27       	eor	r25, r25
    184e:	89 2b       	or	r24, r25
    1850:	51 f0       	breq	.+20     	; 0x1866 <lcd_set_nibble+0x96>
    1852:	88 e2       	ldi	r24, 0x28	; 40
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	28 e2       	ldi	r18, 0x28	; 40
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	24 60       	ori	r18, 0x04	; 4
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
    1864:	09 c0       	rjmp	.+18     	; 0x1878 <lcd_set_nibble+0xa8>
    1866:	88 e2       	ldi	r24, 0x28	; 40
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	28 e2       	ldi	r18, 0x28	; 40
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	f9 01       	movw	r30, r18
    1870:	20 81       	ld	r18, Z
    1872:	2b 7f       	andi	r18, 0xFB	; 251
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	99 27       	eor	r25, r25
    1882:	89 2b       	or	r24, r25
    1884:	51 f0       	breq	.+20     	; 0x189a <lcd_set_nibble+0xca>
    1886:	88 e2       	ldi	r24, 0x28	; 40
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	28 e2       	ldi	r18, 0x28	; 40
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	f9 01       	movw	r30, r18
    1890:	20 81       	ld	r18, Z
    1892:	28 60       	ori	r18, 0x08	; 8
    1894:	fc 01       	movw	r30, r24
    1896:	20 83       	st	Z, r18
}
    1898:	09 c0       	rjmp	.+18     	; 0x18ac <lcd_set_nibble+0xdc>
void lcd_set_nibble(uint8_t nibble)
{
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    189a:	88 e2       	ldi	r24, 0x28	; 40
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	28 e2       	ldi	r18, 0x28	; 40
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	f9 01       	movw	r30, r18
    18a4:	20 81       	ld	r18, Z
    18a6:	27 7f       	andi	r18, 0xF7	; 247
    18a8:	fc 01       	movw	r30, r24
    18aa:	20 83       	st	Z, r18
}
    18ac:	00 00       	nop
    18ae:	0f 90       	pop	r0
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <lcd_cmd>:

// pošle lcd instrukci
void lcd_cmd(uint8_t cmd)
{
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	6d 97       	sbiw	r28, 0x1d	; 29
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_set_nibble(cmd>>4);
    18cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ce:	82 95       	swap	r24
    18d0:	8f 70       	andi	r24, 0x0F	; 15
    18d2:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <lcd_set_nibble>
	LCD_EN1;
    18d6:	88 e2       	ldi	r24, 0x28	; 40
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	28 e2       	ldi	r18, 0x28	; 40
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	f9 01       	movw	r30, r18
    18e0:	20 81       	ld	r18, Z
    18e2:	20 61       	ori	r18, 0x10	; 16
    18e4:	fc 01       	movw	r30, r24
    18e6:	20 83       	st	Z, r18
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e4       	ldi	r26, 0x40	; 64
    18ee:	b0 e4       	ldi	r27, 0x40	; 64
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	ab 83       	std	Y+3, r26	; 0x03
    18f6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e8       	ldi	r19, 0x80	; 128
    18fc:	4b eb       	ldi	r20, 0xBB	; 187
    18fe:	55 e4       	ldi	r21, 0x45	; 69
    1900:	69 81       	ldd	r22, Y+1	; 0x01
    1902:	7a 81       	ldd	r23, Y+2	; 0x02
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8b 8b       	std	Y+19, r24	; 0x13
    1912:	9c 8b       	std	Y+20, r25	; 0x14
    1914:	ad 8b       	std	Y+21, r26	; 0x15
    1916:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	6b 89       	ldd	r22, Y+19	; 0x13
    1922:	7c 89       	ldd	r23, Y+20	; 0x14
    1924:	8d 89       	ldd	r24, Y+21	; 0x15
    1926:	9e 89       	ldd	r25, Y+22	; 0x16
    1928:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <lcd_cmd+0x84>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	98 8f       	std	Y+24, r25	; 0x18
    1936:	8f 8b       	std	Y+23, r24	; 0x17
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <lcd_cmd+0x102>
	else if (__tmp > 65535)
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	3f ef       	ldi	r19, 0xFF	; 255
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	57 e4       	ldi	r21, 0x47	; 71
    1942:	6b 89       	ldd	r22, Y+19	; 0x13
    1944:	7c 89       	ldd	r23, Y+20	; 0x14
    1946:	8d 89       	ldd	r24, Y+21	; 0x15
    1948:	9e 89       	ldd	r25, Y+22	; 0x16
    194a:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <lcd_cmd+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e2       	ldi	r20, 0x20	; 32
    1958:	51 e4       	ldi	r21, 0x41	; 65
    195a:	69 81       	ldd	r22, Y+1	; 0x01
    195c:	7a 81       	ldd	r23, Y+2	; 0x02
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	98 8f       	std	Y+24, r25	; 0x18
    1978:	8f 8b       	std	Y+23, r24	; 0x17
    197a:	0f c0       	rjmp	.+30     	; 0x199a <lcd_cmd+0xe4>
    197c:	88 e5       	ldi	r24, 0x58	; 88
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	9a 8f       	std	Y+26, r25	; 0x1a
    1982:	89 8f       	std	Y+25, r24	; 0x19
    1984:	89 8d       	ldd	r24, Y+25	; 0x19
    1986:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <lcd_cmd+0xd2>
    198c:	9a 8f       	std	Y+26, r25	; 0x1a
    198e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8f 89       	ldd	r24, Y+23	; 0x17
    1992:	98 8d       	ldd	r25, Y+24	; 0x18
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	98 8f       	std	Y+24, r25	; 0x18
    1998:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8f 89       	ldd	r24, Y+23	; 0x17
    199c:	98 8d       	ldd	r25, Y+24	; 0x18
    199e:	89 2b       	or	r24, r25
    19a0:	69 f7       	brne	.-38     	; 0x197c <lcd_cmd+0xc6>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <lcd_cmd+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	6b 89       	ldd	r22, Y+19	; 0x13
    19a6:	7c 89       	ldd	r23, Y+20	; 0x14
    19a8:	8d 89       	ldd	r24, Y+21	; 0x15
    19aa:	9e 89       	ldd	r25, Y+22	; 0x16
    19ac:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	98 8f       	std	Y+24, r25	; 0x18
    19b6:	8f 8b       	std	Y+23, r24	; 0x17
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	9c 8f       	std	Y+28, r25	; 0x1c
    19be:	8b 8f       	std	Y+27, r24	; 0x1b
    19c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <lcd_cmd+0x10e>
    19c8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ca:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3);
	LCD_EN0;	
    19cc:	88 e2       	ldi	r24, 0x28	; 40
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	28 e2       	ldi	r18, 0x28	; 40
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	f9 01       	movw	r30, r18
    19d6:	20 81       	ld	r18, Z
    19d8:	2f 7e       	andi	r18, 0xEF	; 239
    19da:	fc 01       	movw	r30, r24
    19dc:	20 83       	st	Z, r18
	lcd_set_nibble(cmd);
    19de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19e0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <lcd_set_nibble>
	LCD_EN1;
    19e4:	88 e2       	ldi	r24, 0x28	; 40
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	28 e2       	ldi	r18, 0x28	; 40
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	f9 01       	movw	r30, r18
    19ee:	20 81       	ld	r18, Z
    19f0:	20 61       	ori	r18, 0x10	; 16
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 83       	st	Z, r18
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e4       	ldi	r26, 0x40	; 64
    19fc:	b0 e4       	ldi	r27, 0x40	; 64
    19fe:	8d 83       	std	Y+5, r24	; 0x05
    1a00:	9e 83       	std	Y+6, r25	; 0x06
    1a02:	af 83       	std	Y+7, r26	; 0x07
    1a04:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e8       	ldi	r19, 0x80	; 128
    1a0a:	4b eb       	ldi	r20, 0xBB	; 187
    1a0c:	55 e4       	ldi	r21, 0x45	; 69
    1a0e:	6d 81       	ldd	r22, Y+5	; 0x05
    1a10:	7e 81       	ldd	r23, Y+6	; 0x06
    1a12:	8f 81       	ldd	r24, Y+7	; 0x07
    1a14:	98 85       	ldd	r25, Y+8	; 0x08
    1a16:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	89 87       	std	Y+9, r24	; 0x09
    1a20:	9a 87       	std	Y+10, r25	; 0x0a
    1a22:	ab 87       	std	Y+11, r26	; 0x0b
    1a24:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	69 85       	ldd	r22, Y+9	; 0x09
    1a30:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a34:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a36:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <lcd_cmd+0x192>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9e 87       	std	Y+14, r25	; 0x0e
    1a44:	8d 87       	std	Y+13, r24	; 0x0d
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <lcd_cmd+0x210>
	else if (__tmp > 65535)
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	69 85       	ldd	r22, Y+9	; 0x09
    1a52:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a54:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a56:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a58:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	4c f5       	brge	.+82     	; 0x1ab2 <lcd_cmd+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	6d 81       	ldd	r22, Y+5	; 0x05
    1a6a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6e:	98 85       	ldd	r25, Y+8	; 0x08
    1a70:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9e 87       	std	Y+14, r25	; 0x0e
    1a86:	8d 87       	std	Y+13, r24	; 0x0d
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <lcd_cmd+0x1f2>
    1a8a:	88 e5       	ldi	r24, 0x58	; 88
    1a8c:	92 e0       	ldi	r25, 0x02	; 2
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
    1a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a94:	98 89       	ldd	r25, Y+16	; 0x10
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <lcd_cmd+0x1e0>
    1a9a:	98 8b       	std	Y+16, r25	; 0x10
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	9e 87       	std	Y+14, r25	; 0x0e
    1aa6:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	89 2b       	or	r24, r25
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <lcd_cmd+0x1d4>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <lcd_cmd+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab2:	69 85       	ldd	r22, Y+9	; 0x09
    1ab4:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aba:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e 87       	std	Y+14, r25	; 0x0e
    1ac4:	8d 87       	std	Y+13, r24	; 0x0d
    1ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aca:	9a 8b       	std	Y+18, r25	; 0x12
    1acc:	89 8b       	std	Y+17, r24	; 0x11
    1ace:	89 89       	ldd	r24, Y+17	; 0x11
    1ad0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <lcd_cmd+0x21c>
    1ad6:	9a 8b       	std	Y+18, r25	; 0x12
    1ad8:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(3);
	LCD_EN0;
    1ada:	88 e2       	ldi	r24, 0x28	; 40
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	28 e2       	ldi	r18, 0x28	; 40
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	f9 01       	movw	r30, r18
    1ae4:	20 81       	ld	r18, Z
    1ae6:	2f 7e       	andi	r18, 0xEF	; 239
    1ae8:	fc 01       	movw	r30, r24
    1aea:	20 83       	st	Z, r18
}
    1aec:	00 00       	nop
    1aee:	6d 96       	adiw	r28, 0x1d	; 29
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret

00001b00 <lcd_put>:

// pošle lcd znak
void lcd_put(char znak)
{
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	c1 54       	subi	r28, 0x41	; 65
    1b0a:	d1 09       	sbc	r29, r1
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	9e 01       	movw	r18, r28
    1b18:	2f 5b       	subi	r18, 0xBF	; 191
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	f9 01       	movw	r30, r18
    1b1e:	80 83       	st	Z, r24
	LCD_RS1;
    1b20:	8b e2       	ldi	r24, 0x2B	; 43
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	2b e2       	ldi	r18, 0x2B	; 43
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	f9 01       	movw	r30, r18
    1b2a:	20 81       	ld	r18, Z
    1b2c:	21 60       	ori	r18, 0x01	; 1
    1b2e:	fc 01       	movw	r30, r24
    1b30:	20 83       	st	Z, r18
	lcd_set_nibble(znak>>4);
    1b32:	ce 01       	movw	r24, r28
    1b34:	8f 5b       	subi	r24, 0xBF	; 191
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	fc 01       	movw	r30, r24
    1b3a:	80 81       	ld	r24, Z
    1b3c:	82 95       	swap	r24
    1b3e:	8f 70       	andi	r24, 0x0F	; 15
    1b40:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <lcd_set_nibble>
	LCD_EN1;
    1b44:	88 e2       	ldi	r24, 0x28	; 40
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	28 e2       	ldi	r18, 0x28	; 40
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	f9 01       	movw	r30, r18
    1b4e:	20 81       	ld	r18, Z
    1b50:	20 61       	ori	r18, 0x10	; 16
    1b52:	fc 01       	movw	r30, r24
    1b54:	20 83       	st	Z, r18
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e2       	ldi	r26, 0x20	; 32
    1b5c:	b2 e4       	ldi	r27, 0x42	; 66
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	ab 83       	std	Y+3, r26	; 0x03
    1b64:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	69 81       	ldd	r22, Y+1	; 0x01
    1b70:	7a 81       	ldd	r23, Y+2	; 0x02
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8d a3       	std	Y+37, r24	; 0x25
    1b80:	9e a3       	std	Y+38, r25	; 0x26
    1b82:	af a3       	std	Y+39, r26	; 0x27
    1b84:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 ec       	ldi	r20, 0xC0	; 192
    1b8c:	50 e4       	ldi	r21, 0x40	; 64
    1b8e:	69 81       	ldd	r22, Y+1	; 0x01
    1b90:	7a 81       	ldd	r23, Y+2	; 0x02
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	89 a7       	std	Y+41, r24	; 0x29
    1ba0:	9a a7       	std	Y+42, r25	; 0x2a
    1ba2:	ab a7       	std	Y+43, r26	; 0x2b
    1ba4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	6d a1       	ldd	r22, Y+37	; 0x25
    1bb0:	7e a1       	ldd	r23, Y+38	; 0x26
    1bb2:	8f a1       	ldd	r24, Y+39	; 0x27
    1bb4:	98 a5       	ldd	r25, Y+40	; 0x28
    1bb6:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	1c f4       	brge	.+6      	; 0x1bc4 <lcd_put+0xc4>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	8d a7       	std	Y+45, r24	; 0x2d
    1bc2:	b2 c0       	rjmp	.+356    	; 0x1d28 <lcd_put+0x228>
	else if (__tmp2 > 65535)
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	3f ef       	ldi	r19, 0xFF	; 255
    1bc8:	4f e7       	ldi	r20, 0x7F	; 127
    1bca:	57 e4       	ldi	r21, 0x47	; 71
    1bcc:	69 a5       	ldd	r22, Y+41	; 0x29
    1bce:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bd4:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    1bd8:	18 16       	cp	r1, r24
    1bda:	0c f0       	brlt	.+2      	; 0x1bde <lcd_put+0xde>
    1bdc:	7b c0       	rjmp	.+246    	; 0x1cd4 <lcd_put+0x1d4>
	{
		_delay_ms(__us / 1000.0);
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4a e7       	ldi	r20, 0x7A	; 122
    1be4:	54 e4       	ldi	r21, 0x44	; 68
    1be6:	69 81       	ldd	r22, Y+1	; 0x01
    1be8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8e a7       	std	Y+46, r24	; 0x2e
    1bf8:	9f a7       	std	Y+47, r25	; 0x2f
    1bfa:	a8 ab       	std	Y+48, r26	; 0x30
    1bfc:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e8       	ldi	r19, 0x80	; 128
    1c02:	4b eb       	ldi	r20, 0xBB	; 187
    1c04:	55 e4       	ldi	r21, 0x45	; 69
    1c06:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c08:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c0a:	88 a9       	ldd	r24, Y+48	; 0x30
    1c0c:	99 a9       	ldd	r25, Y+49	; 0x31
    1c0e:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8a ab       	std	Y+50, r24	; 0x32
    1c18:	9b ab       	std	Y+51, r25	; 0x33
    1c1a:	ac ab       	std	Y+52, r26	; 0x34
    1c1c:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	6a a9       	ldd	r22, Y+50	; 0x32
    1c28:	7b a9       	ldd	r23, Y+51	; 0x33
    1c2a:	8c a9       	ldd	r24, Y+52	; 0x34
    1c2c:	9d a9       	ldd	r25, Y+53	; 0x35
    1c2e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <lcd_put+0x140>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9f ab       	std	Y+55, r25	; 0x37
    1c3c:	8e ab       	std	Y+54, r24	; 0x36
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <lcd_put+0x1be>
	else if (__tmp > 65535)
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	3f ef       	ldi	r19, 0xFF	; 255
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	57 e4       	ldi	r21, 0x47	; 71
    1c48:	6a a9       	ldd	r22, Y+50	; 0x32
    1c4a:	7b a9       	ldd	r23, Y+51	; 0x33
    1c4c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c4e:	9d a9       	ldd	r25, Y+53	; 0x35
    1c50:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <lcd_put+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c62:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c64:	88 a9       	ldd	r24, Y+48	; 0x30
    1c66:	99 a9       	ldd	r25, Y+49	; 0x31
    1c68:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9f ab       	std	Y+55, r25	; 0x37
    1c7e:	8e ab       	std	Y+54, r24	; 0x36
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <lcd_put+0x1a0>
    1c82:	88 e5       	ldi	r24, 0x58	; 88
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	99 af       	std	Y+57, r25	; 0x39
    1c88:	88 af       	std	Y+56, r24	; 0x38
    1c8a:	88 ad       	ldd	r24, Y+56	; 0x38
    1c8c:	99 ad       	ldd	r25, Y+57	; 0x39
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <lcd_put+0x18e>
    1c92:	99 af       	std	Y+57, r25	; 0x39
    1c94:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8e a9       	ldd	r24, Y+54	; 0x36
    1c98:	9f a9       	ldd	r25, Y+55	; 0x37
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9f ab       	std	Y+55, r25	; 0x37
    1c9e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8e a9       	ldd	r24, Y+54	; 0x36
    1ca2:	9f a9       	ldd	r25, Y+55	; 0x37
    1ca4:	89 2b       	or	r24, r25
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <lcd_put+0x182>
    1ca8:	3f c0       	rjmp	.+126    	; 0x1d28 <lcd_put+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6a a9       	ldd	r22, Y+50	; 0x32
    1cac:	7b a9       	ldd	r23, Y+51	; 0x33
    1cae:	8c a9       	ldd	r24, Y+52	; 0x34
    1cb0:	9d a9       	ldd	r25, Y+53	; 0x35
    1cb2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9f ab       	std	Y+55, r25	; 0x37
    1cbc:	8e ab       	std	Y+54, r24	; 0x36
    1cbe:	8e a9       	ldd	r24, Y+54	; 0x36
    1cc0:	9f a9       	ldd	r25, Y+55	; 0x37
    1cc2:	9b af       	std	Y+59, r25	; 0x3b
    1cc4:	8a af       	std	Y+58, r24	; 0x3a
    1cc6:	8a ad       	ldd	r24, Y+58	; 0x3a
    1cc8:	9b ad       	ldd	r25, Y+59	; 0x3b
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <lcd_put+0x1ca>
    1cce:	9b af       	std	Y+59, r25	; 0x3b
    1cd0:	8a af       	std	Y+58, r24	; 0x3a
    1cd2:	2a c0       	rjmp	.+84     	; 0x1d28 <lcd_put+0x228>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	53 e4       	ldi	r21, 0x43	; 67
    1cdc:	6d a1       	ldd	r22, Y+37	; 0x25
    1cde:	7e a1       	ldd	r23, Y+38	; 0x26
    1ce0:	8f a1       	ldd	r24, Y+39	; 0x27
    1ce2:	98 a5       	ldd	r25, Y+40	; 0x28
    1ce4:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	ac f4       	brge	.+42     	; 0x1d16 <lcd_put+0x216>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1cec:	69 a5       	ldd	r22, Y+41	; 0x29
    1cee:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cf4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9d af       	std	Y+61, r25	; 0x3d
    1cfe:	8c af       	std	Y+60, r24	; 0x3c
    1d00:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d02:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d04:	9f af       	std	Y+63, r25	; 0x3f
    1d06:	8e af       	std	Y+62, r24	; 0x3e
    1d08:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <lcd_put+0x20c>
    1d10:	9f af       	std	Y+63, r25	; 0x3f
    1d12:	8e af       	std	Y+62, r24	; 0x3e
    1d14:	1c c0       	rjmp	.+56     	; 0x1d4e <lcd_put+0x24e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d16:	6d a1       	ldd	r22, Y+37	; 0x25
    1d18:	7e a1       	ldd	r23, Y+38	; 0x26
    1d1a:	8f a1       	ldd	r24, Y+39	; 0x27
    1d1c:	98 a5       	ldd	r25, Y+40	; 0x28
    1d1e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8d a7       	std	Y+45, r24	; 0x2d
    1d28:	2d a5       	ldd	r18, Y+45	; 0x2d
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	80 5c       	subi	r24, 0xC0	; 192
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	fc 01       	movw	r30, r24
    1d32:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d34:	ce 01       	movw	r24, r28
    1d36:	80 5c       	subi	r24, 0xC0	; 192
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	80 81       	ld	r24, Z
    1d3e:	28 2f       	mov	r18, r24
    1d40:	2a 95       	dec	r18
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <lcd_put+0x240>
    1d44:	ce 01       	movw	r24, r28
    1d46:	80 5c       	subi	r24, 0xC0	; 192
    1d48:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	20 83       	st	Z, r18
	_delay_us(40);
	LCD_EN0;
    1d4e:	88 e2       	ldi	r24, 0x28	; 40
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	28 e2       	ldi	r18, 0x28	; 40
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	f9 01       	movw	r30, r18
    1d58:	20 81       	ld	r18, Z
    1d5a:	2f 7e       	andi	r18, 0xEF	; 239
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	20 83       	st	Z, r18
	lcd_set_nibble(znak);
    1d60:	ce 01       	movw	r24, r28
    1d62:	8f 5b       	subi	r24, 0xBF	; 191
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	fc 01       	movw	r30, r24
    1d68:	80 81       	ld	r24, Z
    1d6a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <lcd_set_nibble>
	LCD_EN1;
    1d6e:	88 e2       	ldi	r24, 0x28	; 40
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	28 e2       	ldi	r18, 0x28	; 40
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	f9 01       	movw	r30, r18
    1d78:	20 81       	ld	r18, Z
    1d7a:	20 61       	ori	r18, 0x10	; 16
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	20 83       	st	Z, r18
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 e2       	ldi	r26, 0x20	; 32
    1d86:	b2 e4       	ldi	r27, 0x42	; 66
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	af 83       	std	Y+7, r26	; 0x07
    1d8e:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	51 e4       	ldi	r21, 0x41	; 65
    1d98:	6d 81       	ldd	r22, Y+5	; 0x05
    1d9a:	7e 81       	ldd	r23, Y+6	; 0x06
    1d9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9e:	98 85       	ldd	r25, Y+8	; 0x08
    1da0:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	89 87       	std	Y+9, r24	; 0x09
    1daa:	9a 87       	std	Y+10, r25	; 0x0a
    1dac:	ab 87       	std	Y+11, r26	; 0x0b
    1dae:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 ec       	ldi	r20, 0xC0	; 192
    1db6:	50 e4       	ldi	r21, 0x40	; 64
    1db8:	6d 81       	ldd	r22, Y+5	; 0x05
    1dba:	7e 81       	ldd	r23, Y+6	; 0x06
    1dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbe:	98 85       	ldd	r25, Y+8	; 0x08
    1dc0:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8d 87       	std	Y+13, r24	; 0x0d
    1dca:	9e 87       	std	Y+14, r25	; 0x0e
    1dcc:	af 87       	std	Y+15, r26	; 0x0f
    1dce:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	69 85       	ldd	r22, Y+9	; 0x09
    1dda:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ddc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dde:	9c 85       	ldd	r25, Y+12	; 0x0c
    1de0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	1c f4       	brge	.+6      	; 0x1dee <lcd_put+0x2ee>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	89 8b       	std	Y+17, r24	; 0x11
    1dec:	b2 c0       	rjmp	.+356    	; 0x1f52 <lcd_put+0x452>
	else if (__tmp2 > 65535)
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	6d 85       	ldd	r22, Y+13	; 0x0d
    1df8:	7e 85       	ldd	r23, Y+14	; 0x0e
    1dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfc:	98 89       	ldd	r25, Y+16	; 0x10
    1dfe:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	0c f0       	brlt	.+2      	; 0x1e08 <lcd_put+0x308>
    1e06:	7b c0       	rjmp	.+246    	; 0x1efe <lcd_put+0x3fe>
	{
		_delay_ms(__us / 1000.0);
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a e7       	ldi	r20, 0x7A	; 122
    1e0e:	54 e4       	ldi	r21, 0x44	; 68
    1e10:	6d 81       	ldd	r22, Y+5	; 0x05
    1e12:	7e 81       	ldd	r23, Y+6	; 0x06
    1e14:	8f 81       	ldd	r24, Y+7	; 0x07
    1e16:	98 85       	ldd	r25, Y+8	; 0x08
    1e18:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8a 8b       	std	Y+18, r24	; 0x12
    1e22:	9b 8b       	std	Y+19, r25	; 0x13
    1e24:	ac 8b       	std	Y+20, r26	; 0x14
    1e26:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e8       	ldi	r19, 0x80	; 128
    1e2c:	4b eb       	ldi	r20, 0xBB	; 187
    1e2e:	55 e4       	ldi	r21, 0x45	; 69
    1e30:	6a 89       	ldd	r22, Y+18	; 0x12
    1e32:	7b 89       	ldd	r23, Y+19	; 0x13
    1e34:	8c 89       	ldd	r24, Y+20	; 0x14
    1e36:	9d 89       	ldd	r25, Y+21	; 0x15
    1e38:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	8e 8b       	std	Y+22, r24	; 0x16
    1e42:	9f 8b       	std	Y+23, r25	; 0x17
    1e44:	a8 8f       	std	Y+24, r26	; 0x18
    1e46:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e8       	ldi	r20, 0x80	; 128
    1e4e:	5f e3       	ldi	r21, 0x3F	; 63
    1e50:	6e 89       	ldd	r22, Y+22	; 0x16
    1e52:	7f 89       	ldd	r23, Y+23	; 0x17
    1e54:	88 8d       	ldd	r24, Y+24	; 0x18
    1e56:	99 8d       	ldd	r25, Y+25	; 0x19
    1e58:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <lcd_put+0x36a>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9b 8f       	std	Y+27, r25	; 0x1b
    1e66:	8a 8f       	std	Y+26, r24	; 0x1a
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <lcd_put+0x3e8>
	else if (__tmp > 65535)
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	3f ef       	ldi	r19, 0xFF	; 255
    1e6e:	4f e7       	ldi	r20, 0x7F	; 127
    1e70:	57 e4       	ldi	r21, 0x47	; 71
    1e72:	6e 89       	ldd	r22, Y+22	; 0x16
    1e74:	7f 89       	ldd	r23, Y+23	; 0x17
    1e76:	88 8d       	ldd	r24, Y+24	; 0x18
    1e78:	99 8d       	ldd	r25, Y+25	; 0x19
    1e7a:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <lcd_put+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	6a 89       	ldd	r22, Y+18	; 0x12
    1e8c:	7b 89       	ldd	r23, Y+19	; 0x13
    1e8e:	8c 89       	ldd	r24, Y+20	; 0x14
    1e90:	9d 89       	ldd	r25, Y+21	; 0x15
    1e92:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ea8:	8a 8f       	std	Y+26, r24	; 0x1a
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <lcd_put+0x3ca>
    1eac:	88 e5       	ldi	r24, 0x58	; 88
    1eae:	92 e0       	ldi	r25, 0x02	; 2
    1eb0:	9d 8f       	std	Y+29, r25	; 0x1d
    1eb2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eb6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <lcd_put+0x3b8>
    1ebc:	9d 8f       	std	Y+29, r25	; 0x1d
    1ebe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ec2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9b 8f       	std	Y+27, r25	; 0x1b
    1ec8:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ecc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ece:	89 2b       	or	r24, r25
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <lcd_put+0x3ac>
    1ed2:	3f c0       	rjmp	.+126    	; 0x1f52 <lcd_put+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	6e 89       	ldd	r22, Y+22	; 0x16
    1ed6:	7f 89       	ldd	r23, Y+23	; 0x17
    1ed8:	88 8d       	ldd	r24, Y+24	; 0x18
    1eda:	99 8d       	ldd	r25, Y+25	; 0x19
    1edc:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9b 8f       	std	Y+27, r25	; 0x1b
    1ee6:	8a 8f       	std	Y+26, r24	; 0x1a
    1ee8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1eea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1eec:	9f 8f       	std	Y+31, r25	; 0x1f
    1eee:	8e 8f       	std	Y+30, r24	; 0x1e
    1ef0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <lcd_put+0x3f4>
    1ef8:	9f 8f       	std	Y+31, r25	; 0x1f
    1efa:	8e 8f       	std	Y+30, r24	; 0x1e
    1efc:	2a c0       	rjmp	.+84     	; 0x1f52 <lcd_put+0x452>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	53 e4       	ldi	r21, 0x43	; 67
    1f06:	69 85       	ldd	r22, Y+9	; 0x09
    1f08:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f0e:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	ac f4       	brge	.+42     	; 0x1f40 <lcd_put+0x440>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1f16:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f18:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1c:	98 89       	ldd	r25, Y+16	; 0x10
    1f1e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	99 a3       	std	Y+33, r25	; 0x21
    1f28:	88 a3       	std	Y+32, r24	; 0x20
    1f2a:	88 a1       	ldd	r24, Y+32	; 0x20
    1f2c:	99 a1       	ldd	r25, Y+33	; 0x21
    1f2e:	9b a3       	std	Y+35, r25	; 0x23
    1f30:	8a a3       	std	Y+34, r24	; 0x22
    1f32:	8a a1       	ldd	r24, Y+34	; 0x22
    1f34:	9b a1       	ldd	r25, Y+35	; 0x23
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <lcd_put+0x436>
    1f3a:	9b a3       	std	Y+35, r25	; 0x23
    1f3c:	8a a3       	std	Y+34, r24	; 0x22
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <lcd_put+0x45e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f40:	69 85       	ldd	r22, Y+9	; 0x09
    1f42:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f44:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f46:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f48:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	89 8b       	std	Y+17, r24	; 0x11
    1f52:	89 89       	ldd	r24, Y+17	; 0x11
    1f54:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f56:	8c a1       	ldd	r24, Y+36	; 0x24
    1f58:	8a 95       	dec	r24
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <lcd_put+0x458>
    1f5c:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(40);
	LCD_EN0;
    1f5e:	88 e2       	ldi	r24, 0x28	; 40
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	28 e2       	ldi	r18, 0x28	; 40
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	f9 01       	movw	r30, r18
    1f68:	20 81       	ld	r18, Z
    1f6a:	2f 7e       	andi	r18, 0xEF	; 239
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	20 83       	st	Z, r18
	LCD_RS0;
    1f70:	8b e2       	ldi	r24, 0x2B	; 43
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	2b e2       	ldi	r18, 0x2B	; 43
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	f9 01       	movw	r30, r18
    1f7a:	20 81       	ld	r18, Z
    1f7c:	2e 7f       	andi	r18, 0xFE	; 254
    1f7e:	fc 01       	movw	r30, r24
    1f80:	20 83       	st	Z, r18
}
    1f82:	00 00       	nop
    1f84:	cf 5b       	subi	r28, 0xBF	; 191
    1f86:	df 4f       	sbci	r29, 0xFF	; 255
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	08 95       	ret

00001f98 <nible2hex>:

char nible2hex(uint8_t nible)
{
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	1f 92       	push	r1
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	if (nible < 10)
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	8a 30       	cpi	r24, 0x0A	; 10
    1fa8:	18 f4       	brcc	.+6      	; 0x1fb0 <nible2hex+0x18>
		return '0' + nible;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	80 5d       	subi	r24, 0xD0	; 208
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <nible2hex+0x1c>
	else
		return 'A' + nible - 10;
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	89 5c       	subi	r24, 0xC9	; 201
}
    1fb4:	0f 90       	pop	r0
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	08 95       	ret

00001fbc <print_hex>:

// vytiskne číslo int 2B
void print_hex(uint16_t cislo)
{
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <print_hex+0x6>
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <print_hex+0x8>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <print_hex+0xa>
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1fce:	1a 82       	std	Y+2, r1	; 0x02
    1fd0:	19 82       	std	Y+1, r1	; 0x01
    1fd2:	1c c0       	rjmp	.+56     	; 0x200c <print_hex+0x50>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd8:	89 2f       	mov	r24, r25
    1fda:	99 27       	eor	r25, r25
    1fdc:	82 95       	swap	r24
    1fde:	8f 70       	andi	r24, 0x0F	; 15
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
		cislo <<= 4;
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	82 95       	swap	r24
    1fea:	92 95       	swap	r25
    1fec:	90 7f       	andi	r25, 0xF0	; 240
    1fee:	98 27       	eor	r25, r24
    1ff0:	80 7f       	andi	r24, 0xF0	; 240
    1ff2:	98 27       	eor	r25, r24
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
		lcd_put(nible2hex(nible));
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <nible2hex>
    1ffe:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
void print_hex(uint16_t cislo)
{
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	9a 83       	std	Y+2, r25	; 0x02
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	04 97       	sbiw	r24, 0x04	; 4
    2012:	00 f3       	brcs	.-64     	; 0x1fd4 <print_hex+0x18>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
		cislo <<= 4;
		lcd_put(nible2hex(nible));
	}
}
    2014:	00 00       	nop
    2016:	26 96       	adiw	r28, 0x06	; 6
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret

00002028 <print_int>:

// vytiskne číslo int 2B
void print_int(int cislo, char znaminko, char nula, int pocet_mist)
{
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62
    2030:	6b 97       	sbiw	r28, 0x1b	; 27
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	9f 8b       	std	Y+23, r25	; 0x17
    203e:	8e 8b       	std	Y+22, r24	; 0x16
    2040:	68 8f       	std	Y+24, r22	; 0x18
    2042:	49 8f       	std	Y+25, r20	; 0x19
    2044:	3b 8f       	std	Y+27, r19	; 0x1b
    2046:	2a 8f       	std	Y+26, r18	; 0x1a
	int poc_cislo = cislo;
    2048:	8e 89       	ldd	r24, Y+22	; 0x16
    204a:	9f 89       	ldd	r25, Y+23	; 0x17
    204c:	9d 83       	std	Y+5, r25	; 0x05
    204e:	8c 83       	std	Y+4, r24	; 0x04
	int8_t i, len = 16, state = 1;
    2050:	80 e1       	ldi	r24, 0x10	; 16
    2052:	8a 83       	std	Y+2, r24	; 0x02
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	8b 83       	std	Y+3, r24	; 0x03
	char buf[16];

	// pokud máme vypsat před číslo znamínko
	if (znaminko)
    2058:	88 8d       	ldd	r24, Y+24	; 0x18
    205a:	88 23       	and	r24, r24
    205c:	49 f0       	breq	.+18     	; 0x2070 <print_int+0x48>
	{
		lcd_put((cislo >= 0) ? '+' : '-');
    205e:	8e 89       	ldd	r24, Y+22	; 0x16
    2060:	9f 89       	ldd	r25, Y+23	; 0x17
    2062:	99 23       	and	r25, r25
    2064:	14 f0       	brlt	.+4      	; 0x206a <print_int+0x42>
    2066:	8b e2       	ldi	r24, 0x2B	; 43
    2068:	01 c0       	rjmp	.+2      	; 0x206c <print_int+0x44>
    206a:	8d e2       	ldi	r24, 0x2D	; 45
    206c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	}

	// pokud je vypnutá predikce nul
	if (nula)
    2070:	89 8d       	ldd	r24, Y+25	; 0x19
    2072:	88 23       	and	r24, r24
    2074:	09 f0       	breq	.+2      	; 0x2078 <print_int+0x50>
		state = 0;
    2076:	1b 82       	std	Y+3, r1	; 0x03


	// když je zadána délka čísla
	if (pocet_mist >= 0)
    2078:	8a 8d       	ldd	r24, Y+26	; 0x1a
    207a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    207c:	99 23       	and	r25, r25
    207e:	14 f0       	brlt	.+4      	; 0x2084 <print_int+0x5c>
		len = pocet_mist;
    2080:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2082:	8a 83       	std	Y+2, r24	; 0x02

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;
    2084:	8e 89       	ldd	r24, Y+22	; 0x16
    2086:	9f 89       	ldd	r25, Y+23	; 0x17
    2088:	99 23       	and	r25, r25
    208a:	1c f4       	brge	.+6      	; 0x2092 <print_int+0x6a>
    208c:	91 95       	neg	r25
    208e:	81 95       	neg	r24
    2090:	91 09       	sbc	r25, r1
    2092:	9f 8b       	std	Y+23, r25	; 0x17
    2094:	8e 8b       	std	Y+22, r24	; 0x16

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    2096:	19 82       	std	Y+1, r1	; 0x01
    2098:	20 c0       	rjmp	.+64     	; 0x20da <print_int+0xb2>
	{
		buf[i] = '0' + cislo % 10;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	28 2f       	mov	r18, r24
    209e:	88 0f       	add	r24, r24
    20a0:	33 0b       	sbc	r19, r19
    20a2:	8e 89       	ldd	r24, Y+22	; 0x16
    20a4:	9f 89       	ldd	r25, Y+23	; 0x17
    20a6:	4a e0       	ldi	r20, 0x0A	; 10
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	ba 01       	movw	r22, r20
    20ac:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__divmodhi4>
    20b0:	40 e3       	ldi	r20, 0x30	; 48
    20b2:	48 0f       	add	r20, r24
    20b4:	ce 01       	movw	r24, r28
    20b6:	06 96       	adiw	r24, 0x06	; 6
    20b8:	82 0f       	add	r24, r18
    20ba:	93 1f       	adc	r25, r19
    20bc:	fc 01       	movw	r30, r24
    20be:	40 83       	st	Z, r20
		cislo /= 10;
    20c0:	8e 89       	ldd	r24, Y+22	; 0x16
    20c2:	9f 89       	ldd	r25, Y+23	; 0x17
    20c4:	2a e0       	ldi	r18, 0x0A	; 10
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	b9 01       	movw	r22, r18
    20ca:	0e 94 65 1a 	call	0x34ca	; 0x34ca <__divmodhi4>
    20ce:	cb 01       	movw	r24, r22
    20d0:	9f 8b       	std	Y+23, r25	; 0x17
    20d2:	8e 8b       	std	Y+22, r24	; 0x16

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	99 81       	ldd	r25, Y+1	; 0x01
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	98 17       	cp	r25, r24
    20e0:	e4 f2       	brlt	.-72     	; 0x209a <print_int+0x72>
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	81 50       	subi	r24, 0x01	; 1
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	3d c0       	rjmp	.+122    	; 0x2164 <print_int+0x13c>
	{
		if (buf[i] == '0' && state)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	08 2e       	mov	r0, r24
    20ee:	00 0c       	add	r0, r0
    20f0:	99 0b       	sbc	r25, r25
    20f2:	9e 01       	movw	r18, r28
    20f4:	2a 5f       	subi	r18, 0xFA	; 250
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	82 0f       	add	r24, r18
    20fa:	93 1f       	adc	r25, r19
    20fc:	fc 01       	movw	r30, r24
    20fe:	80 81       	ld	r24, Z
    2100:	80 33       	cpi	r24, 0x30	; 48
    2102:	e9 f4       	brne	.+58     	; 0x213e <print_int+0x116>
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	88 23       	and	r24, r24
    2108:	d1 f0       	breq	.+52     	; 0x213e <print_int+0x116>
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    210a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    210c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	29 f1       	breq	.+74     	; 0x215c <print_int+0x134>
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	9d 81       	ldd	r25, Y+5	; 0x05
    2116:	89 2b       	or	r24, r25
    2118:	71 f4       	brne	.+28     	; 0x2136 <print_int+0x10e>
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	08 2e       	mov	r0, r24
    211e:	00 0c       	add	r0, r0
    2120:	99 0b       	sbc	r25, r25
    2122:	9c 01       	movw	r18, r24
    2124:	2f 5f       	subi	r18, 0xFF	; 255
    2126:	3f 4f       	sbci	r19, 0xFF	; 255
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	08 2e       	mov	r0, r24
    212c:	00 0c       	add	r0, r0
    212e:	99 0b       	sbc	r25, r25
    2130:	28 17       	cp	r18, r24
    2132:	39 07       	cpc	r19, r25
    2134:	99 f0       	breq	.+38     	; 0x215c <print_int+0x134>
			{
				lcd_put(' ');
    2136:	80 e2       	ldi	r24, 0x20	; 32
    2138:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    213c:	0f c0       	rjmp	.+30     	; 0x215c <print_int+0x134>
				lcd_put(' ');
			}
		}
		else
		{
			state = 0;
    213e:	1b 82       	std	Y+3, r1	; 0x03
			lcd_put(buf[i]);
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	08 2e       	mov	r0, r24
    2144:	00 0c       	add	r0, r0
    2146:	99 0b       	sbc	r25, r25
    2148:	9e 01       	movw	r18, r28
    214a:	2a 5f       	subi	r18, 0xFA	; 250
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	fc 01       	movw	r30, r24
    2154:	80 81       	ld	r24, Z
    2156:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
    215a:	01 c0       	rjmp	.+2      	; 0x215e <print_int+0x136>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    215c:	00 00       	nop
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	81 50       	subi	r24, 0x01	; 1
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	88 23       	and	r24, r24
    2168:	0c f0       	brlt	.+2      	; 0x216c <print_int+0x144>
    216a:	bf cf       	rjmp	.-130    	; 0x20ea <print_int+0xc2>
			state = 0;
			lcd_put(buf[i]);
		}

	}
	if (state)
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	88 23       	and	r24, r24
    2170:	19 f0       	breq	.+6      	; 0x2178 <print_int+0x150>
	{
		lcd_put('0');
    2172:	80 e3       	ldi	r24, 0x30	; 48
    2174:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	}
}
    2178:	00 00       	nop
    217a:	6b 96       	adiw	r28, 0x1b	; 27
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <print_double>:

// vytiskne double
void print_double(double cislo, char znaminko, char nula, int mista_pred_carkou, int mista_za_carkou)
{
    218c:	ef 92       	push	r14
    218e:	ff 92       	push	r15
    2190:	0f 93       	push	r16
    2192:	1f 93       	push	r17
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	61 97       	sbiw	r28, 0x11	; 17
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	68 87       	std	Y+8, r22	; 0x08
    21aa:	79 87       	std	Y+9, r23	; 0x09
    21ac:	8a 87       	std	Y+10, r24	; 0x0a
    21ae:	9b 87       	std	Y+11, r25	; 0x0b
    21b0:	4c 87       	std	Y+12, r20	; 0x0c
    21b2:	2d 87       	std	Y+13, r18	; 0x0d
    21b4:	1f 87       	std	Y+15, r17	; 0x0f
    21b6:	0e 87       	std	Y+14, r16	; 0x0e
    21b8:	f9 8a       	std	Y+17, r15	; 0x11
    21ba:	e8 8a       	std	Y+16, r14	; 0x10
	int i, cela, desetinna;
	char znam = '+';
    21bc:	8b e2       	ldi	r24, 0x2B	; 43
    21be:	8b 83       	std	Y+3, r24	; 0x03

	if (mista_za_carkou == -1)
    21c0:	88 89       	ldd	r24, Y+16	; 0x10
    21c2:	99 89       	ldd	r25, Y+17	; 0x11
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <print_double+0x44>
		mista_za_carkou = 3;
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	99 8b       	std	Y+17, r25	; 0x11
    21ce:	88 8b       	std	Y+16, r24	; 0x10

	if (cislo < 0)
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	a9 01       	movw	r20, r18
    21d6:	68 85       	ldd	r22, Y+8	; 0x08
    21d8:	79 85       	ldd	r23, Y+9	; 0x09
    21da:	8a 85       	ldd	r24, Y+10	; 0x0a
    21dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    21de:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	5c f4       	brge	.+22     	; 0x21fc <print_double+0x70>
	{
		cislo *= -1;
    21e6:	88 85       	ldd	r24, Y+8	; 0x08
    21e8:	99 85       	ldd	r25, Y+9	; 0x09
    21ea:	aa 85       	ldd	r26, Y+10	; 0x0a
    21ec:	bb 85       	ldd	r27, Y+11	; 0x0b
    21ee:	b0 58       	subi	r27, 0x80	; 128
    21f0:	88 87       	std	Y+8, r24	; 0x08
    21f2:	99 87       	std	Y+9, r25	; 0x09
    21f4:	aa 87       	std	Y+10, r26	; 0x0a
    21f6:	bb 87       	std	Y+11, r27	; 0x0b
		znam = '-';
    21f8:	8d e2       	ldi	r24, 0x2D	; 45
    21fa:	8b 83       	std	Y+3, r24	; 0x03
	}

	cela = (int) cislo;
    21fc:	68 85       	ldd	r22, Y+8	; 0x08
    21fe:	79 85       	ldd	r23, Y+9	; 0x09
    2200:	8a 85       	ldd	r24, Y+10	; 0x0a
    2202:	9b 85       	ldd	r25, Y+11	; 0x0b
    2204:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__fixsfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9d 83       	std	Y+5, r25	; 0x05
    220e:	8c 83       	std	Y+4, r24	; 0x04
	cislo -= cela;
    2210:	8c 81       	ldd	r24, Y+4	; 0x04
    2212:	9d 81       	ldd	r25, Y+5	; 0x05
    2214:	09 2e       	mov	r0, r25
    2216:	00 0c       	add	r0, r0
    2218:	aa 0b       	sbc	r26, r26
    221a:	bb 0b       	sbc	r27, r27
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 9a 18 	call	0x3134	; 0x3134 <__floatsisf>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9c 01       	movw	r18, r24
    222a:	ad 01       	movw	r20, r26
    222c:	68 85       	ldd	r22, Y+8	; 0x08
    222e:	79 85       	ldd	r23, Y+9	; 0x09
    2230:	8a 85       	ldd	r24, Y+10	; 0x0a
    2232:	9b 85       	ldd	r25, Y+11	; 0x0b
    2234:	0e 94 7e 17 	call	0x2efc	; 0x2efc <__subsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	88 87       	std	Y+8, r24	; 0x08
    223e:	99 87       	std	Y+9, r25	; 0x09
    2240:	aa 87       	std	Y+10, r26	; 0x0a
    2242:	bb 87       	std	Y+11, r27	; 0x0b

	for (i=0; i < mista_za_carkou; i++)
    2244:	1a 82       	std	Y+2, r1	; 0x02
    2246:	19 82       	std	Y+1, r1	; 0x01
    2248:	15 c0       	rjmp	.+42     	; 0x2274 <print_double+0xe8>
		cislo *= 10;
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	51 e4       	ldi	r21, 0x41	; 65
    2252:	68 85       	ldd	r22, Y+8	; 0x08
    2254:	79 85       	ldd	r23, Y+9	; 0x09
    2256:	8a 85       	ldd	r24, Y+10	; 0x0a
    2258:	9b 85       	ldd	r25, Y+11	; 0x0b
    225a:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	88 87       	std	Y+8, r24	; 0x08
    2264:	99 87       	std	Y+9, r25	; 0x09
    2266:	aa 87       	std	Y+10, r26	; 0x0a
    2268:	bb 87       	std	Y+11, r27	; 0x0b
	}

	cela = (int) cislo;
	cislo -= cela;

	for (i=0; i < mista_za_carkou; i++)
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	9a 81       	ldd	r25, Y+2	; 0x02
    226e:	01 96       	adiw	r24, 0x01	; 1
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	29 81       	ldd	r18, Y+1	; 0x01
    2276:	3a 81       	ldd	r19, Y+2	; 0x02
    2278:	88 89       	ldd	r24, Y+16	; 0x10
    227a:	99 89       	ldd	r25, Y+17	; 0x11
    227c:	28 17       	cp	r18, r24
    227e:	39 07       	cpc	r19, r25
    2280:	24 f3       	brlt	.-56     	; 0x224a <print_double+0xbe>
		cislo *= 10;

	desetinna = (int) cislo;
    2282:	68 85       	ldd	r22, Y+8	; 0x08
    2284:	79 85       	ldd	r23, Y+9	; 0x09
    2286:	8a 85       	ldd	r24, Y+10	; 0x0a
    2288:	9b 85       	ldd	r25, Y+11	; 0x0b
    228a:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__fixsfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9f 83       	std	Y+7, r25	; 0x07
    2294:	8e 83       	std	Y+6, r24	; 0x06
	cela = (znam == '-') ? -1 * cela : cela;
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	8d 32       	cpi	r24, 0x2D	; 45
    229a:	31 f4       	brne	.+12     	; 0x22a8 <print_double+0x11c>
    229c:	8c 81       	ldd	r24, Y+4	; 0x04
    229e:	9d 81       	ldd	r25, Y+5	; 0x05
    22a0:	91 95       	neg	r25
    22a2:	81 95       	neg	r24
    22a4:	91 09       	sbc	r25, r1
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <print_double+0x120>
    22a8:	8c 81       	ldd	r24, Y+4	; 0x04
    22aa:	9d 81       	ldd	r25, Y+5	; 0x05
    22ac:	9d 83       	std	Y+5, r25	; 0x05
    22ae:	8c 83       	std	Y+4, r24	; 0x04

	print_int(cela, znaminko, nula, mista_pred_carkou);
    22b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    22b2:	3f 85       	ldd	r19, Y+15	; 0x0f
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	4d 85       	ldd	r20, Y+13	; 0x0d
    22ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    22bc:	0e 94 14 10 	call	0x2028	; 0x2028 <print_int>
	lcd_put(',');
    22c0:	8c e2       	ldi	r24, 0x2C	; 44
    22c2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	print_int(desetinna, '\0', '0', mista_za_carkou);
    22c6:	28 89       	ldd	r18, Y+16	; 0x10
    22c8:	39 89       	ldd	r19, Y+17	; 0x11
    22ca:	8e 81       	ldd	r24, Y+6	; 0x06
    22cc:	9f 81       	ldd	r25, Y+7	; 0x07
    22ce:	40 e3       	ldi	r20, 0x30	; 48
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	0e 94 14 10 	call	0x2028	; 0x2028 <print_int>

}
    22d6:	00 00       	nop
    22d8:	61 96       	adiw	r28, 0x11	; 17
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	08 95       	ret

000022f2 <lcd_printf>:

// printf funkce
void lcd_printf(char str[], ...)
{
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	2f 97       	sbiw	r28, 0x0f	; 15
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61

	uint8_t i, j;
	char *str_p;
	int tmp_int;

	char znaminko = '\0';
    230e:	1b 82       	std	Y+3, r1	; 0x03
	char nula = '\0';
    2310:	1c 82       	std	Y+4, r1	; 0x04
	char desetina_carka = '\0';
    2312:	1d 82       	std	Y+5, r1	; 0x05
	int mista_pred_carkou = -1;
    2314:	8f ef       	ldi	r24, 0xFF	; 255
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	9f 83       	std	Y+7, r25	; 0x07
    231a:	8e 83       	std	Y+6, r24	; 0x06
	int mista_za_carkou = -1;
    231c:	8f ef       	ldi	r24, 0xFF	; 255
    231e:	9f ef       	ldi	r25, 0xFF	; 255
    2320:	99 87       	std	Y+9, r25	; 0x09
    2322:	88 87       	std	Y+8, r24	; 0x08



	 __gnuc_va_list ap;
	 //va_list ap;
	 va_start(ap, str);
    2324:	ce 01       	movw	r24, r28
    2326:	4a 96       	adiw	r24, 0x1a	; 26
    2328:	9f 87       	std	Y+15, r25	; 0x0f
    232a:	8e 87       	std	Y+14, r24	; 0x0e



	for (i=0; str[i] != '\0'; i++)
    232c:	19 82       	std	Y+1, r1	; 0x01
    232e:	5e c2       	rjmp	.+1212   	; 0x27ec <lcd_printf+0x4fa>
	{
		// nová stránka
		if (str[i] == '\f')
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	28 8d       	ldd	r18, Y+24	; 0x18
    2338:	39 8d       	ldd	r19, Y+25	; 0x19
    233a:	82 0f       	add	r24, r18
    233c:	93 1f       	adc	r25, r19
    233e:	fc 01       	movw	r30, r24
    2340:	80 81       	ld	r24, Z
    2342:	8c 30       	cpi	r24, 0x0C	; 12
    2344:	51 f4       	brne	.+20     	; 0x235a <lcd_printf+0x68>
		{
			line = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
			lcd_cmd(LCD_CMD_CLR);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
			lcd_cmd(LCD_CMD_W_DDRAM);
    2352:	80 e8       	ldi	r24, 0x80	; 128
    2354:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
    2358:	46 c2       	rjmp	.+1164   	; 0x27e6 <lcd_printf+0x4f4>
		}
		// nový řádek
		else if (str[i] == '\n')
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	28 8d       	ldd	r18, Y+24	; 0x18
    2362:	39 8d       	ldd	r19, Y+25	; 0x19
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	fc 01       	movw	r30, r24
    236a:	80 81       	ld	r24, Z
    236c:	8a 30       	cpi	r24, 0x0A	; 10
    236e:	71 f5       	brne	.+92     	; 0x23cc <lcd_printf+0xda>
		{
			// jestli jsme na 1.
			if (line == 1)
    2370:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	49 f4       	brne	.+18     	; 0x238a <lcd_printf+0x98>
			{
				line++;
    2378:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40); // go 2 line
    2382:	80 ec       	ldi	r24, 0xC0	; 192
    2384:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
    2388:	2e c2       	rjmp	.+1116   	; 0x27e6 <lcd_printf+0x4f4>
			}
			// jestli jsme na 2.
			else if (line == 2)
    238a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    238e:	82 30       	cpi	r24, 0x02	; 2
    2390:	49 f4       	brne	.+18     	; 0x23a4 <lcd_printf+0xb2>
			{
				line++;
    2392:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x14); // go 3 line
    239c:	84 e9       	ldi	r24, 0x94	; 148
    239e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
    23a2:	21 c2       	rjmp	.+1090   	; 0x27e6 <lcd_printf+0x4f4>
			}
			// jestli jsme na 3.
			else if (line == 3)
    23a4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    23a8:	83 30       	cpi	r24, 0x03	; 3
    23aa:	49 f4       	brne	.+18     	; 0x23be <lcd_printf+0xcc>
			{
				line++;
    23ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    23b0:	8f 5f       	subi	r24, 0xFF	; 255
    23b2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x54); // go 4 line
    23b6:	84 ed       	ldi	r24, 0xD4	; 212
    23b8:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
    23bc:	14 c2       	rjmp	.+1064   	; 0x27e6 <lcd_printf+0x4f4>
			}
			// jestli jsme na 4.
			else
			{
				line = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x00); // go 1 line
    23c4:	80 e8       	ldi	r24, 0x80	; 128
    23c6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
    23ca:	0d c2       	rjmp	.+1050   	; 0x27e6 <lcd_printf+0x4f4>
			}
		}
		// návrat vozíku
		else if (str[i] == '\r')
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	88 2f       	mov	r24, r24
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	28 8d       	ldd	r18, Y+24	; 0x18
    23d4:	39 8d       	ldd	r19, Y+25	; 0x19
    23d6:	82 0f       	add	r24, r18
    23d8:	93 1f       	adc	r25, r19
    23da:	fc 01       	movw	r30, r24
    23dc:	80 81       	ld	r24, Z
    23de:	8d 30       	cpi	r24, 0x0D	; 13
    23e0:	61 f4       	brne	.+24     	; 0x23fa <lcd_printf+0x108>
		{
			// pokud jsme na 2. řádku
			if (line)
    23e2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    23e6:	88 23       	and	r24, r24
    23e8:	21 f0       	breq	.+8      	; 0x23f2 <lcd_printf+0x100>
			{
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40);
    23ea:	80 ec       	ldi	r24, 0xC0	; 192
    23ec:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
    23f0:	fa c1       	rjmp	.+1012   	; 0x27e6 <lcd_printf+0x4f4>
			}
			// jestli jsme na 1.
			else
			{
				lcd_cmd(LCD_CMD_W_DDRAM);
    23f2:	80 e8       	ldi	r24, 0x80	; 128
    23f4:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <lcd_cmd>
    23f8:	f6 c1       	rjmp	.+1004   	; 0x27e6 <lcd_printf+0x4f4>
			}
		}
		// tabulátor
		else if (str[i] == '\t')
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	28 8d       	ldd	r18, Y+24	; 0x18
    2402:	39 8d       	ldd	r19, Y+25	; 0x19
    2404:	82 0f       	add	r24, r18
    2406:	93 1f       	adc	r25, r19
    2408:	fc 01       	movw	r30, r24
    240a:	80 81       	ld	r24, Z
    240c:	89 30       	cpi	r24, 0x09	; 9
    240e:	69 f4       	brne	.+26     	; 0x242a <lcd_printf+0x138>
		{
			lcd_put(' ');
    2410:	80 e2       	ldi	r24, 0x20	; 32
    2412:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
			lcd_put(' ');
    2416:	80 e2       	ldi	r24, 0x20	; 32
    2418:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
			lcd_put(' ');
    241c:	80 e2       	ldi	r24, 0x20	; 32
    241e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
			lcd_put(' ');
    2422:	80 e2       	ldi	r24, 0x20	; 32
    2424:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
    2428:	de c1       	rjmp	.+956    	; 0x27e6 <lcd_printf+0x4f4>
		}
		// znak lomeno
		else if (str[i] == '\\')
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	28 8d       	ldd	r18, Y+24	; 0x18
    2432:	39 8d       	ldd	r19, Y+25	; 0x19
    2434:	82 0f       	add	r24, r18
    2436:	93 1f       	adc	r25, r19
    2438:	fc 01       	movw	r30, r24
    243a:	80 81       	ld	r24, Z
    243c:	8c 35       	cpi	r24, 0x5C	; 92
    243e:	21 f4       	brne	.+8      	; 0x2448 <lcd_printf+0x156>
		{
			lcd_put(0xA4);
    2440:	84 ea       	ldi	r24, 0xA4	; 164
    2442:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
    2446:	cf c1       	rjmp	.+926    	; 0x27e6 <lcd_printf+0x4f4>
		}
		else if (str[i] == '%')
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	28 8d       	ldd	r18, Y+24	; 0x18
    2450:	39 8d       	ldd	r19, Y+25	; 0x19
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	fc 01       	movw	r30, r24
    2458:	80 81       	ld	r24, Z
    245a:	85 32       	cpi	r24, 0x25	; 37
    245c:	09 f0       	breq	.+2      	; 0x2460 <lcd_printf+0x16e>
    245e:	b8 c1       	rjmp	.+880    	; 0x27d0 <lcd_printf+0x4de>
		{
			// pokud jde o znak %
			if (str[i+1] == '%')
    2460:	89 81       	ldd	r24, Y+1	; 0x01
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	28 8d       	ldd	r18, Y+24	; 0x18
    246a:	39 8d       	ldd	r19, Y+25	; 0x19
    246c:	82 0f       	add	r24, r18
    246e:	93 1f       	adc	r25, r19
    2470:	fc 01       	movw	r30, r24
    2472:	80 81       	ld	r24, Z
    2474:	85 32       	cpi	r24, 0x25	; 37
    2476:	39 f4       	brne	.+14     	; 0x2486 <lcd_printf+0x194>
			{
				i++;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	8f 5f       	subi	r24, 0xFF	; 255
    247c:	89 83       	std	Y+1, r24	; 0x01
				lcd_put('%');
    247e:	85 e2       	ldi	r24, 0x25	; 37
    2480:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
    2484:	b0 c1       	rjmp	.+864    	; 0x27e6 <lcd_printf+0x4f4>
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	8a 83       	std	Y+2, r24	; 0x02
    248c:	b5 c0       	rjmp	.+362    	; 0x25f8 <lcd_printf+0x306>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
				{
					if (str[j] == '+' || str[j] == '-')
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	28 8d       	ldd	r18, Y+24	; 0x18
    2496:	39 8d       	ldd	r19, Y+25	; 0x19
    2498:	82 0f       	add	r24, r18
    249a:	93 1f       	adc	r25, r19
    249c:	fc 01       	movw	r30, r24
    249e:	80 81       	ld	r24, Z
    24a0:	8b 32       	cpi	r24, 0x2B	; 43
    24a2:	59 f0       	breq	.+22     	; 0x24ba <lcd_printf+0x1c8>
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	88 2f       	mov	r24, r24
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	28 8d       	ldd	r18, Y+24	; 0x18
    24ac:	39 8d       	ldd	r19, Y+25	; 0x19
    24ae:	82 0f       	add	r24, r18
    24b0:	93 1f       	adc	r25, r19
    24b2:	fc 01       	movw	r30, r24
    24b4:	80 81       	ld	r24, Z
    24b6:	8d 32       	cpi	r24, 0x2D	; 45
    24b8:	19 f4       	brne	.+6      	; 0x24c0 <lcd_printf+0x1ce>
					{
						znaminko = '+';
    24ba:	8b e2       	ldi	r24, 0x2B	; 43
    24bc:	8b 83       	std	Y+3, r24	; 0x03
    24be:	99 c0       	rjmp	.+306    	; 0x25f2 <lcd_printf+0x300>
					}
					else if (str[j] == '.')
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	28 8d       	ldd	r18, Y+24	; 0x18
    24c8:	39 8d       	ldd	r19, Y+25	; 0x19
    24ca:	82 0f       	add	r24, r18
    24cc:	93 1f       	adc	r25, r19
    24ce:	fc 01       	movw	r30, r24
    24d0:	80 81       	ld	r24, Z
    24d2:	8e 32       	cpi	r24, 0x2E	; 46
    24d4:	19 f4       	brne	.+6      	; 0x24dc <lcd_printf+0x1ea>
					{
						desetina_carka = ',';
    24d6:	8c e2       	ldi	r24, 0x2C	; 44
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	8b c0       	rjmp	.+278    	; 0x25f2 <lcd_printf+0x300>
					}
					else if (str[j] == '0')
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	28 8d       	ldd	r18, Y+24	; 0x18
    24e4:	39 8d       	ldd	r19, Y+25	; 0x19
    24e6:	82 0f       	add	r24, r18
    24e8:	93 1f       	adc	r25, r19
    24ea:	fc 01       	movw	r30, r24
    24ec:	80 81       	ld	r24, Z
    24ee:	80 33       	cpi	r24, 0x30	; 48
    24f0:	d1 f4       	brne	.+52     	; 0x2526 <lcd_printf+0x234>
					{
						if (desetina_carka == '\0')
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	88 23       	and	r24, r24
    24f6:	a1 f4       	brne	.+40     	; 0x2520 <lcd_printf+0x22e>
						{
							if (nula == '0')
    24f8:	8c 81       	ldd	r24, Y+4	; 0x04
    24fa:	80 33       	cpi	r24, 0x30	; 48
    24fc:	71 f4       	brne	.+28     	; 0x251a <lcd_printf+0x228>
								mista_pred_carkou *= 10;
    24fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2500:	9f 81       	ldd	r25, Y+7	; 0x07
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	9c 01       	movw	r18, r24
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	22 0f       	add	r18, r18
    250e:	33 1f       	adc	r19, r19
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	9f 83       	std	Y+7, r25	; 0x07
    2516:	8e 83       	std	Y+6, r24	; 0x06
    2518:	6c c0       	rjmp	.+216    	; 0x25f2 <lcd_printf+0x300>
							else
								nula = '0';
    251a:	80 e3       	ldi	r24, 0x30	; 48
    251c:	8c 83       	std	Y+4, r24	; 0x04
    251e:	69 c0       	rjmp	.+210    	; 0x25f2 <lcd_printf+0x300>
						}
						else
						{
							mista_za_carkou = 0;
    2520:	19 86       	std	Y+9, r1	; 0x09
    2522:	18 86       	std	Y+8, r1	; 0x08
    2524:	66 c0       	rjmp	.+204    	; 0x25f2 <lcd_printf+0x300>
						}

					}
					else if (str[j] >= '1' && str[j] <= '9')
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	88 2f       	mov	r24, r24
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	28 8d       	ldd	r18, Y+24	; 0x18
    252e:	39 8d       	ldd	r19, Y+25	; 0x19
    2530:	82 0f       	add	r24, r18
    2532:	93 1f       	adc	r25, r19
    2534:	fc 01       	movw	r30, r24
    2536:	80 81       	ld	r24, Z
    2538:	81 33       	cpi	r24, 0x31	; 49
    253a:	08 f4       	brcc	.+2      	; 0x253e <lcd_printf+0x24c>
    253c:	5a c0       	rjmp	.+180    	; 0x25f2 <lcd_printf+0x300>
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	28 8d       	ldd	r18, Y+24	; 0x18
    2546:	39 8d       	ldd	r19, Y+25	; 0x19
    2548:	82 0f       	add	r24, r18
    254a:	93 1f       	adc	r25, r19
    254c:	fc 01       	movw	r30, r24
    254e:	80 81       	ld	r24, Z
    2550:	8a 33       	cpi	r24, 0x3A	; 58
    2552:	08 f0       	brcs	.+2      	; 0x2556 <lcd_printf+0x264>
    2554:	4e c0       	rjmp	.+156    	; 0x25f2 <lcd_printf+0x300>
					{
						if (desetina_carka == ',')
    2556:	8d 81       	ldd	r24, Y+5	; 0x05
    2558:	8c 32       	cpi	r24, 0x2C	; 44
    255a:	31 f5       	brne	.+76     	; 0x25a8 <lcd_printf+0x2b6>
						{
							if (mista_za_carkou == -1)
    255c:	88 85       	ldd	r24, Y+8	; 0x08
    255e:	99 85       	ldd	r25, Y+9	; 0x09
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	11 f4       	brne	.+4      	; 0x2568 <lcd_printf+0x276>
								mista_za_carkou = 0;
    2564:	19 86       	std	Y+9, r1	; 0x09
    2566:	18 86       	std	Y+8, r1	; 0x08

							mista_za_carkou *= 10;
    2568:	88 85       	ldd	r24, Y+8	; 0x08
    256a:	99 85       	ldd	r25, Y+9	; 0x09
    256c:	88 0f       	add	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	9c 01       	movw	r18, r24
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	82 0f       	add	r24, r18
    257c:	93 1f       	adc	r25, r19
    257e:	99 87       	std	Y+9, r25	; 0x09
    2580:	88 87       	std	Y+8, r24	; 0x08
							mista_za_carkou += str[j] - '0';
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	28 8d       	ldd	r18, Y+24	; 0x18
    258a:	39 8d       	ldd	r19, Y+25	; 0x19
    258c:	82 0f       	add	r24, r18
    258e:	93 1f       	adc	r25, r19
    2590:	fc 01       	movw	r30, r24
    2592:	80 81       	ld	r24, Z
    2594:	88 2f       	mov	r24, r24
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	c0 97       	sbiw	r24, 0x30	; 48
    259a:	28 85       	ldd	r18, Y+8	; 0x08
    259c:	39 85       	ldd	r19, Y+9	; 0x09
    259e:	82 0f       	add	r24, r18
    25a0:	93 1f       	adc	r25, r19
    25a2:	99 87       	std	Y+9, r25	; 0x09
    25a4:	88 87       	std	Y+8, r24	; 0x08
    25a6:	25 c0       	rjmp	.+74     	; 0x25f2 <lcd_printf+0x300>
						}
						else
						{
							if (mista_pred_carkou == -1)
    25a8:	8e 81       	ldd	r24, Y+6	; 0x06
    25aa:	9f 81       	ldd	r25, Y+7	; 0x07
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	11 f4       	brne	.+4      	; 0x25b4 <lcd_printf+0x2c2>
								mista_pred_carkou = 0;
    25b0:	1f 82       	std	Y+7, r1	; 0x07
    25b2:	1e 82       	std	Y+6, r1	; 0x06

							mista_pred_carkou *= 10;
    25b4:	8e 81       	ldd	r24, Y+6	; 0x06
    25b6:	9f 81       	ldd	r25, Y+7	; 0x07
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	9c 01       	movw	r18, r24
    25be:	22 0f       	add	r18, r18
    25c0:	33 1f       	adc	r19, r19
    25c2:	22 0f       	add	r18, r18
    25c4:	33 1f       	adc	r19, r19
    25c6:	82 0f       	add	r24, r18
    25c8:	93 1f       	adc	r25, r19
    25ca:	9f 83       	std	Y+7, r25	; 0x07
    25cc:	8e 83       	std	Y+6, r24	; 0x06
							mista_pred_carkou += str[j] - '0';
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	28 8d       	ldd	r18, Y+24	; 0x18
    25d6:	39 8d       	ldd	r19, Y+25	; 0x19
    25d8:	82 0f       	add	r24, r18
    25da:	93 1f       	adc	r25, r19
    25dc:	fc 01       	movw	r30, r24
    25de:	80 81       	ld	r24, Z
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	c0 97       	sbiw	r24, 0x30	; 48
    25e6:	2e 81       	ldd	r18, Y+6	; 0x06
    25e8:	3f 81       	ldd	r19, Y+7	; 0x07
    25ea:	82 0f       	add	r24, r18
    25ec:	93 1f       	adc	r25, r19
    25ee:	9f 83       	std	Y+7, r25	; 0x07
    25f0:	8e 83       	std	Y+6, r24	; 0x06
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	8a 83       	std	Y+2, r24	; 0x02
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	88 2f       	mov	r24, r24
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	28 8d       	ldd	r18, Y+24	; 0x18
    2600:	39 8d       	ldd	r19, Y+25	; 0x19
    2602:	82 0f       	add	r24, r18
    2604:	93 1f       	adc	r25, r19
    2606:	fc 01       	movw	r30, r24
    2608:	80 81       	ld	r24, Z
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    260a:	83 36       	cpi	r24, 0x63	; 99
    260c:	69 f1       	breq	.+90     	; 0x2668 <lcd_printf+0x376>
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	28 8d       	ldd	r18, Y+24	; 0x18
    2616:	39 8d       	ldd	r19, Y+25	; 0x19
    2618:	82 0f       	add	r24, r18
    261a:	93 1f       	adc	r25, r19
    261c:	fc 01       	movw	r30, r24
    261e:	80 81       	ld	r24, Z
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    2620:	88 34       	cpi	r24, 0x48	; 72
    2622:	11 f1       	breq	.+68     	; 0x2668 <lcd_printf+0x376>
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	88 2f       	mov	r24, r24
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	28 8d       	ldd	r18, Y+24	; 0x18
    262c:	39 8d       	ldd	r19, Y+25	; 0x19
    262e:	82 0f       	add	r24, r18
    2630:	93 1f       	adc	r25, r19
    2632:	fc 01       	movw	r30, r24
    2634:	80 81       	ld	r24, Z
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2636:	84 36       	cpi	r24, 0x64	; 100
    2638:	b9 f0       	breq	.+46     	; 0x2668 <lcd_printf+0x376>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	28 8d       	ldd	r18, Y+24	; 0x18
    2642:	39 8d       	ldd	r19, Y+25	; 0x19
    2644:	82 0f       	add	r24, r18
    2646:	93 1f       	adc	r25, r19
    2648:	fc 01       	movw	r30, r24
    264a:	80 81       	ld	r24, Z
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    264c:	86 36       	cpi	r24, 0x66	; 102
    264e:	61 f0       	breq	.+24     	; 0x2668 <lcd_printf+0x376>
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	28 8d       	ldd	r18, Y+24	; 0x18
    2658:	39 8d       	ldd	r19, Y+25	; 0x19
    265a:	82 0f       	add	r24, r18
    265c:	93 1f       	adc	r25, r19
    265e:	fc 01       	movw	r30, r24
    2660:	80 81       	ld	r24, Z
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    2662:	83 37       	cpi	r24, 0x73	; 115
    2664:	09 f0       	breq	.+2      	; 0x2668 <lcd_printf+0x376>
    2666:	13 cf       	rjmp	.-474    	; 0x248e <lcd_printf+0x19c>
						}
					}
				}

				// posuneme index procházení pole
				i = j;
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01

				// podle typu s nimi naložíme
				if (str[j] == 'c')
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	88 2f       	mov	r24, r24
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	28 8d       	ldd	r18, Y+24	; 0x18
    2674:	39 8d       	ldd	r19, Y+25	; 0x19
    2676:	82 0f       	add	r24, r18
    2678:	93 1f       	adc	r25, r19
    267a:	fc 01       	movw	r30, r24
    267c:	80 81       	ld	r24, Z
    267e:	83 36       	cpi	r24, 0x63	; 99
    2680:	69 f4       	brne	.+26     	; 0x269c <lcd_printf+0x3aa>
				{
					lcd_put(va_arg(ap, int));
    2682:	8e 85       	ldd	r24, Y+14	; 0x0e
    2684:	9f 85       	ldd	r25, Y+15	; 0x0f
    2686:	9c 01       	movw	r18, r24
    2688:	2e 5f       	subi	r18, 0xFE	; 254
    268a:	3f 4f       	sbci	r19, 0xFF	; 255
    268c:	3f 87       	std	Y+15, r19	; 0x0f
    268e:	2e 87       	std	Y+14, r18	; 0x0e
    2690:	fc 01       	movw	r30, r24
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
    269a:	8e c0       	rjmp	.+284    	; 0x27b8 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'H')
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	28 8d       	ldd	r18, Y+24	; 0x18
    26a4:	39 8d       	ldd	r19, Y+25	; 0x19
    26a6:	82 0f       	add	r24, r18
    26a8:	93 1f       	adc	r25, r19
    26aa:	fc 01       	movw	r30, r24
    26ac:	80 81       	ld	r24, Z
    26ae:	88 34       	cpi	r24, 0x48	; 72
    26b0:	69 f4       	brne	.+26     	; 0x26cc <lcd_printf+0x3da>
				{
					print_hex(va_arg(ap, uint16_t));
    26b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    26b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    26b6:	9c 01       	movw	r18, r24
    26b8:	2e 5f       	subi	r18, 0xFE	; 254
    26ba:	3f 4f       	sbci	r19, 0xFF	; 255
    26bc:	3f 87       	std	Y+15, r19	; 0x0f
    26be:	2e 87       	std	Y+14, r18	; 0x0e
    26c0:	fc 01       	movw	r30, r24
    26c2:	80 81       	ld	r24, Z
    26c4:	91 81       	ldd	r25, Z+1	; 0x01
    26c6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <print_hex>
    26ca:	76 c0       	rjmp	.+236    	; 0x27b8 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'd')
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	88 2f       	mov	r24, r24
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	28 8d       	ldd	r18, Y+24	; 0x18
    26d4:	39 8d       	ldd	r19, Y+25	; 0x19
    26d6:	82 0f       	add	r24, r18
    26d8:	93 1f       	adc	r25, r19
    26da:	fc 01       	movw	r30, r24
    26dc:	80 81       	ld	r24, Z
    26de:	84 36       	cpi	r24, 0x64	; 100
    26e0:	a9 f4       	brne	.+42     	; 0x270c <lcd_printf+0x41a>
				{
					tmp_int = va_arg(ap, int);
    26e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    26e6:	9c 01       	movw	r18, r24
    26e8:	2e 5f       	subi	r18, 0xFE	; 254
    26ea:	3f 4f       	sbci	r19, 0xFF	; 255
    26ec:	3f 87       	std	Y+15, r19	; 0x0f
    26ee:	2e 87       	std	Y+14, r18	; 0x0e
    26f0:	fc 01       	movw	r30, r24
    26f2:	80 81       	ld	r24, Z
    26f4:	91 81       	ldd	r25, Z+1	; 0x01
    26f6:	9b 87       	std	Y+11, r25	; 0x0b
    26f8:	8a 87       	std	Y+10, r24	; 0x0a
					print_int(tmp_int, znaminko, nula, mista_pred_carkou);
    26fa:	2e 81       	ldd	r18, Y+6	; 0x06
    26fc:	3f 81       	ldd	r19, Y+7	; 0x07
    26fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2700:	9b 85       	ldd	r25, Y+11	; 0x0b
    2702:	4c 81       	ldd	r20, Y+4	; 0x04
    2704:	6b 81       	ldd	r22, Y+3	; 0x03
    2706:	0e 94 14 10 	call	0x2028	; 0x2028 <print_int>
    270a:	56 c0       	rjmp	.+172    	; 0x27b8 <lcd_printf+0x4c6>
				}
				else if (str[j] == 'f')
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	28 8d       	ldd	r18, Y+24	; 0x18
    2714:	39 8d       	ldd	r19, Y+25	; 0x19
    2716:	82 0f       	add	r24, r18
    2718:	93 1f       	adc	r25, r19
    271a:	fc 01       	movw	r30, r24
    271c:	80 81       	ld	r24, Z
    271e:	86 36       	cpi	r24, 0x66	; 102
    2720:	c9 f4       	brne	.+50     	; 0x2754 <lcd_printf+0x462>
				{
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
    2722:	8e 85       	ldd	r24, Y+14	; 0x0e
    2724:	9f 85       	ldd	r25, Y+15	; 0x0f
    2726:	9c 01       	movw	r18, r24
    2728:	2c 5f       	subi	r18, 0xFC	; 252
    272a:	3f 4f       	sbci	r19, 0xFF	; 255
    272c:	3f 87       	std	Y+15, r19	; 0x0f
    272e:	2e 87       	std	Y+14, r18	; 0x0e
    2730:	fc 01       	movw	r30, r24
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	a2 81       	ldd	r26, Z+2	; 0x02
    2738:	b3 81       	ldd	r27, Z+3	; 0x03
    273a:	48 85       	ldd	r20, Y+8	; 0x08
    273c:	59 85       	ldd	r21, Y+9	; 0x09
    273e:	2e 81       	ldd	r18, Y+6	; 0x06
    2740:	3f 81       	ldd	r19, Y+7	; 0x07
    2742:	7a 01       	movw	r14, r20
    2744:	89 01       	movw	r16, r18
    2746:	2c 81       	ldd	r18, Y+4	; 0x04
    2748:	4b 81       	ldd	r20, Y+3	; 0x03
    274a:	bc 01       	movw	r22, r24
    274c:	cd 01       	movw	r24, r26
    274e:	0e 94 c6 10 	call	0x218c	; 0x218c <print_double>
    2752:	32 c0       	rjmp	.+100    	; 0x27b8 <lcd_printf+0x4c6>
				}
				else if (str[j] == 's')
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	88 2f       	mov	r24, r24
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	28 8d       	ldd	r18, Y+24	; 0x18
    275c:	39 8d       	ldd	r19, Y+25	; 0x19
    275e:	82 0f       	add	r24, r18
    2760:	93 1f       	adc	r25, r19
    2762:	fc 01       	movw	r30, r24
    2764:	80 81       	ld	r24, Z
    2766:	83 37       	cpi	r24, 0x73	; 115
    2768:	39 f5       	brne	.+78     	; 0x27b8 <lcd_printf+0x4c6>
				{
					str_p = va_arg(ap, char *);
    276a:	8e 85       	ldd	r24, Y+14	; 0x0e
    276c:	9f 85       	ldd	r25, Y+15	; 0x0f
    276e:	9c 01       	movw	r18, r24
    2770:	2e 5f       	subi	r18, 0xFE	; 254
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
    2774:	3f 87       	std	Y+15, r19	; 0x0f
    2776:	2e 87       	std	Y+14, r18	; 0x0e
    2778:	fc 01       	movw	r30, r24
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	9d 87       	std	Y+13, r25	; 0x0d
    2780:	8c 87       	std	Y+12, r24	; 0x0c
					for (j=0; *(str_p + j) != '\0'; j++)
    2782:	1a 82       	std	Y+2, r1	; 0x02
    2784:	0e c0       	rjmp	.+28     	; 0x27a2 <lcd_printf+0x4b0>
						lcd_put(*(str_p + j));
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	2c 85       	ldd	r18, Y+12	; 0x0c
    278e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2790:	82 0f       	add	r24, r18
    2792:	93 1f       	adc	r25, r19
    2794:	fc 01       	movw	r30, r24
    2796:	80 81       	ld	r24, Z
    2798:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
				}
				else if (str[j] == 's')
				{
					str_p = va_arg(ap, char *);
					for (j=0; *(str_p + j) != '\0'; j++)
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	8f 5f       	subi	r24, 0xFF	; 255
    27a0:	8a 83       	std	Y+2, r24	; 0x02
    27a2:	8a 81       	ldd	r24, Y+2	; 0x02
    27a4:	88 2f       	mov	r24, r24
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    27aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    27ac:	82 0f       	add	r24, r18
    27ae:	93 1f       	adc	r25, r19
    27b0:	fc 01       	movw	r30, r24
    27b2:	80 81       	ld	r24, Z
    27b4:	88 23       	and	r24, r24
    27b6:	39 f7       	brne	.-50     	; 0x2786 <lcd_printf+0x494>
						lcd_put(*(str_p + j));
				}

				// vynulovní formátovacích proměnných
				znaminko = '\0';
    27b8:	1b 82       	std	Y+3, r1	; 0x03
				nula = '\0';
    27ba:	1c 82       	std	Y+4, r1	; 0x04
				desetina_carka = '\0';
    27bc:	1d 82       	std	Y+5, r1	; 0x05
				mista_pred_carkou = -1;
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	9f ef       	ldi	r25, 0xFF	; 255
    27c2:	9f 83       	std	Y+7, r25	; 0x07
    27c4:	8e 83       	std	Y+6, r24	; 0x06
				mista_za_carkou = -1;
    27c6:	8f ef       	ldi	r24, 0xFF	; 255
    27c8:	9f ef       	ldi	r25, 0xFF	; 255
    27ca:	99 87       	std	Y+9, r25	; 0x09
    27cc:	88 87       	std	Y+8, r24	; 0x08
    27ce:	0b c0       	rjmp	.+22     	; 0x27e6 <lcd_printf+0x4f4>
			}
		}
		else
		{
			lcd_put(str[i]);
    27d0:	89 81       	ldd	r24, Y+1	; 0x01
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	28 8d       	ldd	r18, Y+24	; 0x18
    27d8:	39 8d       	ldd	r19, Y+25	; 0x19
    27da:	82 0f       	add	r24, r18
    27dc:	93 1f       	adc	r25, r19
    27de:	fc 01       	movw	r30, r24
    27e0:	80 81       	ld	r24, Z
    27e2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lcd_put>
	 //va_list ap;
	 va_start(ap, str);



	for (i=0; str[i] != '\0'; i++)
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	8f 5f       	subi	r24, 0xFF	; 255
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	88 2f       	mov	r24, r24
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	28 8d       	ldd	r18, Y+24	; 0x18
    27f4:	39 8d       	ldd	r19, Y+25	; 0x19
    27f6:	82 0f       	add	r24, r18
    27f8:	93 1f       	adc	r25, r19
    27fa:	fc 01       	movw	r30, r24
    27fc:	80 81       	ld	r24, Z
    27fe:	88 23       	and	r24, r24
    2800:	09 f0       	breq	.+2      	; 0x2804 <lcd_printf+0x512>
    2802:	96 cd       	rjmp	.-1236   	; 0x2330 <lcd_printf+0x3e>
		{
			lcd_put(str[i]);
		}
	}
	va_end(ap);
}
    2804:	00 00       	nop
    2806:	2f 96       	adiw	r28, 0x0f	; 15
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	ff 90       	pop	r15
    281c:	ef 90       	pop	r14
    281e:	08 95       	ret

00002820 <ntc_init>:
#define R_REF	10e3
// ========================================================

// NTC initialization
void ntc_init(void)
{
    2820:	cf 93       	push	r28
    2822:	df 93       	push	r29
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0) | 5;							// referention AVCC, measure on channel ADC5
    2828:	8c e7       	ldi	r24, 0x7C	; 124
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	25 e4       	ldi	r18, 0x45	; 69
    282e:	fc 01       	movw	r30, r24
    2830:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);	// ADEN - enable ADC, ACD clk = F_CPU/64
    2832:	8a e7       	ldi	r24, 0x7A	; 122
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	26 e8       	ldi	r18, 0x86	; 134
    2838:	fc 01       	movw	r30, r24
    283a:	20 83       	st	Z, r18
}
    283c:	00 00       	nop
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	08 95       	ret

00002844 <ntc_measure>:

// NCT measure
int16_t ntc_measure(void)
{
    2844:	cf 92       	push	r12
    2846:	df 92       	push	r13
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	cd b7       	in	r28, 0x3d	; 61
    2852:	de b7       	in	r29, 0x3e	; 62
    2854:	2e 97       	sbiw	r28, 0x0e	; 14
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
	int16_t adc, ntc_res, temp;
	double volt, tmp_log;
	
	ADCSRA |= (1<<ADSC);        // start conversion
    2860:	8a e7       	ldi	r24, 0x7A	; 122
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	2a e7       	ldi	r18, 0x7A	; 122
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	f9 01       	movw	r30, r18
    286a:	20 81       	ld	r18, Z
    286c:	20 64       	ori	r18, 0x40	; 64
    286e:	fc 01       	movw	r30, r24
    2870:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));  // wait to end conversion
    2872:	00 00       	nop
    2874:	8a e7       	ldi	r24, 0x7A	; 122
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	fc 01       	movw	r30, r24
    287a:	80 81       	ld	r24, Z
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	80 74       	andi	r24, 0x40	; 64
    2882:	99 27       	eor	r25, r25
    2884:	89 2b       	or	r24, r25
    2886:	b1 f7       	brne	.-20     	; 0x2874 <ntc_measure+0x30>
	adc=ADC;					// value measurement
    2888:	88 e7       	ldi	r24, 0x78	; 120
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	fc 01       	movw	r30, r24
    288e:	80 81       	ld	r24, Z
    2890:	91 81       	ldd	r25, Z+1	; 0x01
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
	
	// convert to voltage
	volt = (V_REF/ADC_MAX) * ((double)adc);
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	09 2e       	mov	r0, r25
    289c:	00 0c       	add	r0, r0
    289e:	aa 0b       	sbc	r26, r26
    28a0:	bb 0b       	sbc	r27, r27
    28a2:	bc 01       	movw	r22, r24
    28a4:	cd 01       	movw	r24, r26
    28a6:	0e 94 9a 18 	call	0x3134	; 0x3134 <__floatsisf>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	2a e0       	ldi	r18, 0x0A	; 10
    28b0:	38 e2       	ldi	r19, 0x28	; 40
    28b2:	40 ea       	ldi	r20, 0xA0	; 160
    28b4:	5b e3       	ldi	r21, 0x3B	; 59
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	8b 83       	std	Y+3, r24	; 0x03
    28c4:	9c 83       	std	Y+4, r25	; 0x04
    28c6:	ad 83       	std	Y+5, r26	; 0x05
    28c8:	be 83       	std	Y+6, r27	; 0x06
	ntc_res = (-(volt * R_DIV) / V_REF) / ((volt/V_REF) - 1);
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e4       	ldi	r19, 0x40	; 64
    28ce:	4c e1       	ldi	r20, 0x1C	; 28
    28d0:	56 e4       	ldi	r21, 0x46	; 70
    28d2:	6b 81       	ldd	r22, Y+3	; 0x03
    28d4:	7c 81       	ldd	r23, Y+4	; 0x04
    28d6:	8d 81       	ldd	r24, Y+5	; 0x05
    28d8:	9e 81       	ldd	r25, Y+6	; 0x06
    28da:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	b0 58       	subi	r27, 0x80	; 128
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 ea       	ldi	r20, 0xA0	; 160
    28ea:	50 e4       	ldi	r21, 0x40	; 64
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	6c 01       	movw	r12, r24
    28fa:	7d 01       	movw	r14, r26
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 ea       	ldi	r20, 0xA0	; 160
    2902:	50 e4       	ldi	r21, 0x40	; 64
    2904:	6b 81       	ldd	r22, Y+3	; 0x03
    2906:	7c 81       	ldd	r23, Y+4	; 0x04
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	9e 81       	ldd	r25, Y+6	; 0x06
    290c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 7e 17 	call	0x2efc	; 0x2efc <__subsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	9c 01       	movw	r18, r24
    292a:	ad 01       	movw	r20, r26
    292c:	c7 01       	movw	r24, r14
    292e:	b6 01       	movw	r22, r12
    2930:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__fixsfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	98 87       	std	Y+8, r25	; 0x08
    2946:	8f 83       	std	Y+7, r24	; 0x07
	
	tmp_log = log(ntc_res/R_REF);
    2948:	8f 81       	ldd	r24, Y+7	; 0x07
    294a:	98 85       	ldd	r25, Y+8	; 0x08
    294c:	09 2e       	mov	r0, r25
    294e:	00 0c       	add	r0, r0
    2950:	aa 0b       	sbc	r26, r26
    2952:	bb 0b       	sbc	r27, r27
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 9a 18 	call	0x3134	; 0x3134 <__floatsisf>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e4       	ldi	r19, 0x40	; 64
    2964:	4c e1       	ldi	r20, 0x1C	; 28
    2966:	56 e4       	ldi	r21, 0x46	; 70
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 57 19 	call	0x32ae	; 0x32ae <log>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	89 87       	std	Y+9, r24	; 0x09
    2982:	9a 87       	std	Y+10, r25	; 0x0a
    2984:	ab 87       	std	Y+11, r26	; 0x0b
    2986:	bc 87       	std	Y+12, r27	; 0x0c
	temp = 1.0 / ( A1 + B1*tmp_log + C1*tmp_log*tmp_log + D1*tmp_log*tmp_log*tmp_log ) - 273.15;
    2988:	21 ef       	ldi	r18, 0xF1	; 241
    298a:	3b eb       	ldi	r19, 0xBB	; 187
    298c:	46 e8       	ldi	r20, 0x86	; 134
    298e:	59 e3       	ldi	r21, 0x39	; 57
    2990:	69 85       	ldd	r22, Y+9	; 0x09
    2992:	7a 85       	ldd	r23, Y+10	; 0x0a
    2994:	8b 85       	ldd	r24, Y+11	; 0x0b
    2996:	9c 85       	ldd	r25, Y+12	; 0x0c
    2998:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	2d e0       	ldi	r18, 0x0D	; 13
    29a2:	3f ec       	ldi	r19, 0xCF	; 207
    29a4:	4b e5       	ldi	r20, 0x5B	; 91
    29a6:	5b e3       	ldi	r21, 0x3B	; 59
    29a8:	bc 01       	movw	r22, r24
    29aa:	cd 01       	movw	r24, r26
    29ac:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__addsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	6c 01       	movw	r12, r24
    29b6:	7d 01       	movw	r14, r26
    29b8:	22 e8       	ldi	r18, 0x82	; 130
    29ba:	35 ed       	ldi	r19, 0xD5	; 213
    29bc:	4f e2       	ldi	r20, 0x2F	; 47
    29be:	56 e3       	ldi	r21, 0x36	; 54
    29c0:	69 85       	ldd	r22, Y+9	; 0x09
    29c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    29c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    29c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    29c8:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	29 85       	ldd	r18, Y+9	; 0x09
    29d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    29d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    29d6:	5c 85       	ldd	r21, Y+12	; 0x0c
    29d8:	bc 01       	movw	r22, r24
    29da:	cd 01       	movw	r24, r26
    29dc:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9c 01       	movw	r18, r24
    29e6:	ad 01       	movw	r20, r26
    29e8:	c7 01       	movw	r24, r14
    29ea:	b6 01       	movw	r22, r12
    29ec:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__addsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	6c 01       	movw	r12, r24
    29f6:	7d 01       	movw	r14, r26
    29f8:	2a e6       	ldi	r18, 0x6A	; 106
    29fa:	33 e1       	ldi	r19, 0x13	; 19
    29fc:	49 e8       	ldi	r20, 0x89	; 137
    29fe:	53 e3       	ldi	r21, 0x33	; 51
    2a00:	69 85       	ldd	r22, Y+9	; 0x09
    2a02:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a04:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a06:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a08:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	29 85       	ldd	r18, Y+9	; 0x09
    2a12:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a14:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a16:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	29 85       	ldd	r18, Y+9	; 0x09
    2a26:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a28:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9c 01       	movw	r18, r24
    2a3a:	ad 01       	movw	r20, r26
    2a3c:	c7 01       	movw	r24, r14
    2a3e:	b6 01       	movw	r22, r12
    2a40:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__addsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9c 01       	movw	r18, r24
    2a4a:	ad 01       	movw	r20, r26
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	70 e0       	ldi	r23, 0x00	; 0
    2a50:	80 e8       	ldi	r24, 0x80	; 128
    2a52:	9f e3       	ldi	r25, 0x3F	; 63
    2a54:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	23 e3       	ldi	r18, 0x33	; 51
    2a5e:	33 e9       	ldi	r19, 0x93	; 147
    2a60:	48 e8       	ldi	r20, 0x88	; 136
    2a62:	53 e4       	ldi	r21, 0x43	; 67
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	0e 94 7e 17 	call	0x2efc	; 0x2efc <__subsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__fixsfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9e 87       	std	Y+14, r25	; 0x0e
    2a7e:	8d 87       	std	Y+13, r24	; 0x0d
	
	return temp;
    2a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a82:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    2a84:	2e 96       	adiw	r28, 0x0e	; 14
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	ff 90       	pop	r15
    2a96:	ef 90       	pop	r14
    2a98:	df 90       	pop	r13
    2a9a:	cf 90       	pop	r12
    2a9c:	08 95       	ret

00002a9e <motor_init>:
#include "wyk_step_stick.h"

void motor_init(void)
{
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ENA_DDR |= MOTOR_ENA_PIN;
    2aa6:	8a e2       	ldi	r24, 0x2A	; 42
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	2a e2       	ldi	r18, 0x2A	; 42
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	f9 01       	movw	r30, r18
    2ab0:	20 81       	ld	r18, Z
    2ab2:	20 68       	ori	r18, 0x80	; 128
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	20 83       	st	Z, r18
	MOTOR_DIR_DDR |= MOTOR_DIR_PIN;
    2ab8:	8a e2       	ldi	r24, 0x2A	; 42
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	2a e2       	ldi	r18, 0x2A	; 42
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	f9 01       	movw	r30, r18
    2ac2:	20 81       	ld	r18, Z
    2ac4:	20 62       	ori	r18, 0x20	; 32
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	20 83       	st	Z, r18
	MOTOR_STEP_DDR |= MOTOR_STEP_PIN;
    2aca:	84 e2       	ldi	r24, 0x24	; 36
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	24 e2       	ldi	r18, 0x24	; 36
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	f9 01       	movw	r30, r18
    2ad4:	20 81       	ld	r18, Z
    2ad6:	28 60       	ori	r18, 0x08	; 8
    2ad8:	fc 01       	movw	r30, r24
    2ada:	20 83       	st	Z, r18

	MOTOR_DRIVER_OFF;
    2adc:	8b e2       	ldi	r24, 0x2B	; 43
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	2b e2       	ldi	r18, 0x2B	; 43
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	f9 01       	movw	r30, r18
    2ae6:	20 81       	ld	r18, Z
    2ae8:	20 68       	ori	r18, 0x80	; 128
    2aea:	fc 01       	movw	r30, r24
    2aec:	20 83       	st	Z, r18
			MOTOR_MS1_1;
			MOTOR_MS2_1;
			MOTOR_MS3_0;
			break;
		default:
			MOTOR_MS1_1;
    2aee:	85 e2       	ldi	r24, 0x25	; 37
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	25 e2       	ldi	r18, 0x25	; 37
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	f9 01       	movw	r30, r18
    2af8:	20 81       	ld	r18, Z
    2afa:	21 60       	ori	r18, 0x01	; 1
    2afc:	fc 01       	movw	r30, r24
    2afe:	20 83       	st	Z, r18
			MOTOR_MS2_1;
    2b00:	85 e2       	ldi	r24, 0x25	; 37
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	25 e2       	ldi	r18, 0x25	; 37
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	f9 01       	movw	r30, r18
    2b0a:	20 81       	ld	r18, Z
    2b0c:	22 60       	ori	r18, 0x02	; 2
    2b0e:	fc 01       	movw	r30, r24
    2b10:	20 83       	st	Z, r18
			MOTOR_MS3_1;
    2b12:	85 e2       	ldi	r24, 0x25	; 37
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	25 e2       	ldi	r18, 0x25	; 37
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	f9 01       	movw	r30, r18
    2b1c:	20 81       	ld	r18, Z
    2b1e:	24 60       	ori	r18, 0x04	; 4
    2b20:	fc 01       	movw	r30, r24
    2b22:	20 83       	st	Z, r18
	}

	

	TCCR2A = (1<<COM2A0) | (1<<WGM21);				// toggle OCR2A CTC mode
    2b24:	80 eb       	ldi	r24, 0xB0	; 176
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	22 e4       	ldi	r18, 0x42	; 66
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	20 83       	st	Z, r18
	TCCR2B = 0;										// clock off
    2b2e:	81 eb       	ldi	r24, 0xB1	; 177
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	fc 01       	movw	r30, r24
    2b34:	10 82       	st	Z, r1
	OCR2A = 0;
    2b36:	83 eb       	ldi	r24, 0xB3	; 179
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	10 82       	st	Z, r1
	TCNT2 = 0;
    2b3e:	82 eb       	ldi	r24, 0xB2	; 178
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	fc 01       	movw	r30, r24
    2b44:	10 82       	st	Z, r1
	MOTOR_DIR0;
    2b46:	8b e2       	ldi	r24, 0x2B	; 43
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	2b e2       	ldi	r18, 0x2B	; 43
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	f9 01       	movw	r30, r18
    2b50:	20 81       	ld	r18, Z
    2b52:	2f 7d       	andi	r18, 0xDF	; 223
    2b54:	fc 01       	movw	r30, r24
    2b56:	20 83       	st	Z, r18
}
    2b58:	00 00       	nop
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	08 95       	ret

00002b60 <motor_set_rpm>:

void motor_set_rpm(uint16_t rpm)					// rote per minute
{
    2b60:	8f 92       	push	r8
    2b62:	9f 92       	push	r9
    2b64:	af 92       	push	r10
    2b66:	bf 92       	push	r11
    2b68:	cf 92       	push	r12
    2b6a:	df 92       	push	r13
    2b6c:	ef 92       	push	r14
    2b6e:	ff 92       	push	r15
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	6a 97       	sbiw	r28, 0x1a	; 26
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	9a 8f       	std	Y+26, r25	; 0x1a
    2b86:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t buf;
	const uint32_t freq = F_CPU*60;
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	98 ea       	ldi	r25, 0xA8	; 168
    2b8c:	a4 ed       	ldi	r26, 0xD4	; 212
    2b8e:	b5 e5       	ldi	r27, 0x55	; 85
    2b90:	8a 83       	std	Y+2, r24	; 0x02
    2b92:	9b 83       	std	Y+3, r25	; 0x03
    2b94:	ac 83       	std	Y+4, r26	; 0x04
    2b96:	bd 83       	std	Y+5, r27	; 0x05
	const uint16_t div[] = {1, 8, 32, 64, 128, 256, 1024};
    2b98:	8e e0       	ldi	r24, 0x0E	; 14
    2b9a:	e5 ed       	ldi	r30, 0xD5	; 213
    2b9c:	f2 e0       	ldi	r31, 0x02	; 2
    2b9e:	de 01       	movw	r26, r28
    2ba0:	1b 96       	adiw	r26, 0x0b	; 11
    2ba2:	01 90       	ld	r0, Z+
    2ba4:	0d 92       	st	X+, r0
    2ba6:	8a 95       	dec	r24
    2ba8:	e1 f7       	brne	.-8      	; 0x2ba2 <motor_set_rpm+0x42>
	const uint8_t div_len = 7;
    2baa:	87 e0       	ldi	r24, 0x07	; 7
    2bac:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t i;

	if (rpm)
    2bae:	89 8d       	ldd	r24, Y+25	; 0x19
    2bb0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bb2:	89 2b       	or	r24, r25
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <motor_set_rpm+0x58>
    2bb6:	94 c0       	rjmp	.+296    	; 0x2ce0 <motor_set_rpm+0x180>
	{
		for (i=0; i<div_len; i++)
    2bb8:	19 82       	std	Y+1, r1	; 0x01
    2bba:	8c c0       	rjmp	.+280    	; 0x2cd4 <motor_set_rpm+0x174>
		{
			buf = freq / ( ((uint32_t)rpm) * MOTOR_PERIOD * 2 * div[i] );
    2bbc:	6a 81       	ldd	r22, Y+2	; 0x02
    2bbe:	7b 81       	ldd	r23, Y+3	; 0x03
    2bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc4:	0e 94 98 18 	call	0x3130	; 0x3130 <__floatunsisf>
    2bc8:	6b 01       	movw	r12, r22
    2bca:	7c 01       	movw	r14, r24
    2bcc:	89 8d       	ldd	r24, Y+25	; 0x19
    2bce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2bd0:	9c 01       	movw	r18, r24
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	88 e6       	ldi	r24, 0x68	; 104
    2bd8:	91 e0       	ldi	r25, 0x01	; 1
    2bda:	dc 01       	movw	r26, r24
    2bdc:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__muluhisi3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 98 18 	call	0x3130	; 0x3130 <__floatunsisf>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	26 e6       	ldi	r18, 0x66	; 102
    2bf2:	36 e6       	ldi	r19, 0x66	; 102
    2bf4:	46 ee       	ldi	r20, 0xE6	; 230
    2bf6:	5d e3       	ldi	r21, 0x3D	; 61
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9c 01       	movw	r18, r24
    2c06:	ad 01       	movw	r20, r26
    2c08:	bc 01       	movw	r22, r24
    2c0a:	cd 01       	movw	r24, r26
    2c0c:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__addsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	4c 01       	movw	r8, r24
    2c16:	5d 01       	movw	r10, r26
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	88 2f       	mov	r24, r24
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	9e 01       	movw	r18, r28
    2c24:	2f 5f       	subi	r18, 0xFF	; 255
    2c26:	3f 4f       	sbci	r19, 0xFF	; 255
    2c28:	82 0f       	add	r24, r18
    2c2a:	93 1f       	adc	r25, r19
    2c2c:	0a 96       	adiw	r24, 0x0a	; 10
    2c2e:	fc 01       	movw	r30, r24
    2c30:	80 81       	ld	r24, Z
    2c32:	91 81       	ldd	r25, Z+1	; 0x01
    2c34:	cc 01       	movw	r24, r24
    2c36:	a0 e0       	ldi	r26, 0x00	; 0
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	bc 01       	movw	r22, r24
    2c3c:	cd 01       	movw	r24, r26
    2c3e:	0e 94 98 18 	call	0x3130	; 0x3130 <__floatunsisf>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9c 01       	movw	r18, r24
    2c48:	ad 01       	movw	r20, r26
    2c4a:	c5 01       	movw	r24, r10
    2c4c:	b4 01       	movw	r22, r8
    2c4e:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9c 01       	movw	r18, r24
    2c58:	ad 01       	movw	r20, r26
    2c5a:	c7 01       	movw	r24, r14
    2c5c:	b6 01       	movw	r22, r12
    2c5e:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <__divsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	8f 83       	std	Y+7, r24	; 0x07
    2c74:	98 87       	std	Y+8, r25	; 0x08
    2c76:	a9 87       	std	Y+9, r26	; 0x09
    2c78:	ba 87       	std	Y+10, r27	; 0x0a
			if (buf < 0xFF && buf > 0)
    2c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c7c:	98 85       	ldd	r25, Y+8	; 0x08
    2c7e:	a9 85       	ldd	r26, Y+9	; 0x09
    2c80:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c82:	8f 3f       	cpi	r24, 0xFF	; 255
    2c84:	91 05       	cpc	r25, r1
    2c86:	a1 05       	cpc	r26, r1
    2c88:	b1 05       	cpc	r27, r1
    2c8a:	08 f5       	brcc	.+66     	; 0x2cce <motor_set_rpm+0x16e>
    2c8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c8e:	98 85       	ldd	r25, Y+8	; 0x08
    2c90:	a9 85       	ldd	r26, Y+9	; 0x09
    2c92:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c94:	89 2b       	or	r24, r25
    2c96:	8a 2b       	or	r24, r26
    2c98:	8b 2b       	or	r24, r27
    2c9a:	c9 f0       	breq	.+50     	; 0x2cce <motor_set_rpm+0x16e>
			{
				TCCR2B = i+1;						// clock/div[i]
    2c9c:	81 eb       	ldi	r24, 0xB1	; 177
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	29 81       	ldd	r18, Y+1	; 0x01
    2ca2:	2f 5f       	subi	r18, 0xFF	; 255
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	20 83       	st	Z, r18
				OCR2A = (uint8_t )buf;
    2ca8:	83 eb       	ldi	r24, 0xB3	; 179
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	2f 81       	ldd	r18, Y+7	; 0x07
    2cae:	fc 01       	movw	r30, r24
    2cb0:	20 83       	st	Z, r18
				TCNT2 = 0;
    2cb2:	82 eb       	ldi	r24, 0xB2	; 178
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	10 82       	st	Z, r1
				MOTOR_DRIVER_ON;
    2cba:	8b e2       	ldi	r24, 0x2B	; 43
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	2b e2       	ldi	r18, 0x2B	; 43
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	f9 01       	movw	r30, r18
    2cc4:	20 81       	ld	r18, Z
    2cc6:	2f 77       	andi	r18, 0x7F	; 127
    2cc8:	fc 01       	movw	r30, r24
    2cca:	20 83       	st	Z, r18
				break;
    2ccc:	16 c0       	rjmp	.+44     	; 0x2cfa <motor_set_rpm+0x19a>

	uint8_t i;

	if (rpm)
	{
		for (i=0; i<div_len; i++)
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	8f 5f       	subi	r24, 0xFF	; 255
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	99 81       	ldd	r25, Y+1	; 0x01
    2cd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd8:	98 17       	cp	r25, r24
    2cda:	08 f4       	brcc	.+2      	; 0x2cde <motor_set_rpm+0x17e>
    2cdc:	6f cf       	rjmp	.-290    	; 0x2bbc <motor_set_rpm+0x5c>
    2cde:	0d c0       	rjmp	.+26     	; 0x2cfa <motor_set_rpm+0x19a>
			}
		}
	}
	else
	{
		TCCR2B = 0x00;
    2ce0:	81 eb       	ldi	r24, 0xB1	; 177
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	fc 01       	movw	r30, r24
    2ce6:	10 82       	st	Z, r1
		MOTOR_DRIVER_OFF;
    2ce8:	8b e2       	ldi	r24, 0x2B	; 43
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	2b e2       	ldi	r18, 0x2B	; 43
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	f9 01       	movw	r30, r18
    2cf2:	20 81       	ld	r18, Z
    2cf4:	20 68       	ori	r18, 0x80	; 128
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	20 83       	st	Z, r18
	}
	actual_rmp = rpm;
    2cfa:	89 8d       	ldd	r24, Y+25	; 0x19
    2cfc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2cfe:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <actual_rmp+0x1>
    2d02:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <actual_rmp>
}
    2d06:	00 00       	nop
    2d08:	6a 96       	adiw	r28, 0x1a	; 26
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	cf 90       	pop	r12
    2d20:	bf 90       	pop	r11
    2d22:	af 90       	pop	r10
    2d24:	9f 90       	pop	r9
    2d26:	8f 90       	pop	r8
    2d28:	08 95       	ret

00002d2a <motor_smoothly_rmp>:


void motor_smoothly_rmp(uint16_t rpm_start, uint16_t rpm_end)
{
    2d2a:	cf 93       	push	r28
    2d2c:	df 93       	push	r29
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	65 97       	sbiw	r28, 0x15	; 21
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	9b 8b       	std	Y+19, r25	; 0x13
    2d40:	8a 8b       	std	Y+18, r24	; 0x12
    2d42:	7d 8b       	std	Y+21, r23	; 0x15
    2d44:	6c 8b       	std	Y+20, r22	; 0x14
	uint16_t rpm;
	int8_t step;
	
	if (rpm_start < rpm_end)
    2d46:	2a 89       	ldd	r18, Y+18	; 0x12
    2d48:	3b 89       	ldd	r19, Y+19	; 0x13
    2d4a:	8c 89       	ldd	r24, Y+20	; 0x14
    2d4c:	9d 89       	ldd	r25, Y+21	; 0x15
    2d4e:	28 17       	cp	r18, r24
    2d50:	39 07       	cpc	r19, r25
    2d52:	18 f4       	brcc	.+6      	; 0x2d5a <motor_smoothly_rmp+0x30>
	{
		step = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	8b 83       	std	Y+3, r24	; 0x03
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <motor_smoothly_rmp+0x34>
	}
	else
	{
		step = -1;
    2d5a:	8f ef       	ldi	r24, 0xFF	; 255
    2d5c:	8b 83       	std	Y+3, r24	; 0x03
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2d5e:	8a 89       	ldd	r24, Y+18	; 0x12
    2d60:	9b 89       	ldd	r25, Y+19	; 0x13
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	89 83       	std	Y+1, r24	; 0x01
    2d66:	a5 c0       	rjmp	.+330    	; 0x2eb2 <motor_smoothly_rmp+0x188>
	{
		user_profile.rpm = rpm;
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	90 93 ec 02 	sts	0x02EC, r25	; 0x8002ec <user_profile+0x1>
    2d70:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <user_profile>
		if (!(user_profile.rpm % 20))
    2d74:	40 91 eb 02 	lds	r20, 0x02EB	; 0x8002eb <user_profile>
    2d78:	50 91 ec 02 	lds	r21, 0x02EC	; 0x8002ec <user_profile+0x1>
    2d7c:	9a 01       	movw	r18, r20
    2d7e:	ad ec       	ldi	r26, 0xCD	; 205
    2d80:	bc ec       	ldi	r27, 0xCC	; 204
    2d82:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    2d86:	92 95       	swap	r25
    2d88:	82 95       	swap	r24
    2d8a:	8f 70       	andi	r24, 0x0F	; 15
    2d8c:	89 27       	eor	r24, r25
    2d8e:	9f 70       	andi	r25, 0x0F	; 15
    2d90:	89 27       	eor	r24, r25
    2d92:	64 e1       	ldi	r22, 0x14	; 20
    2d94:	68 9f       	mul	r22, r24
    2d96:	90 01       	movw	r18, r0
    2d98:	69 9f       	mul	r22, r25
    2d9a:	30 0d       	add	r19, r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	ca 01       	movw	r24, r20
    2da0:	82 1b       	sub	r24, r18
    2da2:	93 0b       	sbc	r25, r19
    2da4:	89 2b       	or	r24, r25
    2da6:	19 f4       	brne	.+6      	; 0x2dae <motor_smoothly_rmp+0x84>
			TUI('s');
    2da8:	83 e7       	ldi	r24, 0x73	; 115
    2daa:	0e 94 96 03 	call	0x72c	; 0x72c <TUI>
		motor_set_rpm(user_profile.rpm);
    2dae:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <user_profile>
    2db2:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <user_profile+0x1>
    2db6:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <motor_set_rpm>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	a0 ef       	ldi	r26, 0xF0	; 240
    2dc0:	b1 e4       	ldi	r27, 0x41	; 65
    2dc2:	8c 83       	std	Y+4, r24	; 0x04
    2dc4:	9d 83       	std	Y+5, r25	; 0x05
    2dc6:	ae 83       	std	Y+6, r26	; 0x06
    2dc8:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e8       	ldi	r19, 0x80	; 128
    2dce:	4b eb       	ldi	r20, 0xBB	; 187
    2dd0:	55 e4       	ldi	r21, 0x45	; 69
    2dd2:	6c 81       	ldd	r22, Y+4	; 0x04
    2dd4:	7d 81       	ldd	r23, Y+5	; 0x05
    2dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2dda:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	88 87       	std	Y+8, r24	; 0x08
    2de4:	99 87       	std	Y+9, r25	; 0x09
    2de6:	aa 87       	std	Y+10, r26	; 0x0a
    2de8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e8       	ldi	r20, 0x80	; 128
    2df0:	5f e3       	ldi	r21, 0x3F	; 63
    2df2:	68 85       	ldd	r22, Y+8	; 0x08
    2df4:	79 85       	ldd	r23, Y+9	; 0x09
    2df6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2df8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dfa:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <__cmpsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	2c f4       	brge	.+10     	; 0x2e0c <motor_smoothly_rmp+0xe2>
		__ticks = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9d 87       	std	Y+13, r25	; 0x0d
    2e08:	8c 87       	std	Y+12, r24	; 0x0c
    2e0a:	3f c0       	rjmp	.+126    	; 0x2e8a <motor_smoothly_rmp+0x160>
	else if (__tmp > 65535)
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	3f ef       	ldi	r19, 0xFF	; 255
    2e10:	4f e7       	ldi	r20, 0x7F	; 127
    2e12:	57 e4       	ldi	r21, 0x47	; 71
    2e14:	68 85       	ldd	r22, Y+8	; 0x08
    2e16:	79 85       	ldd	r23, Y+9	; 0x09
    2e18:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e1c:	0e 94 4a 19 	call	0x3294	; 0x3294 <__gesf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	4c f5       	brge	.+82     	; 0x2e76 <motor_smoothly_rmp+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e2       	ldi	r20, 0x20	; 32
    2e2a:	51 e4       	ldi	r21, 0x41	; 65
    2e2c:	6c 81       	ldd	r22, Y+4	; 0x04
    2e2e:	7d 81       	ldd	r23, Y+5	; 0x05
    2e30:	8e 81       	ldd	r24, Y+6	; 0x06
    2e32:	9f 81       	ldd	r25, Y+7	; 0x07
    2e34:	0e 94 9f 19 	call	0x333e	; 0x333e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9d 87       	std	Y+13, r25	; 0x0d
    2e4a:	8c 87       	std	Y+12, r24	; 0x0c
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <motor_smoothly_rmp+0x142>
    2e4e:	88 e5       	ldi	r24, 0x58	; 88
    2e50:	92 e0       	ldi	r25, 0x02	; 2
    2e52:	9f 87       	std	Y+15, r25	; 0x0f
    2e54:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e56:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e58:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <motor_smoothly_rmp+0x130>
    2e5e:	9f 87       	std	Y+15, r25	; 0x0f
    2e60:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e64:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9d 87       	std	Y+13, r25	; 0x0d
    2e6a:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e70:	89 2b       	or	r24, r25
    2e72:	69 f7       	brne	.-38     	; 0x2e4e <motor_smoothly_rmp+0x124>
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <motor_smoothly_rmp+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e76:	68 85       	ldd	r22, Y+8	; 0x08
    2e78:	79 85       	ldd	r23, Y+9	; 0x09
    2e7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e7e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9d 87       	std	Y+13, r25	; 0x0d
    2e88:	8c 87       	std	Y+12, r24	; 0x0c
    2e8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e8e:	99 8b       	std	Y+17, r25	; 0x11
    2e90:	88 8b       	std	Y+16, r24	; 0x10
    2e92:	88 89       	ldd	r24, Y+16	; 0x10
    2e94:	99 89       	ldd	r25, Y+17	; 0x11
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <motor_smoothly_rmp+0x16c>
    2e9a:	99 8b       	std	Y+17, r25	; 0x11
    2e9c:	88 8b       	std	Y+16, r24	; 0x10
	else
	{
		step = -1;
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	08 2e       	mov	r0, r24
    2ea2:	00 0c       	add	r0, r0
    2ea4:	99 0b       	sbc	r25, r25
    2ea6:	29 81       	ldd	r18, Y+1	; 0x01
    2ea8:	3a 81       	ldd	r19, Y+2	; 0x02
    2eaa:	82 0f       	add	r24, r18
    2eac:	93 1f       	adc	r25, r19
    2eae:	9a 83       	std	Y+2, r25	; 0x02
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	88 0f       	add	r24, r24
    2eb8:	33 0b       	sbc	r19, r19
    2eba:	8c 89       	ldd	r24, Y+20	; 0x14
    2ebc:	9d 89       	ldd	r25, Y+21	; 0x15
    2ebe:	28 0f       	add	r18, r24
    2ec0:	39 1f       	adc	r19, r25
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec6:	28 17       	cp	r18, r24
    2ec8:	39 07       	cpc	r19, r25
    2eca:	59 f0       	breq	.+22     	; 0x2ee2 <motor_smoothly_rmp+0x1b8>
    2ecc:	8c e3       	ldi	r24, 0x3C	; 60
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	80 81       	ld	r24, Z
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	81 70       	andi	r24, 0x01	; 1
    2eda:	99 27       	eor	r25, r25
    2edc:	89 2b       	or	r24, r25
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <motor_smoothly_rmp+0x1b8>
    2ee0:	43 cf       	rjmp	.-378    	; 0x2d68 <motor_smoothly_rmp+0x3e>
		if (!(user_profile.rpm % 20))
			TUI('s');
		motor_set_rpm(user_profile.rpm);
		_delay_ms(30);
	}
	TUI('s');
    2ee2:	83 e7       	ldi	r24, 0x73	; 115
    2ee4:	0e 94 96 03 	call	0x72c	; 0x72c <TUI>
}
    2ee8:	00 00       	nop
    2eea:	65 96       	adiw	r28, 0x15	; 21
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	08 95       	ret

00002efc <__subsf3>:
    2efc:	50 58       	subi	r21, 0x80	; 128

00002efe <__addsf3>:
    2efe:	bb 27       	eor	r27, r27
    2f00:	aa 27       	eor	r26, r26
    2f02:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__addsf3x>
    2f06:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__fp_round>
    2f0a:	0e 94 02 19 	call	0x3204	; 0x3204 <__fp_pscA>
    2f0e:	38 f0       	brcs	.+14     	; 0x2f1e <__addsf3+0x20>
    2f10:	0e 94 09 19 	call	0x3212	; 0x3212 <__fp_pscB>
    2f14:	20 f0       	brcs	.+8      	; 0x2f1e <__addsf3+0x20>
    2f16:	39 f4       	brne	.+14     	; 0x2f26 <__addsf3+0x28>
    2f18:	9f 3f       	cpi	r25, 0xFF	; 255
    2f1a:	19 f4       	brne	.+6      	; 0x2f22 <__addsf3+0x24>
    2f1c:	26 f4       	brtc	.+8      	; 0x2f26 <__addsf3+0x28>
    2f1e:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_nan>
    2f22:	0e f4       	brtc	.+2      	; 0x2f26 <__addsf3+0x28>
    2f24:	e0 95       	com	r30
    2f26:	e7 fb       	bst	r30, 7
    2f28:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_inf>

00002f2c <__addsf3x>:
    2f2c:	e9 2f       	mov	r30, r25
    2f2e:	0e 94 21 19 	call	0x3242	; 0x3242 <__fp_split3>
    2f32:	58 f3       	brcs	.-42     	; 0x2f0a <__addsf3+0xc>
    2f34:	ba 17       	cp	r27, r26
    2f36:	62 07       	cpc	r22, r18
    2f38:	73 07       	cpc	r23, r19
    2f3a:	84 07       	cpc	r24, r20
    2f3c:	95 07       	cpc	r25, r21
    2f3e:	20 f0       	brcs	.+8      	; 0x2f48 <__addsf3x+0x1c>
    2f40:	79 f4       	brne	.+30     	; 0x2f60 <__addsf3x+0x34>
    2f42:	a6 f5       	brtc	.+104    	; 0x2fac <__addsf3x+0x80>
    2f44:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__fp_zero>
    2f48:	0e f4       	brtc	.+2      	; 0x2f4c <__addsf3x+0x20>
    2f4a:	e0 95       	com	r30
    2f4c:	0b 2e       	mov	r0, r27
    2f4e:	ba 2f       	mov	r27, r26
    2f50:	a0 2d       	mov	r26, r0
    2f52:	0b 01       	movw	r0, r22
    2f54:	b9 01       	movw	r22, r18
    2f56:	90 01       	movw	r18, r0
    2f58:	0c 01       	movw	r0, r24
    2f5a:	ca 01       	movw	r24, r20
    2f5c:	a0 01       	movw	r20, r0
    2f5e:	11 24       	eor	r1, r1
    2f60:	ff 27       	eor	r31, r31
    2f62:	59 1b       	sub	r21, r25
    2f64:	99 f0       	breq	.+38     	; 0x2f8c <__addsf3x+0x60>
    2f66:	59 3f       	cpi	r21, 0xF9	; 249
    2f68:	50 f4       	brcc	.+20     	; 0x2f7e <__addsf3x+0x52>
    2f6a:	50 3e       	cpi	r21, 0xE0	; 224
    2f6c:	68 f1       	brcs	.+90     	; 0x2fc8 <__addsf3x+0x9c>
    2f6e:	1a 16       	cp	r1, r26
    2f70:	f0 40       	sbci	r31, 0x00	; 0
    2f72:	a2 2f       	mov	r26, r18
    2f74:	23 2f       	mov	r18, r19
    2f76:	34 2f       	mov	r19, r20
    2f78:	44 27       	eor	r20, r20
    2f7a:	58 5f       	subi	r21, 0xF8	; 248
    2f7c:	f3 cf       	rjmp	.-26     	; 0x2f64 <__addsf3x+0x38>
    2f7e:	46 95       	lsr	r20
    2f80:	37 95       	ror	r19
    2f82:	27 95       	ror	r18
    2f84:	a7 95       	ror	r26
    2f86:	f0 40       	sbci	r31, 0x00	; 0
    2f88:	53 95       	inc	r21
    2f8a:	c9 f7       	brne	.-14     	; 0x2f7e <__addsf3x+0x52>
    2f8c:	7e f4       	brtc	.+30     	; 0x2fac <__addsf3x+0x80>
    2f8e:	1f 16       	cp	r1, r31
    2f90:	ba 0b       	sbc	r27, r26
    2f92:	62 0b       	sbc	r22, r18
    2f94:	73 0b       	sbc	r23, r19
    2f96:	84 0b       	sbc	r24, r20
    2f98:	ba f0       	brmi	.+46     	; 0x2fc8 <__addsf3x+0x9c>
    2f9a:	91 50       	subi	r25, 0x01	; 1
    2f9c:	a1 f0       	breq	.+40     	; 0x2fc6 <__addsf3x+0x9a>
    2f9e:	ff 0f       	add	r31, r31
    2fa0:	bb 1f       	adc	r27, r27
    2fa2:	66 1f       	adc	r22, r22
    2fa4:	77 1f       	adc	r23, r23
    2fa6:	88 1f       	adc	r24, r24
    2fa8:	c2 f7       	brpl	.-16     	; 0x2f9a <__addsf3x+0x6e>
    2faa:	0e c0       	rjmp	.+28     	; 0x2fc8 <__addsf3x+0x9c>
    2fac:	ba 0f       	add	r27, r26
    2fae:	62 1f       	adc	r22, r18
    2fb0:	73 1f       	adc	r23, r19
    2fb2:	84 1f       	adc	r24, r20
    2fb4:	48 f4       	brcc	.+18     	; 0x2fc8 <__addsf3x+0x9c>
    2fb6:	87 95       	ror	r24
    2fb8:	77 95       	ror	r23
    2fba:	67 95       	ror	r22
    2fbc:	b7 95       	ror	r27
    2fbe:	f7 95       	ror	r31
    2fc0:	9e 3f       	cpi	r25, 0xFE	; 254
    2fc2:	08 f0       	brcs	.+2      	; 0x2fc6 <__addsf3x+0x9a>
    2fc4:	b0 cf       	rjmp	.-160    	; 0x2f26 <__addsf3+0x28>
    2fc6:	93 95       	inc	r25
    2fc8:	88 0f       	add	r24, r24
    2fca:	08 f0       	brcs	.+2      	; 0x2fce <__addsf3x+0xa2>
    2fcc:	99 27       	eor	r25, r25
    2fce:	ee 0f       	add	r30, r30
    2fd0:	97 95       	ror	r25
    2fd2:	87 95       	ror	r24
    2fd4:	08 95       	ret

00002fd6 <__cmpsf2>:
    2fd6:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__fp_cmp>
    2fda:	08 f4       	brcc	.+2      	; 0x2fde <__cmpsf2+0x8>
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	08 95       	ret

00002fe0 <__divsf3>:
    2fe0:	0e 94 04 18 	call	0x3008	; 0x3008 <__divsf3x>
    2fe4:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__fp_round>
    2fe8:	0e 94 09 19 	call	0x3212	; 0x3212 <__fp_pscB>
    2fec:	58 f0       	brcs	.+22     	; 0x3004 <__divsf3+0x24>
    2fee:	0e 94 02 19 	call	0x3204	; 0x3204 <__fp_pscA>
    2ff2:	40 f0       	brcs	.+16     	; 0x3004 <__divsf3+0x24>
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <__divsf3+0x20>
    2ff6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ff8:	29 f0       	breq	.+10     	; 0x3004 <__divsf3+0x24>
    2ffa:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_inf>
    2ffe:	51 11       	cpse	r21, r1
    3000:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__fp_szero>
    3004:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_nan>

00003008 <__divsf3x>:
    3008:	0e 94 21 19 	call	0x3242	; 0x3242 <__fp_split3>
    300c:	68 f3       	brcs	.-38     	; 0x2fe8 <__divsf3+0x8>

0000300e <__divsf3_pse>:
    300e:	99 23       	and	r25, r25
    3010:	b1 f3       	breq	.-20     	; 0x2ffe <__divsf3+0x1e>
    3012:	55 23       	and	r21, r21
    3014:	91 f3       	breq	.-28     	; 0x2ffa <__divsf3+0x1a>
    3016:	95 1b       	sub	r25, r21
    3018:	55 0b       	sbc	r21, r21
    301a:	bb 27       	eor	r27, r27
    301c:	aa 27       	eor	r26, r26
    301e:	62 17       	cp	r22, r18
    3020:	73 07       	cpc	r23, r19
    3022:	84 07       	cpc	r24, r20
    3024:	38 f0       	brcs	.+14     	; 0x3034 <__divsf3_pse+0x26>
    3026:	9f 5f       	subi	r25, 0xFF	; 255
    3028:	5f 4f       	sbci	r21, 0xFF	; 255
    302a:	22 0f       	add	r18, r18
    302c:	33 1f       	adc	r19, r19
    302e:	44 1f       	adc	r20, r20
    3030:	aa 1f       	adc	r26, r26
    3032:	a9 f3       	breq	.-22     	; 0x301e <__divsf3_pse+0x10>
    3034:	35 d0       	rcall	.+106    	; 0x30a0 <__divsf3_pse+0x92>
    3036:	0e 2e       	mov	r0, r30
    3038:	3a f0       	brmi	.+14     	; 0x3048 <__divsf3_pse+0x3a>
    303a:	e0 e8       	ldi	r30, 0x80	; 128
    303c:	32 d0       	rcall	.+100    	; 0x30a2 <__divsf3_pse+0x94>
    303e:	91 50       	subi	r25, 0x01	; 1
    3040:	50 40       	sbci	r21, 0x00	; 0
    3042:	e6 95       	lsr	r30
    3044:	00 1c       	adc	r0, r0
    3046:	ca f7       	brpl	.-14     	; 0x303a <__divsf3_pse+0x2c>
    3048:	2b d0       	rcall	.+86     	; 0x30a0 <__divsf3_pse+0x92>
    304a:	fe 2f       	mov	r31, r30
    304c:	29 d0       	rcall	.+82     	; 0x30a0 <__divsf3_pse+0x92>
    304e:	66 0f       	add	r22, r22
    3050:	77 1f       	adc	r23, r23
    3052:	88 1f       	adc	r24, r24
    3054:	bb 1f       	adc	r27, r27
    3056:	26 17       	cp	r18, r22
    3058:	37 07       	cpc	r19, r23
    305a:	48 07       	cpc	r20, r24
    305c:	ab 07       	cpc	r26, r27
    305e:	b0 e8       	ldi	r27, 0x80	; 128
    3060:	09 f0       	breq	.+2      	; 0x3064 <__divsf3_pse+0x56>
    3062:	bb 0b       	sbc	r27, r27
    3064:	80 2d       	mov	r24, r0
    3066:	bf 01       	movw	r22, r30
    3068:	ff 27       	eor	r31, r31
    306a:	93 58       	subi	r25, 0x83	; 131
    306c:	5f 4f       	sbci	r21, 0xFF	; 255
    306e:	3a f0       	brmi	.+14     	; 0x307e <__divsf3_pse+0x70>
    3070:	9e 3f       	cpi	r25, 0xFE	; 254
    3072:	51 05       	cpc	r21, r1
    3074:	78 f0       	brcs	.+30     	; 0x3094 <__divsf3_pse+0x86>
    3076:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_inf>
    307a:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__fp_szero>
    307e:	5f 3f       	cpi	r21, 0xFF	; 255
    3080:	e4 f3       	brlt	.-8      	; 0x307a <__divsf3_pse+0x6c>
    3082:	98 3e       	cpi	r25, 0xE8	; 232
    3084:	d4 f3       	brlt	.-12     	; 0x307a <__divsf3_pse+0x6c>
    3086:	86 95       	lsr	r24
    3088:	77 95       	ror	r23
    308a:	67 95       	ror	r22
    308c:	b7 95       	ror	r27
    308e:	f7 95       	ror	r31
    3090:	9f 5f       	subi	r25, 0xFF	; 255
    3092:	c9 f7       	brne	.-14     	; 0x3086 <__divsf3_pse+0x78>
    3094:	88 0f       	add	r24, r24
    3096:	91 1d       	adc	r25, r1
    3098:	96 95       	lsr	r25
    309a:	87 95       	ror	r24
    309c:	97 f9       	bld	r25, 7
    309e:	08 95       	ret
    30a0:	e1 e0       	ldi	r30, 0x01	; 1
    30a2:	66 0f       	add	r22, r22
    30a4:	77 1f       	adc	r23, r23
    30a6:	88 1f       	adc	r24, r24
    30a8:	bb 1f       	adc	r27, r27
    30aa:	62 17       	cp	r22, r18
    30ac:	73 07       	cpc	r23, r19
    30ae:	84 07       	cpc	r24, r20
    30b0:	ba 07       	cpc	r27, r26
    30b2:	20 f0       	brcs	.+8      	; 0x30bc <__divsf3_pse+0xae>
    30b4:	62 1b       	sub	r22, r18
    30b6:	73 0b       	sbc	r23, r19
    30b8:	84 0b       	sbc	r24, r20
    30ba:	ba 0b       	sbc	r27, r26
    30bc:	ee 1f       	adc	r30, r30
    30be:	88 f7       	brcc	.-30     	; 0x30a2 <__divsf3_pse+0x94>
    30c0:	e0 95       	com	r30
    30c2:	08 95       	ret

000030c4 <__fixsfsi>:
    30c4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <__fixunssfsi>
    30c8:	68 94       	set
    30ca:	b1 11       	cpse	r27, r1
    30cc:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__fp_szero>
    30d0:	08 95       	ret

000030d2 <__fixunssfsi>:
    30d2:	0e 94 29 19 	call	0x3252	; 0x3252 <__fp_splitA>
    30d6:	88 f0       	brcs	.+34     	; 0x30fa <__fixunssfsi+0x28>
    30d8:	9f 57       	subi	r25, 0x7F	; 127
    30da:	98 f0       	brcs	.+38     	; 0x3102 <__fixunssfsi+0x30>
    30dc:	b9 2f       	mov	r27, r25
    30de:	99 27       	eor	r25, r25
    30e0:	b7 51       	subi	r27, 0x17	; 23
    30e2:	b0 f0       	brcs	.+44     	; 0x3110 <__fixunssfsi+0x3e>
    30e4:	e1 f0       	breq	.+56     	; 0x311e <__fixunssfsi+0x4c>
    30e6:	66 0f       	add	r22, r22
    30e8:	77 1f       	adc	r23, r23
    30ea:	88 1f       	adc	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	1a f0       	brmi	.+6      	; 0x30f6 <__fixunssfsi+0x24>
    30f0:	ba 95       	dec	r27
    30f2:	c9 f7       	brne	.-14     	; 0x30e6 <__fixunssfsi+0x14>
    30f4:	14 c0       	rjmp	.+40     	; 0x311e <__fixunssfsi+0x4c>
    30f6:	b1 30       	cpi	r27, 0x01	; 1
    30f8:	91 f0       	breq	.+36     	; 0x311e <__fixunssfsi+0x4c>
    30fa:	0e 94 43 19 	call	0x3286	; 0x3286 <__fp_zero>
    30fe:	b1 e0       	ldi	r27, 0x01	; 1
    3100:	08 95       	ret
    3102:	0c 94 43 19 	jmp	0x3286	; 0x3286 <__fp_zero>
    3106:	67 2f       	mov	r22, r23
    3108:	78 2f       	mov	r23, r24
    310a:	88 27       	eor	r24, r24
    310c:	b8 5f       	subi	r27, 0xF8	; 248
    310e:	39 f0       	breq	.+14     	; 0x311e <__fixunssfsi+0x4c>
    3110:	b9 3f       	cpi	r27, 0xF9	; 249
    3112:	cc f3       	brlt	.-14     	; 0x3106 <__fixunssfsi+0x34>
    3114:	86 95       	lsr	r24
    3116:	77 95       	ror	r23
    3118:	67 95       	ror	r22
    311a:	b3 95       	inc	r27
    311c:	d9 f7       	brne	.-10     	; 0x3114 <__fixunssfsi+0x42>
    311e:	3e f4       	brtc	.+14     	; 0x312e <__fixunssfsi+0x5c>
    3120:	90 95       	com	r25
    3122:	80 95       	com	r24
    3124:	70 95       	com	r23
    3126:	61 95       	neg	r22
    3128:	7f 4f       	sbci	r23, 0xFF	; 255
    312a:	8f 4f       	sbci	r24, 0xFF	; 255
    312c:	9f 4f       	sbci	r25, 0xFF	; 255
    312e:	08 95       	ret

00003130 <__floatunsisf>:
    3130:	e8 94       	clt
    3132:	09 c0       	rjmp	.+18     	; 0x3146 <__floatsisf+0x12>

00003134 <__floatsisf>:
    3134:	97 fb       	bst	r25, 7
    3136:	3e f4       	brtc	.+14     	; 0x3146 <__floatsisf+0x12>
    3138:	90 95       	com	r25
    313a:	80 95       	com	r24
    313c:	70 95       	com	r23
    313e:	61 95       	neg	r22
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
    3142:	8f 4f       	sbci	r24, 0xFF	; 255
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	99 23       	and	r25, r25
    3148:	a9 f0       	breq	.+42     	; 0x3174 <__floatsisf+0x40>
    314a:	f9 2f       	mov	r31, r25
    314c:	96 e9       	ldi	r25, 0x96	; 150
    314e:	bb 27       	eor	r27, r27
    3150:	93 95       	inc	r25
    3152:	f6 95       	lsr	r31
    3154:	87 95       	ror	r24
    3156:	77 95       	ror	r23
    3158:	67 95       	ror	r22
    315a:	b7 95       	ror	r27
    315c:	f1 11       	cpse	r31, r1
    315e:	f8 cf       	rjmp	.-16     	; 0x3150 <__floatsisf+0x1c>
    3160:	fa f4       	brpl	.+62     	; 0x31a0 <__floatsisf+0x6c>
    3162:	bb 0f       	add	r27, r27
    3164:	11 f4       	brne	.+4      	; 0x316a <__floatsisf+0x36>
    3166:	60 ff       	sbrs	r22, 0
    3168:	1b c0       	rjmp	.+54     	; 0x31a0 <__floatsisf+0x6c>
    316a:	6f 5f       	subi	r22, 0xFF	; 255
    316c:	7f 4f       	sbci	r23, 0xFF	; 255
    316e:	8f 4f       	sbci	r24, 0xFF	; 255
    3170:	9f 4f       	sbci	r25, 0xFF	; 255
    3172:	16 c0       	rjmp	.+44     	; 0x31a0 <__floatsisf+0x6c>
    3174:	88 23       	and	r24, r24
    3176:	11 f0       	breq	.+4      	; 0x317c <__floatsisf+0x48>
    3178:	96 e9       	ldi	r25, 0x96	; 150
    317a:	11 c0       	rjmp	.+34     	; 0x319e <__floatsisf+0x6a>
    317c:	77 23       	and	r23, r23
    317e:	21 f0       	breq	.+8      	; 0x3188 <__floatsisf+0x54>
    3180:	9e e8       	ldi	r25, 0x8E	; 142
    3182:	87 2f       	mov	r24, r23
    3184:	76 2f       	mov	r23, r22
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <__floatsisf+0x5e>
    3188:	66 23       	and	r22, r22
    318a:	71 f0       	breq	.+28     	; 0x31a8 <__floatsisf+0x74>
    318c:	96 e8       	ldi	r25, 0x86	; 134
    318e:	86 2f       	mov	r24, r22
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	60 e0       	ldi	r22, 0x00	; 0
    3194:	2a f0       	brmi	.+10     	; 0x31a0 <__floatsisf+0x6c>
    3196:	9a 95       	dec	r25
    3198:	66 0f       	add	r22, r22
    319a:	77 1f       	adc	r23, r23
    319c:	88 1f       	adc	r24, r24
    319e:	da f7       	brpl	.-10     	; 0x3196 <__floatsisf+0x62>
    31a0:	88 0f       	add	r24, r24
    31a2:	96 95       	lsr	r25
    31a4:	87 95       	ror	r24
    31a6:	97 f9       	bld	r25, 7
    31a8:	08 95       	ret

000031aa <__fp_cmp>:
    31aa:	99 0f       	add	r25, r25
    31ac:	00 08       	sbc	r0, r0
    31ae:	55 0f       	add	r21, r21
    31b0:	aa 0b       	sbc	r26, r26
    31b2:	e0 e8       	ldi	r30, 0x80	; 128
    31b4:	fe ef       	ldi	r31, 0xFE	; 254
    31b6:	16 16       	cp	r1, r22
    31b8:	17 06       	cpc	r1, r23
    31ba:	e8 07       	cpc	r30, r24
    31bc:	f9 07       	cpc	r31, r25
    31be:	c0 f0       	brcs	.+48     	; 0x31f0 <__fp_cmp+0x46>
    31c0:	12 16       	cp	r1, r18
    31c2:	13 06       	cpc	r1, r19
    31c4:	e4 07       	cpc	r30, r20
    31c6:	f5 07       	cpc	r31, r21
    31c8:	98 f0       	brcs	.+38     	; 0x31f0 <__fp_cmp+0x46>
    31ca:	62 1b       	sub	r22, r18
    31cc:	73 0b       	sbc	r23, r19
    31ce:	84 0b       	sbc	r24, r20
    31d0:	95 0b       	sbc	r25, r21
    31d2:	39 f4       	brne	.+14     	; 0x31e2 <__fp_cmp+0x38>
    31d4:	0a 26       	eor	r0, r26
    31d6:	61 f0       	breq	.+24     	; 0x31f0 <__fp_cmp+0x46>
    31d8:	23 2b       	or	r18, r19
    31da:	24 2b       	or	r18, r20
    31dc:	25 2b       	or	r18, r21
    31de:	21 f4       	brne	.+8      	; 0x31e8 <__fp_cmp+0x3e>
    31e0:	08 95       	ret
    31e2:	0a 26       	eor	r0, r26
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <__fp_cmp+0x3e>
    31e6:	a1 40       	sbci	r26, 0x01	; 1
    31e8:	a6 95       	lsr	r26
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	81 1d       	adc	r24, r1
    31ee:	81 1d       	adc	r24, r1
    31f0:	08 95       	ret

000031f2 <__fp_inf>:
    31f2:	97 f9       	bld	r25, 7
    31f4:	9f 67       	ori	r25, 0x7F	; 127
    31f6:	80 e8       	ldi	r24, 0x80	; 128
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	08 95       	ret

000031fe <__fp_nan>:
    31fe:	9f ef       	ldi	r25, 0xFF	; 255
    3200:	80 ec       	ldi	r24, 0xC0	; 192
    3202:	08 95       	ret

00003204 <__fp_pscA>:
    3204:	00 24       	eor	r0, r0
    3206:	0a 94       	dec	r0
    3208:	16 16       	cp	r1, r22
    320a:	17 06       	cpc	r1, r23
    320c:	18 06       	cpc	r1, r24
    320e:	09 06       	cpc	r0, r25
    3210:	08 95       	ret

00003212 <__fp_pscB>:
    3212:	00 24       	eor	r0, r0
    3214:	0a 94       	dec	r0
    3216:	12 16       	cp	r1, r18
    3218:	13 06       	cpc	r1, r19
    321a:	14 06       	cpc	r1, r20
    321c:	05 06       	cpc	r0, r21
    321e:	08 95       	ret

00003220 <__fp_round>:
    3220:	09 2e       	mov	r0, r25
    3222:	03 94       	inc	r0
    3224:	00 0c       	add	r0, r0
    3226:	11 f4       	brne	.+4      	; 0x322c <__fp_round+0xc>
    3228:	88 23       	and	r24, r24
    322a:	52 f0       	brmi	.+20     	; 0x3240 <__fp_round+0x20>
    322c:	bb 0f       	add	r27, r27
    322e:	40 f4       	brcc	.+16     	; 0x3240 <__fp_round+0x20>
    3230:	bf 2b       	or	r27, r31
    3232:	11 f4       	brne	.+4      	; 0x3238 <__fp_round+0x18>
    3234:	60 ff       	sbrs	r22, 0
    3236:	04 c0       	rjmp	.+8      	; 0x3240 <__fp_round+0x20>
    3238:	6f 5f       	subi	r22, 0xFF	; 255
    323a:	7f 4f       	sbci	r23, 0xFF	; 255
    323c:	8f 4f       	sbci	r24, 0xFF	; 255
    323e:	9f 4f       	sbci	r25, 0xFF	; 255
    3240:	08 95       	ret

00003242 <__fp_split3>:
    3242:	57 fd       	sbrc	r21, 7
    3244:	90 58       	subi	r25, 0x80	; 128
    3246:	44 0f       	add	r20, r20
    3248:	55 1f       	adc	r21, r21
    324a:	59 f0       	breq	.+22     	; 0x3262 <__fp_splitA+0x10>
    324c:	5f 3f       	cpi	r21, 0xFF	; 255
    324e:	71 f0       	breq	.+28     	; 0x326c <__fp_splitA+0x1a>
    3250:	47 95       	ror	r20

00003252 <__fp_splitA>:
    3252:	88 0f       	add	r24, r24
    3254:	97 fb       	bst	r25, 7
    3256:	99 1f       	adc	r25, r25
    3258:	61 f0       	breq	.+24     	; 0x3272 <__fp_splitA+0x20>
    325a:	9f 3f       	cpi	r25, 0xFF	; 255
    325c:	79 f0       	breq	.+30     	; 0x327c <__fp_splitA+0x2a>
    325e:	87 95       	ror	r24
    3260:	08 95       	ret
    3262:	12 16       	cp	r1, r18
    3264:	13 06       	cpc	r1, r19
    3266:	14 06       	cpc	r1, r20
    3268:	55 1f       	adc	r21, r21
    326a:	f2 cf       	rjmp	.-28     	; 0x3250 <__fp_split3+0xe>
    326c:	46 95       	lsr	r20
    326e:	f1 df       	rcall	.-30     	; 0x3252 <__fp_splitA>
    3270:	08 c0       	rjmp	.+16     	; 0x3282 <__fp_splitA+0x30>
    3272:	16 16       	cp	r1, r22
    3274:	17 06       	cpc	r1, r23
    3276:	18 06       	cpc	r1, r24
    3278:	99 1f       	adc	r25, r25
    327a:	f1 cf       	rjmp	.-30     	; 0x325e <__fp_splitA+0xc>
    327c:	86 95       	lsr	r24
    327e:	71 05       	cpc	r23, r1
    3280:	61 05       	cpc	r22, r1
    3282:	08 94       	sec
    3284:	08 95       	ret

00003286 <__fp_zero>:
    3286:	e8 94       	clt

00003288 <__fp_szero>:
    3288:	bb 27       	eor	r27, r27
    328a:	66 27       	eor	r22, r22
    328c:	77 27       	eor	r23, r23
    328e:	cb 01       	movw	r24, r22
    3290:	97 f9       	bld	r25, 7
    3292:	08 95       	ret

00003294 <__gesf2>:
    3294:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__fp_cmp>
    3298:	08 f4       	brcc	.+2      	; 0x329c <__gesf2+0x8>
    329a:	8f ef       	ldi	r24, 0xFF	; 255
    329c:	08 95       	ret
    329e:	16 f0       	brts	.+4      	; 0x32a4 <__gesf2+0x10>
    32a0:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__fp_mpack>
    32a4:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_nan>
    32a8:	68 94       	set
    32aa:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_inf>

000032ae <log>:
    32ae:	0e 94 29 19 	call	0x3252	; 0x3252 <__fp_splitA>
    32b2:	a8 f3       	brcs	.-22     	; 0x329e <__gesf2+0xa>
    32b4:	99 23       	and	r25, r25
    32b6:	c1 f3       	breq	.-16     	; 0x32a8 <__gesf2+0x14>
    32b8:	ae f3       	brts	.-22     	; 0x32a4 <__gesf2+0x10>
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	1f 93       	push	r17
    32c0:	0f 93       	push	r16
    32c2:	ff 92       	push	r15
    32c4:	c9 2f       	mov	r28, r25
    32c6:	dd 27       	eor	r29, r29
    32c8:	88 23       	and	r24, r24
    32ca:	2a f0       	brmi	.+10     	; 0x32d6 <log+0x28>
    32cc:	21 97       	sbiw	r28, 0x01	; 1
    32ce:	66 0f       	add	r22, r22
    32d0:	77 1f       	adc	r23, r23
    32d2:	88 1f       	adc	r24, r24
    32d4:	da f7       	brpl	.-10     	; 0x32cc <log+0x1e>
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e8       	ldi	r20, 0x80	; 128
    32dc:	5f eb       	ldi	r21, 0xBF	; 191
    32de:	9f e3       	ldi	r25, 0x3F	; 63
    32e0:	88 39       	cpi	r24, 0x98	; 152
    32e2:	20 f0       	brcs	.+8      	; 0x32ec <log+0x3e>
    32e4:	80 3e       	cpi	r24, 0xE0	; 224
    32e6:	38 f0       	brcs	.+14     	; 0x32f6 <log+0x48>
    32e8:	21 96       	adiw	r28, 0x01	; 1
    32ea:	8f 77       	andi	r24, 0x7F	; 127
    32ec:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__addsf3>
    32f0:	e8 e6       	ldi	r30, 0x68	; 104
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	04 c0       	rjmp	.+8      	; 0x32fe <log+0x50>
    32f6:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__addsf3>
    32fa:	e5 e9       	ldi	r30, 0x95	; 149
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__fp_powser>
    3302:	8b 01       	movw	r16, r22
    3304:	be 01       	movw	r22, r28
    3306:	ec 01       	movw	r28, r24
    3308:	fb 2e       	mov	r15, r27
    330a:	6f 57       	subi	r22, 0x7F	; 127
    330c:	71 09       	sbc	r23, r1
    330e:	75 95       	asr	r23
    3310:	77 1f       	adc	r23, r23
    3312:	88 0b       	sbc	r24, r24
    3314:	99 0b       	sbc	r25, r25
    3316:	0e 94 9a 18 	call	0x3134	; 0x3134 <__floatsisf>
    331a:	28 e1       	ldi	r18, 0x18	; 24
    331c:	32 e7       	ldi	r19, 0x72	; 114
    331e:	41 e3       	ldi	r20, 0x31	; 49
    3320:	5f e3       	ldi	r21, 0x3F	; 63
    3322:	0e 94 b2 19 	call	0x3364	; 0x3364 <__mulsf3x>
    3326:	af 2d       	mov	r26, r15
    3328:	98 01       	movw	r18, r16
    332a:	ae 01       	movw	r20, r28
    332c:	ff 90       	pop	r15
    332e:	0f 91       	pop	r16
    3330:	1f 91       	pop	r17
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__addsf3x>
    333a:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__fp_round>

0000333e <__mulsf3>:
    333e:	0e 94 b2 19 	call	0x3364	; 0x3364 <__mulsf3x>
    3342:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__fp_round>
    3346:	0e 94 02 19 	call	0x3204	; 0x3204 <__fp_pscA>
    334a:	38 f0       	brcs	.+14     	; 0x335a <__mulsf3+0x1c>
    334c:	0e 94 09 19 	call	0x3212	; 0x3212 <__fp_pscB>
    3350:	20 f0       	brcs	.+8      	; 0x335a <__mulsf3+0x1c>
    3352:	95 23       	and	r25, r21
    3354:	11 f0       	breq	.+4      	; 0x335a <__mulsf3+0x1c>
    3356:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_inf>
    335a:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__fp_nan>
    335e:	11 24       	eor	r1, r1
    3360:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__fp_szero>

00003364 <__mulsf3x>:
    3364:	0e 94 21 19 	call	0x3242	; 0x3242 <__fp_split3>
    3368:	70 f3       	brcs	.-36     	; 0x3346 <__mulsf3+0x8>

0000336a <__mulsf3_pse>:
    336a:	95 9f       	mul	r25, r21
    336c:	c1 f3       	breq	.-16     	; 0x335e <__mulsf3+0x20>
    336e:	95 0f       	add	r25, r21
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	55 1f       	adc	r21, r21
    3374:	62 9f       	mul	r22, r18
    3376:	f0 01       	movw	r30, r0
    3378:	72 9f       	mul	r23, r18
    337a:	bb 27       	eor	r27, r27
    337c:	f0 0d       	add	r31, r0
    337e:	b1 1d       	adc	r27, r1
    3380:	63 9f       	mul	r22, r19
    3382:	aa 27       	eor	r26, r26
    3384:	f0 0d       	add	r31, r0
    3386:	b1 1d       	adc	r27, r1
    3388:	aa 1f       	adc	r26, r26
    338a:	64 9f       	mul	r22, r20
    338c:	66 27       	eor	r22, r22
    338e:	b0 0d       	add	r27, r0
    3390:	a1 1d       	adc	r26, r1
    3392:	66 1f       	adc	r22, r22
    3394:	82 9f       	mul	r24, r18
    3396:	22 27       	eor	r18, r18
    3398:	b0 0d       	add	r27, r0
    339a:	a1 1d       	adc	r26, r1
    339c:	62 1f       	adc	r22, r18
    339e:	73 9f       	mul	r23, r19
    33a0:	b0 0d       	add	r27, r0
    33a2:	a1 1d       	adc	r26, r1
    33a4:	62 1f       	adc	r22, r18
    33a6:	83 9f       	mul	r24, r19
    33a8:	a0 0d       	add	r26, r0
    33aa:	61 1d       	adc	r22, r1
    33ac:	22 1f       	adc	r18, r18
    33ae:	74 9f       	mul	r23, r20
    33b0:	33 27       	eor	r19, r19
    33b2:	a0 0d       	add	r26, r0
    33b4:	61 1d       	adc	r22, r1
    33b6:	23 1f       	adc	r18, r19
    33b8:	84 9f       	mul	r24, r20
    33ba:	60 0d       	add	r22, r0
    33bc:	21 1d       	adc	r18, r1
    33be:	82 2f       	mov	r24, r18
    33c0:	76 2f       	mov	r23, r22
    33c2:	6a 2f       	mov	r22, r26
    33c4:	11 24       	eor	r1, r1
    33c6:	9f 57       	subi	r25, 0x7F	; 127
    33c8:	50 40       	sbci	r21, 0x00	; 0
    33ca:	9a f0       	brmi	.+38     	; 0x33f2 <__mulsf3_pse+0x88>
    33cc:	f1 f0       	breq	.+60     	; 0x340a <__mulsf3_pse+0xa0>
    33ce:	88 23       	and	r24, r24
    33d0:	4a f0       	brmi	.+18     	; 0x33e4 <__mulsf3_pse+0x7a>
    33d2:	ee 0f       	add	r30, r30
    33d4:	ff 1f       	adc	r31, r31
    33d6:	bb 1f       	adc	r27, r27
    33d8:	66 1f       	adc	r22, r22
    33da:	77 1f       	adc	r23, r23
    33dc:	88 1f       	adc	r24, r24
    33de:	91 50       	subi	r25, 0x01	; 1
    33e0:	50 40       	sbci	r21, 0x00	; 0
    33e2:	a9 f7       	brne	.-22     	; 0x33ce <__mulsf3_pse+0x64>
    33e4:	9e 3f       	cpi	r25, 0xFE	; 254
    33e6:	51 05       	cpc	r21, r1
    33e8:	80 f0       	brcs	.+32     	; 0x340a <__mulsf3_pse+0xa0>
    33ea:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__fp_inf>
    33ee:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__fp_szero>
    33f2:	5f 3f       	cpi	r21, 0xFF	; 255
    33f4:	e4 f3       	brlt	.-8      	; 0x33ee <__mulsf3_pse+0x84>
    33f6:	98 3e       	cpi	r25, 0xE8	; 232
    33f8:	d4 f3       	brlt	.-12     	; 0x33ee <__mulsf3_pse+0x84>
    33fa:	86 95       	lsr	r24
    33fc:	77 95       	ror	r23
    33fe:	67 95       	ror	r22
    3400:	b7 95       	ror	r27
    3402:	f7 95       	ror	r31
    3404:	e7 95       	ror	r30
    3406:	9f 5f       	subi	r25, 0xFF	; 255
    3408:	c1 f7       	brne	.-16     	; 0x33fa <__mulsf3_pse+0x90>
    340a:	fe 2b       	or	r31, r30
    340c:	88 0f       	add	r24, r24
    340e:	91 1d       	adc	r25, r1
    3410:	96 95       	lsr	r25
    3412:	87 95       	ror	r24
    3414:	97 f9       	bld	r25, 7
    3416:	08 95       	ret

00003418 <__fp_mpack>:
    3418:	9f 3f       	cpi	r25, 0xFF	; 255
    341a:	31 f0       	breq	.+12     	; 0x3428 <__fp_mpack_finite+0xc>

0000341c <__fp_mpack_finite>:
    341c:	91 50       	subi	r25, 0x01	; 1
    341e:	20 f4       	brcc	.+8      	; 0x3428 <__fp_mpack_finite+0xc>
    3420:	87 95       	ror	r24
    3422:	77 95       	ror	r23
    3424:	67 95       	ror	r22
    3426:	b7 95       	ror	r27
    3428:	88 0f       	add	r24, r24
    342a:	91 1d       	adc	r25, r1
    342c:	96 95       	lsr	r25
    342e:	87 95       	ror	r24
    3430:	97 f9       	bld	r25, 7
    3432:	08 95       	ret

00003434 <__fp_powser>:
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	1f 93       	push	r17
    343a:	0f 93       	push	r16
    343c:	ff 92       	push	r15
    343e:	ef 92       	push	r14
    3440:	df 92       	push	r13
    3442:	7b 01       	movw	r14, r22
    3444:	8c 01       	movw	r16, r24
    3446:	68 94       	set
    3448:	06 c0       	rjmp	.+12     	; 0x3456 <__fp_powser+0x22>
    344a:	da 2e       	mov	r13, r26
    344c:	ef 01       	movw	r28, r30
    344e:	0e 94 b2 19 	call	0x3364	; 0x3364 <__mulsf3x>
    3452:	fe 01       	movw	r30, r28
    3454:	e8 94       	clt
    3456:	a5 91       	lpm	r26, Z+
    3458:	25 91       	lpm	r18, Z+
    345a:	35 91       	lpm	r19, Z+
    345c:	45 91       	lpm	r20, Z+
    345e:	55 91       	lpm	r21, Z+
    3460:	a6 f3       	brts	.-24     	; 0x344a <__fp_powser+0x16>
    3462:	ef 01       	movw	r28, r30
    3464:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__addsf3x>
    3468:	fe 01       	movw	r30, r28
    346a:	97 01       	movw	r18, r14
    346c:	a8 01       	movw	r20, r16
    346e:	da 94       	dec	r13
    3470:	69 f7       	brne	.-38     	; 0x344c <__fp_powser+0x18>
    3472:	df 90       	pop	r13
    3474:	ef 90       	pop	r14
    3476:	ff 90       	pop	r15
    3478:	0f 91       	pop	r16
    347a:	1f 91       	pop	r17
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	08 95       	ret

00003482 <__mulsi3>:
    3482:	db 01       	movw	r26, r22
    3484:	8f 93       	push	r24
    3486:	9f 93       	push	r25
    3488:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__muluhisi3>
    348c:	bf 91       	pop	r27
    348e:	af 91       	pop	r26
    3490:	a2 9f       	mul	r26, r18
    3492:	80 0d       	add	r24, r0
    3494:	91 1d       	adc	r25, r1
    3496:	a3 9f       	mul	r26, r19
    3498:	90 0d       	add	r25, r0
    349a:	b2 9f       	mul	r27, r18
    349c:	90 0d       	add	r25, r0
    349e:	11 24       	eor	r1, r1
    34a0:	08 95       	ret

000034a2 <__udivmodhi4>:
    34a2:	aa 1b       	sub	r26, r26
    34a4:	bb 1b       	sub	r27, r27
    34a6:	51 e1       	ldi	r21, 0x11	; 17
    34a8:	07 c0       	rjmp	.+14     	; 0x34b8 <__udivmodhi4_ep>

000034aa <__udivmodhi4_loop>:
    34aa:	aa 1f       	adc	r26, r26
    34ac:	bb 1f       	adc	r27, r27
    34ae:	a6 17       	cp	r26, r22
    34b0:	b7 07       	cpc	r27, r23
    34b2:	10 f0       	brcs	.+4      	; 0x34b8 <__udivmodhi4_ep>
    34b4:	a6 1b       	sub	r26, r22
    34b6:	b7 0b       	sbc	r27, r23

000034b8 <__udivmodhi4_ep>:
    34b8:	88 1f       	adc	r24, r24
    34ba:	99 1f       	adc	r25, r25
    34bc:	5a 95       	dec	r21
    34be:	a9 f7       	brne	.-22     	; 0x34aa <__udivmodhi4_loop>
    34c0:	80 95       	com	r24
    34c2:	90 95       	com	r25
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	08 95       	ret

000034ca <__divmodhi4>:
    34ca:	97 fb       	bst	r25, 7
    34cc:	07 2e       	mov	r0, r23
    34ce:	16 f4       	brtc	.+4      	; 0x34d4 <__divmodhi4+0xa>
    34d0:	00 94       	com	r0
    34d2:	07 d0       	rcall	.+14     	; 0x34e2 <__divmodhi4_neg1>
    34d4:	77 fd       	sbrc	r23, 7
    34d6:	09 d0       	rcall	.+18     	; 0x34ea <__divmodhi4_neg2>
    34d8:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__udivmodhi4>
    34dc:	07 fc       	sbrc	r0, 7
    34de:	05 d0       	rcall	.+10     	; 0x34ea <__divmodhi4_neg2>
    34e0:	3e f4       	brtc	.+14     	; 0x34f0 <__divmodhi4_exit>

000034e2 <__divmodhi4_neg1>:
    34e2:	90 95       	com	r25
    34e4:	81 95       	neg	r24
    34e6:	9f 4f       	sbci	r25, 0xFF	; 255
    34e8:	08 95       	ret

000034ea <__divmodhi4_neg2>:
    34ea:	70 95       	com	r23
    34ec:	61 95       	neg	r22
    34ee:	7f 4f       	sbci	r23, 0xFF	; 255

000034f0 <__divmodhi4_exit>:
    34f0:	08 95       	ret

000034f2 <__udivmodsi4>:
    34f2:	a1 e2       	ldi	r26, 0x21	; 33
    34f4:	1a 2e       	mov	r1, r26
    34f6:	aa 1b       	sub	r26, r26
    34f8:	bb 1b       	sub	r27, r27
    34fa:	fd 01       	movw	r30, r26
    34fc:	0d c0       	rjmp	.+26     	; 0x3518 <__udivmodsi4_ep>

000034fe <__udivmodsi4_loop>:
    34fe:	aa 1f       	adc	r26, r26
    3500:	bb 1f       	adc	r27, r27
    3502:	ee 1f       	adc	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	a2 17       	cp	r26, r18
    3508:	b3 07       	cpc	r27, r19
    350a:	e4 07       	cpc	r30, r20
    350c:	f5 07       	cpc	r31, r21
    350e:	20 f0       	brcs	.+8      	; 0x3518 <__udivmodsi4_ep>
    3510:	a2 1b       	sub	r26, r18
    3512:	b3 0b       	sbc	r27, r19
    3514:	e4 0b       	sbc	r30, r20
    3516:	f5 0b       	sbc	r31, r21

00003518 <__udivmodsi4_ep>:
    3518:	66 1f       	adc	r22, r22
    351a:	77 1f       	adc	r23, r23
    351c:	88 1f       	adc	r24, r24
    351e:	99 1f       	adc	r25, r25
    3520:	1a 94       	dec	r1
    3522:	69 f7       	brne	.-38     	; 0x34fe <__udivmodsi4_loop>
    3524:	60 95       	com	r22
    3526:	70 95       	com	r23
    3528:	80 95       	com	r24
    352a:	90 95       	com	r25
    352c:	9b 01       	movw	r18, r22
    352e:	ac 01       	movw	r20, r24
    3530:	bd 01       	movw	r22, r26
    3532:	cf 01       	movw	r24, r30
    3534:	08 95       	ret

00003536 <__umulhisi3>:
    3536:	a2 9f       	mul	r26, r18
    3538:	b0 01       	movw	r22, r0
    353a:	b3 9f       	mul	r27, r19
    353c:	c0 01       	movw	r24, r0
    353e:	a3 9f       	mul	r26, r19
    3540:	70 0d       	add	r23, r0
    3542:	81 1d       	adc	r24, r1
    3544:	11 24       	eor	r1, r1
    3546:	91 1d       	adc	r25, r1
    3548:	b2 9f       	mul	r27, r18
    354a:	70 0d       	add	r23, r0
    354c:	81 1d       	adc	r24, r1
    354e:	11 24       	eor	r1, r1
    3550:	91 1d       	adc	r25, r1
    3552:	08 95       	ret

00003554 <__muluhisi3>:
    3554:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__umulhisi3>
    3558:	a5 9f       	mul	r26, r21
    355a:	90 0d       	add	r25, r0
    355c:	b4 9f       	mul	r27, r20
    355e:	90 0d       	add	r25, r0
    3560:	a4 9f       	mul	r26, r20
    3562:	80 0d       	add	r24, r0
    3564:	91 1d       	adc	r25, r1
    3566:	11 24       	eor	r1, r1
    3568:	08 95       	ret

0000356a <eeprom_read_block>:
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22

0000356e <eeprom_read_blraw>:
    356e:	fc 01       	movw	r30, r24
    3570:	f9 99       	sbic	0x1f, 1	; 31
    3572:	fe cf       	rjmp	.-4      	; 0x3570 <eeprom_read_blraw+0x2>
    3574:	06 c0       	rjmp	.+12     	; 0x3582 <eeprom_read_blraw+0x14>
    3576:	f2 bd       	out	0x22, r31	; 34
    3578:	e1 bd       	out	0x21, r30	; 33
    357a:	f8 9a       	sbi	0x1f, 0	; 31
    357c:	31 96       	adiw	r30, 0x01	; 1
    357e:	00 b4       	in	r0, 0x20	; 32
    3580:	0d 92       	st	X+, r0
    3582:	41 50       	subi	r20, 0x01	; 1
    3584:	50 40       	sbci	r21, 0x00	; 0
    3586:	b8 f7       	brcc	.-18     	; 0x3576 <eeprom_read_blraw+0x8>
    3588:	08 95       	ret

0000358a <eeprom_read_byte>:
    358a:	f9 99       	sbic	0x1f, 1	; 31
    358c:	fe cf       	rjmp	.-4      	; 0x358a <eeprom_read_byte>
    358e:	92 bd       	out	0x22, r25	; 34
    3590:	81 bd       	out	0x21, r24	; 33
    3592:	f8 9a       	sbi	0x1f, 0	; 31
    3594:	99 27       	eor	r25, r25
    3596:	80 b5       	in	r24, 0x20	; 32
    3598:	08 95       	ret

0000359a <eeprom_update_block>:
    359a:	dc 01       	movw	r26, r24
    359c:	a4 0f       	add	r26, r20
    359e:	b5 1f       	adc	r27, r21
    35a0:	41 50       	subi	r20, 0x01	; 1
    35a2:	50 40       	sbci	r21, 0x00	; 0
    35a4:	48 f0       	brcs	.+18     	; 0x35b8 <eeprom_update_block+0x1e>
    35a6:	cb 01       	movw	r24, r22
    35a8:	84 0f       	add	r24, r20
    35aa:	95 1f       	adc	r25, r21
    35ac:	2e 91       	ld	r18, -X
    35ae:	0e 94 de 1a 	call	0x35bc	; 0x35bc <eeprom_update_r18>
    35b2:	41 50       	subi	r20, 0x01	; 1
    35b4:	50 40       	sbci	r21, 0x00	; 0
    35b6:	d0 f7       	brcc	.-12     	; 0x35ac <eeprom_update_block+0x12>
    35b8:	08 95       	ret

000035ba <eeprom_update_byte>:
    35ba:	26 2f       	mov	r18, r22

000035bc <eeprom_update_r18>:
    35bc:	f9 99       	sbic	0x1f, 1	; 31
    35be:	fe cf       	rjmp	.-4      	; 0x35bc <eeprom_update_r18>
    35c0:	92 bd       	out	0x22, r25	; 34
    35c2:	81 bd       	out	0x21, r24	; 33
    35c4:	f8 9a       	sbi	0x1f, 0	; 31
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	00 b4       	in	r0, 0x20	; 32
    35ca:	02 16       	cp	r0, r18
    35cc:	39 f0       	breq	.+14     	; 0x35dc <eeprom_update_r18+0x20>
    35ce:	1f ba       	out	0x1f, r1	; 31
    35d0:	20 bd       	out	0x20, r18	; 32
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	fa 9a       	sbi	0x1f, 2	; 31
    35d8:	f9 9a       	sbi	0x1f, 1	; 31
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	08 95       	ret

000035de <_exit>:
    35de:	f8 94       	cli

000035e0 <__stop_program>:
    35e0:	ff cf       	rjmp	.-2      	; 0x35e0 <__stop_program>
