
koky_engine_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  00003548  000035fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003548  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002c4  008002c4  000037c0  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000037c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000037c3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037f4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001f0  00000000  00000000  00003838  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001964  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bfc  00000000  00000000  0000538c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d2d  00000000  00000000  00005f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000570  00000000  00000000  00007cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008fa  00000000  00000000  00008228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000afe  00000000  00000000  00008b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00009620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
       4:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_1>
       8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_2>
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_11>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_16>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__fuse+0xff7dfbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__fuse+0xff7dfa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <TUI+0x2a8>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__ctors_end>:
      c2:	11 24       	eor	r1, r1
      c4:	1f be       	out	0x3f, r1	; 63
      c6:	cf ef       	ldi	r28, 0xFF	; 255
      c8:	d8 e0       	ldi	r29, 0x08	; 8
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
      ce:	12 e0       	ldi	r17, 0x02	; 2
      d0:	a0 e0       	ldi	r26, 0x00	; 0
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	e8 e4       	ldi	r30, 0x48	; 72
      d6:	f5 e3       	ldi	r31, 0x35	; 53
      d8:	02 c0       	rjmp	.+4      	; 0xde <__do_copy_data+0x10>
      da:	05 90       	lpm	r0, Z+
      dc:	0d 92       	st	X+, r0
      de:	a4 3c       	cpi	r26, 0xC4	; 196
      e0:	b1 07       	cpc	r27, r17
      e2:	d9 f7       	brne	.-10     	; 0xda <__do_copy_data+0xc>

000000e4 <__do_clear_bss>:
      e4:	22 e0       	ldi	r18, 0x02	; 2
      e6:	a4 ec       	ldi	r26, 0xC4	; 196
      e8:	b2 e0       	ldi	r27, 0x02	; 2
      ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
      ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
      ee:	aa 3d       	cpi	r26, 0xDA	; 218
      f0:	b2 07       	cpc	r27, r18
      f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
      f4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
      f8:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <__vector_1>:
#define ENC_B_PORT	PORTD
// ============================================================================


ISR(INT0_vect)
{
     100:	1f 92       	push	r1
     102:	0f 92       	push	r0
     104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     108:	0f 92       	push	r0
     10a:	11 24       	eor	r1, r1
     10c:	2f 93       	push	r18
     10e:	3f 93       	push	r19
     110:	4f 93       	push	r20
     112:	5f 93       	push	r21
     114:	6f 93       	push	r22
     116:	7f 93       	push	r23
     118:	8f 93       	push	r24
     11a:	9f 93       	push	r25
     11c:	af 93       	push	r26
     11e:	bf 93       	push	r27
     120:	ef 93       	push	r30
     122:	ff 93       	push	r31
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
	TUI_back_timer_clear();
     12c:	0e 94 30 02 	call	0x460	; 0x460 <TUI_back_timer_clear>
	TUI('b');
     130:	82 e6       	ldi	r24, 0x62	; 98
     132:	0e 94 0a 03 	call	0x614	; 0x614 <TUI>
}
     136:	00 00       	nop
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	ff 91       	pop	r31
     13e:	ef 91       	pop	r30
     140:	bf 91       	pop	r27
     142:	af 91       	pop	r26
     144:	9f 91       	pop	r25
     146:	8f 91       	pop	r24
     148:	7f 91       	pop	r23
     14a:	6f 91       	pop	r22
     14c:	5f 91       	pop	r21
     14e:	4f 91       	pop	r20
     150:	3f 91       	pop	r19
     152:	2f 91       	pop	r18
     154:	0f 90       	pop	r0
     156:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <__vector_2>:

ISR(INT1_vect)
{
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     168:	0f 92       	push	r0
     16a:	11 24       	eor	r1, r1
     16c:	2f 93       	push	r18
     16e:	3f 93       	push	r19
     170:	4f 93       	push	r20
     172:	5f 93       	push	r21
     174:	6f 93       	push	r22
     176:	7f 93       	push	r23
     178:	8f 93       	push	r24
     17a:	9f 93       	push	r25
     17c:	af 93       	push	r26
     17e:	bf 93       	push	r27
     180:	ef 93       	push	r30
     182:	ff 93       	push	r31
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
	static uint8_t step = 0;
	static uint8_t dir = 0;

	TUI_back_timer_clear();
     18c:	0e 94 30 02 	call	0x460	; 0x460 <TUI_back_timer_clear>
	if (ENC_A_PIN & ENC_A)
     190:	89 e2       	ldi	r24, 0x29	; 41
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	80 81       	ld	r24, Z
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 71       	andi	r24, 0x10	; 16
     19e:	99 27       	eor	r25, r25
     1a0:	89 2b       	or	r24, r25
     1a2:	b1 f0       	breq	.+44     	; 0x1d0 <__vector_2+0x70>
	{
		
		if (!dir)
     1a4:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1a8:	88 23       	and	r24, r24
     1aa:	69 f4       	brne	.+26     	; 0x1c6 <__vector_2+0x66>
		{
			step++;
     1ac:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1b0:	8f 5f       	subi	r24, 0xFF	; 255
     1b2:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <step.1884>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1b6:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	f8 f0       	brcs	.+62     	; 0x1fc <__vector_2+0x9c>
				TUI('-');
     1be:	8d e2       	ldi	r24, 0x2D	; 45
     1c0:	0e 94 0a 03 	call	0x614	; 0x614 <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1c4:	1b c0       	rjmp	.+54     	; 0x1fc <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('-');
		}
		else
		{
			dir = 0;
     1c6:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
			step = 0;
     1ca:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <step.1884>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1ce:	16 c0       	rjmp	.+44     	; 0x1fc <__vector_2+0x9c>
			step = 0;
		}
	}
	else
	{
		if (dir)
     1d0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1d4:	88 23       	and	r24, r24
     1d6:	69 f0       	breq	.+26     	; 0x1f2 <__vector_2+0x92>
		{
			step++;
     1d8:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1dc:	8f 5f       	subi	r24, 0xFF	; 255
     1de:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <step.1884>
			if (step >= ENCODER_TICK_FOR_UPDATE)
     1e2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <step.1884>
     1e6:	85 30       	cpi	r24, 0x05	; 5
     1e8:	48 f0       	brcs	.+18     	; 0x1fc <__vector_2+0x9c>
				TUI('+');
     1ea:	8b e2       	ldi	r24, 0x2B	; 43
     1ec:	0e 94 0a 03 	call	0x614	; 0x614 <TUI>
		{
			dir = 1;
			step = 0;
		}
	}
}
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <__vector_2+0x9c>
			if (step >= ENCODER_TICK_FOR_UPDATE)
				TUI('+');
		}
		else
		{
			dir = 1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
			step = 0;
     1f8:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <step.1884>
		}
	}
}
     1fc:	00 00       	nop
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	ff 91       	pop	r31
     204:	ef 91       	pop	r30
     206:	bf 91       	pop	r27
     208:	af 91       	pop	r26
     20a:	9f 91       	pop	r25
     20c:	8f 91       	pop	r24
     20e:	7f 91       	pop	r23
     210:	6f 91       	pop	r22
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	3f 91       	pop	r19
     218:	2f 91       	pop	r18
     21a:	0f 90       	pop	r0
     21c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <encoder_init>:

// encoder initialization
void encoder_init(void)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
	// set button
	BTN_PORT |= BTN;		// pull-up
     22e:	8b e2       	ldi	r24, 0x2B	; 43
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	2b e2       	ldi	r18, 0x2B	; 43
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	f9 01       	movw	r30, r18
     238:	20 81       	ld	r18, Z
     23a:	24 60       	ori	r18, 0x04	; 4
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
	EICRA = (1<<ISC01);		// falling edge
     240:	89 e6       	ldi	r24, 0x69	; 105
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	22 e0       	ldi	r18, 0x02	; 2
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
	EIMSK = (1<<INT0);		// int enable from INT0
     24a:	8d e3       	ldi	r24, 0x3D	; 61
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	fc 01       	movw	r30, r24
     252:	20 83       	st	Z, r18

	// set encoder	
	ENC_A_PORT |= ENC_A;	// pull-up
     254:	8b e2       	ldi	r24, 0x2B	; 43
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	2b e2       	ldi	r18, 0x2B	; 43
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	20 81       	ld	r18, Z
     260:	20 61       	ori	r18, 0x10	; 16
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
	ENC_B_PORT |= ENC_B;	// pull-up
     266:	8b e2       	ldi	r24, 0x2B	; 43
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	2b e2       	ldi	r18, 0x2B	; 43
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	f9 01       	movw	r30, r18
     270:	20 81       	ld	r18, Z
     272:	28 60       	ori	r18, 0x08	; 8
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18

	EICRA |= (1<<ISC11);	// falling edge
     278:	89 e6       	ldi	r24, 0x69	; 105
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	29 e6       	ldi	r18, 0x69	; 105
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	f9 01       	movw	r30, r18
     282:	20 81       	ld	r18, Z
     284:	28 60       	ori	r18, 0x08	; 8
     286:	fc 01       	movw	r30, r24
     288:	20 83       	st	Z, r18
	EIMSK |= (1<<INT1);		// int enable from INT0
     28a:	8d e3       	ldi	r24, 0x3D	; 61
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2d e3       	ldi	r18, 0x3D	; 61
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	22 60       	ori	r18, 0x02	; 2
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
}
     29c:	00 00       	nop
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <main>:

int main(void)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x00;
     2ac:	84 e2       	ldi	r24, 0x24	; 36
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	10 82       	st	Z, r1
	DDRC = 0x00;
     2b4:	87 e2       	ldi	r24, 0x27	; 39
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	10 82       	st	Z, r1
	DDRD = 0x00;
     2bc:	8a e2       	ldi	r24, 0x2A	; 42
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	10 82       	st	Z, r1

	PORTB = 0x00;
     2c4:	85 e2       	ldi	r24, 0x25	; 37
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	10 82       	st	Z, r1
	PORTC = 0x00;
     2cc:	88 e2       	ldi	r24, 0x28	; 40
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	fc 01       	movw	r30, r24
     2d2:	10 82       	st	Z, r1
	PORTD = 0x00;
     2d4:	8b e2       	ldi	r24, 0x2B	; 43
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	fc 01       	movw	r30, r24
     2da:	10 82       	st	Z, r1

	motor_init();
     2dc:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <motor_init>
	encoder_init();
     2e0:	0e 94 13 01 	call	0x226	; 0x226 <encoder_init>
	lcd_init();
     2e4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <lcd_init>
	ntc_init();
     2e8:	0e 94 a9 13 	call	0x2752	; 0x2752 <ntc_init>
	valve_init();
     2ec:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <valve_init>

	sei();
     2f0:	78 94       	sei

	TUI_inti();
     2f2:	0e 94 b8 02 	call	0x570	; 0x570 <TUI_inti>
	TUI('s');
     2f6:	83 e7       	ldi	r24, 0x73	; 115
     2f8:	0e 94 0a 03 	call	0x614	; 0x614 <TUI>
		
	for(;;)
    {
		asm("nop");
     2fc:	00 00       	nop
    }
     2fe:	fe cf       	rjmp	.-4      	; 0x2fc <main+0x58>

00000300 <TUI_sec_timer_init>:
#define EEP_ADDR		(void *)0x10
#define eep_read()		eeprom_read_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))
#define eep_update()	eeprom_update_block(&eeprom_data, EEP_ADDR, sizeof(eeprom_data_t))

void TUI_sec_timer_init(void)
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	TUI_sec_timer_stop();
     308:	0e 94 a9 01 	call	0x352	; 0x352 <TUI_sec_timer_stop>
	TCCR1A = 0;
     30c:	80 e8       	ldi	r24, 0x80	; 128
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	fc 01       	movw	r30, r24
     312:	10 82       	st	Z, r1
	OCR1A = F_CPU / 1024;							// TOP value for 1 sec
     314:	88 e8       	ldi	r24, 0x88	; 136
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	2d e8       	ldi	r18, 0x8D	; 141
     31a:	3b e5       	ldi	r19, 0x5B	; 91
     31c:	fc 01       	movw	r30, r24
     31e:	31 83       	std	Z+1, r19	; 0x01
     320:	20 83       	st	Z, r18
	TIMSK1 = (1<<OCIE1A);							// compare IT enable
     322:	8f e6       	ldi	r24, 0x6F	; 111
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	22 e0       	ldi	r18, 0x02	; 2
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
	TUI_sec_timer_start();
     32c:	0e 94 9c 01 	call	0x338	; 0x338 <TUI_sec_timer_start>
}
     330:	00 00       	nop
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <TUI_sec_timer_start>:
void TUI_sec_timer_start(void)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12) | (1<<CS12) | (1<<CS10);	// CTC mode clk/1024
     340:	81 e8       	ldi	r24, 0x81	; 129
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	2d e0       	ldi	r18, 0x0D	; 13
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
}
     34a:	00 00       	nop
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <TUI_sec_timer_stop>:
void TUI_sec_timer_stop(void)
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1<<WGM12);							// CTC mode clk = 0
     35a:	81 e8       	ldi	r24, 0x81	; 129
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	28 e0       	ldi	r18, 0x08	; 8
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
}
     364:	00 00       	nop
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <__vector_11>:
ISR(TIMER1_COMPA_vect)
{
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	2f 93       	push	r18
     37a:	3f 93       	push	r19
     37c:	4f 93       	push	r20
     37e:	5f 93       	push	r21
     380:	6f 93       	push	r22
     382:	7f 93       	push	r23
     384:	8f 93       	push	r24
     386:	9f 93       	push	r25
     388:	af 93       	push	r26
     38a:	bf 93       	push	r27
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
	if (machine_state == MACHINE_START)
     398:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     39c:	88 23       	and	r24, r24
     39e:	81 f5       	brne	.+96     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		if (user_profile.sec > 0)
     3a0:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3a4:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3a8:	89 2b       	or	r24, r25
     3aa:	49 f0       	breq	.+18     	; 0x3be <__vector_11+0x52>
		{
			user_profile.sec--;
     3ac:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3b0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <user_profile+0x3>
     3ba:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <user_profile+0x2>
		}
		if (!user_profile.sec)
     3be:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     3c2:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     3c6:	89 2b       	or	r24, r25
     3c8:	d9 f4       	brne	.+54     	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			motor_smoothly_rmp(user_profile.rpm, 0);
     3ca:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     3ce:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <motor_smoothly_rmp>
			machine_state = MACHINE_STOP;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
			user_profile = backup_profile;
     3e0:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     3e4:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     3e8:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     3ec:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     3f0:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     3f4:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     3f8:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     3fc:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
		}
	}
	TUI('s');
     400:	83 e7       	ldi	r24, 0x73	; 115
     402:	0e 94 0a 03 	call	0x614	; 0x614 <TUI>
}
     406:	00 00       	nop
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	ff 91       	pop	r31
     40e:	ef 91       	pop	r30
     410:	bf 91       	pop	r27
     412:	af 91       	pop	r26
     414:	9f 91       	pop	r25
     416:	8f 91       	pop	r24
     418:	7f 91       	pop	r23
     41a:	6f 91       	pop	r22
     41c:	5f 91       	pop	r21
     41e:	4f 91       	pop	r20
     420:	3f 91       	pop	r19
     422:	2f 91       	pop	r18
     424:	0f 90       	pop	r0
     426:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <TUI_back_timer_init>:


void TUI_back_timer_init(void)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = 0;									// normal mode
     438:	84 e4       	ldi	r24, 0x44	; 68
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	fc 01       	movw	r30, r24
     43e:	10 82       	st	Z, r1
	TCCR0B = (1<<CS02) | (1<<CS00);				// clk/1024
     440:	85 e4       	ldi	r24, 0x45	; 69
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	25 e0       	ldi	r18, 0x05	; 5
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
	TIMSK0 = (1<<TOIE0);						// compare IT enable
     44a:	8e e6       	ldi	r24, 0x6E	; 110
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	21 e0       	ldi	r18, 0x01	; 1
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
	TUI_back_timer_clear();
     454:	0e 94 30 02 	call	0x460	; 0x460 <TUI_back_timer_clear>
}
     458:	00 00       	nop
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <TUI_back_timer_clear>:
void TUI_back_timer_clear(void)
{
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
	back_tick = 0;
     468:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <back_tick>
     46c:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <back_tick+0x1>
     470:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <back_tick+0x2>
     474:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <back_tick+0x3>
	TCNT0 = 0;
     478:	86 e4       	ldi	r24, 0x46	; 70
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	fc 01       	movw	r30, r24
     47e:	10 82       	st	Z, r1
}
     480:	00 00       	nop
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	08 95       	ret

00000488 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	2f 93       	push	r18
     496:	3f 93       	push	r19
     498:	4f 93       	push	r20
     49a:	5f 93       	push	r21
     49c:	6f 93       	push	r22
     49e:	7f 93       	push	r23
     4a0:	8f 93       	push	r24
     4a2:	9f 93       	push	r25
     4a4:	af 93       	push	r26
     4a6:	bf 93       	push	r27
     4a8:	ef 93       	push	r30
     4aa:	ff 93       	push	r31
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	1f 92       	push	r1
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
	const uint8_t sec_to_return = 3;
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	89 83       	std	Y+1, r24	; 0x01
	back_tick++;
     4ba:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <back_tick>
     4be:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <back_tick+0x1>
     4c2:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <back_tick+0x2>
     4c6:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <back_tick+0x3>
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	a1 1d       	adc	r26, r1
     4ce:	b1 1d       	adc	r27, r1
     4d0:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <back_tick>
     4d4:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <back_tick+0x1>
     4d8:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <back_tick+0x2>
     4dc:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <back_tick+0x3>
	if (back_tick == ( (((uint32_t) sec_to_return) * ((uint32_t) F_CPU)) / (((uint32_t) 256) * ((uint32_t) 1024))) )
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	a0 e0       	ldi	r26, 0x00	; 0
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	9c 01       	movw	r18, r24
     4ec:	ad 01       	movw	r20, r26
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	76 e3       	ldi	r23, 0x36	; 54
     4f2:	8e e6       	ldi	r24, 0x6E	; 110
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__mulsi3>
     4fa:	dc 01       	movw	r26, r24
     4fc:	cb 01       	movw	r24, r22
     4fe:	9c 01       	movw	r18, r24
     500:	ad 01       	movw	r20, r26
     502:	01 2e       	mov	r0, r17
     504:	12 e1       	ldi	r17, 0x12	; 18
     506:	56 95       	lsr	r21
     508:	47 95       	ror	r20
     50a:	37 95       	ror	r19
     50c:	27 95       	ror	r18
     50e:	1a 95       	dec	r17
     510:	d1 f7       	brne	.-12     	; 0x506 <__vector_16+0x7e>
     512:	10 2d       	mov	r17, r0
     514:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <back_tick>
     518:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <back_tick+0x1>
     51c:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <back_tick+0x2>
     520:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <back_tick+0x3>
     524:	28 17       	cp	r18, r24
     526:	39 07       	cpc	r19, r25
     528:	4a 07       	cpc	r20, r26
     52a:	5b 07       	cpc	r21, r27
     52c:	59 f4       	brne	.+22     	; 0x544 <__vector_16+0xbc>
	{
		TUI_back_timer_clear();
     52e:	0e 94 30 02 	call	0x460	; 0x460 <TUI_back_timer_clear>
		if (menu != MAIN_MENU)
     532:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     536:	88 23       	and	r24, r24
     538:	29 f0       	breq	.+10     	; 0x544 <__vector_16+0xbc>
		{
			menu = MAIN_MENU;
     53a:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
			TUI('s');
     53e:	83 e7       	ldi	r24, 0x73	; 115
     540:	0e 94 0a 03 	call	0x614	; 0x614 <TUI>
		}
	}
}
     544:	00 00       	nop
     546:	0f 90       	pop	r0
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	ff 91       	pop	r31
     54e:	ef 91       	pop	r30
     550:	bf 91       	pop	r27
     552:	af 91       	pop	r26
     554:	9f 91       	pop	r25
     556:	8f 91       	pop	r24
     558:	7f 91       	pop	r23
     55a:	6f 91       	pop	r22
     55c:	5f 91       	pop	r21
     55e:	4f 91       	pop	r20
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	0f 90       	pop	r0
     566:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     56a:	0f 90       	pop	r0
     56c:	1f 90       	pop	r1
     56e:	18 95       	reti

00000570 <TUI_inti>:

void TUI_inti(void)
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
	menu = MAIN_MENU;
     578:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
	machine_state = MACHINE_STOP;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
	actual_rmp = 0;
     582:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <actual_rmp+0x1>
     586:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <actual_rmp>

	TUI_sec_timer_init();
     58a:	0e 94 80 01 	call	0x300	; 0x300 <TUI_sec_timer_init>
	TUI_back_timer_init();
     58e:	0e 94 18 02 	call	0x430	; 0x430 <TUI_back_timer_init>

	// EEPROM is empty
	if (eeprom_read_byte(EEP_ADDR) == 0xFF)
     592:	80 e1       	ldi	r24, 0x10	; 16
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <eeprom_read_byte>
     59a:	8f 3f       	cpi	r24, 0xFF	; 255
     59c:	41 f4       	brne	.+16     	; 0x5ae <TUI_inti+0x3e>
	{
		eep_update();
     59e:	4d e0       	ldi	r20, 0x0D	; 13
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	60 e1       	ldi	r22, 0x10	; 16
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 80 1a 	call	0x3500	; 0x3500 <eeprom_update_block>
	}
	eep_read();
     5ae:	4d e0       	ldi	r20, 0x0D	; 13
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	60 e1       	ldi	r22, 0x10	; 16
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <eeprom_read_block>

	user_profile = eeprom_data.profile[eeprom_data.profile_id];
     5be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	9e 4f       	sbci	r25, 0xFE	; 254
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	91 81       	ldd	r25, Z+1	; 0x01
     5d8:	a2 81       	ldd	r26, Z+2	; 0x02
     5da:	b3 81       	ldd	r27, Z+3	; 0x03
     5dc:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     5e0:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     5e4:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     5e8:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
	backup_profile = user_profile;
     5ec:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     5f0:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     5f4:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     5f8:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     5fc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     600:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     604:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     608:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
}
     60c:	00 00       	nop
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <TUI>:

void TUI(char action)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	00 d0       	rcall	.+0      	; 0x61a <TUI+0x6>
     61a:	00 d0       	rcall	.+0      	; 0x61c <TUI+0x8>
     61c:	1f 92       	push	r1
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	8d 83       	std	Y+5, r24	; 0x05
	static item_menu_select_t item_menu_secect = ITEM_MENU_SELECT_RPM;
	static load_menu_select_t load_menu_select = LOAD_MENU_SELECT_PROFILE1;
	static save_menu_select_t save_menu_select = SAVE_MENU_SELECT_PROFILE1;

	// nastaveni
	switch (menu)
     624:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	82 30       	cpi	r24, 0x02	; 2
     62e:	91 05       	cpc	r25, r1
     630:	09 f4       	brne	.+2      	; 0x634 <TUI+0x20>
     632:	fc c0       	rjmp	.+504    	; 0x82c <TUI+0x218>
     634:	83 30       	cpi	r24, 0x03	; 3
     636:	91 05       	cpc	r25, r1
     638:	34 f4       	brge	.+12     	; 0x646 <TUI+0x32>
     63a:	00 97       	sbiw	r24, 0x00	; 0
     63c:	81 f0       	breq	.+32     	; 0x65e <TUI+0x4a>
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	09 f4       	brne	.+2      	; 0x644 <TUI+0x30>
     642:	92 c0       	rjmp	.+292    	; 0x768 <TUI+0x154>
     644:	36 c2       	rjmp	.+1132   	; 0xab2 <__stack+0x1b3>
     646:	84 30       	cpi	r24, 0x04	; 4
     648:	91 05       	cpc	r25, r1
     64a:	09 f4       	brne	.+2      	; 0x64e <TUI+0x3a>
     64c:	77 c1       	rjmp	.+750    	; 0x93c <__stack+0x3d>
     64e:	84 30       	cpi	r24, 0x04	; 4
     650:	91 05       	cpc	r25, r1
     652:	0c f4       	brge	.+2      	; 0x656 <TUI+0x42>
     654:	2f c1       	rjmp	.+606    	; 0x8b4 <TUI+0x2a0>
     656:	05 97       	sbiw	r24, 0x05	; 5
     658:	09 f4       	brne	.+2      	; 0x65c <TUI+0x48>
     65a:	cd c1       	rjmp	.+922    	; 0x9f6 <__stack+0xf7>
     65c:	2a c2       	rjmp	.+1108   	; 0xab2 <__stack+0x1b3>
	{
		case MAIN_MENU:
			switch (action)
     65e:	8d 81       	ldd	r24, Y+5	; 0x05
     660:	88 2f       	mov	r24, r24
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	8d 32       	cpi	r24, 0x2D	; 45
     666:	91 05       	cpc	r25, r1
     668:	31 f0       	breq	.+12     	; 0x676 <TUI+0x62>
     66a:	82 36       	cpi	r24, 0x62	; 98
     66c:	91 05       	cpc	r25, r1
     66e:	89 f0       	breq	.+34     	; 0x692 <TUI+0x7e>
     670:	8b 97       	sbiw	r24, 0x2b	; 43
     672:	09 f0       	breq	.+2      	; 0x676 <TUI+0x62>
					break;

				default:
					;
			}
			break;
     674:	1e c2       	rjmp	.+1084   	; 0xab2 <__stack+0x1b3>
			{
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
     676:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     67a:	88 23       	and	r24, r24
     67c:	09 f4       	brne	.+2      	; 0x680 <TUI+0x6c>
     67e:	72 c0       	rjmp	.+228    	; 0x764 <TUI+0x150>
						break;
					main_menu_secelt = (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ? MAIN_MENU_SELECT_MENU : MAIN_MENU_SELECT_CONTOL;
     680:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	99 23       	and	r25, r25
     688:	09 f0       	breq	.+2      	; 0x68c <TUI+0x78>
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <main_menu_secelt.1912>
					break;
     690:	6a c0       	rjmp	.+212    	; 0x766 <TUI+0x152>

				// stisk tlacitka
				case 'b':
					if (main_menu_secelt == MAIN_MENU_SELECT_CONTOL)
     692:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     696:	88 23       	and	r24, r24
     698:	09 f0       	breq	.+2      	; 0x69c <TUI+0x88>
     69a:	50 c0       	rjmp	.+160    	; 0x73c <TUI+0x128>
					{
						if (machine_state == MACHINE_STOP)
     69c:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     6a0:	81 30       	cpi	r24, 0x01	; 1
     6a2:	39 f5       	brne	.+78     	; 0x6f2 <TUI+0xde>
						{
							machine_state = MACHINE_START;
     6a4:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <machine_state>
							VALVE_ON;
     6a8:	8b e2       	ldi	r24, 0x2B	; 43
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	2b e2       	ldi	r18, 0x2B	; 43
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	20 81       	ld	r18, Z
     6b4:	22 60       	ori	r18, 0x02	; 2
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
							backup_profile = user_profile;
     6ba:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     6be:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     6c2:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     6c6:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     6ca:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     6ce:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     6d2:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     6d6:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);							
     6da:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <user_profile>
     6de:	30 91 cc 02 	lds	r19, 0x02CC	; 0x8002cc <user_profile+0x1>
     6e2:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <actual_rmp>
     6e6:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <actual_rmp+0x1>
     6ea:	b9 01       	movw	r22, r18
     6ec:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <motor_smoothly_rmp>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     6f0:	3a c0       	rjmp	.+116    	; 0x766 <TUI+0x152>
							backup_profile = user_profile;
							motor_smoothly_rmp(actual_rmp, user_profile.rpm);							
						}
						else
						{
							machine_state = MACHINE_STOP;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <machine_state>
							VALVE_OFF;
     6f8:	8b e2       	ldi	r24, 0x2B	; 43
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	2b e2       	ldi	r18, 0x2B	; 43
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	2d 7f       	andi	r18, 0xFD	; 253
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
							motor_smoothly_rmp(user_profile.rpm, 0);							
     70a:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     70e:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <motor_smoothly_rmp>
							user_profile = backup_profile;
     71a:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     71e:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     722:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     726:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     72a:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     72e:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     732:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     736:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					else
					{
						menu = ITEM_MENU;
						backup_profile = user_profile;
					}
					break;
     73a:	15 c0       	rjmp	.+42     	; 0x766 <TUI+0x152>
							user_profile = backup_profile;
						}
					}
					else
					{
						menu = ITEM_MENU;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
						backup_profile = user_profile;
     742:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     746:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     74a:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     74e:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     752:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
     756:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     75a:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <backup_profile+0x2>
     75e:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <backup_profile+0x3>
					}
					break;
     762:	01 c0       	rjmp	.+2      	; 0x766 <TUI+0x152>
				// pohyb v menu
				case '+':
				case '-':
					// deactivate menu when motor start
					if (machine_state == MACHINE_START)
						break;
     764:	00 00       	nop
					break;

				default:
					;
			}
			break;
     766:	a5 c1       	rjmp	.+842    	; 0xab2 <__stack+0x1b3>

		case ITEM_MENU:
			switch (action)
     768:	8d 81       	ldd	r24, Y+5	; 0x05
     76a:	88 2f       	mov	r24, r24
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	8d 32       	cpi	r24, 0x2D	; 45
     770:	91 05       	cpc	r25, r1
     772:	11 f1       	breq	.+68     	; 0x7b8 <TUI+0x1a4>
     774:	82 36       	cpi	r24, 0x62	; 98
     776:	91 05       	cpc	r25, r1
     778:	d9 f1       	breq	.+118    	; 0x7f0 <TUI+0x1dc>
     77a:	8b 97       	sbiw	r24, 0x2b	; 43
     77c:	09 f0       	breq	.+2      	; 0x780 <TUI+0x16c>
					break;

				default:
					;
			}
			break;
     77e:	99 c1       	rjmp	.+818    	; 0xab2 <__stack+0x1b3>

		case ITEM_MENU:
			switch (action)
			{
				case '+':
					switch (item_menu_secect)
     780:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     784:	88 2f       	mov	r24, r24
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	91 05       	cpc	r25, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <TUI+0x18c>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	91 05       	cpc	r25, r1
     792:	51 f0       	breq	.+20     	; 0x7a8 <TUI+0x194>
     794:	89 2b       	or	r24, r25
     796:	61 f4       	brne	.+24     	; 0x7b0 <TUI+0x19c>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     79e:	0b c0       	rjmp	.+22     	; 0x7b6 <TUI+0x1a2>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <TUI+0x1a2>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <TUI+0x1a2>
						default:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     7b0:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <item_menu_secect.1913>
					}
					break;
     7b4:	3a c0       	rjmp	.+116    	; 0x82a <TUI+0x216>
     7b6:	39 c0       	rjmp	.+114    	; 0x82a <TUI+0x216>

				case  '-':
					switch (item_menu_secect)
     7b8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     7bc:	88 2f       	mov	r24, r24
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	91 05       	cpc	r25, r1
     7c4:	49 f0       	breq	.+18     	; 0x7d8 <TUI+0x1c4>
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	91 05       	cpc	r25, r1
     7ca:	49 f0       	breq	.+18     	; 0x7de <TUI+0x1ca>
     7cc:	89 2b       	or	r24, r25
     7ce:	59 f4       	brne	.+22     	; 0x7e6 <TUI+0x1d2>
					{
						case ITEM_MENU_SELECT_RPM:
							item_menu_secect = ITEM_MENU_SELECT_SAVE;
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7d6:	0b c0       	rjmp	.+22     	; 0x7ee <TUI+0x1da>
						case ITEM_MENU_SELECT_TIME:
							item_menu_secect = ITEM_MENU_SELECT_RPM;
     7d8:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <item_menu_secect.1913>
							break;
     7dc:	08 c0       	rjmp	.+16     	; 0x7ee <TUI+0x1da>
						case ITEM_MENU_SELECT_LOAD:
							item_menu_secect = ITEM_MENU_SELECT_TIME;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
							break;
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <TUI+0x1da>
						default:
							item_menu_secect = ITEM_MENU_SELECT_LOAD;
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <item_menu_secect.1913>
					}
					break;
     7ec:	1e c0       	rjmp	.+60     	; 0x82a <TUI+0x216>
     7ee:	1d c0       	rjmp	.+58     	; 0x82a <TUI+0x216>

				case 'b':
					switch (item_menu_secect)
     7f0:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     7f4:	88 2f       	mov	r24, r24
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	91 05       	cpc	r25, r1
     7fc:	49 f0       	breq	.+18     	; 0x810 <TUI+0x1fc>
     7fe:	82 30       	cpi	r24, 0x02	; 2
     800:	91 05       	cpc	r25, r1
     802:	51 f0       	breq	.+20     	; 0x818 <TUI+0x204>
     804:	89 2b       	or	r24, r25
     806:	61 f4       	brne	.+24     	; 0x820 <TUI+0x20c>
					{
						case ITEM_MENU_SELECT_RPM:
							menu = RPM_MENU;
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     80e:	0c c0       	rjmp	.+24     	; 0x828 <TUI+0x214>
						case ITEM_MENU_SELECT_TIME:
							menu = TIME_MENU;
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     816:	08 c0       	rjmp	.+16     	; 0x828 <TUI+0x214>
						case ITEM_MENU_SELECT_LOAD:
							menu = LOAD_MENU;
     818:	84 e0       	ldi	r24, 0x04	; 4
     81a:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
							break;
     81e:	04 c0       	rjmp	.+8      	; 0x828 <TUI+0x214>
						default:
							menu = SAVE_MENU;
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <menu>
					}
					break;
     826:	00 c0       	rjmp	.+0      	; 0x828 <TUI+0x214>
     828:	00 00       	nop

				default:
					;
			}
			break;
     82a:	43 c1       	rjmp	.+646    	; 0xab2 <__stack+0x1b3>

		case RPM_MENU:
			switch (action)
     82c:	8d 81       	ldd	r24, Y+5	; 0x05
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	8d 32       	cpi	r24, 0x2D	; 45
     834:	91 05       	cpc	r25, r1
     836:	b9 f0       	breq	.+46     	; 0x866 <TUI+0x252>
     838:	82 36       	cpi	r24, 0x62	; 98
     83a:	91 05       	cpc	r25, r1
     83c:	21 f1       	breq	.+72     	; 0x886 <TUI+0x272>
     83e:	8b 97       	sbiw	r24, 0x2b	; 43
     840:	09 f0       	breq	.+2      	; 0x844 <TUI+0x230>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     842:	37 c1       	rjmp	.+622    	; 0xab2 <__stack+0x1b3>

		case RPM_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
     844:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     848:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     84c:	8c 32       	cpi	r24, 0x2C	; 44
     84e:	91 40       	sbci	r25, 0x01	; 1
     850:	68 f5       	brcc	.+90     	; 0x8ac <TUI+0x298>
						backup_profile.rpm++;
     852:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     856:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     860:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
					break;
     864:	23 c0       	rjmp	.+70     	; 0x8ac <TUI+0x298>
				case '-':
					if (backup_profile.rpm > 0)
     866:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     86a:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     86e:	89 2b       	or	r24, r25
     870:	f9 f0       	breq	.+62     	; 0x8b0 <TUI+0x29c>
						backup_profile.rpm--;
     872:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     876:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <backup_profile+0x1>
     880:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <backup_profile>
					break;
     884:	15 c0       	rjmp	.+42     	; 0x8b0 <TUI+0x29c>
				case  'b':
					menu = MAIN_MENU;
     886:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					user_profile = backup_profile;
     88a:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     88e:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     892:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     896:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     89a:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     89e:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     8a2:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     8a6:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					break;
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <TUI+0x29e>
			switch (action)
			{
				case '+':
					if (backup_profile.rpm < 300)
						backup_profile.rpm++;
					break;
     8ac:	00 00       	nop
     8ae:	01 c1       	rjmp	.+514    	; 0xab2 <__stack+0x1b3>
				case '-':
					if (backup_profile.rpm > 0)
						backup_profile.rpm--;
					break;
     8b0:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     8b2:	ff c0       	rjmp	.+510    	; 0xab2 <__stack+0x1b3>

		case TIME_MENU:
			switch (action)
     8b4:	8d 81       	ldd	r24, Y+5	; 0x05
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	8d 32       	cpi	r24, 0x2D	; 45
     8bc:	91 05       	cpc	r25, r1
     8be:	b9 f0       	breq	.+46     	; 0x8ee <TUI+0x2da>
     8c0:	82 36       	cpi	r24, 0x62	; 98
     8c2:	91 05       	cpc	r25, r1
     8c4:	21 f1       	breq	.+72     	; 0x90e <__stack+0xf>
     8c6:	8b 97       	sbiw	r24, 0x2b	; 43
     8c8:	09 f0       	breq	.+2      	; 0x8cc <TUI+0x2b8>
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     8ca:	f3 c0       	rjmp	.+486    	; 0xab2 <__stack+0x1b3>

		case TIME_MENU:
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
     8cc:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8d0:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8d4:	80 3a       	cpi	r24, 0xA0	; 160
     8d6:	9c 48       	sbci	r25, 0x8C	; 140
     8d8:	68 f5       	brcc	.+90     	; 0x934 <__stack+0x35>
						backup_profile.sec+=60;
     8da:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8de:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8e2:	cc 96       	adiw	r24, 0x3c	; 60
     8e4:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <backup_profile+0x3>
     8e8:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <backup_profile+0x2>
					break;
     8ec:	23 c0       	rjmp	.+70     	; 0x934 <__stack+0x35>
				case '-':
					if (backup_profile.sec > 0)
     8ee:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8f2:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     8f6:	89 2b       	or	r24, r25
     8f8:	f9 f0       	breq	.+62     	; 0x938 <__stack+0x39>
						backup_profile.sec-=60;
     8fa:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     8fe:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     902:	cc 97       	sbiw	r24, 0x3c	; 60
     904:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <backup_profile+0x3>
     908:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <backup_profile+0x2>
					break;
     90c:	15 c0       	rjmp	.+42     	; 0x938 <__stack+0x39>
				case  'b':
					menu = MAIN_MENU;
     90e:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					user_profile = backup_profile;
     912:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     916:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     91a:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     91e:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     922:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     926:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     92a:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     92e:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					break;
     932:	03 c0       	rjmp	.+6      	; 0x93a <__stack+0x3b>
			switch (action)
			{
				case '+':
					if (backup_profile.sec < 36000)
						backup_profile.sec+=60;
					break;
     934:	00 00       	nop
     936:	bd c0       	rjmp	.+378    	; 0xab2 <__stack+0x1b3>
				case '-':
					if (backup_profile.sec > 0)
						backup_profile.sec-=60;
					break;
     938:	00 00       	nop
					user_profile = backup_profile;
					break;
				default:
					;
			}
			break;
     93a:	bb c0       	rjmp	.+374    	; 0xab2 <__stack+0x1b3>

		case LOAD_MENU:
			switch (action)
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	8d 32       	cpi	r24, 0x2D	; 45
     944:	91 05       	cpc	r25, r1
     946:	d9 f0       	breq	.+54     	; 0x97e <__stack+0x7f>
     948:	82 36       	cpi	r24, 0x62	; 98
     94a:	91 05       	cpc	r25, r1
     94c:	69 f1       	breq	.+90     	; 0x9a8 <__stack+0xa9>
     94e:	8b 97       	sbiw	r24, 0x2b	; 43
     950:	09 f0       	breq	.+2      	; 0x954 <__stack+0x55>
					eep_update();
					break;
				default:
				;
			}
			break;
     952:	af c0       	rjmp	.+350    	; 0xab2 <__stack+0x1b3>

		case LOAD_MENU:
			switch (action)
			{
				case '+':
					switch (load_menu_select)
     954:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     958:	88 2f       	mov	r24, r24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	19 f0       	breq	.+6      	; 0x966 <__stack+0x67>
     960:	01 97       	sbiw	r24, 0x01	; 1
     962:	29 f0       	breq	.+10     	; 0x96e <__stack+0x6f>
     964:	08 c0       	rjmp	.+16     	; 0x976 <__stack+0x77>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     96c:	07 c0       	rjmp	.+14     	; 0x97c <__stack+0x7d>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     974:	03 c0       	rjmp	.+6      	; 0x97c <__stack+0x7d>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     976:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <load_menu_select.1914>
					}
					break;
     97a:	3c c0       	rjmp	.+120    	; 0x9f4 <__stack+0xf5>
     97c:	3b c0       	rjmp	.+118    	; 0x9f4 <__stack+0xf5>
				case '-':
					switch (load_menu_select)
     97e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     982:	88 2f       	mov	r24, r24
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	19 f0       	breq	.+6      	; 0x990 <__stack+0x91>
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	29 f0       	breq	.+10     	; 0x998 <__stack+0x99>
     98e:	07 c0       	rjmp	.+14     	; 0x99e <__stack+0x9f>
					{
						case LOAD_MENU_SELECT_PROFILE1:
							load_menu_select = LOAD_MENU_SELECT_PROFILE3;
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
							break;
     996:	07 c0       	rjmp	.+14     	; 0x9a6 <__stack+0xa7>
						case LOAD_MENU_SELECT_PROFILE2:
							load_menu_select = LOAD_MENU_SELECT_PROFILE1;
     998:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <load_menu_select.1914>
							break;
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__stack+0xa7>
						default:
							load_menu_select = LOAD_MENU_SELECT_PROFILE2;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <load_menu_select.1914>
					}
					break;
     9a4:	27 c0       	rjmp	.+78     	; 0x9f4 <__stack+0xf5>
     9a6:	26 c0       	rjmp	.+76     	; 0x9f4 <__stack+0xf5>
				case  'b':
					menu = MAIN_MENU;
     9a8:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					eeprom_data.profile_id = load_menu_select;
     9ac:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
     9b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					user_profile = eeprom_data.profile[eeprom_data.profile_id];
     9b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9b8:	88 2f       	mov	r24, r24
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	88 0f       	add	r24, r24
     9c2:	99 1f       	adc	r25, r25
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	9e 4f       	sbci	r25, 0xFE	; 254
     9c8:	fc 01       	movw	r30, r24
     9ca:	80 81       	ld	r24, Z
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	a2 81       	ldd	r26, Z+2	; 0x02
     9d0:	b3 81       	ldd	r27, Z+3	; 0x03
     9d2:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
     9d6:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
     9da:	a0 93 cd 02 	sts	0x02CD, r26	; 0x8002cd <user_profile+0x2>
     9de:	b0 93 ce 02 	sts	0x02CE, r27	; 0x8002ce <user_profile+0x3>
					eep_update();
     9e2:	4d e0       	ldi	r20, 0x0D	; 13
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	60 e1       	ldi	r22, 0x10	; 16
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 80 1a 	call	0x3500	; 0x3500 <eeprom_update_block>
					break;
     9f2:	00 00       	nop
				default:
				;
			}
			break;
     9f4:	5e c0       	rjmp	.+188    	; 0xab2 <__stack+0x1b3>

		case SAVE_MENU:
			switch (action)
     9f6:	8d 81       	ldd	r24, Y+5	; 0x05
     9f8:	88 2f       	mov	r24, r24
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	8d 32       	cpi	r24, 0x2D	; 45
     9fe:	91 05       	cpc	r25, r1
     a00:	d9 f0       	breq	.+54     	; 0xa38 <__stack+0x139>
     a02:	82 36       	cpi	r24, 0x62	; 98
     a04:	91 05       	cpc	r25, r1
     a06:	69 f1       	breq	.+90     	; 0xa62 <__stack+0x163>
     a08:	8b 97       	sbiw	r24, 0x2b	; 43
     a0a:	09 f0       	breq	.+2      	; 0xa0e <__stack+0x10f>
					eep_update();
					break;
				default:
				;
			}
			break;
     a0c:	51 c0       	rjmp	.+162    	; 0xab0 <__stack+0x1b1>

		case SAVE_MENU:
			switch (action)
			{
				case '+':
					switch (save_menu_select)
     a0e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	19 f0       	breq	.+6      	; 0xa20 <__stack+0x121>
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	29 f0       	breq	.+10     	; 0xa28 <__stack+0x129>
     a1e:	08 c0       	rjmp	.+16     	; 0xa30 <__stack+0x131>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a26:	07 c0       	rjmp	.+14     	; 0xa36 <__stack+0x137>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <__stack+0x137>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     a30:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <save_menu_select.1915>
					}
					break;
     a34:	3d c0       	rjmp	.+122    	; 0xab0 <__stack+0x1b1>
     a36:	3c c0       	rjmp	.+120    	; 0xab0 <__stack+0x1b1>
				case '-':
					switch (save_menu_select)
     a38:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a3c:	88 2f       	mov	r24, r24
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	19 f0       	breq	.+6      	; 0xa4a <__stack+0x14b>
     a44:	01 97       	sbiw	r24, 0x01	; 1
     a46:	29 f0       	breq	.+10     	; 0xa52 <__stack+0x153>
     a48:	07 c0       	rjmp	.+14     	; 0xa58 <__stack+0x159>
					{
						case SAVE_MENU_SELECT_PROFILE1:
							save_menu_select = SAVE_MENU_SELECT_PROFILE3;
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
							break;
     a50:	07 c0       	rjmp	.+14     	; 0xa60 <__stack+0x161>
						case SAVE_MENU_SELECT_PROFILE2:
							save_menu_select = SAVE_MENU_SELECT_PROFILE1;
     a52:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <save_menu_select.1915>
							break;
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <__stack+0x161>
						default:
							save_menu_select = SAVE_MENU_SELECT_PROFILE2;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <save_menu_select.1915>
					}
					break;
     a5e:	28 c0       	rjmp	.+80     	; 0xab0 <__stack+0x1b1>
     a60:	27 c0       	rjmp	.+78     	; 0xab0 <__stack+0x1b1>
				case  'b':
					menu = MAIN_MENU;
     a62:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <menu>
					eeprom_data.profile_id = save_menu_select;
     a66:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
     a6a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					eeprom_data.profile[eeprom_data.profile_id] = user_profile;
     a6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a72:	88 2f       	mov	r24, r24
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	9c 01       	movw	r18, r24
     a80:	2f 5f       	subi	r18, 0xFF	; 255
     a82:	3e 4f       	sbci	r19, 0xFE	; 254
     a84:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     a88:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     a8c:	a0 91 cd 02 	lds	r26, 0x02CD	; 0x8002cd <user_profile+0x2>
     a90:	b0 91 ce 02 	lds	r27, 0x02CE	; 0x8002ce <user_profile+0x3>
     a94:	f9 01       	movw	r30, r18
     a96:	80 83       	st	Z, r24
     a98:	91 83       	std	Z+1, r25	; 0x01
     a9a:	a2 83       	std	Z+2, r26	; 0x02
     a9c:	b3 83       	std	Z+3, r27	; 0x03
					eep_update();
     a9e:	4d e0       	ldi	r20, 0x0D	; 13
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	60 e1       	ldi	r22, 0x10	; 16
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 80 1a 	call	0x3500	; 0x3500 <eeprom_update_block>
					break;
     aae:	00 00       	nop
				default:
				;
			}
			break;
     ab0:	00 00       	nop
		default:
			;
	}

	// zobrazeni
	switch (menu)
     ab2:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <menu>
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	91 05       	cpc	r25, r1
     abe:	09 f4       	brne	.+2      	; 0xac2 <__stack+0x1c3>
     ac0:	20 c2       	rjmp	.+1088   	; 0xf02 <__stack+0x603>
     ac2:	83 30       	cpi	r24, 0x03	; 3
     ac4:	91 05       	cpc	r25, r1
     ac6:	34 f4       	brge	.+12     	; 0xad4 <__stack+0x1d5>
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	81 f0       	breq	.+32     	; 0xaec <__stack+0x1ed>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	09 f4       	brne	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	b3 c1       	rjmp	.+870    	; 0xe38 <__stack+0x539>
			break;

		default:
		;
	}
}
     ad2:	c7 c4       	rjmp	.+2446   	; 0x1462 <__stack+0xb63>
		default:
			;
	}

	// zobrazeni
	switch (menu)
     ad4:	84 30       	cpi	r24, 0x04	; 4
     ad6:	91 05       	cpc	r25, r1
     ad8:	09 f4       	brne	.+2      	; 0xadc <__stack+0x1dd>
     ada:	d5 c2       	rjmp	.+1450   	; 0x1086 <__stack+0x787>
     adc:	84 30       	cpi	r24, 0x04	; 4
     ade:	91 05       	cpc	r25, r1
     ae0:	0c f4       	brge	.+2      	; 0xae4 <__stack+0x1e5>
     ae2:	4e c2       	rjmp	.+1180   	; 0xf80 <__stack+0x681>
     ae4:	05 97       	sbiw	r24, 0x05	; 5
     ae6:	09 f4       	brne	.+2      	; 0xaea <__stack+0x1eb>
     ae8:	c5 c3       	rjmp	.+1930   	; 0x1274 <__stack+0x975>
			break;

		default:
		;
	}
}
     aea:	bb c4       	rjmp	.+2422   	; 0x1462 <__stack+0xb63>
	// zobrazeni
	switch (menu)
	{
		case MAIN_MENU:

			if (user_profile.sec/3600)
     aec:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     af0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     af4:	80 31       	cpi	r24, 0x10	; 16
     af6:	9e 40       	sbci	r25, 0x0E	; 14
     af8:	08 f4       	brcc	.+2      	; 0xafc <__stack+0x1fd>
     afa:	5f c0       	rjmp	.+190    	; 0xbba <__stack+0x2bb>
				lcd_printf("\f%02d:%02d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     afc:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b00:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b04:	20 e1       	ldi	r18, 0x10	; 16
     b06:	3e e0       	ldi	r19, 0x0E	; 14
     b08:	b9 01       	movw	r22, r18
     b0a:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     b0e:	ac 01       	movw	r20, r24
     b10:	9a 01       	movw	r18, r20
     b12:	a9 e8       	ldi	r26, 0x89	; 137
     b14:	b8 e8       	ldi	r27, 0x88	; 136
     b16:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
     b1a:	fc 01       	movw	r30, r24
     b1c:	f6 95       	lsr	r31
     b1e:	e7 95       	ror	r30
     b20:	f2 95       	swap	r31
     b22:	e2 95       	swap	r30
     b24:	ef 70       	andi	r30, 0x0F	; 15
     b26:	ef 27       	eor	r30, r31
     b28:	ff 70       	andi	r31, 0x0F	; 15
     b2a:	ef 27       	eor	r30, r31
     b2c:	2c e3       	ldi	r18, 0x3C	; 60
     b2e:	2e 9f       	mul	r18, r30
     b30:	c0 01       	movw	r24, r0
     b32:	2f 9f       	mul	r18, r31
     b34:	90 0d       	add	r25, r0
     b36:	11 24       	eor	r1, r1
     b38:	fa 01       	movw	r30, r20
     b3a:	e8 1b       	sub	r30, r24
     b3c:	f9 0b       	sbc	r31, r25
     b3e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b42:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b46:	20 e1       	ldi	r18, 0x10	; 16
     b48:	3e e0       	ldi	r19, 0x0E	; 14
     b4a:	b9 01       	movw	r22, r18
     b4c:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     b50:	9c 01       	movw	r18, r24
     b52:	a9 e8       	ldi	r26, 0x89	; 137
     b54:	b8 e8       	ldi	r27, 0x88	; 136
     b56:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
     b5a:	9c 01       	movw	r18, r24
     b5c:	36 95       	lsr	r19
     b5e:	27 95       	ror	r18
     b60:	32 95       	swap	r19
     b62:	22 95       	swap	r18
     b64:	2f 70       	andi	r18, 0x0F	; 15
     b66:	23 27       	eor	r18, r19
     b68:	3f 70       	andi	r19, 0x0F	; 15
     b6a:	23 27       	eor	r18, r19
     b6c:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     b70:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     b74:	40 e1       	ldi	r20, 0x10	; 16
     b76:	5e e0       	ldi	r21, 0x0E	; 14
     b78:	ba 01       	movw	r22, r20
     b7a:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     b7e:	cb 01       	movw	r24, r22
     b80:	4f 2f       	mov	r20, r31
     b82:	4f 93       	push	r20
     b84:	4e 2f       	mov	r20, r30
     b86:	4f 93       	push	r20
     b88:	43 2f       	mov	r20, r19
     b8a:	4f 93       	push	r20
     b8c:	2f 93       	push	r18
     b8e:	29 2f       	mov	r18, r25
     b90:	2f 93       	push	r18
     b92:	8f 93       	push	r24
     b94:	8e e0       	ldi	r24, 0x0E	; 14
     b96:	91 e0       	ldi	r25, 0x01	; 1
     b98:	89 2f       	mov	r24, r25
     b9a:	8f 93       	push	r24
     b9c:	8e e0       	ldi	r24, 0x0E	; 14
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	8f 93       	push	r24
     ba2:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     ba6:	4d b7       	in	r20, 0x3d	; 61
     ba8:	5e b7       	in	r21, 0x3e	; 62
     baa:	48 5f       	subi	r20, 0xF8	; 248
     bac:	5f 4f       	sbci	r21, 0xFF	; 255
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	4d c0       	rjmp	.+154    	; 0xc54 <__stack+0x355>
			else
				lcd_printf("\f%02d:%02d   ", (user_profile.sec%3600)/60,  (user_profile.sec%3600)%60);
     bba:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     bbe:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     bc2:	20 e1       	ldi	r18, 0x10	; 16
     bc4:	3e e0       	ldi	r19, 0x0E	; 14
     bc6:	b9 01       	movw	r22, r18
     bc8:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     bcc:	ac 01       	movw	r20, r24
     bce:	9a 01       	movw	r18, r20
     bd0:	a9 e8       	ldi	r26, 0x89	; 137
     bd2:	b8 e8       	ldi	r27, 0x88	; 136
     bd4:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
     bd8:	fc 01       	movw	r30, r24
     bda:	f6 95       	lsr	r31
     bdc:	e7 95       	ror	r30
     bde:	f2 95       	swap	r31
     be0:	e2 95       	swap	r30
     be2:	ef 70       	andi	r30, 0x0F	; 15
     be4:	ef 27       	eor	r30, r31
     be6:	ff 70       	andi	r31, 0x0F	; 15
     be8:	ef 27       	eor	r30, r31
     bea:	2c e3       	ldi	r18, 0x3C	; 60
     bec:	2e 9f       	mul	r18, r30
     bee:	c0 01       	movw	r24, r0
     bf0:	2f 9f       	mul	r18, r31
     bf2:	90 0d       	add	r25, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	fa 01       	movw	r30, r20
     bf8:	e8 1b       	sub	r30, r24
     bfa:	f9 0b       	sbc	r31, r25
     bfc:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     c00:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     c04:	20 e1       	ldi	r18, 0x10	; 16
     c06:	3e e0       	ldi	r19, 0x0E	; 14
     c08:	b9 01       	movw	r22, r18
     c0a:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     c0e:	9c 01       	movw	r18, r24
     c10:	a9 e8       	ldi	r26, 0x89	; 137
     c12:	b8 e8       	ldi	r27, 0x88	; 136
     c14:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
     c18:	96 95       	lsr	r25
     c1a:	87 95       	ror	r24
     c1c:	92 95       	swap	r25
     c1e:	82 95       	swap	r24
     c20:	8f 70       	andi	r24, 0x0F	; 15
     c22:	89 27       	eor	r24, r25
     c24:	9f 70       	andi	r25, 0x0F	; 15
     c26:	89 27       	eor	r24, r25
     c28:	2f 2f       	mov	r18, r31
     c2a:	2f 93       	push	r18
     c2c:	2e 2f       	mov	r18, r30
     c2e:	2f 93       	push	r18
     c30:	29 2f       	mov	r18, r25
     c32:	2f 93       	push	r18
     c34:	8f 93       	push	r24
     c36:	8e e1       	ldi	r24, 0x1E	; 30
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	89 2f       	mov	r24, r25
     c3c:	8f 93       	push	r24
     c3e:	8e e1       	ldi	r24, 0x1E	; 30
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	8f 93       	push	r24
     c44:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
			lcd_printf("       %3d%cC", ntc_measure(), 223);
     c54:	0e 94 bb 13 	call	0x2776	; 0x2776 <ntc_measure>
     c58:	1f 92       	push	r1
     c5a:	2f ed       	ldi	r18, 0xDF	; 223
     c5c:	2f 93       	push	r18
     c5e:	29 2f       	mov	r18, r25
     c60:	2f 93       	push	r18
     c62:	8f 93       	push	r24
     c64:	8c e2       	ldi	r24, 0x2C	; 44
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	89 2f       	mov	r24, r25
     c6a:	8f 93       	push	r24
     c6c:	8c e2       	ldi	r24, 0x2C	; 44
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	8f 93       	push	r24
     c72:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
			lcd_printf("\n        %4d", user_profile.rpm);
     c82:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     c86:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     c8a:	29 2f       	mov	r18, r25
     c8c:	2f 93       	push	r18
     c8e:	8f 93       	push	r24
     c90:	8a e3       	ldi	r24, 0x3A	; 58
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	89 2f       	mov	r24, r25
     c96:	8f 93       	push	r24
     c98:	8a e3       	ldi	r24, 0x3A	; 58
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	8f 93       	push	r24
     c9e:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0

			switch (machine_state)
     caa:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <machine_state>
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	41 f5       	brne	.+80     	; 0xd06 <__stack+0x407>
			{
				case MACHINE_STOP:
					lcd_printf("\n\n%cStart        %cMenu ", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, (main_menu_secelt == MAIN_MENU_SELECT_MENU) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     cb6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	19 f4       	brne	.+6      	; 0xcc4 <__stack+0x3c5>
     cbe:	28 e0       	ldi	r18, 0x08	; 8
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <__stack+0x3c9>
     cc4:	20 e2       	ldi	r18, 0x20	; 32
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     ccc:	88 23       	and	r24, r24
     cce:	19 f4       	brne	.+6      	; 0xcd6 <__stack+0x3d7>
     cd0:	88 e0       	ldi	r24, 0x08	; 8
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <__stack+0x3db>
     cd6:	80 e2       	ldi	r24, 0x20	; 32
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	43 2f       	mov	r20, r19
     cdc:	4f 93       	push	r20
     cde:	2f 93       	push	r18
     ce0:	29 2f       	mov	r18, r25
     ce2:	2f 93       	push	r18
     ce4:	8f 93       	push	r24
     ce6:	87 e4       	ldi	r24, 0x47	; 71
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	89 2f       	mov	r24, r25
     cec:	8f 93       	push	r24
     cee:	87 e4       	ldi	r24, 0x47	; 71
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	8f 93       	push	r24
     cf4:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
					break;
     d04:	98 c0       	rjmp	.+304    	; 0xe36 <__stack+0x537>
				default:
					lcd_printf("\n");
     d06:	80 e6       	ldi	r24, 0x60	; 96
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	89 2f       	mov	r24, r25
     d0c:	8f 93       	push	r24
     d0e:	80 e6       	ldi	r24, 0x60	; 96
     d10:	91 e0       	ldi	r25, 0x01	; 1
     d12:	8f 93       	push	r24
     d14:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
					// bar to end
					uint32_t bar;
					bar = backup_profile.sec - user_profile.sec;
     d1c:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     d20:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     d24:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     d28:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     d2c:	f9 01       	movw	r30, r18
     d2e:	e8 1b       	sub	r30, r24
     d30:	f9 0b       	sbc	r31, r25
     d32:	cf 01       	movw	r24, r30
     d34:	cc 01       	movw	r24, r24
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	9a 83       	std	Y+2, r25	; 0x02
     d3e:	ab 83       	std	Y+3, r26	; 0x03
     d40:	bc 83       	std	Y+4, r27	; 0x04
					if (bar)	// div zero
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	ab 81       	ldd	r26, Y+3	; 0x03
     d48:	bc 81       	ldd	r27, Y+4	; 0x04
     d4a:	89 2b       	or	r24, r25
     d4c:	8a 2b       	or	r24, r26
     d4e:	8b 2b       	or	r24, r27
     d50:	09 f4       	brne	.+2      	; 0xd54 <__stack+0x455>
     d52:	4f c0       	rjmp	.+158    	; 0xdf2 <__stack+0x4f3>
					{
						bar *= 20;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	ab 81       	ldd	r26, Y+3	; 0x03
     d5a:	bc 81       	ldd	r27, Y+4	; 0x04
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	aa 1f       	adc	r26, r26
     d62:	bb 1f       	adc	r27, r27
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	aa 1f       	adc	r26, r26
     d6a:	bb 1f       	adc	r27, r27
     d6c:	9c 01       	movw	r18, r24
     d6e:	ad 01       	movw	r20, r26
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	44 1f       	adc	r20, r20
     d76:	55 1f       	adc	r21, r21
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	44 1f       	adc	r20, r20
     d7e:	55 1f       	adc	r21, r21
     d80:	82 0f       	add	r24, r18
     d82:	93 1f       	adc	r25, r19
     d84:	a4 1f       	adc	r26, r20
     d86:	b5 1f       	adc	r27, r21
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	ab 83       	std	Y+3, r26	; 0x03
     d8e:	bc 83       	std	Y+4, r27	; 0x04
						bar = bar / backup_profile.sec;
     d90:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
     d94:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
     d98:	9c 01       	movw	r18, r24
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	ab 81       	ldd	r26, Y+3	; 0x03
     da4:	bc 81       	ldd	r27, Y+4	; 0x04
     da6:	bc 01       	movw	r22, r24
     da8:	cd 01       	movw	r24, r26
     daa:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__udivmodsi4>
     dae:	da 01       	movw	r26, r20
     db0:	c9 01       	movw	r24, r18
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	ab 83       	std	Y+3, r26	; 0x03
     db8:	bc 83       	std	Y+4, r27	; 0x04
					}
					for (; bar > 0; bar--)
     dba:	1b c0       	rjmp	.+54     	; 0xdf2 <__stack+0x4f3>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
     dbc:	1f 92       	push	r1
     dbe:	89 e0       	ldi	r24, 0x09	; 9
     dc0:	8f 93       	push	r24
     dc2:	82 e6       	ldi	r24, 0x62	; 98
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	89 2f       	mov	r24, r25
     dc8:	8f 93       	push	r24
     dca:	82 e6       	ldi	r24, 0x62	; 98
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	8f 93       	push	r24
     dd0:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
					if (bar)	// div zero
					{
						bar *= 20;
						bar = bar / backup_profile.sec;
					}
					for (; bar > 0; bar--)
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	ab 81       	ldd	r26, Y+3	; 0x03
     de2:	bc 81       	ldd	r27, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	a1 09       	sbc	r26, r1
     de8:	b1 09       	sbc	r27, r1
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	ab 83       	std	Y+3, r26	; 0x03
     df0:	bc 83       	std	Y+4, r27	; 0x04
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	ab 81       	ldd	r26, Y+3	; 0x03
     df8:	bc 81       	ldd	r27, Y+4	; 0x04
     dfa:	89 2b       	or	r24, r25
     dfc:	8a 2b       	or	r24, r26
     dfe:	8b 2b       	or	r24, r27
     e00:	e9 f6       	brne	.-70     	; 0xdbc <__stack+0x4bd>
					{
						lcd_printf("%c", MENU_BAR_SYMBOL);
					}

					lcd_printf("\n%cStop", (main_menu_secelt == MAIN_MENU_SELECT_CONTOL) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e02:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <main_menu_secelt.1912>
     e06:	88 23       	and	r24, r24
     e08:	19 f4       	brne	.+6      	; 0xe10 <__stack+0x511>
     e0a:	88 e0       	ldi	r24, 0x08	; 8
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <__stack+0x515>
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	29 2f       	mov	r18, r25
     e16:	2f 93       	push	r18
     e18:	8f 93       	push	r24
     e1a:	85 e6       	ldi	r24, 0x65	; 101
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	89 2f       	mov	r24, r25
     e20:	8f 93       	push	r24
     e22:	85 e6       	ldi	r24, 0x65	; 101
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	8f 93       	push	r24
     e28:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
					break;
     e34:	00 00       	nop
			}
			break;
     e36:	15 c3       	rjmp	.+1578   	; 0x1462 <__stack+0xb63>

		case ITEM_MENU:
			lcd_printf("\f%cRychlost omylani", (item_menu_secect == ITEM_MENU_SELECT_RPM) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e38:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     e3c:	88 23       	and	r24, r24
     e3e:	19 f4       	brne	.+6      	; 0xe46 <__stack+0x547>
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <__stack+0x54b>
     e46:	80 e2       	ldi	r24, 0x20	; 32
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	29 2f       	mov	r18, r25
     e4c:	2f 93       	push	r18
     e4e:	8f 93       	push	r24
     e50:	8d e6       	ldi	r24, 0x6D	; 109
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	89 2f       	mov	r24, r25
     e56:	8f 93       	push	r24
     e58:	8d e6       	ldi	r24, 0x6D	; 109
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	8f 93       	push	r24
     e5e:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
			lcd_printf("\n%cDelka omylani", (item_menu_secect == ITEM_MENU_SELECT_TIME) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e6a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	19 f4       	brne	.+6      	; 0xe78 <__stack+0x579>
     e72:	88 e0       	ldi	r24, 0x08	; 8
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <__stack+0x57d>
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	29 2f       	mov	r18, r25
     e7e:	2f 93       	push	r18
     e80:	8f 93       	push	r24
     e82:	81 e8       	ldi	r24, 0x81	; 129
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	89 2f       	mov	r24, r25
     e88:	8f 93       	push	r24
     e8a:	81 e8       	ldi	r24, 0x81	; 129
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	8f 93       	push	r24
     e90:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
			lcd_printf("\n%cNacist profil", (item_menu_secect == ITEM_MENU_SELECT_LOAD) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     e9c:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	19 f4       	brne	.+6      	; 0xeaa <__stack+0x5ab>
     ea4:	88 e0       	ldi	r24, 0x08	; 8
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <__stack+0x5af>
     eaa:	80 e2       	ldi	r24, 0x20	; 32
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	29 2f       	mov	r18, r25
     eb0:	2f 93       	push	r18
     eb2:	8f 93       	push	r24
     eb4:	82 e9       	ldi	r24, 0x92	; 146
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	89 2f       	mov	r24, r25
     eba:	8f 93       	push	r24
     ebc:	82 e9       	ldi	r24, 0x92	; 146
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	8f 93       	push	r24
     ec2:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
			lcd_printf("\n%cUlozit profil", (item_menu_secect == ITEM_MENU_SELECT_SAVE) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE);
     ece:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <item_menu_secect.1913>
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	19 f4       	brne	.+6      	; 0xedc <__stack+0x5dd>
     ed6:	88 e0       	ldi	r24, 0x08	; 8
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <__stack+0x5e1>
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	29 2f       	mov	r18, r25
     ee2:	2f 93       	push	r18
     ee4:	8f 93       	push	r24
     ee6:	83 ea       	ldi	r24, 0xA3	; 163
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	89 2f       	mov	r24, r25
     eec:	8f 93       	push	r24
     eee:	83 ea       	ldi	r24, 0xA3	; 163
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	8f 93       	push	r24
     ef4:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
			break;
     f00:	b0 c2       	rjmp	.+1376   	; 0x1462 <__stack+0xb63>

		case RPM_MENU:
			lcd_printf("\fNastaveni otacek");
     f02:	84 eb       	ldi	r24, 0xB4	; 180
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	89 2f       	mov	r24, r25
     f08:	8f 93       	push	r24
     f0a:	84 eb       	ldi	r24, 0xB4	; 180
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	8f 93       	push	r24
     f10:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
			lcd_printf("\nza minutu");
     f18:	86 ec       	ldi	r24, 0xC6	; 198
     f1a:	91 e0       	ldi	r25, 0x01	; 1
     f1c:	89 2f       	mov	r24, r25
     f1e:	8f 93       	push	r24
     f20:	86 ec       	ldi	r24, 0xC6	; 198
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	8f 93       	push	r24
     f26:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
			lcd_printf("\nStara hodnota:%6d", user_profile.rpm);
     f2e:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
     f32:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
     f36:	29 2f       	mov	r18, r25
     f38:	2f 93       	push	r18
     f3a:	8f 93       	push	r24
     f3c:	81 ed       	ldi	r24, 0xD1	; 209
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	89 2f       	mov	r24, r25
     f42:	8f 93       	push	r24
     f44:	81 ed       	ldi	r24, 0xD1	; 209
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	8f 93       	push	r24
     f4a:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
			lcd_printf("\nNova  hodnota:%6d", backup_profile.rpm);
     f56:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <backup_profile>
     f5a:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <backup_profile+0x1>
     f5e:	29 2f       	mov	r18, r25
     f60:	2f 93       	push	r18
     f62:	8f 93       	push	r24
     f64:	84 ee       	ldi	r24, 0xE4	; 228
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	89 2f       	mov	r24, r25
     f6a:	8f 93       	push	r24
     f6c:	84 ee       	ldi	r24, 0xE4	; 228
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	8f 93       	push	r24
     f72:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
			break;
     f7e:	71 c2       	rjmp	.+1250   	; 0x1462 <__stack+0xb63>

		case TIME_MENU:
			lcd_printf("\fNastaveni delky");
     f80:	87 ef       	ldi	r24, 0xF7	; 247
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	89 2f       	mov	r24, r25
     f86:	8f 93       	push	r24
     f88:	87 ef       	ldi	r24, 0xF7	; 247
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	8f 93       	push	r24
     f8e:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
			lcd_printf("\nomylani [HH:MM]");
     f96:	88 e0       	ldi	r24, 0x08	; 8
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	89 2f       	mov	r24, r25
     f9c:	8f 93       	push	r24
     f9e:	88 e0       	ldi	r24, 0x08	; 8
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	8f 93       	push	r24
     fa4:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
			lcd_printf("\nStary cas:     %2d:%02d", user_profile.sec/3600, (user_profile.sec%3600)/60);
     fac:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     fb0:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     fb4:	20 e1       	ldi	r18, 0x10	; 16
     fb6:	3e e0       	ldi	r19, 0x0E	; 14
     fb8:	b9 01       	movw	r22, r18
     fba:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     fbe:	9c 01       	movw	r18, r24
     fc0:	a9 e8       	ldi	r26, 0x89	; 137
     fc2:	b8 e8       	ldi	r27, 0x88	; 136
     fc4:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
     fc8:	9c 01       	movw	r18, r24
     fca:	36 95       	lsr	r19
     fcc:	27 95       	ror	r18
     fce:	32 95       	swap	r19
     fd0:	22 95       	swap	r18
     fd2:	2f 70       	andi	r18, 0x0F	; 15
     fd4:	23 27       	eor	r18, r19
     fd6:	3f 70       	andi	r19, 0x0F	; 15
     fd8:	23 27       	eor	r18, r19
     fda:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <user_profile+0x2>
     fde:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <user_profile+0x3>
     fe2:	40 e1       	ldi	r20, 0x10	; 16
     fe4:	5e e0       	ldi	r21, 0x0E	; 14
     fe6:	ba 01       	movw	r22, r20
     fe8:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
     fec:	cb 01       	movw	r24, r22
     fee:	43 2f       	mov	r20, r19
     ff0:	4f 93       	push	r20
     ff2:	2f 93       	push	r18
     ff4:	29 2f       	mov	r18, r25
     ff6:	2f 93       	push	r18
     ff8:	8f 93       	push	r24
     ffa:	89 e1       	ldi	r24, 0x19	; 25
     ffc:	92 e0       	ldi	r25, 0x02	; 2
     ffe:	89 2f       	mov	r24, r25
    1000:	8f 93       	push	r24
    1002:	89 e1       	ldi	r24, 0x19	; 25
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	8f 93       	push	r24
    1008:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
			lcd_printf("\nNovy  cas:     %2d:%02d", backup_profile.sec/3600, (backup_profile.sec%3600)/60);
    1018:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
    101c:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
    1020:	20 e1       	ldi	r18, 0x10	; 16
    1022:	3e e0       	ldi	r19, 0x0E	; 14
    1024:	b9 01       	movw	r22, r18
    1026:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    102a:	9c 01       	movw	r18, r24
    102c:	a9 e8       	ldi	r26, 0x89	; 137
    102e:	b8 e8       	ldi	r27, 0x88	; 136
    1030:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    1034:	9c 01       	movw	r18, r24
    1036:	36 95       	lsr	r19
    1038:	27 95       	ror	r18
    103a:	32 95       	swap	r19
    103c:	22 95       	swap	r18
    103e:	2f 70       	andi	r18, 0x0F	; 15
    1040:	23 27       	eor	r18, r19
    1042:	3f 70       	andi	r19, 0x0F	; 15
    1044:	23 27       	eor	r18, r19
    1046:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <backup_profile+0x2>
    104a:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <backup_profile+0x3>
    104e:	40 e1       	ldi	r20, 0x10	; 16
    1050:	5e e0       	ldi	r21, 0x0E	; 14
    1052:	ba 01       	movw	r22, r20
    1054:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    1058:	cb 01       	movw	r24, r22
    105a:	43 2f       	mov	r20, r19
    105c:	4f 93       	push	r20
    105e:	2f 93       	push	r18
    1060:	29 2f       	mov	r18, r25
    1062:	2f 93       	push	r18
    1064:	8f 93       	push	r24
    1066:	82 e3       	ldi	r24, 0x32	; 50
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	89 2f       	mov	r24, r25
    106c:	8f 93       	push	r24
    106e:	82 e3       	ldi	r24, 0x32	; 50
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	8f 93       	push	r24
    1074:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
			break;
    1084:	ee c1       	rjmp	.+988    	; 0x1462 <__stack+0xb63>

		case LOAD_MENU:
			lcd_printf("\fNacteni profilu");
    1086:	8b e4       	ldi	r24, 0x4B	; 75
    1088:	92 e0       	ldi	r25, 0x02	; 2
    108a:	89 2f       	mov	r24, r25
    108c:	8f 93       	push	r24
    108e:	8b e4       	ldi	r24, 0x4B	; 75
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	8f 93       	push	r24
    1094:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    109c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    10a0:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    10a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    10a8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    10ac:	20 e1       	ldi	r18, 0x10	; 16
    10ae:	3e e0       	ldi	r19, 0x0E	; 14
    10b0:	b9 01       	movw	r22, r18
    10b2:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    10b6:	9c 01       	movw	r18, r24
    10b8:	a9 e8       	ldi	r26, 0x89	; 137
    10ba:	b8 e8       	ldi	r27, 0x88	; 136
    10bc:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    10c0:	9c 01       	movw	r18, r24
    10c2:	36 95       	lsr	r19
    10c4:	27 95       	ror	r18
    10c6:	32 95       	swap	r19
    10c8:	22 95       	swap	r18
    10ca:	2f 70       	andi	r18, 0x0F	; 15
    10cc:	23 27       	eor	r18, r19
    10ce:	3f 70       	andi	r19, 0x0F	; 15
    10d0:	23 27       	eor	r18, r19
    10d2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    10d6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    10da:	40 e1       	ldi	r20, 0x10	; 16
    10dc:	5e e0       	ldi	r21, 0x0E	; 14
    10de:	ba 01       	movw	r22, r20
    10e0:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    10e4:	cb 01       	movw	r24, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    10ec:	88 23       	and	r24, r24
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <__stack+0x7f7>
    10f0:	88 e0       	ldi	r24, 0x08	; 8
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <__stack+0x7fb>
    10f6:	80 e2       	ldi	r24, 0x20	; 32
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	6f 2f       	mov	r22, r31
    10fc:	6f 93       	push	r22
    10fe:	6e 2f       	mov	r22, r30
    1100:	6f 93       	push	r22
    1102:	63 2f       	mov	r22, r19
    1104:	6f 93       	push	r22
    1106:	2f 93       	push	r18
    1108:	25 2f       	mov	r18, r21
    110a:	2f 93       	push	r18
    110c:	24 2f       	mov	r18, r20
    110e:	2f 93       	push	r18
    1110:	29 2f       	mov	r18, r25
    1112:	2f 93       	push	r18
    1114:	8f 93       	push	r24
    1116:	8c e5       	ldi	r24, 0x5C	; 92
    1118:	92 e0       	ldi	r25, 0x02	; 2
    111a:	89 2f       	mov	r24, r25
    111c:	8f 93       	push	r24
    111e:	8c e5       	ldi	r24, 0x5C	; 92
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	8f 93       	push	r24
    1124:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    1128:	4d b7       	in	r20, 0x3d	; 61
    112a:	5e b7       	in	r21, 0x3e	; 62
    112c:	46 5f       	subi	r20, 0xF6	; 246
    112e:	5f 4f       	sbci	r21, 0xFF	; 255
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    113a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    113e:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1142:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1146:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    114a:	20 e1       	ldi	r18, 0x10	; 16
    114c:	3e e0       	ldi	r19, 0x0E	; 14
    114e:	b9 01       	movw	r22, r18
    1150:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    1154:	9c 01       	movw	r18, r24
    1156:	a9 e8       	ldi	r26, 0x89	; 137
    1158:	b8 e8       	ldi	r27, 0x88	; 136
    115a:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    115e:	9c 01       	movw	r18, r24
    1160:	36 95       	lsr	r19
    1162:	27 95       	ror	r18
    1164:	32 95       	swap	r19
    1166:	22 95       	swap	r18
    1168:	2f 70       	andi	r18, 0x0F	; 15
    116a:	23 27       	eor	r18, r19
    116c:	3f 70       	andi	r19, 0x0F	; 15
    116e:	23 27       	eor	r18, r19
    1170:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1174:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1178:	40 e1       	ldi	r20, 0x10	; 16
    117a:	5e e0       	ldi	r21, 0x0E	; 14
    117c:	ba 01       	movw	r22, r20
    117e:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    1182:	cb 01       	movw	r24, r22
    1184:	ac 01       	movw	r20, r24
    1186:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	19 f4       	brne	.+6      	; 0x1194 <__stack+0x895>
    118e:	88 e0       	ldi	r24, 0x08	; 8
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <__stack+0x899>
    1194:	80 e2       	ldi	r24, 0x20	; 32
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	6f 2f       	mov	r22, r31
    119a:	6f 93       	push	r22
    119c:	6e 2f       	mov	r22, r30
    119e:	6f 93       	push	r22
    11a0:	63 2f       	mov	r22, r19
    11a2:	6f 93       	push	r22
    11a4:	2f 93       	push	r18
    11a6:	25 2f       	mov	r18, r21
    11a8:	2f 93       	push	r18
    11aa:	24 2f       	mov	r18, r20
    11ac:	2f 93       	push	r18
    11ae:	29 2f       	mov	r18, r25
    11b0:	2f 93       	push	r18
    11b2:	8f 93       	push	r24
    11b4:	84 e7       	ldi	r24, 0x74	; 116
    11b6:	92 e0       	ldi	r25, 0x02	; 2
    11b8:	89 2f       	mov	r24, r25
    11ba:	8f 93       	push	r24
    11bc:	84 e7       	ldi	r24, 0x74	; 116
    11be:	92 e0       	ldi	r25, 0x02	; 2
    11c0:	8f 93       	push	r24
    11c2:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    11c6:	8d b7       	in	r24, 0x3d	; 61
    11c8:	9e b7       	in	r25, 0x3e	; 62
    11ca:	0a 96       	adiw	r24, 0x0a	; 10
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (load_menu_select == LOAD_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    11d6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    11da:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    11de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    11e2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    11e6:	20 e1       	ldi	r18, 0x10	; 16
    11e8:	3e e0       	ldi	r19, 0x0E	; 14
    11ea:	b9 01       	movw	r22, r18
    11ec:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    11f0:	9c 01       	movw	r18, r24
    11f2:	a9 e8       	ldi	r26, 0x89	; 137
    11f4:	b8 e8       	ldi	r27, 0x88	; 136
    11f6:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    11fa:	9c 01       	movw	r18, r24
    11fc:	36 95       	lsr	r19
    11fe:	27 95       	ror	r18
    1200:	32 95       	swap	r19
    1202:	22 95       	swap	r18
    1204:	2f 70       	andi	r18, 0x0F	; 15
    1206:	23 27       	eor	r18, r19
    1208:	3f 70       	andi	r19, 0x0F	; 15
    120a:	23 27       	eor	r18, r19
    120c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    1210:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    1214:	40 e1       	ldi	r20, 0x10	; 16
    1216:	5e e0       	ldi	r21, 0x0E	; 14
    1218:	ba 01       	movw	r22, r20
    121a:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    121e:	cb 01       	movw	r24, r22
    1220:	ac 01       	movw	r20, r24
    1222:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <load_menu_select.1914>
    1226:	82 30       	cpi	r24, 0x02	; 2
    1228:	19 f4       	brne	.+6      	; 0x1230 <__stack+0x931>
    122a:	88 e0       	ldi	r24, 0x08	; 8
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <__stack+0x935>
    1230:	80 e2       	ldi	r24, 0x20	; 32
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	6f 2f       	mov	r22, r31
    1236:	6f 93       	push	r22
    1238:	6e 2f       	mov	r22, r30
    123a:	6f 93       	push	r22
    123c:	63 2f       	mov	r22, r19
    123e:	6f 93       	push	r22
    1240:	2f 93       	push	r18
    1242:	25 2f       	mov	r18, r21
    1244:	2f 93       	push	r18
    1246:	24 2f       	mov	r18, r20
    1248:	2f 93       	push	r18
    124a:	29 2f       	mov	r18, r25
    124c:	2f 93       	push	r18
    124e:	8f 93       	push	r24
    1250:	8c e8       	ldi	r24, 0x8C	; 140
    1252:	92 e0       	ldi	r25, 0x02	; 2
    1254:	89 2f       	mov	r24, r25
    1256:	8f 93       	push	r24
    1258:	8c e8       	ldi	r24, 0x8C	; 140
    125a:	92 e0       	ldi	r25, 0x02	; 2
    125c:	8f 93       	push	r24
    125e:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    1262:	ed b7       	in	r30, 0x3d	; 61
    1264:	fe b7       	in	r31, 0x3e	; 62
    1266:	3a 96       	adiw	r30, 0x0a	; 10
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
			break;
    1272:	f7 c0       	rjmp	.+494    	; 0x1462 <__stack+0xb63>

		case SAVE_MENU:
			lcd_printf("\fUlozeni profilu");
    1274:	84 ea       	ldi	r24, 0xA4	; 164
    1276:	92 e0       	ldi	r25, 0x02	; 2
    1278:	89 2f       	mov	r24, r25
    127a:	8f 93       	push	r24
    127c:	84 ea       	ldi	r24, 0xA4	; 164
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	8f 93       	push	r24
    1282:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
			lcd_printf("\n%c1. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE1) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[0].sec/3600, (eeprom_data.profile[0].sec%3600)/60, eeprom_data.profile[0].rpm);
    128a:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <__data_start+0x1>
    128e:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <__data_start+0x2>
    1292:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    1296:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    129a:	20 e1       	ldi	r18, 0x10	; 16
    129c:	3e e0       	ldi	r19, 0x0E	; 14
    129e:	b9 01       	movw	r22, r18
    12a0:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    12a4:	9c 01       	movw	r18, r24
    12a6:	a9 e8       	ldi	r26, 0x89	; 137
    12a8:	b8 e8       	ldi	r27, 0x88	; 136
    12aa:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    12ae:	9c 01       	movw	r18, r24
    12b0:	36 95       	lsr	r19
    12b2:	27 95       	ror	r18
    12b4:	32 95       	swap	r19
    12b6:	22 95       	swap	r18
    12b8:	2f 70       	andi	r18, 0x0F	; 15
    12ba:	23 27       	eor	r18, r19
    12bc:	3f 70       	andi	r19, 0x0F	; 15
    12be:	23 27       	eor	r18, r19
    12c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_start+0x3>
    12c4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_start+0x4>
    12c8:	40 e1       	ldi	r20, 0x10	; 16
    12ca:	5e e0       	ldi	r21, 0x0E	; 14
    12cc:	ba 01       	movw	r22, r20
    12ce:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    12d2:	cb 01       	movw	r24, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    12da:	88 23       	and	r24, r24
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <__stack+0x9e5>
    12de:	88 e0       	ldi	r24, 0x08	; 8
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <__stack+0x9e9>
    12e4:	80 e2       	ldi	r24, 0x20	; 32
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	6f 2f       	mov	r22, r31
    12ea:	6f 93       	push	r22
    12ec:	6e 2f       	mov	r22, r30
    12ee:	6f 93       	push	r22
    12f0:	63 2f       	mov	r22, r19
    12f2:	6f 93       	push	r22
    12f4:	2f 93       	push	r18
    12f6:	25 2f       	mov	r18, r21
    12f8:	2f 93       	push	r18
    12fa:	24 2f       	mov	r18, r20
    12fc:	2f 93       	push	r18
    12fe:	29 2f       	mov	r18, r25
    1300:	2f 93       	push	r18
    1302:	8f 93       	push	r24
    1304:	8c e5       	ldi	r24, 0x5C	; 92
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	89 2f       	mov	r24, r25
    130a:	8f 93       	push	r24
    130c:	8c e5       	ldi	r24, 0x5C	; 92
    130e:	92 e0       	ldi	r25, 0x02	; 2
    1310:	8f 93       	push	r24
    1312:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    1316:	4d b7       	in	r20, 0x3d	; 61
    1318:	5e b7       	in	r21, 0x3e	; 62
    131a:	46 5f       	subi	r20, 0xF6	; 246
    131c:	5f 4f       	sbci	r21, 0xFF	; 255
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c2. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE2) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[1].sec/3600, (eeprom_data.profile[1].sec%3600)/60, eeprom_data.profile[1].rpm);
    1328:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <__data_start+0x5>
    132c:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <__data_start+0x6>
    1330:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1334:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1338:	20 e1       	ldi	r18, 0x10	; 16
    133a:	3e e0       	ldi	r19, 0x0E	; 14
    133c:	b9 01       	movw	r22, r18
    133e:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    1342:	9c 01       	movw	r18, r24
    1344:	a9 e8       	ldi	r26, 0x89	; 137
    1346:	b8 e8       	ldi	r27, 0x88	; 136
    1348:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    134c:	9c 01       	movw	r18, r24
    134e:	36 95       	lsr	r19
    1350:	27 95       	ror	r18
    1352:	32 95       	swap	r19
    1354:	22 95       	swap	r18
    1356:	2f 70       	andi	r18, 0x0F	; 15
    1358:	23 27       	eor	r18, r19
    135a:	3f 70       	andi	r19, 0x0F	; 15
    135c:	23 27       	eor	r18, r19
    135e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_start+0x7>
    1362:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <__data_start+0x8>
    1366:	40 e1       	ldi	r20, 0x10	; 16
    1368:	5e e0       	ldi	r21, 0x0E	; 14
    136a:	ba 01       	movw	r22, r20
    136c:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    1370:	cb 01       	movw	r24, r22
    1372:	ac 01       	movw	r20, r24
    1374:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	19 f4       	brne	.+6      	; 0x1382 <__stack+0xa83>
    137c:	88 e0       	ldi	r24, 0x08	; 8
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <__stack+0xa87>
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	6f 2f       	mov	r22, r31
    1388:	6f 93       	push	r22
    138a:	6e 2f       	mov	r22, r30
    138c:	6f 93       	push	r22
    138e:	63 2f       	mov	r22, r19
    1390:	6f 93       	push	r22
    1392:	2f 93       	push	r18
    1394:	25 2f       	mov	r18, r21
    1396:	2f 93       	push	r18
    1398:	24 2f       	mov	r18, r20
    139a:	2f 93       	push	r18
    139c:	29 2f       	mov	r18, r25
    139e:	2f 93       	push	r18
    13a0:	8f 93       	push	r24
    13a2:	84 e7       	ldi	r24, 0x74	; 116
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	89 2f       	mov	r24, r25
    13a8:	8f 93       	push	r24
    13aa:	84 e7       	ldi	r24, 0x74	; 116
    13ac:	92 e0       	ldi	r25, 0x02	; 2
    13ae:	8f 93       	push	r24
    13b0:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    13b4:	8d b7       	in	r24, 0x3d	; 61
    13b6:	9e b7       	in	r25, 0x3e	; 62
    13b8:	0a 96       	adiw	r24, 0x0a	; 10
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	cd bf       	out	0x3d, r28	; 61
			lcd_printf("\n%c3. %2dh %2dm %4dot/m", (save_menu_select == SAVE_MENU_SELECT_PROFILE3) ?  MENU_SYMBOL_SELECT : MENU_SYMBOL_SPACE, eeprom_data.profile[2].sec/3600, (eeprom_data.profile[2].sec%3600)/60, eeprom_data.profile[2].rpm);
    13c4:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <__data_start+0x9>
    13c8:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <__data_start+0xa>
    13cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    13d0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    13d4:	20 e1       	ldi	r18, 0x10	; 16
    13d6:	3e e0       	ldi	r19, 0x0E	; 14
    13d8:	b9 01       	movw	r22, r18
    13da:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    13de:	9c 01       	movw	r18, r24
    13e0:	a9 e8       	ldi	r26, 0x89	; 137
    13e2:	b8 e8       	ldi	r27, 0x88	; 136
    13e4:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    13e8:	9c 01       	movw	r18, r24
    13ea:	36 95       	lsr	r19
    13ec:	27 95       	ror	r18
    13ee:	32 95       	swap	r19
    13f0:	22 95       	swap	r18
    13f2:	2f 70       	andi	r18, 0x0F	; 15
    13f4:	23 27       	eor	r18, r19
    13f6:	3f 70       	andi	r19, 0x0F	; 15
    13f8:	23 27       	eor	r18, r19
    13fa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__data_start+0xb>
    13fe:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_start+0xc>
    1402:	40 e1       	ldi	r20, 0x10	; 16
    1404:	5e e0       	ldi	r21, 0x0E	; 14
    1406:	ba 01       	movw	r22, r20
    1408:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    140c:	cb 01       	movw	r24, r22
    140e:	ac 01       	movw	r20, r24
    1410:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <save_menu_select.1915>
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	19 f4       	brne	.+6      	; 0x141e <__stack+0xb1f>
    1418:	88 e0       	ldi	r24, 0x08	; 8
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <__stack+0xb23>
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	6f 2f       	mov	r22, r31
    1424:	6f 93       	push	r22
    1426:	6e 2f       	mov	r22, r30
    1428:	6f 93       	push	r22
    142a:	63 2f       	mov	r22, r19
    142c:	6f 93       	push	r22
    142e:	2f 93       	push	r18
    1430:	25 2f       	mov	r18, r21
    1432:	2f 93       	push	r18
    1434:	24 2f       	mov	r18, r20
    1436:	2f 93       	push	r18
    1438:	29 2f       	mov	r18, r25
    143a:	2f 93       	push	r18
    143c:	8f 93       	push	r24
    143e:	8c e8       	ldi	r24, 0x8C	; 140
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	89 2f       	mov	r24, r25
    1444:	8f 93       	push	r24
    1446:	8c e8       	ldi	r24, 0x8C	; 140
    1448:	92 e0       	ldi	r25, 0x02	; 2
    144a:	8f 93       	push	r24
    144c:	0e 94 12 11 	call	0x2224	; 0x2224 <lcd_printf>
    1450:	ed b7       	in	r30, 0x3d	; 61
    1452:	fe b7       	in	r31, 0x3e	; 62
    1454:	3a 96       	adiw	r30, 0x0a	; 10
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
			break;
    1460:	00 00       	nop

		default:
		;
	}
}
    1462:	00 00       	nop
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <lcd_init>:
#include "wyk_lcd.h"

// inicializuje lcd
void lcd_init(void)
{
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	2e 97       	sbiw	r28, 0x0e	; 14
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
	LCD_RS_DDR |= LCD_RS;
    1488:	8a e2       	ldi	r24, 0x2A	; 42
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	2a e2       	ldi	r18, 0x2A	; 42
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	f9 01       	movw	r30, r18
    1492:	20 81       	ld	r18, Z
    1494:	21 60       	ori	r18, 0x01	; 1
    1496:	fc 01       	movw	r30, r24
    1498:	20 83       	st	Z, r18
	LCD_RS0;
    149a:	8b e2       	ldi	r24, 0x2B	; 43
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	2b e2       	ldi	r18, 0x2B	; 43
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	f9 01       	movw	r30, r18
    14a4:	20 81       	ld	r18, Z
    14a6:	2e 7f       	andi	r18, 0xFE	; 254
    14a8:	fc 01       	movw	r30, r24
    14aa:	20 83       	st	Z, r18

	LCD_EN_DDR |= LCD_EN;
    14ac:	87 e2       	ldi	r24, 0x27	; 39
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	27 e2       	ldi	r18, 0x27	; 39
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	f9 01       	movw	r30, r18
    14b6:	20 81       	ld	r18, Z
    14b8:	20 61       	ori	r18, 0x10	; 16
    14ba:	fc 01       	movw	r30, r24
    14bc:	20 83       	st	Z, r18
	LCD_EN0;
    14be:	88 e2       	ldi	r24, 0x28	; 40
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	28 e2       	ldi	r18, 0x28	; 40
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	f9 01       	movw	r30, r18
    14c8:	20 81       	ld	r18, Z
    14ca:	2f 7e       	andi	r18, 0xEF	; 239
    14cc:	fc 01       	movw	r30, r24
    14ce:	20 83       	st	Z, r18

	LCD_D7_DDR |= LCD_D7;
    14d0:	87 e2       	ldi	r24, 0x27	; 39
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	27 e2       	ldi	r18, 0x27	; 39
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	f9 01       	movw	r30, r18
    14da:	20 81       	ld	r18, Z
    14dc:	21 60       	ori	r18, 0x01	; 1
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18
	LCD_D6_DDR |= LCD_D6;
    14e2:	87 e2       	ldi	r24, 0x27	; 39
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	27 e2       	ldi	r18, 0x27	; 39
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	f9 01       	movw	r30, r18
    14ec:	20 81       	ld	r18, Z
    14ee:	22 60       	ori	r18, 0x02	; 2
    14f0:	fc 01       	movw	r30, r24
    14f2:	20 83       	st	Z, r18
	LCD_D5_DDR |= LCD_D5;
    14f4:	87 e2       	ldi	r24, 0x27	; 39
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	27 e2       	ldi	r18, 0x27	; 39
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	f9 01       	movw	r30, r18
    14fe:	20 81       	ld	r18, Z
    1500:	24 60       	ori	r18, 0x04	; 4
    1502:	fc 01       	movw	r30, r24
    1504:	20 83       	st	Z, r18
	LCD_D4_DDR |= LCD_D4;
    1506:	87 e2       	ldi	r24, 0x27	; 39
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	27 e2       	ldi	r18, 0x27	; 39
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	f9 01       	movw	r30, r18
    1510:	20 81       	ld	r18, Z
    1512:	28 60       	ori	r18, 0x08	; 8
    1514:	fc 01       	movw	r30, r24
    1516:	20 83       	st	Z, r18

	LCD_D7_0;
    1518:	88 e2       	ldi	r24, 0x28	; 40
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	28 e2       	ldi	r18, 0x28	; 40
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	f9 01       	movw	r30, r18
    1522:	20 81       	ld	r18, Z
    1524:	2e 7f       	andi	r18, 0xFE	; 254
    1526:	fc 01       	movw	r30, r24
    1528:	20 83       	st	Z, r18
	LCD_D6_0;
    152a:	88 e2       	ldi	r24, 0x28	; 40
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	28 e2       	ldi	r18, 0x28	; 40
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	f9 01       	movw	r30, r18
    1534:	20 81       	ld	r18, Z
    1536:	2d 7f       	andi	r18, 0xFD	; 253
    1538:	fc 01       	movw	r30, r24
    153a:	20 83       	st	Z, r18
	LCD_D5_0;
    153c:	88 e2       	ldi	r24, 0x28	; 40
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	28 e2       	ldi	r18, 0x28	; 40
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	f9 01       	movw	r30, r18
    1546:	20 81       	ld	r18, Z
    1548:	2b 7f       	andi	r18, 0xFB	; 251
    154a:	fc 01       	movw	r30, r24
    154c:	20 83       	st	Z, r18
	LCD_D4_0;
    154e:	88 e2       	ldi	r24, 0x28	; 40
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	28 e2       	ldi	r18, 0x28	; 40
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	f9 01       	movw	r30, r18
    1558:	20 81       	ld	r18, Z
    155a:	27 7f       	andi	r18, 0xF7	; 247
    155c:	fc 01       	movw	r30, r24
    155e:	20 83       	st	Z, r18


	lcd_set_nibble(LCD_CMD_INIT>>4);
    1560:	82 e0       	ldi	r24, 0x02	; 2
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 81 0b 	call	0x1702	; 0x1702 <lcd_set_nibble>
	LCD_EN1;
    1568:	88 e2       	ldi	r24, 0x28	; 40
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	28 e2       	ldi	r18, 0x28	; 40
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	f9 01       	movw	r30, r18
    1572:	20 81       	ld	r18, Z
    1574:	20 61       	ori	r18, 0x10	; 16
    1576:	fc 01       	movw	r30, r24
    1578:	20 83       	st	Z, r18
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e0       	ldi	r26, 0x00	; 0
    1580:	b0 e4       	ldi	r27, 0x40	; 64
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	ab 83       	std	Y+3, r26	; 0x03
    1588:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e8       	ldi	r19, 0x80	; 128
    158e:	4b eb       	ldi	r20, 0xBB	; 187
    1590:	55 e4       	ldi	r21, 0x45	; 69
    1592:	69 81       	ldd	r22, Y+1	; 0x01
    1594:	7a 81       	ldd	r23, Y+2	; 0x02
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	af 83       	std	Y+7, r26	; 0x07
    15a8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e8       	ldi	r20, 0x80	; 128
    15b0:	5f e3       	ldi	r21, 0x3F	; 63
    15b2:	6d 81       	ldd	r22, Y+5	; 0x05
    15b4:	7e 81       	ldd	r23, Y+6	; 0x06
    15b6:	8f 81       	ldd	r24, Y+7	; 0x07
    15b8:	98 85       	ldd	r25, Y+8	; 0x08
    15ba:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    15be:	88 23       	and	r24, r24
    15c0:	2c f4       	brge	.+10     	; 0x15cc <lcd_init+0x158>
		__ticks = 1;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9a 87       	std	Y+10, r25	; 0x0a
    15c8:	89 87       	std	Y+9, r24	; 0x09
    15ca:	3f c0       	rjmp	.+126    	; 0x164a <lcd_init+0x1d6>
	else if (__tmp > 65535)
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	3f ef       	ldi	r19, 0xFF	; 255
    15d0:	4f e7       	ldi	r20, 0x7F	; 127
    15d2:	57 e4       	ldi	r21, 0x47	; 71
    15d4:	6d 81       	ldd	r22, Y+5	; 0x05
    15d6:	7e 81       	ldd	r23, Y+6	; 0x06
    15d8:	8f 81       	ldd	r24, Y+7	; 0x07
    15da:	98 85       	ldd	r25, Y+8	; 0x08
    15dc:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    15e0:	18 16       	cp	r1, r24
    15e2:	4c f5       	brge	.+82     	; 0x1636 <lcd_init+0x1c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e2       	ldi	r20, 0x20	; 32
    15ea:	51 e4       	ldi	r21, 0x41	; 65
    15ec:	69 81       	ldd	r22, Y+1	; 0x01
    15ee:	7a 81       	ldd	r23, Y+2	; 0x02
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	9a 87       	std	Y+10, r25	; 0x0a
    160a:	89 87       	std	Y+9, r24	; 0x09
    160c:	0f c0       	rjmp	.+30     	; 0x162c <lcd_init+0x1b8>
    160e:	88 e5       	ldi	r24, 0x58	; 88
    1610:	92 e0       	ldi	r25, 0x02	; 2
    1612:	9c 87       	std	Y+12, r25	; 0x0c
    1614:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1616:	8b 85       	ldd	r24, Y+11	; 0x0b
    1618:	9c 85       	ldd	r25, Y+12	; 0x0c
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	f1 f7       	brne	.-4      	; 0x161a <lcd_init+0x1a6>
    161e:	9c 87       	std	Y+12, r25	; 0x0c
    1620:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	9a 87       	std	Y+10, r25	; 0x0a
    162a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162c:	89 85       	ldd	r24, Y+9	; 0x09
    162e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1630:	89 2b       	or	r24, r25
    1632:	69 f7       	brne	.-38     	; 0x160e <lcd_init+0x19a>
    1634:	14 c0       	rjmp	.+40     	; 0x165e <lcd_init+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1636:	6d 81       	ldd	r22, Y+5	; 0x05
    1638:	7e 81       	ldd	r23, Y+6	; 0x06
    163a:	8f 81       	ldd	r24, Y+7	; 0x07
    163c:	98 85       	ldd	r25, Y+8	; 0x08
    163e:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	9a 87       	std	Y+10, r25	; 0x0a
    1648:	89 87       	std	Y+9, r24	; 0x09
    164a:	89 85       	ldd	r24, Y+9	; 0x09
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	9e 87       	std	Y+14, r25	; 0x0e
    1650:	8d 87       	std	Y+13, r24	; 0x0d
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <lcd_init+0x1e2>
    165a:	9e 87       	std	Y+14, r25	; 0x0e
    165c:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(2);
	LCD_EN0;
    165e:	88 e2       	ldi	r24, 0x28	; 40
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	28 e2       	ldi	r18, 0x28	; 40
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	f9 01       	movw	r30, r18
    1668:	20 81       	ld	r18, Z
    166a:	2f 7e       	andi	r18, 0xEF	; 239
    166c:	fc 01       	movw	r30, r24
    166e:	20 83       	st	Z, r18
	lcd_cmd(LCD_CMD_INIT);
    1670:	88 e2       	ldi	r24, 0x28	; 40
    1672:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURS);
    1676:	8c e0       	ldi	r24, 0x0C	; 12
    1678:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
	lcd_cmd(LCD_CMD_CLR);
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>

	// přidání vlastních znaků
	lcd_cmd(LCD_CMD_W_CGRAM);
    1682:	80 e4       	ldi	r24, 0x40	; 64
    1684:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
	// trojuhelnik
	lcd_put(0b00010000);
    1688:	80 e1       	ldi	r24, 0x10	; 16
    168a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011000);
    168e:	88 e1       	ldi	r24, 0x18	; 24
    1690:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011100);
    1694:	8c e1       	ldi	r24, 0x1C	; 28
    1696:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011110);
    169a:	8e e1       	ldi	r24, 0x1E	; 30
    169c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011100);
    16a0:	8c e1       	ldi	r24, 0x1C	; 28
    16a2:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011000);
    16a6:	88 e1       	ldi	r24, 0x18	; 24
    16a8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00010000);
    16ac:	80 e1       	ldi	r24, 0x10	; 16
    16ae:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00000000);
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	// bar
	lcd_put(0b00000000);
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00000000);
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011111);
    16c4:	8f e1       	ldi	r24, 0x1F	; 31
    16c6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011111);
    16ca:	8f e1       	ldi	r24, 0x1F	; 31
    16cc:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011111);
    16d0:	8f e1       	ldi	r24, 0x1F	; 31
    16d2:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00011111);
    16d6:	8f e1       	ldi	r24, 0x1F	; 31
    16d8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00000000);
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	lcd_put(0b00000000);
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	
	// přepnutí na zápis do zobrazovací paměti
	lcd_cmd(LCD_CMD_W_DDRAM);
    16e8:	80 e8       	ldi	r24, 0x80	; 128
    16ea:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
}
    16ee:	00 00       	nop
    16f0:	2e 96       	adiw	r28, 0x0e	; 14
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	08 95       	ret

00001702 <lcd_set_nibble>:

// posílat napřed msn a pak lsn
void lcd_set_nibble(uint8_t nibble)
{
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	1f 92       	push	r1
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	89 83       	std	Y+1, r24	; 0x01
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	88 70       	andi	r24, 0x08	; 8
    1716:	99 27       	eor	r25, r25
    1718:	89 2b       	or	r24, r25
    171a:	51 f0       	breq	.+20     	; 0x1730 <lcd_set_nibble+0x2e>
    171c:	88 e2       	ldi	r24, 0x28	; 40
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	28 e2       	ldi	r18, 0x28	; 40
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	f9 01       	movw	r30, r18
    1726:	20 81       	ld	r18, Z
    1728:	21 60       	ori	r18, 0x01	; 1
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <lcd_set_nibble+0x40>
    1730:	88 e2       	ldi	r24, 0x28	; 40
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	28 e2       	ldi	r18, 0x28	; 40
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	f9 01       	movw	r30, r18
    173a:	20 81       	ld	r18, Z
    173c:	2e 7f       	andi	r18, 0xFE	; 254
    173e:	fc 01       	movw	r30, r24
    1740:	20 83       	st	Z, r18
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	84 70       	andi	r24, 0x04	; 4
    174a:	99 27       	eor	r25, r25
    174c:	89 2b       	or	r24, r25
    174e:	51 f0       	breq	.+20     	; 0x1764 <lcd_set_nibble+0x62>
    1750:	88 e2       	ldi	r24, 0x28	; 40
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	28 e2       	ldi	r18, 0x28	; 40
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	f9 01       	movw	r30, r18
    175a:	20 81       	ld	r18, Z
    175c:	22 60       	ori	r18, 0x02	; 2
    175e:	fc 01       	movw	r30, r24
    1760:	20 83       	st	Z, r18
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <lcd_set_nibble+0x74>
    1764:	88 e2       	ldi	r24, 0x28	; 40
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	28 e2       	ldi	r18, 0x28	; 40
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	f9 01       	movw	r30, r18
    176e:	20 81       	ld	r18, Z
    1770:	2d 7f       	andi	r18, 0xFD	; 253
    1772:	fc 01       	movw	r30, r24
    1774:	20 83       	st	Z, r18
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	88 2f       	mov	r24, r24
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	82 70       	andi	r24, 0x02	; 2
    177e:	99 27       	eor	r25, r25
    1780:	89 2b       	or	r24, r25
    1782:	51 f0       	breq	.+20     	; 0x1798 <lcd_set_nibble+0x96>
    1784:	88 e2       	ldi	r24, 0x28	; 40
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	28 e2       	ldi	r18, 0x28	; 40
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	f9 01       	movw	r30, r18
    178e:	20 81       	ld	r18, Z
    1790:	24 60       	ori	r18, 0x04	; 4
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18
    1796:	09 c0       	rjmp	.+18     	; 0x17aa <lcd_set_nibble+0xa8>
    1798:	88 e2       	ldi	r24, 0x28	; 40
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	28 e2       	ldi	r18, 0x28	; 40
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	f9 01       	movw	r30, r18
    17a2:	20 81       	ld	r18, Z
    17a4:	2b 7f       	andi	r18, 0xFB	; 251
    17a6:	fc 01       	movw	r30, r24
    17a8:	20 83       	st	Z, r18
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	81 70       	andi	r24, 0x01	; 1
    17b2:	99 27       	eor	r25, r25
    17b4:	89 2b       	or	r24, r25
    17b6:	51 f0       	breq	.+20     	; 0x17cc <lcd_set_nibble+0xca>
    17b8:	88 e2       	ldi	r24, 0x28	; 40
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	28 e2       	ldi	r18, 0x28	; 40
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	f9 01       	movw	r30, r18
    17c2:	20 81       	ld	r18, Z
    17c4:	28 60       	ori	r18, 0x08	; 8
    17c6:	fc 01       	movw	r30, r24
    17c8:	20 83       	st	Z, r18
}
    17ca:	09 c0       	rjmp	.+18     	; 0x17de <lcd_set_nibble+0xdc>
void lcd_set_nibble(uint8_t nibble)
{
	if (nibble & 0x08) LCD_D7_1; else LCD_D7_0;
	if (nibble & 0x04) LCD_D6_1; else LCD_D6_0;
	if (nibble & 0x02) LCD_D5_1; else LCD_D5_0;
	if (nibble & 0x01) LCD_D4_1; else LCD_D4_0;
    17cc:	88 e2       	ldi	r24, 0x28	; 40
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	28 e2       	ldi	r18, 0x28	; 40
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	f9 01       	movw	r30, r18
    17d6:	20 81       	ld	r18, Z
    17d8:	27 7f       	andi	r18, 0xF7	; 247
    17da:	fc 01       	movw	r30, r24
    17dc:	20 83       	st	Z, r18
}
    17de:	00 00       	nop
    17e0:	0f 90       	pop	r0
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <lcd_cmd>:

// pošle lcd instrukci
void lcd_cmd(uint8_t cmd)
{
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	6d 97       	sbiw	r28, 0x1d	; 29
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_set_nibble(cmd>>4);
    17fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1800:	82 95       	swap	r24
    1802:	8f 70       	andi	r24, 0x0F	; 15
    1804:	0e 94 81 0b 	call	0x1702	; 0x1702 <lcd_set_nibble>
	LCD_EN1;
    1808:	88 e2       	ldi	r24, 0x28	; 40
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	28 e2       	ldi	r18, 0x28	; 40
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	f9 01       	movw	r30, r18
    1812:	20 81       	ld	r18, Z
    1814:	20 61       	ori	r18, 0x10	; 16
    1816:	fc 01       	movw	r30, r24
    1818:	20 83       	st	Z, r18
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	a0 e4       	ldi	r26, 0x40	; 64
    1820:	b0 e4       	ldi	r27, 0x40	; 64
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	ab 83       	std	Y+3, r26	; 0x03
    1828:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e8       	ldi	r19, 0x80	; 128
    182e:	4b eb       	ldi	r20, 0xBB	; 187
    1830:	55 e4       	ldi	r21, 0x45	; 69
    1832:	69 81       	ldd	r22, Y+1	; 0x01
    1834:	7a 81       	ldd	r23, Y+2	; 0x02
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	8b 8b       	std	Y+19, r24	; 0x13
    1844:	9c 8b       	std	Y+20, r25	; 0x14
    1846:	ad 8b       	std	Y+21, r26	; 0x15
    1848:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	6b 89       	ldd	r22, Y+19	; 0x13
    1854:	7c 89       	ldd	r23, Y+20	; 0x14
    1856:	8d 89       	ldd	r24, Y+21	; 0x15
    1858:	9e 89       	ldd	r25, Y+22	; 0x16
    185a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    185e:	88 23       	and	r24, r24
    1860:	2c f4       	brge	.+10     	; 0x186c <lcd_cmd+0x84>
		__ticks = 1;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	98 8f       	std	Y+24, r25	; 0x18
    1868:	8f 8b       	std	Y+23, r24	; 0x17
    186a:	3f c0       	rjmp	.+126    	; 0x18ea <lcd_cmd+0x102>
	else if (__tmp > 65535)
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	4f e7       	ldi	r20, 0x7F	; 127
    1872:	57 e4       	ldi	r21, 0x47	; 71
    1874:	6b 89       	ldd	r22, Y+19	; 0x13
    1876:	7c 89       	ldd	r23, Y+20	; 0x14
    1878:	8d 89       	ldd	r24, Y+21	; 0x15
    187a:	9e 89       	ldd	r25, Y+22	; 0x16
    187c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    1880:	18 16       	cp	r1, r24
    1882:	4c f5       	brge	.+82     	; 0x18d6 <lcd_cmd+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	69 81       	ldd	r22, Y+1	; 0x01
    188e:	7a 81       	ldd	r23, Y+2	; 0x02
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	98 8f       	std	Y+24, r25	; 0x18
    18aa:	8f 8b       	std	Y+23, r24	; 0x17
    18ac:	0f c0       	rjmp	.+30     	; 0x18cc <lcd_cmd+0xe4>
    18ae:	88 e5       	ldi	r24, 0x58	; 88
    18b0:	92 e0       	ldi	r25, 0x02	; 2
    18b2:	9a 8f       	std	Y+26, r25	; 0x1a
    18b4:	89 8f       	std	Y+25, r24	; 0x19
    18b6:	89 8d       	ldd	r24, Y+25	; 0x19
    18b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <lcd_cmd+0xd2>
    18be:	9a 8f       	std	Y+26, r25	; 0x1a
    18c0:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	98 8f       	std	Y+24, r25	; 0x18
    18ca:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18cc:	8f 89       	ldd	r24, Y+23	; 0x17
    18ce:	98 8d       	ldd	r25, Y+24	; 0x18
    18d0:	89 2b       	or	r24, r25
    18d2:	69 f7       	brne	.-38     	; 0x18ae <lcd_cmd+0xc6>
    18d4:	14 c0       	rjmp	.+40     	; 0x18fe <lcd_cmd+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d6:	6b 89       	ldd	r22, Y+19	; 0x13
    18d8:	7c 89       	ldd	r23, Y+20	; 0x14
    18da:	8d 89       	ldd	r24, Y+21	; 0x15
    18dc:	9e 89       	ldd	r25, Y+22	; 0x16
    18de:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	98 8f       	std	Y+24, r25	; 0x18
    18e8:	8f 8b       	std	Y+23, r24	; 0x17
    18ea:	8f 89       	ldd	r24, Y+23	; 0x17
    18ec:	98 8d       	ldd	r25, Y+24	; 0x18
    18ee:	9c 8f       	std	Y+28, r25	; 0x1c
    18f0:	8b 8f       	std	Y+27, r24	; 0x1b
    18f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f6:	01 97       	sbiw	r24, 0x01	; 1
    18f8:	f1 f7       	brne	.-4      	; 0x18f6 <lcd_cmd+0x10e>
    18fa:	9c 8f       	std	Y+28, r25	; 0x1c
    18fc:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(3);
	LCD_EN0;	
    18fe:	88 e2       	ldi	r24, 0x28	; 40
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	28 e2       	ldi	r18, 0x28	; 40
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	f9 01       	movw	r30, r18
    1908:	20 81       	ld	r18, Z
    190a:	2f 7e       	andi	r18, 0xEF	; 239
    190c:	fc 01       	movw	r30, r24
    190e:	20 83       	st	Z, r18
	lcd_set_nibble(cmd);
    1910:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1912:	0e 94 81 0b 	call	0x1702	; 0x1702 <lcd_set_nibble>
	LCD_EN1;
    1916:	88 e2       	ldi	r24, 0x28	; 40
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	28 e2       	ldi	r18, 0x28	; 40
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	f9 01       	movw	r30, r18
    1920:	20 81       	ld	r18, Z
    1922:	20 61       	ori	r18, 0x10	; 16
    1924:	fc 01       	movw	r30, r24
    1926:	20 83       	st	Z, r18
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a0 e4       	ldi	r26, 0x40	; 64
    192e:	b0 e4       	ldi	r27, 0x40	; 64
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	af 83       	std	Y+7, r26	; 0x07
    1936:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e8       	ldi	r19, 0x80	; 128
    193c:	4b eb       	ldi	r20, 0xBB	; 187
    193e:	55 e4       	ldi	r21, 0x45	; 69
    1940:	6d 81       	ldd	r22, Y+5	; 0x05
    1942:	7e 81       	ldd	r23, Y+6	; 0x06
    1944:	8f 81       	ldd	r24, Y+7	; 0x07
    1946:	98 85       	ldd	r25, Y+8	; 0x08
    1948:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	89 87       	std	Y+9, r24	; 0x09
    1952:	9a 87       	std	Y+10, r25	; 0x0a
    1954:	ab 87       	std	Y+11, r26	; 0x0b
    1956:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f e3       	ldi	r21, 0x3F	; 63
    1960:	69 85       	ldd	r22, Y+9	; 0x09
    1962:	7a 85       	ldd	r23, Y+10	; 0x0a
    1964:	8b 85       	ldd	r24, Y+11	; 0x0b
    1966:	9c 85       	ldd	r25, Y+12	; 0x0c
    1968:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    196c:	88 23       	and	r24, r24
    196e:	2c f4       	brge	.+10     	; 0x197a <lcd_cmd+0x192>
		__ticks = 1;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9e 87       	std	Y+14, r25	; 0x0e
    1976:	8d 87       	std	Y+13, r24	; 0x0d
    1978:	3f c0       	rjmp	.+126    	; 0x19f8 <lcd_cmd+0x210>
	else if (__tmp > 65535)
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	3f ef       	ldi	r19, 0xFF	; 255
    197e:	4f e7       	ldi	r20, 0x7F	; 127
    1980:	57 e4       	ldi	r21, 0x47	; 71
    1982:	69 85       	ldd	r22, Y+9	; 0x09
    1984:	7a 85       	ldd	r23, Y+10	; 0x0a
    1986:	8b 85       	ldd	r24, Y+11	; 0x0b
    1988:	9c 85       	ldd	r25, Y+12	; 0x0c
    198a:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    198e:	18 16       	cp	r1, r24
    1990:	4c f5       	brge	.+82     	; 0x19e4 <lcd_cmd+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e2       	ldi	r20, 0x20	; 32
    1998:	51 e4       	ldi	r21, 0x41	; 65
    199a:	6d 81       	ldd	r22, Y+5	; 0x05
    199c:	7e 81       	ldd	r23, Y+6	; 0x06
    199e:	8f 81       	ldd	r24, Y+7	; 0x07
    19a0:	98 85       	ldd	r25, Y+8	; 0x08
    19a2:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9e 87       	std	Y+14, r25	; 0x0e
    19b8:	8d 87       	std	Y+13, r24	; 0x0d
    19ba:	0f c0       	rjmp	.+30     	; 0x19da <lcd_cmd+0x1f2>
    19bc:	88 e5       	ldi	r24, 0x58	; 88
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	98 8b       	std	Y+16, r25	; 0x10
    19c2:	8f 87       	std	Y+15, r24	; 0x0f
    19c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c6:	98 89       	ldd	r25, Y+16	; 0x10
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <lcd_cmd+0x1e0>
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	9e 87       	std	Y+14, r25	; 0x0e
    19d8:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19da:	8d 85       	ldd	r24, Y+13	; 0x0d
    19dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19de:	89 2b       	or	r24, r25
    19e0:	69 f7       	brne	.-38     	; 0x19bc <lcd_cmd+0x1d4>
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <lcd_cmd+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e4:	69 85       	ldd	r22, Y+9	; 0x09
    19e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    19e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    19ec:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9e 87       	std	Y+14, r25	; 0x0e
    19f6:	8d 87       	std	Y+13, r24	; 0x0d
    19f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fc:	9a 8b       	std	Y+18, r25	; 0x12
    19fe:	89 8b       	std	Y+17, r24	; 0x11
    1a00:	89 89       	ldd	r24, Y+17	; 0x11
    1a02:	9a 89       	ldd	r25, Y+18	; 0x12
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <lcd_cmd+0x21c>
    1a08:	9a 8b       	std	Y+18, r25	; 0x12
    1a0a:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(3);
	LCD_EN0;
    1a0c:	88 e2       	ldi	r24, 0x28	; 40
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	28 e2       	ldi	r18, 0x28	; 40
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	f9 01       	movw	r30, r18
    1a16:	20 81       	ld	r18, Z
    1a18:	2f 7e       	andi	r18, 0xEF	; 239
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	20 83       	st	Z, r18
}
    1a1e:	00 00       	nop
    1a20:	6d 96       	adiw	r28, 0x1d	; 29
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	08 95       	ret

00001a32 <lcd_put>:

// pošle lcd znak
void lcd_put(char znak)
{
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	c1 54       	subi	r28, 0x41	; 65
    1a3c:	d1 09       	sbc	r29, r1
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	9e 01       	movw	r18, r28
    1a4a:	2f 5b       	subi	r18, 0xBF	; 191
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	f9 01       	movw	r30, r18
    1a50:	80 83       	st	Z, r24
	LCD_RS1;
    1a52:	8b e2       	ldi	r24, 0x2B	; 43
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	2b e2       	ldi	r18, 0x2B	; 43
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	20 81       	ld	r18, Z
    1a5e:	21 60       	ori	r18, 0x01	; 1
    1a60:	fc 01       	movw	r30, r24
    1a62:	20 83       	st	Z, r18
	lcd_set_nibble(znak>>4);
    1a64:	ce 01       	movw	r24, r28
    1a66:	8f 5b       	subi	r24, 0xBF	; 191
    1a68:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	80 81       	ld	r24, Z
    1a6e:	82 95       	swap	r24
    1a70:	8f 70       	andi	r24, 0x0F	; 15
    1a72:	0e 94 81 0b 	call	0x1702	; 0x1702 <lcd_set_nibble>
	LCD_EN1;
    1a76:	88 e2       	ldi	r24, 0x28	; 40
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	28 e2       	ldi	r18, 0x28	; 40
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	f9 01       	movw	r30, r18
    1a80:	20 81       	ld	r18, Z
    1a82:	20 61       	ori	r18, 0x10	; 16
    1a84:	fc 01       	movw	r30, r24
    1a86:	20 83       	st	Z, r18
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e2       	ldi	r26, 0x20	; 32
    1a8e:	b2 e4       	ldi	r27, 0x42	; 66
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	9a 83       	std	Y+2, r25	; 0x02
    1a94:	ab 83       	std	Y+3, r26	; 0x03
    1a96:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	51 e4       	ldi	r21, 0x41	; 65
    1aa0:	69 81       	ldd	r22, Y+1	; 0x01
    1aa2:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	8d a3       	std	Y+37, r24	; 0x25
    1ab2:	9e a3       	std	Y+38, r25	; 0x26
    1ab4:	af a3       	std	Y+39, r26	; 0x27
    1ab6:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 ec       	ldi	r20, 0xC0	; 192
    1abe:	50 e4       	ldi	r21, 0x40	; 64
    1ac0:	69 81       	ldd	r22, Y+1	; 0x01
    1ac2:	7a 81       	ldd	r23, Y+2	; 0x02
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	89 a7       	std	Y+41, r24	; 0x29
    1ad2:	9a a7       	std	Y+42, r25	; 0x2a
    1ad4:	ab a7       	std	Y+43, r26	; 0x2b
    1ad6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	6d a1       	ldd	r22, Y+37	; 0x25
    1ae2:	7e a1       	ldd	r23, Y+38	; 0x26
    1ae4:	8f a1       	ldd	r24, Y+39	; 0x27
    1ae6:	98 a5       	ldd	r25, Y+40	; 0x28
    1ae8:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1aec:	88 23       	and	r24, r24
    1aee:	1c f4       	brge	.+6      	; 0x1af6 <lcd_put+0xc4>
		__ticks = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	8d a7       	std	Y+45, r24	; 0x2d
    1af4:	b2 c0       	rjmp	.+356    	; 0x1c5a <lcd_put+0x228>
	else if (__tmp2 > 65535)
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	69 a5       	ldd	r22, Y+41	; 0x29
    1b00:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b02:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b04:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b06:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <lcd_put+0xde>
    1b0e:	7b c0       	rjmp	.+246    	; 0x1c06 <lcd_put+0x1d4>
	{
		_delay_ms(__us / 1000.0);
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a e7       	ldi	r20, 0x7A	; 122
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	69 81       	ldd	r22, Y+1	; 0x01
    1b1a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8e a7       	std	Y+46, r24	; 0x2e
    1b2a:	9f a7       	std	Y+47, r25	; 0x2f
    1b2c:	a8 ab       	std	Y+48, r26	; 0x30
    1b2e:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e8       	ldi	r19, 0x80	; 128
    1b34:	4b eb       	ldi	r20, 0xBB	; 187
    1b36:	55 e4       	ldi	r21, 0x45	; 69
    1b38:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b3a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b3c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b3e:	99 a9       	ldd	r25, Y+49	; 0x31
    1b40:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8a ab       	std	Y+50, r24	; 0x32
    1b4a:	9b ab       	std	Y+51, r25	; 0x33
    1b4c:	ac ab       	std	Y+52, r26	; 0x34
    1b4e:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	6a a9       	ldd	r22, Y+50	; 0x32
    1b5a:	7b a9       	ldd	r23, Y+51	; 0x33
    1b5c:	8c a9       	ldd	r24, Y+52	; 0x34
    1b5e:	9d a9       	ldd	r25, Y+53	; 0x35
    1b60:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <lcd_put+0x140>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9f ab       	std	Y+55, r25	; 0x37
    1b6e:	8e ab       	std	Y+54, r24	; 0x36
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <lcd_put+0x1be>
	else if (__tmp > 65535)
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	57 e4       	ldi	r21, 0x47	; 71
    1b7a:	6a a9       	ldd	r22, Y+50	; 0x32
    1b7c:	7b a9       	ldd	r23, Y+51	; 0x33
    1b7e:	8c a9       	ldd	r24, Y+52	; 0x34
    1b80:	9d a9       	ldd	r25, Y+53	; 0x35
    1b82:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <lcd_put+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b94:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b96:	88 a9       	ldd	r24, Y+48	; 0x30
    1b98:	99 a9       	ldd	r25, Y+49	; 0x31
    1b9a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9f ab       	std	Y+55, r25	; 0x37
    1bb0:	8e ab       	std	Y+54, r24	; 0x36
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <lcd_put+0x1a0>
    1bb4:	88 e5       	ldi	r24, 0x58	; 88
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	99 af       	std	Y+57, r25	; 0x39
    1bba:	88 af       	std	Y+56, r24	; 0x38
    1bbc:	88 ad       	ldd	r24, Y+56	; 0x38
    1bbe:	99 ad       	ldd	r25, Y+57	; 0x39
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <lcd_put+0x18e>
    1bc4:	99 af       	std	Y+57, r25	; 0x39
    1bc6:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	8e a9       	ldd	r24, Y+54	; 0x36
    1bca:	9f a9       	ldd	r25, Y+55	; 0x37
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	9f ab       	std	Y+55, r25	; 0x37
    1bd0:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	8e a9       	ldd	r24, Y+54	; 0x36
    1bd4:	9f a9       	ldd	r25, Y+55	; 0x37
    1bd6:	89 2b       	or	r24, r25
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <lcd_put+0x182>
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <lcd_put+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	6a a9       	ldd	r22, Y+50	; 0x32
    1bde:	7b a9       	ldd	r23, Y+51	; 0x33
    1be0:	8c a9       	ldd	r24, Y+52	; 0x34
    1be2:	9d a9       	ldd	r25, Y+53	; 0x35
    1be4:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9f ab       	std	Y+55, r25	; 0x37
    1bee:	8e ab       	std	Y+54, r24	; 0x36
    1bf0:	8e a9       	ldd	r24, Y+54	; 0x36
    1bf2:	9f a9       	ldd	r25, Y+55	; 0x37
    1bf4:	9b af       	std	Y+59, r25	; 0x3b
    1bf6:	8a af       	std	Y+58, r24	; 0x3a
    1bf8:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bfa:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <lcd_put+0x1ca>
    1c00:	9b af       	std	Y+59, r25	; 0x3b
    1c02:	8a af       	std	Y+58, r24	; 0x3a
    1c04:	2a c0       	rjmp	.+84     	; 0x1c5a <lcd_put+0x228>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	53 e4       	ldi	r21, 0x43	; 67
    1c0e:	6d a1       	ldd	r22, Y+37	; 0x25
    1c10:	7e a1       	ldd	r23, Y+38	; 0x26
    1c12:	8f a1       	ldd	r24, Y+39	; 0x27
    1c14:	98 a5       	ldd	r25, Y+40	; 0x28
    1c16:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	ac f4       	brge	.+42     	; 0x1c48 <lcd_put+0x216>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1c1e:	69 a5       	ldd	r22, Y+41	; 0x29
    1c20:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c26:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9d af       	std	Y+61, r25	; 0x3d
    1c30:	8c af       	std	Y+60, r24	; 0x3c
    1c32:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c34:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c36:	9f af       	std	Y+63, r25	; 0x3f
    1c38:	8e af       	std	Y+62, r24	; 0x3e
    1c3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <lcd_put+0x20c>
    1c42:	9f af       	std	Y+63, r25	; 0x3f
    1c44:	8e af       	std	Y+62, r24	; 0x3e
    1c46:	1c c0       	rjmp	.+56     	; 0x1c80 <lcd_put+0x24e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c48:	6d a1       	ldd	r22, Y+37	; 0x25
    1c4a:	7e a1       	ldd	r23, Y+38	; 0x26
    1c4c:	8f a1       	ldd	r24, Y+39	; 0x27
    1c4e:	98 a5       	ldd	r25, Y+40	; 0x28
    1c50:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8d a7       	std	Y+45, r24	; 0x2d
    1c5a:	2d a5       	ldd	r18, Y+45	; 0x2d
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	80 5c       	subi	r24, 0xC0	; 192
    1c60:	9f 4f       	sbci	r25, 0xFF	; 255
    1c62:	fc 01       	movw	r30, r24
    1c64:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c66:	ce 01       	movw	r24, r28
    1c68:	80 5c       	subi	r24, 0xC0	; 192
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	80 81       	ld	r24, Z
    1c70:	28 2f       	mov	r18, r24
    1c72:	2a 95       	dec	r18
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <lcd_put+0x240>
    1c76:	ce 01       	movw	r24, r28
    1c78:	80 5c       	subi	r24, 0xC0	; 192
    1c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	20 83       	st	Z, r18
	_delay_us(40);
	LCD_EN0;
    1c80:	88 e2       	ldi	r24, 0x28	; 40
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	28 e2       	ldi	r18, 0x28	; 40
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	f9 01       	movw	r30, r18
    1c8a:	20 81       	ld	r18, Z
    1c8c:	2f 7e       	andi	r18, 0xEF	; 239
    1c8e:	fc 01       	movw	r30, r24
    1c90:	20 83       	st	Z, r18
	lcd_set_nibble(znak);
    1c92:	ce 01       	movw	r24, r28
    1c94:	8f 5b       	subi	r24, 0xBF	; 191
    1c96:	9f 4f       	sbci	r25, 0xFF	; 255
    1c98:	fc 01       	movw	r30, r24
    1c9a:	80 81       	ld	r24, Z
    1c9c:	0e 94 81 0b 	call	0x1702	; 0x1702 <lcd_set_nibble>
	LCD_EN1;
    1ca0:	88 e2       	ldi	r24, 0x28	; 40
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	28 e2       	ldi	r18, 0x28	; 40
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	f9 01       	movw	r30, r18
    1caa:	20 81       	ld	r18, Z
    1cac:	20 61       	ori	r18, 0x10	; 16
    1cae:	fc 01       	movw	r30, r24
    1cb0:	20 83       	st	Z, r18
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 e2       	ldi	r26, 0x20	; 32
    1cb8:	b2 e4       	ldi	r27, 0x42	; 66
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	af 83       	std	Y+7, r26	; 0x07
    1cc0:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	6d 81       	ldd	r22, Y+5	; 0x05
    1ccc:	7e 81       	ldd	r23, Y+6	; 0x06
    1cce:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd0:	98 85       	ldd	r25, Y+8	; 0x08
    1cd2:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	89 87       	std	Y+9, r24	; 0x09
    1cdc:	9a 87       	std	Y+10, r25	; 0x0a
    1cde:	ab 87       	std	Y+11, r26	; 0x0b
    1ce0:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 ec       	ldi	r20, 0xC0	; 192
    1ce8:	50 e4       	ldi	r21, 0x40	; 64
    1cea:	6d 81       	ldd	r22, Y+5	; 0x05
    1cec:	7e 81       	ldd	r23, Y+6	; 0x06
    1cee:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf0:	98 85       	ldd	r25, Y+8	; 0x08
    1cf2:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8d 87       	std	Y+13, r24	; 0x0d
    1cfc:	9e 87       	std	Y+14, r25	; 0x0e
    1cfe:	af 87       	std	Y+15, r26	; 0x0f
    1d00:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	69 85       	ldd	r22, Y+9	; 0x09
    1d0c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d10:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d12:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	1c f4       	brge	.+6      	; 0x1d20 <lcd_put+0x2ee>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	89 8b       	std	Y+17, r24	; 0x11
    1d1e:	b2 c0       	rjmp	.+356    	; 0x1e84 <lcd_put+0x452>
	else if (__tmp2 > 65535)
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d2a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2e:	98 89       	ldd	r25, Y+16	; 0x10
    1d30:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	0c f0       	brlt	.+2      	; 0x1d3a <lcd_put+0x308>
    1d38:	7b c0       	rjmp	.+246    	; 0x1e30 <lcd_put+0x3fe>
	{
		_delay_ms(__us / 1000.0);
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a e7       	ldi	r20, 0x7A	; 122
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	6d 81       	ldd	r22, Y+5	; 0x05
    1d44:	7e 81       	ldd	r23, Y+6	; 0x06
    1d46:	8f 81       	ldd	r24, Y+7	; 0x07
    1d48:	98 85       	ldd	r25, Y+8	; 0x08
    1d4a:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	8a 8b       	std	Y+18, r24	; 0x12
    1d54:	9b 8b       	std	Y+19, r25	; 0x13
    1d56:	ac 8b       	std	Y+20, r26	; 0x14
    1d58:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e8       	ldi	r19, 0x80	; 128
    1d5e:	4b eb       	ldi	r20, 0xBB	; 187
    1d60:	55 e4       	ldi	r21, 0x45	; 69
    1d62:	6a 89       	ldd	r22, Y+18	; 0x12
    1d64:	7b 89       	ldd	r23, Y+19	; 0x13
    1d66:	8c 89       	ldd	r24, Y+20	; 0x14
    1d68:	9d 89       	ldd	r25, Y+21	; 0x15
    1d6a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8e 8b       	std	Y+22, r24	; 0x16
    1d74:	9f 8b       	std	Y+23, r25	; 0x17
    1d76:	a8 8f       	std	Y+24, r26	; 0x18
    1d78:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	6e 89       	ldd	r22, Y+22	; 0x16
    1d84:	7f 89       	ldd	r23, Y+23	; 0x17
    1d86:	88 8d       	ldd	r24, Y+24	; 0x18
    1d88:	99 8d       	ldd	r25, Y+25	; 0x19
    1d8a:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <lcd_put+0x36a>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9b 8f       	std	Y+27, r25	; 0x1b
    1d98:	8a 8f       	std	Y+26, r24	; 0x1a
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <lcd_put+0x3e8>
	else if (__tmp > 65535)
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	6e 89       	ldd	r22, Y+22	; 0x16
    1da6:	7f 89       	ldd	r23, Y+23	; 0x17
    1da8:	88 8d       	ldd	r24, Y+24	; 0x18
    1daa:	99 8d       	ldd	r25, Y+25	; 0x19
    1dac:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <lcd_put+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	6a 89       	ldd	r22, Y+18	; 0x12
    1dbe:	7b 89       	ldd	r23, Y+19	; 0x13
    1dc0:	8c 89       	ldd	r24, Y+20	; 0x14
    1dc2:	9d 89       	ldd	r25, Y+21	; 0x15
    1dc4:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9b 8f       	std	Y+27, r25	; 0x1b
    1dda:	8a 8f       	std	Y+26, r24	; 0x1a
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <lcd_put+0x3ca>
    1dde:	88 e5       	ldi	r24, 0x58	; 88
    1de0:	92 e0       	ldi	r25, 0x02	; 2
    1de2:	9d 8f       	std	Y+29, r25	; 0x1d
    1de4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1de8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <lcd_put+0x3b8>
    1dee:	9d 8f       	std	Y+29, r25	; 0x1d
    1df0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1df4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9b 8f       	std	Y+27, r25	; 0x1b
    1dfa:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dfe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e00:	89 2b       	or	r24, r25
    1e02:	69 f7       	brne	.-38     	; 0x1dde <lcd_put+0x3ac>
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <lcd_put+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6e 89       	ldd	r22, Y+22	; 0x16
    1e08:	7f 89       	ldd	r23, Y+23	; 0x17
    1e0a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e0c:	99 8d       	ldd	r25, Y+25	; 0x19
    1e0e:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9b 8f       	std	Y+27, r25	; 0x1b
    1e18:	8a 8f       	std	Y+26, r24	; 0x1a
    1e1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e1e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e20:	8e 8f       	std	Y+30, r24	; 0x1e
    1e22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e24:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <lcd_put+0x3f4>
    1e2a:	9f 8f       	std	Y+31, r25	; 0x1f
    1e2c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e2e:	2a c0       	rjmp	.+84     	; 0x1e84 <lcd_put+0x452>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	53 e4       	ldi	r21, 0x43	; 67
    1e38:	69 85       	ldd	r22, Y+9	; 0x09
    1e3a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e40:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	ac f4       	brge	.+42     	; 0x1e72 <lcd_put+0x440>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1e48:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e4a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4e:	98 89       	ldd	r25, Y+16	; 0x10
    1e50:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	99 a3       	std	Y+33, r25	; 0x21
    1e5a:	88 a3       	std	Y+32, r24	; 0x20
    1e5c:	88 a1       	ldd	r24, Y+32	; 0x20
    1e5e:	99 a1       	ldd	r25, Y+33	; 0x21
    1e60:	9b a3       	std	Y+35, r25	; 0x23
    1e62:	8a a3       	std	Y+34, r24	; 0x22
    1e64:	8a a1       	ldd	r24, Y+34	; 0x22
    1e66:	9b a1       	ldd	r25, Y+35	; 0x23
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <lcd_put+0x436>
    1e6c:	9b a3       	std	Y+35, r25	; 0x23
    1e6e:	8a a3       	std	Y+34, r24	; 0x22
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <lcd_put+0x45e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e72:	69 85       	ldd	r22, Y+9	; 0x09
    1e74:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e7a:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	89 8b       	std	Y+17, r24	; 0x11
    1e84:	89 89       	ldd	r24, Y+17	; 0x11
    1e86:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e88:	8c a1       	ldd	r24, Y+36	; 0x24
    1e8a:	8a 95       	dec	r24
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <lcd_put+0x458>
    1e8e:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(40);
	LCD_EN0;
    1e90:	88 e2       	ldi	r24, 0x28	; 40
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	28 e2       	ldi	r18, 0x28	; 40
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	f9 01       	movw	r30, r18
    1e9a:	20 81       	ld	r18, Z
    1e9c:	2f 7e       	andi	r18, 0xEF	; 239
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	20 83       	st	Z, r18
	LCD_RS0;
    1ea2:	8b e2       	ldi	r24, 0x2B	; 43
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	2b e2       	ldi	r18, 0x2B	; 43
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	f9 01       	movw	r30, r18
    1eac:	20 81       	ld	r18, Z
    1eae:	2e 7f       	andi	r18, 0xFE	; 254
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	20 83       	st	Z, r18
}
    1eb4:	00 00       	nop
    1eb6:	cf 5b       	subi	r28, 0xBF	; 191
    1eb8:	df 4f       	sbci	r29, 0xFF	; 255
    1eba:	0f b6       	in	r0, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	de bf       	out	0x3e, r29	; 62
    1ec0:	0f be       	out	0x3f, r0	; 63
    1ec2:	cd bf       	out	0x3d, r28	; 61
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	08 95       	ret

00001eca <nible2hex>:

char nible2hex(uint8_t nible)
{
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	1f 92       	push	r1
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	89 83       	std	Y+1, r24	; 0x01
	if (nible < 10)
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	8a 30       	cpi	r24, 0x0A	; 10
    1eda:	18 f4       	brcc	.+6      	; 0x1ee2 <nible2hex+0x18>
		return '0' + nible;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	80 5d       	subi	r24, 0xD0	; 208
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <nible2hex+0x1c>
	else
		return 'A' + nible - 10;
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	89 5c       	subi	r24, 0xC9	; 201
}
    1ee6:	0f 90       	pop	r0
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	08 95       	ret

00001eee <print_hex>:

// vytiskne číslo int 2B
void print_hex(uint16_t cislo)
{
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <print_hex+0x6>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <print_hex+0x8>
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <print_hex+0xa>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1f00:	1a 82       	std	Y+2, r1	; 0x02
    1f02:	19 82       	std	Y+1, r1	; 0x01
    1f04:	1c c0       	rjmp	.+56     	; 0x1f3e <print_hex+0x50>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	89 2f       	mov	r24, r25
    1f0c:	99 27       	eor	r25, r25
    1f0e:	82 95       	swap	r24
    1f10:	8f 70       	andi	r24, 0x0F	; 15
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		cislo <<= 4;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	82 95       	swap	r24
    1f1c:	92 95       	swap	r25
    1f1e:	90 7f       	andi	r25, 0xF0	; 240
    1f20:	98 27       	eor	r25, r24
    1f22:	80 7f       	andi	r24, 0xF0	; 240
    1f24:	98 27       	eor	r25, r24
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
		lcd_put(nible2hex(nible));
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <nible2hex>
    1f30:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
void print_hex(uint16_t cislo)
{
	uint16_t i;
	uint16_t nible;

	for (i=0; i < 4; i++)
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	01 96       	adiw	r24, 0x01	; 1
    1f3a:	9a 83       	std	Y+2, r25	; 0x02
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	04 97       	sbiw	r24, 0x04	; 4
    1f44:	00 f3       	brcs	.-64     	; 0x1f06 <print_hex+0x18>
	{
		nible = (uint8_t) ((cislo >> 12) & 0x000F);
		cislo <<= 4;
		lcd_put(nible2hex(nible));
	}
}
    1f46:	00 00       	nop
    1f48:	26 96       	adiw	r28, 0x06	; 6
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	08 95       	ret

00001f5a <print_int>:

// vytiskne číslo int 2B
void print_int(int cislo, char znaminko, char nula, int pocet_mist)
{
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	6b 97       	sbiw	r28, 0x1b	; 27
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	9f 8b       	std	Y+23, r25	; 0x17
    1f70:	8e 8b       	std	Y+22, r24	; 0x16
    1f72:	68 8f       	std	Y+24, r22	; 0x18
    1f74:	49 8f       	std	Y+25, r20	; 0x19
    1f76:	3b 8f       	std	Y+27, r19	; 0x1b
    1f78:	2a 8f       	std	Y+26, r18	; 0x1a
	int poc_cislo = cislo;
    1f7a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f7c:	9f 89       	ldd	r25, Y+23	; 0x17
    1f7e:	9d 83       	std	Y+5, r25	; 0x05
    1f80:	8c 83       	std	Y+4, r24	; 0x04
	int8_t i, len = 16, state = 1;
    1f82:	80 e1       	ldi	r24, 0x10	; 16
    1f84:	8a 83       	std	Y+2, r24	; 0x02
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	8b 83       	std	Y+3, r24	; 0x03
	char buf[16];

	// pokud máme vypsat před číslo znamínko
	if (znaminko)
    1f8a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f8c:	88 23       	and	r24, r24
    1f8e:	49 f0       	breq	.+18     	; 0x1fa2 <print_int+0x48>
	{
		lcd_put((cislo >= 0) ? '+' : '-');
    1f90:	8e 89       	ldd	r24, Y+22	; 0x16
    1f92:	9f 89       	ldd	r25, Y+23	; 0x17
    1f94:	99 23       	and	r25, r25
    1f96:	14 f0       	brlt	.+4      	; 0x1f9c <print_int+0x42>
    1f98:	8b e2       	ldi	r24, 0x2B	; 43
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <print_int+0x44>
    1f9c:	8d e2       	ldi	r24, 0x2D	; 45
    1f9e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	}

	// pokud je vypnutá predikce nul
	if (nula)
    1fa2:	89 8d       	ldd	r24, Y+25	; 0x19
    1fa4:	88 23       	and	r24, r24
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <print_int+0x50>
		state = 0;
    1fa8:	1b 82       	std	Y+3, r1	; 0x03


	// když je zadána délka čísla
	if (pocet_mist >= 0)
    1faa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fac:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fae:	99 23       	and	r25, r25
    1fb0:	14 f0       	brlt	.+4      	; 0x1fb6 <print_int+0x5c>
		len = pocet_mist;
    1fb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fb4:	8a 83       	std	Y+2, r24	; 0x02

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;
    1fb6:	8e 89       	ldd	r24, Y+22	; 0x16
    1fb8:	9f 89       	ldd	r25, Y+23	; 0x17
    1fba:	99 23       	and	r25, r25
    1fbc:	1c f4       	brge	.+6      	; 0x1fc4 <print_int+0x6a>
    1fbe:	91 95       	neg	r25
    1fc0:	81 95       	neg	r24
    1fc2:	91 09       	sbc	r25, r1
    1fc4:	9f 8b       	std	Y+23, r25	; 0x17
    1fc6:	8e 8b       	std	Y+22, r24	; 0x16

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	20 c0       	rjmp	.+64     	; 0x200c <print_int+0xb2>
	{
		buf[i] = '0' + cislo % 10;
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	28 2f       	mov	r18, r24
    1fd0:	88 0f       	add	r24, r24
    1fd2:	33 0b       	sbc	r19, r19
    1fd4:	8e 89       	ldd	r24, Y+22	; 0x16
    1fd6:	9f 89       	ldd	r25, Y+23	; 0x17
    1fd8:	4a e0       	ldi	r20, 0x0A	; 10
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	ba 01       	movw	r22, r20
    1fde:	0e 94 18 1a 	call	0x3430	; 0x3430 <__divmodhi4>
    1fe2:	40 e3       	ldi	r20, 0x30	; 48
    1fe4:	48 0f       	add	r20, r24
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	06 96       	adiw	r24, 0x06	; 6
    1fea:	82 0f       	add	r24, r18
    1fec:	93 1f       	adc	r25, r19
    1fee:	fc 01       	movw	r30, r24
    1ff0:	40 83       	st	Z, r20
		cislo /= 10;
    1ff2:	8e 89       	ldd	r24, Y+22	; 0x16
    1ff4:	9f 89       	ldd	r25, Y+23	; 0x17
    1ff6:	2a e0       	ldi	r18, 0x0A	; 10
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	b9 01       	movw	r22, r18
    1ffc:	0e 94 18 1a 	call	0x3430	; 0x3430 <__divmodhi4>
    2000:	cb 01       	movw	r24, r22
    2002:	9f 8b       	std	Y+23, r25	; 0x17
    2004:	8e 8b       	std	Y+22, r24	; 0x16

	// absolutní hodnota čísla
	cislo = (cislo >= 0) ? cislo : -1 * cislo;

	// převod čísla na řětězec
	for (i=0; i < len; i++)
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	8f 5f       	subi	r24, 0xFF	; 255
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	99 81       	ldd	r25, Y+1	; 0x01
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	98 17       	cp	r25, r24
    2012:	e4 f2       	brlt	.-72     	; 0x1fcc <print_int+0x72>
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	81 50       	subi	r24, 0x01	; 1
    2018:	89 83       	std	Y+1, r24	; 0x01
    201a:	3d c0       	rjmp	.+122    	; 0x2096 <print_int+0x13c>
	{
		if (buf[i] == '0' && state)
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	08 2e       	mov	r0, r24
    2020:	00 0c       	add	r0, r0
    2022:	99 0b       	sbc	r25, r25
    2024:	9e 01       	movw	r18, r28
    2026:	2a 5f       	subi	r18, 0xFA	; 250
    2028:	3f 4f       	sbci	r19, 0xFF	; 255
    202a:	82 0f       	add	r24, r18
    202c:	93 1f       	adc	r25, r19
    202e:	fc 01       	movw	r30, r24
    2030:	80 81       	ld	r24, Z
    2032:	80 33       	cpi	r24, 0x30	; 48
    2034:	e9 f4       	brne	.+58     	; 0x2070 <print_int+0x116>
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	88 23       	and	r24, r24
    203a:	d1 f0       	breq	.+52     	; 0x2070 <print_int+0x116>
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    203c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    203e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	29 f1       	breq	.+74     	; 0x208e <print_int+0x134>
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	89 2b       	or	r24, r25
    204a:	71 f4       	brne	.+28     	; 0x2068 <print_int+0x10e>
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	08 2e       	mov	r0, r24
    2050:	00 0c       	add	r0, r0
    2052:	99 0b       	sbc	r25, r25
    2054:	9c 01       	movw	r18, r24
    2056:	2f 5f       	subi	r18, 0xFF	; 255
    2058:	3f 4f       	sbci	r19, 0xFF	; 255
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	08 2e       	mov	r0, r24
    205e:	00 0c       	add	r0, r0
    2060:	99 0b       	sbc	r25, r25
    2062:	28 17       	cp	r18, r24
    2064:	39 07       	cpc	r19, r25
    2066:	99 f0       	breq	.+38     	; 0x208e <print_int+0x134>
			{
				lcd_put(' ');
    2068:	80 e2       	ldi	r24, 0x20	; 32
    206a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    206e:	0f c0       	rjmp	.+30     	; 0x208e <print_int+0x134>
				lcd_put(' ');
			}
		}
		else
		{
			state = 0;
    2070:	1b 82       	std	Y+3, r1	; 0x03
			lcd_put(buf[i]);
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	08 2e       	mov	r0, r24
    2076:	00 0c       	add	r0, r0
    2078:	99 0b       	sbc	r25, r25
    207a:	9e 01       	movw	r18, r28
    207c:	2a 5f       	subi	r18, 0xFA	; 250
    207e:	3f 4f       	sbci	r19, 0xFF	; 255
    2080:	82 0f       	add	r24, r18
    2082:	93 1f       	adc	r25, r19
    2084:	fc 01       	movw	r30, r24
    2086:	80 81       	ld	r24, Z
    2088:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <print_int+0x136>
	// výpis řetězce
	for (i--; i >= 0; i--)
	{
		if (buf[i] == '0' && state)
		{
			if (pocet_mist != -1 && (poc_cislo || (i+1) != len))
    208e:	00 00       	nop
	{
		buf[i] = '0' + cislo % 10;
		cislo /= 10;
	}
	// výpis řetězce
	for (i--; i >= 0; i--)
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	81 50       	subi	r24, 0x01	; 1
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	88 23       	and	r24, r24
    209a:	0c f0       	brlt	.+2      	; 0x209e <print_int+0x144>
    209c:	bf cf       	rjmp	.-130    	; 0x201c <print_int+0xc2>
			state = 0;
			lcd_put(buf[i]);
		}

	}
	if (state)
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	88 23       	and	r24, r24
    20a2:	19 f0       	breq	.+6      	; 0x20aa <print_int+0x150>
	{
		lcd_put('0');
    20a4:	80 e3       	ldi	r24, 0x30	; 48
    20a6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	}
}
    20aa:	00 00       	nop
    20ac:	6b 96       	adiw	r28, 0x1b	; 27
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <print_double>:

// vytiskne double
void print_double(double cislo, char znaminko, char nula, int mista_pred_carkou, int mista_za_carkou)
{
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	61 97       	sbiw	r28, 0x11	; 17
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	68 87       	std	Y+8, r22	; 0x08
    20dc:	79 87       	std	Y+9, r23	; 0x09
    20de:	8a 87       	std	Y+10, r24	; 0x0a
    20e0:	9b 87       	std	Y+11, r25	; 0x0b
    20e2:	4c 87       	std	Y+12, r20	; 0x0c
    20e4:	2d 87       	std	Y+13, r18	; 0x0d
    20e6:	1f 87       	std	Y+15, r17	; 0x0f
    20e8:	0e 87       	std	Y+14, r16	; 0x0e
    20ea:	f9 8a       	std	Y+17, r15	; 0x11
    20ec:	e8 8a       	std	Y+16, r14	; 0x10
	int i, cela, desetinna;
	char znam = '+';
    20ee:	8b e2       	ldi	r24, 0x2B	; 43
    20f0:	8b 83       	std	Y+3, r24	; 0x03

	if (mista_za_carkou == -1)
    20f2:	88 89       	ldd	r24, Y+16	; 0x10
    20f4:	99 89       	ldd	r25, Y+17	; 0x11
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	21 f4       	brne	.+8      	; 0x2102 <print_double+0x44>
		mista_za_carkou = 3;
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	99 8b       	std	Y+17, r25	; 0x11
    2100:	88 8b       	std	Y+16, r24	; 0x10

	if (cislo < 0)
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	a9 01       	movw	r20, r18
    2108:	68 85       	ldd	r22, Y+8	; 0x08
    210a:	79 85       	ldd	r23, Y+9	; 0x09
    210c:	8a 85       	ldd	r24, Y+10	; 0x0a
    210e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2110:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    2114:	88 23       	and	r24, r24
    2116:	5c f4       	brge	.+22     	; 0x212e <print_double+0x70>
	{
		cislo *= -1;
    2118:	88 85       	ldd	r24, Y+8	; 0x08
    211a:	99 85       	ldd	r25, Y+9	; 0x09
    211c:	aa 85       	ldd	r26, Y+10	; 0x0a
    211e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2120:	b0 58       	subi	r27, 0x80	; 128
    2122:	88 87       	std	Y+8, r24	; 0x08
    2124:	99 87       	std	Y+9, r25	; 0x09
    2126:	aa 87       	std	Y+10, r26	; 0x0a
    2128:	bb 87       	std	Y+11, r27	; 0x0b
		znam = '-';
    212a:	8d e2       	ldi	r24, 0x2D	; 45
    212c:	8b 83       	std	Y+3, r24	; 0x03
	}

	cela = (int) cislo;
    212e:	68 85       	ldd	r22, Y+8	; 0x08
    2130:	79 85       	ldd	r23, Y+9	; 0x09
    2132:	8a 85       	ldd	r24, Y+10	; 0x0a
    2134:	9b 85       	ldd	r25, Y+11	; 0x0b
    2136:	0e 94 15 18 	call	0x302a	; 0x302a <__fixsfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9d 83       	std	Y+5, r25	; 0x05
    2140:	8c 83       	std	Y+4, r24	; 0x04
	cislo -= cela;
    2142:	8c 81       	ldd	r24, Y+4	; 0x04
    2144:	9d 81       	ldd	r25, Y+5	; 0x05
    2146:	09 2e       	mov	r0, r25
    2148:	00 0c       	add	r0, r0
    214a:	aa 0b       	sbc	r26, r26
    214c:	bb 0b       	sbc	r27, r27
    214e:	bc 01       	movw	r22, r24
    2150:	cd 01       	movw	r24, r26
    2152:	0e 94 4d 18 	call	0x309a	; 0x309a <__floatsisf>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9c 01       	movw	r18, r24
    215c:	ad 01       	movw	r20, r26
    215e:	68 85       	ldd	r22, Y+8	; 0x08
    2160:	79 85       	ldd	r23, Y+9	; 0x09
    2162:	8a 85       	ldd	r24, Y+10	; 0x0a
    2164:	9b 85       	ldd	r25, Y+11	; 0x0b
    2166:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__subsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	88 87       	std	Y+8, r24	; 0x08
    2170:	99 87       	std	Y+9, r25	; 0x09
    2172:	aa 87       	std	Y+10, r26	; 0x0a
    2174:	bb 87       	std	Y+11, r27	; 0x0b

	for (i=0; i < mista_za_carkou; i++)
    2176:	1a 82       	std	Y+2, r1	; 0x02
    2178:	19 82       	std	Y+1, r1	; 0x01
    217a:	15 c0       	rjmp	.+42     	; 0x21a6 <print_double+0xe8>
		cislo *= 10;
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e2       	ldi	r20, 0x20	; 32
    2182:	51 e4       	ldi	r21, 0x41	; 65
    2184:	68 85       	ldd	r22, Y+8	; 0x08
    2186:	79 85       	ldd	r23, Y+9	; 0x09
    2188:	8a 85       	ldd	r24, Y+10	; 0x0a
    218a:	9b 85       	ldd	r25, Y+11	; 0x0b
    218c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	88 87       	std	Y+8, r24	; 0x08
    2196:	99 87       	std	Y+9, r25	; 0x09
    2198:	aa 87       	std	Y+10, r26	; 0x0a
    219a:	bb 87       	std	Y+11, r27	; 0x0b
	}

	cela = (int) cislo;
	cislo -= cela;

	for (i=0; i < mista_za_carkou; i++)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	01 96       	adiw	r24, 0x01	; 1
    21a2:	9a 83       	std	Y+2, r25	; 0x02
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	29 81       	ldd	r18, Y+1	; 0x01
    21a8:	3a 81       	ldd	r19, Y+2	; 0x02
    21aa:	88 89       	ldd	r24, Y+16	; 0x10
    21ac:	99 89       	ldd	r25, Y+17	; 0x11
    21ae:	28 17       	cp	r18, r24
    21b0:	39 07       	cpc	r19, r25
    21b2:	24 f3       	brlt	.-56     	; 0x217c <print_double+0xbe>
		cislo *= 10;

	desetinna = (int) cislo;
    21b4:	68 85       	ldd	r22, Y+8	; 0x08
    21b6:	79 85       	ldd	r23, Y+9	; 0x09
    21b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    21ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    21bc:	0e 94 15 18 	call	0x302a	; 0x302a <__fixsfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9f 83       	std	Y+7, r25	; 0x07
    21c6:	8e 83       	std	Y+6, r24	; 0x06
	cela = (znam == '-') ? -1 * cela : cela;
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	8d 32       	cpi	r24, 0x2D	; 45
    21cc:	31 f4       	brne	.+12     	; 0x21da <print_double+0x11c>
    21ce:	8c 81       	ldd	r24, Y+4	; 0x04
    21d0:	9d 81       	ldd	r25, Y+5	; 0x05
    21d2:	91 95       	neg	r25
    21d4:	81 95       	neg	r24
    21d6:	91 09       	sbc	r25, r1
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <print_double+0x120>
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	9d 81       	ldd	r25, Y+5	; 0x05
    21de:	9d 83       	std	Y+5, r25	; 0x05
    21e0:	8c 83       	std	Y+4, r24	; 0x04

	print_int(cela, znaminko, nula, mista_pred_carkou);
    21e2:	2e 85       	ldd	r18, Y+14	; 0x0e
    21e4:	3f 85       	ldd	r19, Y+15	; 0x0f
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ea:	4d 85       	ldd	r20, Y+13	; 0x0d
    21ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    21ee:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <print_int>
	lcd_put(',');
    21f2:	8c e2       	ldi	r24, 0x2C	; 44
    21f4:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	print_int(desetinna, '\0', '0', mista_za_carkou);
    21f8:	28 89       	ldd	r18, Y+16	; 0x10
    21fa:	39 89       	ldd	r19, Y+17	; 0x11
    21fc:	8e 81       	ldd	r24, Y+6	; 0x06
    21fe:	9f 81       	ldd	r25, Y+7	; 0x07
    2200:	40 e3       	ldi	r20, 0x30	; 48
    2202:	60 e0       	ldi	r22, 0x00	; 0
    2204:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <print_int>

}
    2208:	00 00       	nop
    220a:	61 96       	adiw	r28, 0x11	; 17
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	1f 91       	pop	r17
    221c:	0f 91       	pop	r16
    221e:	ff 90       	pop	r15
    2220:	ef 90       	pop	r14
    2222:	08 95       	ret

00002224 <lcd_printf>:

// printf funkce
void lcd_printf(char str[], ...)
{
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	2f 97       	sbiw	r28, 0x0f	; 15
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61

	uint8_t i, j;
	char *str_p;
	int tmp_int;

	char znaminko = '\0';
    2240:	1b 82       	std	Y+3, r1	; 0x03
	char nula = '\0';
    2242:	1c 82       	std	Y+4, r1	; 0x04
	char desetina_carka = '\0';
    2244:	1d 82       	std	Y+5, r1	; 0x05
	int mista_pred_carkou = -1;
    2246:	8f ef       	ldi	r24, 0xFF	; 255
    2248:	9f ef       	ldi	r25, 0xFF	; 255
    224a:	9f 83       	std	Y+7, r25	; 0x07
    224c:	8e 83       	std	Y+6, r24	; 0x06
	int mista_za_carkou = -1;
    224e:	8f ef       	ldi	r24, 0xFF	; 255
    2250:	9f ef       	ldi	r25, 0xFF	; 255
    2252:	99 87       	std	Y+9, r25	; 0x09
    2254:	88 87       	std	Y+8, r24	; 0x08



	 __gnuc_va_list ap;
	 //va_list ap;
	 va_start(ap, str);
    2256:	ce 01       	movw	r24, r28
    2258:	4a 96       	adiw	r24, 0x1a	; 26
    225a:	9f 87       	std	Y+15, r25	; 0x0f
    225c:	8e 87       	std	Y+14, r24	; 0x0e



	for (i=0; str[i] != '\0'; i++)
    225e:	19 82       	std	Y+1, r1	; 0x01
    2260:	5e c2       	rjmp	.+1212   	; 0x271e <lcd_printf+0x4fa>
	{
		// nová stránka
		if (str[i] == '\f')
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	28 8d       	ldd	r18, Y+24	; 0x18
    226a:	39 8d       	ldd	r19, Y+25	; 0x19
    226c:	82 0f       	add	r24, r18
    226e:	93 1f       	adc	r25, r19
    2270:	fc 01       	movw	r30, r24
    2272:	80 81       	ld	r24, Z
    2274:	8c 30       	cpi	r24, 0x0C	; 12
    2276:	51 f4       	brne	.+20     	; 0x228c <lcd_printf+0x68>
		{
			line = 1;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
			lcd_cmd(LCD_CMD_CLR);
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
			lcd_cmd(LCD_CMD_W_DDRAM);
    2284:	80 e8       	ldi	r24, 0x80	; 128
    2286:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
    228a:	46 c2       	rjmp	.+1164   	; 0x2718 <lcd_printf+0x4f4>
		}
		// nový řádek
		else if (str[i] == '\n')
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	88 2f       	mov	r24, r24
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	28 8d       	ldd	r18, Y+24	; 0x18
    2294:	39 8d       	ldd	r19, Y+25	; 0x19
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	fc 01       	movw	r30, r24
    229c:	80 81       	ld	r24, Z
    229e:	8a 30       	cpi	r24, 0x0A	; 10
    22a0:	71 f5       	brne	.+92     	; 0x22fe <lcd_printf+0xda>
		{
			// jestli jsme na 1.
			if (line == 1)
    22a2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	49 f4       	brne	.+18     	; 0x22bc <lcd_printf+0x98>
			{
				line++;
    22aa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22ae:	8f 5f       	subi	r24, 0xFF	; 255
    22b0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40); // go 2 line
    22b4:	80 ec       	ldi	r24, 0xC0	; 192
    22b6:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
    22ba:	2e c2       	rjmp	.+1116   	; 0x2718 <lcd_printf+0x4f4>
			}
			// jestli jsme na 2.
			else if (line == 2)
    22bc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	49 f4       	brne	.+18     	; 0x22d6 <lcd_printf+0xb2>
			{
				line++;
    22c4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22c8:	8f 5f       	subi	r24, 0xFF	; 255
    22ca:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x14); // go 3 line
    22ce:	84 e9       	ldi	r24, 0x94	; 148
    22d0:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
    22d4:	21 c2       	rjmp	.+1090   	; 0x2718 <lcd_printf+0x4f4>
			}
			// jestli jsme na 3.
			else if (line == 3)
    22d6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22da:	83 30       	cpi	r24, 0x03	; 3
    22dc:	49 f4       	brne	.+18     	; 0x22f0 <lcd_printf+0xcc>
			{
				line++;
    22de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x54); // go 4 line
    22e8:	84 ed       	ldi	r24, 0xD4	; 212
    22ea:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
    22ee:	14 c2       	rjmp	.+1064   	; 0x2718 <lcd_printf+0x4f4>
			}
			// jestli jsme na 4.
			else
			{
				line = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <line.1811>
				lcd_cmd(LCD_CMD_W_DDRAM | 0x00); // go 1 line
    22f6:	80 e8       	ldi	r24, 0x80	; 128
    22f8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
    22fc:	0d c2       	rjmp	.+1050   	; 0x2718 <lcd_printf+0x4f4>
			}
		}
		// návrat vozíku
		else if (str[i] == '\r')
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	88 2f       	mov	r24, r24
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	28 8d       	ldd	r18, Y+24	; 0x18
    2306:	39 8d       	ldd	r19, Y+25	; 0x19
    2308:	82 0f       	add	r24, r18
    230a:	93 1f       	adc	r25, r19
    230c:	fc 01       	movw	r30, r24
    230e:	80 81       	ld	r24, Z
    2310:	8d 30       	cpi	r24, 0x0D	; 13
    2312:	61 f4       	brne	.+24     	; 0x232c <lcd_printf+0x108>
		{
			// pokud jsme na 2. řádku
			if (line)
    2314:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <line.1811>
    2318:	88 23       	and	r24, r24
    231a:	21 f0       	breq	.+8      	; 0x2324 <lcd_printf+0x100>
			{
				lcd_cmd(LCD_CMD_W_DDRAM | 0x40);
    231c:	80 ec       	ldi	r24, 0xC0	; 192
    231e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
    2322:	fa c1       	rjmp	.+1012   	; 0x2718 <lcd_printf+0x4f4>
			}
			// jestli jsme na 1.
			else
			{
				lcd_cmd(LCD_CMD_W_DDRAM);
    2324:	80 e8       	ldi	r24, 0x80	; 128
    2326:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <lcd_cmd>
    232a:	f6 c1       	rjmp	.+1004   	; 0x2718 <lcd_printf+0x4f4>
			}
		}
		// tabulátor
		else if (str[i] == '\t')
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	28 8d       	ldd	r18, Y+24	; 0x18
    2334:	39 8d       	ldd	r19, Y+25	; 0x19
    2336:	82 0f       	add	r24, r18
    2338:	93 1f       	adc	r25, r19
    233a:	fc 01       	movw	r30, r24
    233c:	80 81       	ld	r24, Z
    233e:	89 30       	cpi	r24, 0x09	; 9
    2340:	69 f4       	brne	.+26     	; 0x235c <lcd_printf+0x138>
		{
			lcd_put(' ');
    2342:	80 e2       	ldi	r24, 0x20	; 32
    2344:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
			lcd_put(' ');
    2348:	80 e2       	ldi	r24, 0x20	; 32
    234a:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
			lcd_put(' ');
    234e:	80 e2       	ldi	r24, 0x20	; 32
    2350:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
			lcd_put(' ');
    2354:	80 e2       	ldi	r24, 0x20	; 32
    2356:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
    235a:	de c1       	rjmp	.+956    	; 0x2718 <lcd_printf+0x4f4>
		}
		// znak lomeno
		else if (str[i] == '\\')
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	88 2f       	mov	r24, r24
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	28 8d       	ldd	r18, Y+24	; 0x18
    2364:	39 8d       	ldd	r19, Y+25	; 0x19
    2366:	82 0f       	add	r24, r18
    2368:	93 1f       	adc	r25, r19
    236a:	fc 01       	movw	r30, r24
    236c:	80 81       	ld	r24, Z
    236e:	8c 35       	cpi	r24, 0x5C	; 92
    2370:	21 f4       	brne	.+8      	; 0x237a <lcd_printf+0x156>
		{
			lcd_put(0xA4);
    2372:	84 ea       	ldi	r24, 0xA4	; 164
    2374:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
    2378:	cf c1       	rjmp	.+926    	; 0x2718 <lcd_printf+0x4f4>
		}
		else if (str[i] == '%')
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	88 2f       	mov	r24, r24
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	28 8d       	ldd	r18, Y+24	; 0x18
    2382:	39 8d       	ldd	r19, Y+25	; 0x19
    2384:	82 0f       	add	r24, r18
    2386:	93 1f       	adc	r25, r19
    2388:	fc 01       	movw	r30, r24
    238a:	80 81       	ld	r24, Z
    238c:	85 32       	cpi	r24, 0x25	; 37
    238e:	09 f0       	breq	.+2      	; 0x2392 <lcd_printf+0x16e>
    2390:	b8 c1       	rjmp	.+880    	; 0x2702 <lcd_printf+0x4de>
		{
			// pokud jde o znak %
			if (str[i+1] == '%')
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	01 96       	adiw	r24, 0x01	; 1
    239a:	28 8d       	ldd	r18, Y+24	; 0x18
    239c:	39 8d       	ldd	r19, Y+25	; 0x19
    239e:	82 0f       	add	r24, r18
    23a0:	93 1f       	adc	r25, r19
    23a2:	fc 01       	movw	r30, r24
    23a4:	80 81       	ld	r24, Z
    23a6:	85 32       	cpi	r24, 0x25	; 37
    23a8:	39 f4       	brne	.+14     	; 0x23b8 <lcd_printf+0x194>
			{
				i++;
    23aa:	89 81       	ldd	r24, Y+1	; 0x01
    23ac:	8f 5f       	subi	r24, 0xFF	; 255
    23ae:	89 83       	std	Y+1, r24	; 0x01
				lcd_put('%');
    23b0:	85 e2       	ldi	r24, 0x25	; 37
    23b2:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
    23b6:	b0 c1       	rjmp	.+864    	; 0x2718 <lcd_printf+0x4f4>
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	8f 5f       	subi	r24, 0xFF	; 255
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	b5 c0       	rjmp	.+362    	; 0x252a <lcd_printf+0x306>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
				{
					if (str[j] == '+' || str[j] == '-')
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	28 8d       	ldd	r18, Y+24	; 0x18
    23c8:	39 8d       	ldd	r19, Y+25	; 0x19
    23ca:	82 0f       	add	r24, r18
    23cc:	93 1f       	adc	r25, r19
    23ce:	fc 01       	movw	r30, r24
    23d0:	80 81       	ld	r24, Z
    23d2:	8b 32       	cpi	r24, 0x2B	; 43
    23d4:	59 f0       	breq	.+22     	; 0x23ec <lcd_printf+0x1c8>
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	88 2f       	mov	r24, r24
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	28 8d       	ldd	r18, Y+24	; 0x18
    23de:	39 8d       	ldd	r19, Y+25	; 0x19
    23e0:	82 0f       	add	r24, r18
    23e2:	93 1f       	adc	r25, r19
    23e4:	fc 01       	movw	r30, r24
    23e6:	80 81       	ld	r24, Z
    23e8:	8d 32       	cpi	r24, 0x2D	; 45
    23ea:	19 f4       	brne	.+6      	; 0x23f2 <lcd_printf+0x1ce>
					{
						znaminko = '+';
    23ec:	8b e2       	ldi	r24, 0x2B	; 43
    23ee:	8b 83       	std	Y+3, r24	; 0x03
    23f0:	99 c0       	rjmp	.+306    	; 0x2524 <lcd_printf+0x300>
					}
					else if (str[j] == '.')
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	88 2f       	mov	r24, r24
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	28 8d       	ldd	r18, Y+24	; 0x18
    23fa:	39 8d       	ldd	r19, Y+25	; 0x19
    23fc:	82 0f       	add	r24, r18
    23fe:	93 1f       	adc	r25, r19
    2400:	fc 01       	movw	r30, r24
    2402:	80 81       	ld	r24, Z
    2404:	8e 32       	cpi	r24, 0x2E	; 46
    2406:	19 f4       	brne	.+6      	; 0x240e <lcd_printf+0x1ea>
					{
						desetina_carka = ',';
    2408:	8c e2       	ldi	r24, 0x2C	; 44
    240a:	8d 83       	std	Y+5, r24	; 0x05
    240c:	8b c0       	rjmp	.+278    	; 0x2524 <lcd_printf+0x300>
					}
					else if (str[j] == '0')
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	88 2f       	mov	r24, r24
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	28 8d       	ldd	r18, Y+24	; 0x18
    2416:	39 8d       	ldd	r19, Y+25	; 0x19
    2418:	82 0f       	add	r24, r18
    241a:	93 1f       	adc	r25, r19
    241c:	fc 01       	movw	r30, r24
    241e:	80 81       	ld	r24, Z
    2420:	80 33       	cpi	r24, 0x30	; 48
    2422:	d1 f4       	brne	.+52     	; 0x2458 <lcd_printf+0x234>
					{
						if (desetina_carka == '\0')
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	88 23       	and	r24, r24
    2428:	a1 f4       	brne	.+40     	; 0x2452 <lcd_printf+0x22e>
						{
							if (nula == '0')
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	80 33       	cpi	r24, 0x30	; 48
    242e:	71 f4       	brne	.+28     	; 0x244c <lcd_printf+0x228>
								mista_pred_carkou *= 10;
    2430:	8e 81       	ldd	r24, Y+6	; 0x06
    2432:	9f 81       	ldd	r25, Y+7	; 0x07
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	9c 01       	movw	r18, r24
    243a:	22 0f       	add	r18, r18
    243c:	33 1f       	adc	r19, r19
    243e:	22 0f       	add	r18, r18
    2440:	33 1f       	adc	r19, r19
    2442:	82 0f       	add	r24, r18
    2444:	93 1f       	adc	r25, r19
    2446:	9f 83       	std	Y+7, r25	; 0x07
    2448:	8e 83       	std	Y+6, r24	; 0x06
    244a:	6c c0       	rjmp	.+216    	; 0x2524 <lcd_printf+0x300>
							else
								nula = '0';
    244c:	80 e3       	ldi	r24, 0x30	; 48
    244e:	8c 83       	std	Y+4, r24	; 0x04
    2450:	69 c0       	rjmp	.+210    	; 0x2524 <lcd_printf+0x300>
						}
						else
						{
							mista_za_carkou = 0;
    2452:	19 86       	std	Y+9, r1	; 0x09
    2454:	18 86       	std	Y+8, r1	; 0x08
    2456:	66 c0       	rjmp	.+204    	; 0x2524 <lcd_printf+0x300>
						}

					}
					else if (str[j] >= '1' && str[j] <= '9')
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	88 2f       	mov	r24, r24
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	28 8d       	ldd	r18, Y+24	; 0x18
    2460:	39 8d       	ldd	r19, Y+25	; 0x19
    2462:	82 0f       	add	r24, r18
    2464:	93 1f       	adc	r25, r19
    2466:	fc 01       	movw	r30, r24
    2468:	80 81       	ld	r24, Z
    246a:	81 33       	cpi	r24, 0x31	; 49
    246c:	08 f4       	brcc	.+2      	; 0x2470 <lcd_printf+0x24c>
    246e:	5a c0       	rjmp	.+180    	; 0x2524 <lcd_printf+0x300>
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	88 2f       	mov	r24, r24
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	28 8d       	ldd	r18, Y+24	; 0x18
    2478:	39 8d       	ldd	r19, Y+25	; 0x19
    247a:	82 0f       	add	r24, r18
    247c:	93 1f       	adc	r25, r19
    247e:	fc 01       	movw	r30, r24
    2480:	80 81       	ld	r24, Z
    2482:	8a 33       	cpi	r24, 0x3A	; 58
    2484:	08 f0       	brcs	.+2      	; 0x2488 <lcd_printf+0x264>
    2486:	4e c0       	rjmp	.+156    	; 0x2524 <lcd_printf+0x300>
					{
						if (desetina_carka == ',')
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
    248a:	8c 32       	cpi	r24, 0x2C	; 44
    248c:	31 f5       	brne	.+76     	; 0x24da <lcd_printf+0x2b6>
						{
							if (mista_za_carkou == -1)
    248e:	88 85       	ldd	r24, Y+8	; 0x08
    2490:	99 85       	ldd	r25, Y+9	; 0x09
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	11 f4       	brne	.+4      	; 0x249a <lcd_printf+0x276>
								mista_za_carkou = 0;
    2496:	19 86       	std	Y+9, r1	; 0x09
    2498:	18 86       	std	Y+8, r1	; 0x08

							mista_za_carkou *= 10;
    249a:	88 85       	ldd	r24, Y+8	; 0x08
    249c:	99 85       	ldd	r25, Y+9	; 0x09
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	9c 01       	movw	r18, r24
    24a4:	22 0f       	add	r18, r18
    24a6:	33 1f       	adc	r19, r19
    24a8:	22 0f       	add	r18, r18
    24aa:	33 1f       	adc	r19, r19
    24ac:	82 0f       	add	r24, r18
    24ae:	93 1f       	adc	r25, r19
    24b0:	99 87       	std	Y+9, r25	; 0x09
    24b2:	88 87       	std	Y+8, r24	; 0x08
							mista_za_carkou += str[j] - '0';
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	88 2f       	mov	r24, r24
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	28 8d       	ldd	r18, Y+24	; 0x18
    24bc:	39 8d       	ldd	r19, Y+25	; 0x19
    24be:	82 0f       	add	r24, r18
    24c0:	93 1f       	adc	r25, r19
    24c2:	fc 01       	movw	r30, r24
    24c4:	80 81       	ld	r24, Z
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	c0 97       	sbiw	r24, 0x30	; 48
    24cc:	28 85       	ldd	r18, Y+8	; 0x08
    24ce:	39 85       	ldd	r19, Y+9	; 0x09
    24d0:	82 0f       	add	r24, r18
    24d2:	93 1f       	adc	r25, r19
    24d4:	99 87       	std	Y+9, r25	; 0x09
    24d6:	88 87       	std	Y+8, r24	; 0x08
    24d8:	25 c0       	rjmp	.+74     	; 0x2524 <lcd_printf+0x300>
						}
						else
						{
							if (mista_pred_carkou == -1)
    24da:	8e 81       	ldd	r24, Y+6	; 0x06
    24dc:	9f 81       	ldd	r25, Y+7	; 0x07
    24de:	01 96       	adiw	r24, 0x01	; 1
    24e0:	11 f4       	brne	.+4      	; 0x24e6 <lcd_printf+0x2c2>
								mista_pred_carkou = 0;
    24e2:	1f 82       	std	Y+7, r1	; 0x07
    24e4:	1e 82       	std	Y+6, r1	; 0x06

							mista_pred_carkou *= 10;
    24e6:	8e 81       	ldd	r24, Y+6	; 0x06
    24e8:	9f 81       	ldd	r25, Y+7	; 0x07
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	9c 01       	movw	r18, r24
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	82 0f       	add	r24, r18
    24fa:	93 1f       	adc	r25, r19
    24fc:	9f 83       	std	Y+7, r25	; 0x07
    24fe:	8e 83       	std	Y+6, r24	; 0x06
							mista_pred_carkou += str[j] - '0';
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	88 2f       	mov	r24, r24
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	28 8d       	ldd	r18, Y+24	; 0x18
    2508:	39 8d       	ldd	r19, Y+25	; 0x19
    250a:	82 0f       	add	r24, r18
    250c:	93 1f       	adc	r25, r19
    250e:	fc 01       	movw	r30, r24
    2510:	80 81       	ld	r24, Z
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	c0 97       	sbiw	r24, 0x30	; 48
    2518:	2e 81       	ldd	r18, Y+6	; 0x06
    251a:	3f 81       	ldd	r19, Y+7	; 0x07
    251c:	82 0f       	add	r24, r18
    251e:	93 1f       	adc	r25, r19
    2520:	9f 83       	std	Y+7, r25	; 0x07
    2522:	8e 83       	std	Y+6, r24	; 0x06
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
					j++)
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	8f 5f       	subi	r24, 0xFF	; 255
    2528:	8a 83       	std	Y+2, r24	; 0x02
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	28 8d       	ldd	r18, Y+24	; 0x18
    2532:	39 8d       	ldd	r19, Y+25	; 0x19
    2534:	82 0f       	add	r24, r18
    2536:	93 1f       	adc	r25, r19
    2538:	fc 01       	movw	r30, r24
    253a:	80 81       	ld	r24, Z
			}
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
    253c:	83 36       	cpi	r24, 0x63	; 99
    253e:	69 f1       	breq	.+90     	; 0x259a <lcd_printf+0x376>
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	88 2f       	mov	r24, r24
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	28 8d       	ldd	r18, Y+24	; 0x18
    2548:	39 8d       	ldd	r19, Y+25	; 0x19
    254a:	82 0f       	add	r24, r18
    254c:	93 1f       	adc	r25, r19
    254e:	fc 01       	movw	r30, r24
    2550:	80 81       	ld	r24, Z
			// když jde o proměnnou
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
    2552:	88 34       	cpi	r24, 0x48	; 72
    2554:	11 f1       	breq	.+68     	; 0x259a <lcd_printf+0x376>
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	28 8d       	ldd	r18, Y+24	; 0x18
    255e:	39 8d       	ldd	r19, Y+25	; 0x19
    2560:	82 0f       	add	r24, r18
    2562:	93 1f       	adc	r25, r19
    2564:	fc 01       	movw	r30, r24
    2566:	80 81       	ld	r24, Z
			else
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
    2568:	84 36       	cpi	r24, 0x64	; 100
    256a:	b9 f0       	breq	.+46     	; 0x259a <lcd_printf+0x376>
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    256c:	8a 81       	ldd	r24, Y+2	; 0x02
    256e:	88 2f       	mov	r24, r24
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	28 8d       	ldd	r18, Y+24	; 0x18
    2574:	39 8d       	ldd	r19, Y+25	; 0x19
    2576:	82 0f       	add	r24, r18
    2578:	93 1f       	adc	r25, r19
    257a:	fc 01       	movw	r30, r24
    257c:	80 81       	ld	r24, Z
			{
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
    257e:	86 36       	cpi	r24, 0x66	; 102
    2580:	61 f0       	breq	.+24     	; 0x259a <lcd_printf+0x376>
					str[j] != 'f' &&					\
					str[j] != 's'; 						\
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	28 8d       	ldd	r18, Y+24	; 0x18
    258a:	39 8d       	ldd	r19, Y+25	; 0x19
    258c:	82 0f       	add	r24, r18
    258e:	93 1f       	adc	r25, r19
    2590:	fc 01       	movw	r30, r24
    2592:	80 81       	ld	r24, Z
				// zjistáme jakého typu jsou data
				for (j=i+1;								\
					str[j] != 'c' && 					\
					str[j] != 'H' &&					\
					str[j] != 'd' &&					\
					str[j] != 'f' &&					\
    2594:	83 37       	cpi	r24, 0x73	; 115
    2596:	09 f0       	breq	.+2      	; 0x259a <lcd_printf+0x376>
    2598:	13 cf       	rjmp	.-474    	; 0x23c0 <lcd_printf+0x19c>
						}
					}
				}

				// posuneme index procházení pole
				i = j;
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01

				// podle typu s nimi naložíme
				if (str[j] == 'c')
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	88 2f       	mov	r24, r24
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	28 8d       	ldd	r18, Y+24	; 0x18
    25a6:	39 8d       	ldd	r19, Y+25	; 0x19
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	fc 01       	movw	r30, r24
    25ae:	80 81       	ld	r24, Z
    25b0:	83 36       	cpi	r24, 0x63	; 99
    25b2:	69 f4       	brne	.+26     	; 0x25ce <lcd_printf+0x3aa>
				{
					lcd_put(va_arg(ap, int));
    25b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25b8:	9c 01       	movw	r18, r24
    25ba:	2e 5f       	subi	r18, 0xFE	; 254
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	3f 87       	std	Y+15, r19	; 0x0f
    25c0:	2e 87       	std	Y+14, r18	; 0x0e
    25c2:	fc 01       	movw	r30, r24
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
    25cc:	8e c0       	rjmp	.+284    	; 0x26ea <lcd_printf+0x4c6>
				}
				else if (str[j] == 'H')
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	28 8d       	ldd	r18, Y+24	; 0x18
    25d6:	39 8d       	ldd	r19, Y+25	; 0x19
    25d8:	82 0f       	add	r24, r18
    25da:	93 1f       	adc	r25, r19
    25dc:	fc 01       	movw	r30, r24
    25de:	80 81       	ld	r24, Z
    25e0:	88 34       	cpi	r24, 0x48	; 72
    25e2:	69 f4       	brne	.+26     	; 0x25fe <lcd_printf+0x3da>
				{
					print_hex(va_arg(ap, uint16_t));
    25e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25e8:	9c 01       	movw	r18, r24
    25ea:	2e 5f       	subi	r18, 0xFE	; 254
    25ec:	3f 4f       	sbci	r19, 0xFF	; 255
    25ee:	3f 87       	std	Y+15, r19	; 0x0f
    25f0:	2e 87       	std	Y+14, r18	; 0x0e
    25f2:	fc 01       	movw	r30, r24
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <print_hex>
    25fc:	76 c0       	rjmp	.+236    	; 0x26ea <lcd_printf+0x4c6>
				}
				else if (str[j] == 'd')
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	28 8d       	ldd	r18, Y+24	; 0x18
    2606:	39 8d       	ldd	r19, Y+25	; 0x19
    2608:	82 0f       	add	r24, r18
    260a:	93 1f       	adc	r25, r19
    260c:	fc 01       	movw	r30, r24
    260e:	80 81       	ld	r24, Z
    2610:	84 36       	cpi	r24, 0x64	; 100
    2612:	a9 f4       	brne	.+42     	; 0x263e <lcd_printf+0x41a>
				{
					tmp_int = va_arg(ap, int);
    2614:	8e 85       	ldd	r24, Y+14	; 0x0e
    2616:	9f 85       	ldd	r25, Y+15	; 0x0f
    2618:	9c 01       	movw	r18, r24
    261a:	2e 5f       	subi	r18, 0xFE	; 254
    261c:	3f 4f       	sbci	r19, 0xFF	; 255
    261e:	3f 87       	std	Y+15, r19	; 0x0f
    2620:	2e 87       	std	Y+14, r18	; 0x0e
    2622:	fc 01       	movw	r30, r24
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	9b 87       	std	Y+11, r25	; 0x0b
    262a:	8a 87       	std	Y+10, r24	; 0x0a
					print_int(tmp_int, znaminko, nula, mista_pred_carkou);
    262c:	2e 81       	ldd	r18, Y+6	; 0x06
    262e:	3f 81       	ldd	r19, Y+7	; 0x07
    2630:	8a 85       	ldd	r24, Y+10	; 0x0a
    2632:	9b 85       	ldd	r25, Y+11	; 0x0b
    2634:	4c 81       	ldd	r20, Y+4	; 0x04
    2636:	6b 81       	ldd	r22, Y+3	; 0x03
    2638:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <print_int>
    263c:	56 c0       	rjmp	.+172    	; 0x26ea <lcd_printf+0x4c6>
				}
				else if (str[j] == 'f')
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	28 8d       	ldd	r18, Y+24	; 0x18
    2646:	39 8d       	ldd	r19, Y+25	; 0x19
    2648:	82 0f       	add	r24, r18
    264a:	93 1f       	adc	r25, r19
    264c:	fc 01       	movw	r30, r24
    264e:	80 81       	ld	r24, Z
    2650:	86 36       	cpi	r24, 0x66	; 102
    2652:	c9 f4       	brne	.+50     	; 0x2686 <lcd_printf+0x462>
				{
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
    2654:	8e 85       	ldd	r24, Y+14	; 0x0e
    2656:	9f 85       	ldd	r25, Y+15	; 0x0f
    2658:	9c 01       	movw	r18, r24
    265a:	2c 5f       	subi	r18, 0xFC	; 252
    265c:	3f 4f       	sbci	r19, 0xFF	; 255
    265e:	3f 87       	std	Y+15, r19	; 0x0f
    2660:	2e 87       	std	Y+14, r18	; 0x0e
    2662:	fc 01       	movw	r30, r24
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	a2 81       	ldd	r26, Z+2	; 0x02
    266a:	b3 81       	ldd	r27, Z+3	; 0x03
    266c:	48 85       	ldd	r20, Y+8	; 0x08
    266e:	59 85       	ldd	r21, Y+9	; 0x09
    2670:	2e 81       	ldd	r18, Y+6	; 0x06
    2672:	3f 81       	ldd	r19, Y+7	; 0x07
    2674:	7a 01       	movw	r14, r20
    2676:	89 01       	movw	r16, r18
    2678:	2c 81       	ldd	r18, Y+4	; 0x04
    267a:	4b 81       	ldd	r20, Y+3	; 0x03
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 5f 10 	call	0x20be	; 0x20be <print_double>
    2684:	32 c0       	rjmp	.+100    	; 0x26ea <lcd_printf+0x4c6>
				}
				else if (str[j] == 's')
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	28 8d       	ldd	r18, Y+24	; 0x18
    268e:	39 8d       	ldd	r19, Y+25	; 0x19
    2690:	82 0f       	add	r24, r18
    2692:	93 1f       	adc	r25, r19
    2694:	fc 01       	movw	r30, r24
    2696:	80 81       	ld	r24, Z
    2698:	83 37       	cpi	r24, 0x73	; 115
    269a:	39 f5       	brne	.+78     	; 0x26ea <lcd_printf+0x4c6>
				{
					str_p = va_arg(ap, char *);
    269c:	8e 85       	ldd	r24, Y+14	; 0x0e
    269e:	9f 85       	ldd	r25, Y+15	; 0x0f
    26a0:	9c 01       	movw	r18, r24
    26a2:	2e 5f       	subi	r18, 0xFE	; 254
    26a4:	3f 4f       	sbci	r19, 0xFF	; 255
    26a6:	3f 87       	std	Y+15, r19	; 0x0f
    26a8:	2e 87       	std	Y+14, r18	; 0x0e
    26aa:	fc 01       	movw	r30, r24
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	9d 87       	std	Y+13, r25	; 0x0d
    26b2:	8c 87       	std	Y+12, r24	; 0x0c
					for (j=0; *(str_p + j) != '\0'; j++)
    26b4:	1a 82       	std	Y+2, r1	; 0x02
    26b6:	0e c0       	rjmp	.+28     	; 0x26d4 <lcd_printf+0x4b0>
						lcd_put(*(str_p + j));
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	2c 85       	ldd	r18, Y+12	; 0x0c
    26c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    26c2:	82 0f       	add	r24, r18
    26c4:	93 1f       	adc	r25, r19
    26c6:	fc 01       	movw	r30, r24
    26c8:	80 81       	ld	r24, Z
    26ca:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
					print_double(va_arg(ap, double), znaminko, nula, mista_pred_carkou, mista_za_carkou);
				}
				else if (str[j] == 's')
				{
					str_p = va_arg(ap, char *);
					for (j=0; *(str_p + j) != '\0'; j++)
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	8f 5f       	subi	r24, 0xFF	; 255
    26d2:	8a 83       	std	Y+2, r24	; 0x02
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	2c 85       	ldd	r18, Y+12	; 0x0c
    26dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    26de:	82 0f       	add	r24, r18
    26e0:	93 1f       	adc	r25, r19
    26e2:	fc 01       	movw	r30, r24
    26e4:	80 81       	ld	r24, Z
    26e6:	88 23       	and	r24, r24
    26e8:	39 f7       	brne	.-50     	; 0x26b8 <lcd_printf+0x494>
						lcd_put(*(str_p + j));
				}

				// vynulovní formátovacích proměnných
				znaminko = '\0';
    26ea:	1b 82       	std	Y+3, r1	; 0x03
				nula = '\0';
    26ec:	1c 82       	std	Y+4, r1	; 0x04
				desetina_carka = '\0';
    26ee:	1d 82       	std	Y+5, r1	; 0x05
				mista_pred_carkou = -1;
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	9f ef       	ldi	r25, 0xFF	; 255
    26f4:	9f 83       	std	Y+7, r25	; 0x07
    26f6:	8e 83       	std	Y+6, r24	; 0x06
				mista_za_carkou = -1;
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	9f ef       	ldi	r25, 0xFF	; 255
    26fc:	99 87       	std	Y+9, r25	; 0x09
    26fe:	88 87       	std	Y+8, r24	; 0x08
    2700:	0b c0       	rjmp	.+22     	; 0x2718 <lcd_printf+0x4f4>
			}
		}
		else
		{
			lcd_put(str[i]);
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	28 8d       	ldd	r18, Y+24	; 0x18
    270a:	39 8d       	ldd	r19, Y+25	; 0x19
    270c:	82 0f       	add	r24, r18
    270e:	93 1f       	adc	r25, r19
    2710:	fc 01       	movw	r30, r24
    2712:	80 81       	ld	r24, Z
    2714:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <lcd_put>
	 //va_list ap;
	 va_start(ap, str);



	for (i=0; str[i] != '\0'; i++)
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	8f 5f       	subi	r24, 0xFF	; 255
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	88 2f       	mov	r24, r24
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	28 8d       	ldd	r18, Y+24	; 0x18
    2726:	39 8d       	ldd	r19, Y+25	; 0x19
    2728:	82 0f       	add	r24, r18
    272a:	93 1f       	adc	r25, r19
    272c:	fc 01       	movw	r30, r24
    272e:	80 81       	ld	r24, Z
    2730:	88 23       	and	r24, r24
    2732:	09 f0       	breq	.+2      	; 0x2736 <lcd_printf+0x512>
    2734:	96 cd       	rjmp	.-1236   	; 0x2262 <lcd_printf+0x3e>
		{
			lcd_put(str[i]);
		}
	}
	va_end(ap);
}
    2736:	00 00       	nop
    2738:	2f 96       	adiw	r28, 0x0f	; 15
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	ff 90       	pop	r15
    274e:	ef 90       	pop	r14
    2750:	08 95       	ret

00002752 <ntc_init>:
#define R_REF	10e3
// ========================================================

// NTC initialization
void ntc_init(void)
{
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0) | 5;							// referention AVCC, measure on channel ADC5
    275a:	8c e7       	ldi	r24, 0x7C	; 124
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	25 e4       	ldi	r18, 0x45	; 69
    2760:	fc 01       	movw	r30, r24
    2762:	20 83       	st	Z, r18
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);	// ADEN - enable ADC, ACD clk = F_CPU/64
    2764:	8a e7       	ldi	r24, 0x7A	; 122
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	26 e8       	ldi	r18, 0x86	; 134
    276a:	fc 01       	movw	r30, r24
    276c:	20 83       	st	Z, r18
}
    276e:	00 00       	nop
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	08 95       	ret

00002776 <ntc_measure>:

// NCT measure
int16_t ntc_measure(void)
{
    2776:	cf 92       	push	r12
    2778:	df 92       	push	r13
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	2e 97       	sbiw	r28, 0x0e	; 14
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	de bf       	out	0x3e, r29	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	cd bf       	out	0x3d, r28	; 61
	int16_t adc, ntc_res, temp;
	double volt, tmp_log;
	
	ADCSRA |= (1<<ADSC);        // start conversion
    2792:	8a e7       	ldi	r24, 0x7A	; 122
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	2a e7       	ldi	r18, 0x7A	; 122
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	f9 01       	movw	r30, r18
    279c:	20 81       	ld	r18, Z
    279e:	20 64       	ori	r18, 0x40	; 64
    27a0:	fc 01       	movw	r30, r24
    27a2:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));  // wait to end conversion
    27a4:	00 00       	nop
    27a6:	8a e7       	ldi	r24, 0x7A	; 122
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	fc 01       	movw	r30, r24
    27ac:	80 81       	ld	r24, Z
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	80 74       	andi	r24, 0x40	; 64
    27b4:	99 27       	eor	r25, r25
    27b6:	89 2b       	or	r24, r25
    27b8:	b1 f7       	brne	.-20     	; 0x27a6 <ntc_measure+0x30>
	adc=ADC;					// value measurement
    27ba:	88 e7       	ldi	r24, 0x78	; 120
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	fc 01       	movw	r30, r24
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
	
	// convert to voltage
	volt = (V_REF/ADC_MAX) * ((double)adc);
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	9a 81       	ldd	r25, Y+2	; 0x02
    27cc:	09 2e       	mov	r0, r25
    27ce:	00 0c       	add	r0, r0
    27d0:	aa 0b       	sbc	r26, r26
    27d2:	bb 0b       	sbc	r27, r27
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 4d 18 	call	0x309a	; 0x309a <__floatsisf>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	2a e0       	ldi	r18, 0x0A	; 10
    27e2:	38 e2       	ldi	r19, 0x28	; 40
    27e4:	40 ea       	ldi	r20, 0xA0	; 160
    27e6:	5b e3       	ldi	r21, 0x3B	; 59
    27e8:	bc 01       	movw	r22, r24
    27ea:	cd 01       	movw	r24, r26
    27ec:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8b 83       	std	Y+3, r24	; 0x03
    27f6:	9c 83       	std	Y+4, r25	; 0x04
    27f8:	ad 83       	std	Y+5, r26	; 0x05
    27fa:	be 83       	std	Y+6, r27	; 0x06
	ntc_res = (-(volt * R_DIV) / V_REF) / ((volt/V_REF) - 1);
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e4       	ldi	r19, 0x40	; 64
    2800:	4c e1       	ldi	r20, 0x1C	; 28
    2802:	56 e4       	ldi	r21, 0x46	; 70
    2804:	6b 81       	ldd	r22, Y+3	; 0x03
    2806:	7c 81       	ldd	r23, Y+4	; 0x04
    2808:	8d 81       	ldd	r24, Y+5	; 0x05
    280a:	9e 81       	ldd	r25, Y+6	; 0x06
    280c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	b0 58       	subi	r27, 0x80	; 128
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 ea       	ldi	r20, 0xA0	; 160
    281c:	50 e4       	ldi	r21, 0x40	; 64
    281e:	bc 01       	movw	r22, r24
    2820:	cd 01       	movw	r24, r26
    2822:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	6c 01       	movw	r12, r24
    282c:	7d 01       	movw	r14, r26
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 ea       	ldi	r20, 0xA0	; 160
    2834:	50 e4       	ldi	r21, 0x40	; 64
    2836:	6b 81       	ldd	r22, Y+3	; 0x03
    2838:	7c 81       	ldd	r23, Y+4	; 0x04
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__subsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9c 01       	movw	r18, r24
    285c:	ad 01       	movw	r20, r26
    285e:	c7 01       	movw	r24, r14
    2860:	b6 01       	movw	r22, r12
    2862:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 15 18 	call	0x302a	; 0x302a <__fixsfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	98 87       	std	Y+8, r25	; 0x08
    2878:	8f 83       	std	Y+7, r24	; 0x07
	
	tmp_log = log(ntc_res/R_REF);
    287a:	8f 81       	ldd	r24, Y+7	; 0x07
    287c:	98 85       	ldd	r25, Y+8	; 0x08
    287e:	09 2e       	mov	r0, r25
    2880:	00 0c       	add	r0, r0
    2882:	aa 0b       	sbc	r26, r26
    2884:	bb 0b       	sbc	r27, r27
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 4d 18 	call	0x309a	; 0x309a <__floatsisf>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e4       	ldi	r19, 0x40	; 64
    2896:	4c e1       	ldi	r20, 0x1C	; 28
    2898:	56 e4       	ldi	r21, 0x46	; 70
    289a:	bc 01       	movw	r22, r24
    289c:	cd 01       	movw	r24, r26
    289e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 0a 19 	call	0x3214	; 0x3214 <log>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	89 87       	std	Y+9, r24	; 0x09
    28b4:	9a 87       	std	Y+10, r25	; 0x0a
    28b6:	ab 87       	std	Y+11, r26	; 0x0b
    28b8:	bc 87       	std	Y+12, r27	; 0x0c
	temp = 1.0 / ( A1 + B1*tmp_log + C1*tmp_log*tmp_log + D1*tmp_log*tmp_log*tmp_log ) - 273.15;
    28ba:	21 ef       	ldi	r18, 0xF1	; 241
    28bc:	3b eb       	ldi	r19, 0xBB	; 187
    28be:	46 e8       	ldi	r20, 0x86	; 134
    28c0:	59 e3       	ldi	r21, 0x39	; 57
    28c2:	69 85       	ldd	r22, Y+9	; 0x09
    28c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    28c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ca:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	2d e0       	ldi	r18, 0x0D	; 13
    28d4:	3f ec       	ldi	r19, 0xCF	; 207
    28d6:	4b e5       	ldi	r20, 0x5B	; 91
    28d8:	5b e3       	ldi	r21, 0x3B	; 59
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__addsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	6c 01       	movw	r12, r24
    28e8:	7d 01       	movw	r14, r26
    28ea:	22 e8       	ldi	r18, 0x82	; 130
    28ec:	35 ed       	ldi	r19, 0xD5	; 213
    28ee:	4f e2       	ldi	r20, 0x2F	; 47
    28f0:	56 e3       	ldi	r21, 0x36	; 54
    28f2:	69 85       	ldd	r22, Y+9	; 0x09
    28f4:	7a 85       	ldd	r23, Y+10	; 0x0a
    28f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    28f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    28fa:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	29 85       	ldd	r18, Y+9	; 0x09
    2904:	3a 85       	ldd	r19, Y+10	; 0x0a
    2906:	4b 85       	ldd	r20, Y+11	; 0x0b
    2908:	5c 85       	ldd	r21, Y+12	; 0x0c
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9c 01       	movw	r18, r24
    2918:	ad 01       	movw	r20, r26
    291a:	c7 01       	movw	r24, r14
    291c:	b6 01       	movw	r22, r12
    291e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__addsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	6c 01       	movw	r12, r24
    2928:	7d 01       	movw	r14, r26
    292a:	2a e6       	ldi	r18, 0x6A	; 106
    292c:	33 e1       	ldi	r19, 0x13	; 19
    292e:	49 e8       	ldi	r20, 0x89	; 137
    2930:	53 e3       	ldi	r21, 0x33	; 51
    2932:	69 85       	ldd	r22, Y+9	; 0x09
    2934:	7a 85       	ldd	r23, Y+10	; 0x0a
    2936:	8b 85       	ldd	r24, Y+11	; 0x0b
    2938:	9c 85       	ldd	r25, Y+12	; 0x0c
    293a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	29 85       	ldd	r18, Y+9	; 0x09
    2944:	3a 85       	ldd	r19, Y+10	; 0x0a
    2946:	4b 85       	ldd	r20, Y+11	; 0x0b
    2948:	5c 85       	ldd	r21, Y+12	; 0x0c
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	29 85       	ldd	r18, Y+9	; 0x09
    2958:	3a 85       	ldd	r19, Y+10	; 0x0a
    295a:	4b 85       	ldd	r20, Y+11	; 0x0b
    295c:	5c 85       	ldd	r21, Y+12	; 0x0c
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9c 01       	movw	r18, r24
    296c:	ad 01       	movw	r20, r26
    296e:	c7 01       	movw	r24, r14
    2970:	b6 01       	movw	r22, r12
    2972:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__addsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	9c 01       	movw	r18, r24
    297c:	ad 01       	movw	r20, r26
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	80 e8       	ldi	r24, 0x80	; 128
    2984:	9f e3       	ldi	r25, 0x3F	; 63
    2986:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	23 e3       	ldi	r18, 0x33	; 51
    2990:	33 e9       	ldi	r19, 0x93	; 147
    2992:	48 e8       	ldi	r20, 0x88	; 136
    2994:	53 e4       	ldi	r21, 0x43	; 67
    2996:	bc 01       	movw	r22, r24
    2998:	cd 01       	movw	r24, r26
    299a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__subsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 15 18 	call	0x302a	; 0x302a <__fixsfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9e 87       	std	Y+14, r25	; 0x0e
    29b0:	8d 87       	std	Y+13, r24	; 0x0d
	
	return temp;
    29b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b4:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    29b6:	2e 96       	adiw	r28, 0x0e	; 14
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	df 91       	pop	r29
    29c4:	cf 91       	pop	r28
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	df 90       	pop	r13
    29cc:	cf 90       	pop	r12
    29ce:	08 95       	ret

000029d0 <motor_init>:
#include "wyk_step_stick.h"

void motor_init(void)
{
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	cd b7       	in	r28, 0x3d	; 61
    29d6:	de b7       	in	r29, 0x3e	; 62
	MOTOR_ENA_DDR |= MOTOR_ENA_PIN;
    29d8:	8a e2       	ldi	r24, 0x2A	; 42
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	2a e2       	ldi	r18, 0x2A	; 42
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	f9 01       	movw	r30, r18
    29e2:	20 81       	ld	r18, Z
    29e4:	20 68       	ori	r18, 0x80	; 128
    29e6:	fc 01       	movw	r30, r24
    29e8:	20 83       	st	Z, r18
	MOTOR_DIR_DDR |= MOTOR_DIR_PIN;
    29ea:	8a e2       	ldi	r24, 0x2A	; 42
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	2a e2       	ldi	r18, 0x2A	; 42
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	f9 01       	movw	r30, r18
    29f4:	20 81       	ld	r18, Z
    29f6:	20 62       	ori	r18, 0x20	; 32
    29f8:	fc 01       	movw	r30, r24
    29fa:	20 83       	st	Z, r18
	MOTOR_STEP_DDR |= MOTOR_STEP_PIN;
    29fc:	84 e2       	ldi	r24, 0x24	; 36
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	24 e2       	ldi	r18, 0x24	; 36
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	f9 01       	movw	r30, r18
    2a06:	20 81       	ld	r18, Z
    2a08:	28 60       	ori	r18, 0x08	; 8
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	20 83       	st	Z, r18

	MOTOR_DRIVER_OFF;
    2a0e:	8b e2       	ldi	r24, 0x2B	; 43
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	2b e2       	ldi	r18, 0x2B	; 43
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	f9 01       	movw	r30, r18
    2a18:	20 81       	ld	r18, Z
    2a1a:	20 68       	ori	r18, 0x80	; 128
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	20 83       	st	Z, r18
			MOTOR_MS1_1;
			MOTOR_MS2_1;
			MOTOR_MS3_0;
			break;
		default:
			MOTOR_MS1_1;
    2a20:	85 e2       	ldi	r24, 0x25	; 37
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	25 e2       	ldi	r18, 0x25	; 37
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	f9 01       	movw	r30, r18
    2a2a:	20 81       	ld	r18, Z
    2a2c:	21 60       	ori	r18, 0x01	; 1
    2a2e:	fc 01       	movw	r30, r24
    2a30:	20 83       	st	Z, r18
			MOTOR_MS2_1;
    2a32:	85 e2       	ldi	r24, 0x25	; 37
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	25 e2       	ldi	r18, 0x25	; 37
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	f9 01       	movw	r30, r18
    2a3c:	20 81       	ld	r18, Z
    2a3e:	22 60       	ori	r18, 0x02	; 2
    2a40:	fc 01       	movw	r30, r24
    2a42:	20 83       	st	Z, r18
			MOTOR_MS3_1;
    2a44:	85 e2       	ldi	r24, 0x25	; 37
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	25 e2       	ldi	r18, 0x25	; 37
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	f9 01       	movw	r30, r18
    2a4e:	20 81       	ld	r18, Z
    2a50:	24 60       	ori	r18, 0x04	; 4
    2a52:	fc 01       	movw	r30, r24
    2a54:	20 83       	st	Z, r18
	}

	

	TCCR2A = (1<<COM2A0) | (1<<WGM21);				// toggle OCR2A CTC mode
    2a56:	80 eb       	ldi	r24, 0xB0	; 176
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	22 e4       	ldi	r18, 0x42	; 66
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	20 83       	st	Z, r18
	TCCR2B = 0;										// clock off
    2a60:	81 eb       	ldi	r24, 0xB1	; 177
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	fc 01       	movw	r30, r24
    2a66:	10 82       	st	Z, r1
	OCR2A = 0;
    2a68:	83 eb       	ldi	r24, 0xB3	; 179
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	10 82       	st	Z, r1
	TCNT2 = 0;
    2a70:	82 eb       	ldi	r24, 0xB2	; 178
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	fc 01       	movw	r30, r24
    2a76:	10 82       	st	Z, r1
	MOTOR_DIR0;
    2a78:	8b e2       	ldi	r24, 0x2B	; 43
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	2b e2       	ldi	r18, 0x2B	; 43
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	f9 01       	movw	r30, r18
    2a82:	20 81       	ld	r18, Z
    2a84:	2f 7d       	andi	r18, 0xDF	; 223
    2a86:	fc 01       	movw	r30, r24
    2a88:	20 83       	st	Z, r18
}
    2a8a:	00 00       	nop
    2a8c:	df 91       	pop	r29
    2a8e:	cf 91       	pop	r28
    2a90:	08 95       	ret

00002a92 <motor_set_rpm>:

void motor_set_rpm(uint16_t rpm)					// rote per minute
{
    2a92:	8f 92       	push	r8
    2a94:	9f 92       	push	r9
    2a96:	af 92       	push	r10
    2a98:	bf 92       	push	r11
    2a9a:	cf 92       	push	r12
    2a9c:	df 92       	push	r13
    2a9e:	ef 92       	push	r14
    2aa0:	ff 92       	push	r15
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	6a 97       	sbiw	r28, 0x1a	; 26
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab8:	89 8f       	std	Y+25, r24	; 0x19
	uint32_t buf;
	const uint32_t freq = F_CPU*60;
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	98 ea       	ldi	r25, 0xA8	; 168
    2abe:	a4 ed       	ldi	r26, 0xD4	; 212
    2ac0:	b5 e5       	ldi	r27, 0x55	; 85
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
    2ac4:	9b 83       	std	Y+3, r25	; 0x03
    2ac6:	ac 83       	std	Y+4, r26	; 0x04
    2ac8:	bd 83       	std	Y+5, r27	; 0x05
	const uint16_t div[] = {1, 8, 32, 64, 128, 256, 1024};
    2aca:	8e e0       	ldi	r24, 0x0E	; 14
    2acc:	e5 eb       	ldi	r30, 0xB5	; 181
    2ace:	f2 e0       	ldi	r31, 0x02	; 2
    2ad0:	de 01       	movw	r26, r28
    2ad2:	1b 96       	adiw	r26, 0x0b	; 11
    2ad4:	01 90       	ld	r0, Z+
    2ad6:	0d 92       	st	X+, r0
    2ad8:	8a 95       	dec	r24
    2ada:	e1 f7       	brne	.-8      	; 0x2ad4 <motor_set_rpm+0x42>
	const uint8_t div_len = 7;
    2adc:	87 e0       	ldi	r24, 0x07	; 7
    2ade:	8e 83       	std	Y+6, r24	; 0x06

	uint8_t i;

	if (rpm)
    2ae0:	89 8d       	ldd	r24, Y+25	; 0x19
    2ae2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ae4:	89 2b       	or	r24, r25
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <motor_set_rpm+0x58>
    2ae8:	94 c0       	rjmp	.+296    	; 0x2c12 <motor_set_rpm+0x180>
	{
		for (i=0; i<div_len; i++)
    2aea:	19 82       	std	Y+1, r1	; 0x01
    2aec:	8c c0       	rjmp	.+280    	; 0x2c06 <motor_set_rpm+0x174>
		{
			buf = freq / ( ((uint32_t)rpm) * MOTOR_PERIOD * 2 * div[i] );
    2aee:	6a 81       	ldd	r22, Y+2	; 0x02
    2af0:	7b 81       	ldd	r23, Y+3	; 0x03
    2af2:	8c 81       	ldd	r24, Y+4	; 0x04
    2af4:	9d 81       	ldd	r25, Y+5	; 0x05
    2af6:	0e 94 4b 18 	call	0x3096	; 0x3096 <__floatunsisf>
    2afa:	6b 01       	movw	r12, r22
    2afc:	7c 01       	movw	r14, r24
    2afe:	89 8d       	ldd	r24, Y+25	; 0x19
    2b00:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b02:	9c 01       	movw	r18, r24
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	50 e0       	ldi	r21, 0x00	; 0
    2b08:	88 e6       	ldi	r24, 0x68	; 104
    2b0a:	91 e0       	ldi	r25, 0x01	; 1
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__muluhisi3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	0e 94 4b 18 	call	0x3096	; 0x3096 <__floatunsisf>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	26 e6       	ldi	r18, 0x66	; 102
    2b24:	36 e6       	ldi	r19, 0x66	; 102
    2b26:	46 ee       	ldi	r20, 0xE6	; 230
    2b28:	5d e3       	ldi	r21, 0x3D	; 61
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9c 01       	movw	r18, r24
    2b38:	ad 01       	movw	r20, r26
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	cd 01       	movw	r24, r26
    2b3e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__addsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	4c 01       	movw	r8, r24
    2b48:	5d 01       	movw	r10, r26
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	88 2f       	mov	r24, r24
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	9e 01       	movw	r18, r28
    2b56:	2f 5f       	subi	r18, 0xFF	; 255
    2b58:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5a:	82 0f       	add	r24, r18
    2b5c:	93 1f       	adc	r25, r19
    2b5e:	0a 96       	adiw	r24, 0x0a	; 10
    2b60:	fc 01       	movw	r30, r24
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	cc 01       	movw	r24, r24
    2b68:	a0 e0       	ldi	r26, 0x00	; 0
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 4b 18 	call	0x3096	; 0x3096 <__floatunsisf>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9c 01       	movw	r18, r24
    2b7a:	ad 01       	movw	r20, r26
    2b7c:	c5 01       	movw	r24, r10
    2b7e:	b4 01       	movw	r22, r8
    2b80:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9c 01       	movw	r18, r24
    2b8a:	ad 01       	movw	r20, r26
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	b6 01       	movw	r22, r12
    2b90:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <__divsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8f 83       	std	Y+7, r24	; 0x07
    2ba6:	98 87       	std	Y+8, r25	; 0x08
    2ba8:	a9 87       	std	Y+9, r26	; 0x09
    2baa:	ba 87       	std	Y+10, r27	; 0x0a
			if (buf < 0xFF && buf > 0)
    2bac:	8f 81       	ldd	r24, Y+7	; 0x07
    2bae:	98 85       	ldd	r25, Y+8	; 0x08
    2bb0:	a9 85       	ldd	r26, Y+9	; 0x09
    2bb2:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bb4:	8f 3f       	cpi	r24, 0xFF	; 255
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	a1 05       	cpc	r26, r1
    2bba:	b1 05       	cpc	r27, r1
    2bbc:	08 f5       	brcc	.+66     	; 0x2c00 <motor_set_rpm+0x16e>
    2bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc0:	98 85       	ldd	r25, Y+8	; 0x08
    2bc2:	a9 85       	ldd	r26, Y+9	; 0x09
    2bc4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2bc6:	89 2b       	or	r24, r25
    2bc8:	8a 2b       	or	r24, r26
    2bca:	8b 2b       	or	r24, r27
    2bcc:	c9 f0       	breq	.+50     	; 0x2c00 <motor_set_rpm+0x16e>
			{
				TCCR2B = i+1;						// clock/div[i]
    2bce:	81 eb       	ldi	r24, 0xB1	; 177
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	29 81       	ldd	r18, Y+1	; 0x01
    2bd4:	2f 5f       	subi	r18, 0xFF	; 255
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	20 83       	st	Z, r18
				OCR2A = (uint8_t )buf;
    2bda:	83 eb       	ldi	r24, 0xB3	; 179
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	2f 81       	ldd	r18, Y+7	; 0x07
    2be0:	fc 01       	movw	r30, r24
    2be2:	20 83       	st	Z, r18
				TCNT2 = 0;
    2be4:	82 eb       	ldi	r24, 0xB2	; 178
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	fc 01       	movw	r30, r24
    2bea:	10 82       	st	Z, r1
				MOTOR_DRIVER_ON;
    2bec:	8b e2       	ldi	r24, 0x2B	; 43
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	2b e2       	ldi	r18, 0x2B	; 43
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	f9 01       	movw	r30, r18
    2bf6:	20 81       	ld	r18, Z
    2bf8:	2f 77       	andi	r18, 0x7F	; 127
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	20 83       	st	Z, r18
				break;
    2bfe:	16 c0       	rjmp	.+44     	; 0x2c2c <motor_set_rpm+0x19a>

	uint8_t i;

	if (rpm)
	{
		for (i=0; i<div_len; i++)
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	99 81       	ldd	r25, Y+1	; 0x01
    2c08:	8e 81       	ldd	r24, Y+6	; 0x06
    2c0a:	98 17       	cp	r25, r24
    2c0c:	08 f4       	brcc	.+2      	; 0x2c10 <motor_set_rpm+0x17e>
    2c0e:	6f cf       	rjmp	.-290    	; 0x2aee <motor_set_rpm+0x5c>
    2c10:	0d c0       	rjmp	.+26     	; 0x2c2c <motor_set_rpm+0x19a>
			}
		}
	}
	else
	{
		TCCR2B = 0x00;
    2c12:	81 eb       	ldi	r24, 0xB1	; 177
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	fc 01       	movw	r30, r24
    2c18:	10 82       	st	Z, r1
		MOTOR_DRIVER_OFF;
    2c1a:	8b e2       	ldi	r24, 0x2B	; 43
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	2b e2       	ldi	r18, 0x2B	; 43
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	f9 01       	movw	r30, r18
    2c24:	20 81       	ld	r18, Z
    2c26:	20 68       	ori	r18, 0x80	; 128
    2c28:	fc 01       	movw	r30, r24
    2c2a:	20 83       	st	Z, r18
	}
	actual_rmp = rpm;
    2c2c:	89 8d       	ldd	r24, Y+25	; 0x19
    2c2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2c30:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <actual_rmp+0x1>
    2c34:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <actual_rmp>
}
    2c38:	00 00       	nop
    2c3a:	6a 96       	adiw	r28, 0x1a	; 26
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	df 90       	pop	r13
    2c50:	cf 90       	pop	r12
    2c52:	bf 90       	pop	r11
    2c54:	af 90       	pop	r10
    2c56:	9f 90       	pop	r9
    2c58:	8f 90       	pop	r8
    2c5a:	08 95       	ret

00002c5c <motor_smoothly_rmp>:


void motor_smoothly_rmp(uint16_t rpm_start, uint16_t rpm_end)
{
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	65 97       	sbiw	r28, 0x15	; 21
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	9b 8b       	std	Y+19, r25	; 0x13
    2c72:	8a 8b       	std	Y+18, r24	; 0x12
    2c74:	7d 8b       	std	Y+21, r23	; 0x15
    2c76:	6c 8b       	std	Y+20, r22	; 0x14
	uint16_t rpm;
	int8_t step;
	
	if (rpm_start < rpm_end)
    2c78:	2a 89       	ldd	r18, Y+18	; 0x12
    2c7a:	3b 89       	ldd	r19, Y+19	; 0x13
    2c7c:	8c 89       	ldd	r24, Y+20	; 0x14
    2c7e:	9d 89       	ldd	r25, Y+21	; 0x15
    2c80:	28 17       	cp	r18, r24
    2c82:	39 07       	cpc	r19, r25
    2c84:	18 f4       	brcc	.+6      	; 0x2c8c <motor_smoothly_rmp+0x30>
	{
		step = 1;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	8b 83       	std	Y+3, r24	; 0x03
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <motor_smoothly_rmp+0x34>
	}
	else
	{
		step = -1;
    2c8c:	8f ef       	ldi	r24, 0xFF	; 255
    2c8e:	8b 83       	std	Y+3, r24	; 0x03
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2c90:	8a 89       	ldd	r24, Y+18	; 0x12
    2c92:	9b 89       	ldd	r25, Y+19	; 0x13
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	89 83       	std	Y+1, r24	; 0x01
    2c98:	a5 c0       	rjmp	.+330    	; 0x2de4 <motor_smoothly_rmp+0x188>
	{
		user_profile.rpm = rpm;
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	90 93 cc 02 	sts	0x02CC, r25	; 0x8002cc <user_profile+0x1>
    2ca2:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <user_profile>
		if (!(user_profile.rpm % 20))
    2ca6:	40 91 cb 02 	lds	r20, 0x02CB	; 0x8002cb <user_profile>
    2caa:	50 91 cc 02 	lds	r21, 0x02CC	; 0x8002cc <user_profile+0x1>
    2cae:	9a 01       	movw	r18, r20
    2cb0:	ad ec       	ldi	r26, 0xCD	; 205
    2cb2:	bc ec       	ldi	r27, 0xCC	; 204
    2cb4:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    2cb8:	92 95       	swap	r25
    2cba:	82 95       	swap	r24
    2cbc:	8f 70       	andi	r24, 0x0F	; 15
    2cbe:	89 27       	eor	r24, r25
    2cc0:	9f 70       	andi	r25, 0x0F	; 15
    2cc2:	89 27       	eor	r24, r25
    2cc4:	64 e1       	ldi	r22, 0x14	; 20
    2cc6:	68 9f       	mul	r22, r24
    2cc8:	90 01       	movw	r18, r0
    2cca:	69 9f       	mul	r22, r25
    2ccc:	30 0d       	add	r19, r0
    2cce:	11 24       	eor	r1, r1
    2cd0:	ca 01       	movw	r24, r20
    2cd2:	82 1b       	sub	r24, r18
    2cd4:	93 0b       	sbc	r25, r19
    2cd6:	89 2b       	or	r24, r25
    2cd8:	19 f4       	brne	.+6      	; 0x2ce0 <motor_smoothly_rmp+0x84>
			TUI('s');
    2cda:	83 e7       	ldi	r24, 0x73	; 115
    2cdc:	0e 94 0a 03 	call	0x614	; 0x614 <TUI>
		motor_set_rpm(user_profile.rpm);
    2ce0:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <user_profile>
    2ce4:	90 91 cc 02 	lds	r25, 0x02CC	; 0x8002cc <user_profile+0x1>
    2ce8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <motor_set_rpm>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a0 ef       	ldi	r26, 0xF0	; 240
    2cf2:	b1 e4       	ldi	r27, 0x41	; 65
    2cf4:	8c 83       	std	Y+4, r24	; 0x04
    2cf6:	9d 83       	std	Y+5, r25	; 0x05
    2cf8:	ae 83       	std	Y+6, r26	; 0x06
    2cfa:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e8       	ldi	r19, 0x80	; 128
    2d00:	4b eb       	ldi	r20, 0xBB	; 187
    2d02:	55 e4       	ldi	r21, 0x45	; 69
    2d04:	6c 81       	ldd	r22, Y+4	; 0x04
    2d06:	7d 81       	ldd	r23, Y+5	; 0x05
    2d08:	8e 81       	ldd	r24, Y+6	; 0x06
    2d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d0c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	88 87       	std	Y+8, r24	; 0x08
    2d16:	99 87       	std	Y+9, r25	; 0x09
    2d18:	aa 87       	std	Y+10, r26	; 0x0a
    2d1a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e8       	ldi	r20, 0x80	; 128
    2d22:	5f e3       	ldi	r21, 0x3F	; 63
    2d24:	68 85       	ldd	r22, Y+8	; 0x08
    2d26:	79 85       	ldd	r23, Y+9	; 0x09
    2d28:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d2c:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__cmpsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <motor_smoothly_rmp+0xe2>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9d 87       	std	Y+13, r25	; 0x0d
    2d3a:	8c 87       	std	Y+12, r24	; 0x0c
    2d3c:	3f c0       	rjmp	.+126    	; 0x2dbc <motor_smoothly_rmp+0x160>
	else if (__tmp > 65535)
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	3f ef       	ldi	r19, 0xFF	; 255
    2d42:	4f e7       	ldi	r20, 0x7F	; 127
    2d44:	57 e4       	ldi	r21, 0x47	; 71
    2d46:	68 85       	ldd	r22, Y+8	; 0x08
    2d48:	79 85       	ldd	r23, Y+9	; 0x09
    2d4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d4e:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__gesf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	4c f5       	brge	.+82     	; 0x2da8 <motor_smoothly_rmp+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	6c 81       	ldd	r22, Y+4	; 0x04
    2d60:	7d 81       	ldd	r23, Y+5	; 0x05
    2d62:	8e 81       	ldd	r24, Y+6	; 0x06
    2d64:	9f 81       	ldd	r25, Y+7	; 0x07
    2d66:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9d 87       	std	Y+13, r25	; 0x0d
    2d7c:	8c 87       	std	Y+12, r24	; 0x0c
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <motor_smoothly_rmp+0x142>
    2d80:	88 e5       	ldi	r24, 0x58	; 88
    2d82:	92 e0       	ldi	r25, 0x02	; 2
    2d84:	9f 87       	std	Y+15, r25	; 0x0f
    2d86:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d88:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <motor_smoothly_rmp+0x130>
    2d90:	9f 87       	std	Y+15, r25	; 0x0f
    2d92:	8e 87       	std	Y+14, r24	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d94:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d96:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	9d 87       	std	Y+13, r25	; 0x0d
    2d9c:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2da0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2da2:	89 2b       	or	r24, r25
    2da4:	69 f7       	brne	.-38     	; 0x2d80 <motor_smoothly_rmp+0x124>
    2da6:	14 c0       	rjmp	.+40     	; 0x2dd0 <motor_smoothly_rmp+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da8:	68 85       	ldd	r22, Y+8	; 0x08
    2daa:	79 85       	ldd	r23, Y+9	; 0x09
    2dac:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dae:	9b 85       	ldd	r25, Y+11	; 0x0b
    2db0:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	9d 87       	std	Y+13, r25	; 0x0d
    2dba:	8c 87       	std	Y+12, r24	; 0x0c
    2dbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dc0:	99 8b       	std	Y+17, r25	; 0x11
    2dc2:	88 8b       	std	Y+16, r24	; 0x10
    2dc4:	88 89       	ldd	r24, Y+16	; 0x10
    2dc6:	99 89       	ldd	r25, Y+17	; 0x11
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <motor_smoothly_rmp+0x16c>
    2dcc:	99 8b       	std	Y+17, r25	; 0x11
    2dce:	88 8b       	std	Y+16, r24	; 0x10
	else
	{
		step = -1;
	}

	for (rpm=rpm_start; rpm!=(rpm_end+step) && !(EIFR & (1<<INTF0)); rpm+=step)
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	08 2e       	mov	r0, r24
    2dd4:	00 0c       	add	r0, r0
    2dd6:	99 0b       	sbc	r25, r25
    2dd8:	29 81       	ldd	r18, Y+1	; 0x01
    2dda:	3a 81       	ldd	r19, Y+2	; 0x02
    2ddc:	82 0f       	add	r24, r18
    2dde:	93 1f       	adc	r25, r19
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	28 2f       	mov	r18, r24
    2de8:	88 0f       	add	r24, r24
    2dea:	33 0b       	sbc	r19, r19
    2dec:	8c 89       	ldd	r24, Y+20	; 0x14
    2dee:	9d 89       	ldd	r25, Y+21	; 0x15
    2df0:	28 0f       	add	r18, r24
    2df2:	39 1f       	adc	r19, r25
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	28 17       	cp	r18, r24
    2dfa:	39 07       	cpc	r19, r25
    2dfc:	59 f0       	breq	.+22     	; 0x2e14 <motor_smoothly_rmp+0x1b8>
    2dfe:	8c e3       	ldi	r24, 0x3C	; 60
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	fc 01       	movw	r30, r24
    2e04:	80 81       	ld	r24, Z
    2e06:	88 2f       	mov	r24, r24
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	81 70       	andi	r24, 0x01	; 1
    2e0c:	99 27       	eor	r25, r25
    2e0e:	89 2b       	or	r24, r25
    2e10:	09 f4       	brne	.+2      	; 0x2e14 <motor_smoothly_rmp+0x1b8>
    2e12:	43 cf       	rjmp	.-378    	; 0x2c9a <motor_smoothly_rmp+0x3e>
		if (!(user_profile.rpm % 20))
			TUI('s');
		motor_set_rpm(user_profile.rpm);
		_delay_ms(30);
	}
	TUI('s');
    2e14:	83 e7       	ldi	r24, 0x73	; 115
    2e16:	0e 94 0a 03 	call	0x614	; 0x614 <TUI>
}
    2e1a:	00 00       	nop
    2e1c:	65 96       	adiw	r28, 0x15	; 21
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	08 95       	ret

00002e2e <valve_init>:
#include "wyk_valve.h"

void valve_init(void)
{
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
	VALVE_DDR |= VALVE_PIN;
    2e36:	8a e2       	ldi	r24, 0x2A	; 42
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	2a e2       	ldi	r18, 0x2A	; 42
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	f9 01       	movw	r30, r18
    2e40:	20 81       	ld	r18, Z
    2e42:	22 60       	ori	r18, 0x02	; 2
    2e44:	fc 01       	movw	r30, r24
    2e46:	20 83       	st	Z, r18
	VALVE_OUT_0;
    2e48:	8b e2       	ldi	r24, 0x2B	; 43
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	2b e2       	ldi	r18, 0x2B	; 43
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	f9 01       	movw	r30, r18
    2e52:	20 81       	ld	r18, Z
    2e54:	2d 7f       	andi	r18, 0xFD	; 253
    2e56:	fc 01       	movw	r30, r24
    2e58:	20 83       	st	Z, r18
}
    2e5a:	00 00       	nop
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	08 95       	ret

00002e62 <__subsf3>:
    2e62:	50 58       	subi	r21, 0x80	; 128

00002e64 <__addsf3>:
    2e64:	bb 27       	eor	r27, r27
    2e66:	aa 27       	eor	r26, r26
    2e68:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__addsf3x>
    2e6c:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__fp_round>
    2e70:	0e 94 b5 18 	call	0x316a	; 0x316a <__fp_pscA>
    2e74:	38 f0       	brcs	.+14     	; 0x2e84 <__addsf3+0x20>
    2e76:	0e 94 bc 18 	call	0x3178	; 0x3178 <__fp_pscB>
    2e7a:	20 f0       	brcs	.+8      	; 0x2e84 <__addsf3+0x20>
    2e7c:	39 f4       	brne	.+14     	; 0x2e8c <__addsf3+0x28>
    2e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    2e80:	19 f4       	brne	.+6      	; 0x2e88 <__addsf3+0x24>
    2e82:	26 f4       	brtc	.+8      	; 0x2e8c <__addsf3+0x28>
    2e84:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__fp_nan>
    2e88:	0e f4       	brtc	.+2      	; 0x2e8c <__addsf3+0x28>
    2e8a:	e0 95       	com	r30
    2e8c:	e7 fb       	bst	r30, 7
    2e8e:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_inf>

00002e92 <__addsf3x>:
    2e92:	e9 2f       	mov	r30, r25
    2e94:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__fp_split3>
    2e98:	58 f3       	brcs	.-42     	; 0x2e70 <__addsf3+0xc>
    2e9a:	ba 17       	cp	r27, r26
    2e9c:	62 07       	cpc	r22, r18
    2e9e:	73 07       	cpc	r23, r19
    2ea0:	84 07       	cpc	r24, r20
    2ea2:	95 07       	cpc	r25, r21
    2ea4:	20 f0       	brcs	.+8      	; 0x2eae <__addsf3x+0x1c>
    2ea6:	79 f4       	brne	.+30     	; 0x2ec6 <__addsf3x+0x34>
    2ea8:	a6 f5       	brtc	.+104    	; 0x2f12 <__addsf3x+0x80>
    2eaa:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_zero>
    2eae:	0e f4       	brtc	.+2      	; 0x2eb2 <__addsf3x+0x20>
    2eb0:	e0 95       	com	r30
    2eb2:	0b 2e       	mov	r0, r27
    2eb4:	ba 2f       	mov	r27, r26
    2eb6:	a0 2d       	mov	r26, r0
    2eb8:	0b 01       	movw	r0, r22
    2eba:	b9 01       	movw	r22, r18
    2ebc:	90 01       	movw	r18, r0
    2ebe:	0c 01       	movw	r0, r24
    2ec0:	ca 01       	movw	r24, r20
    2ec2:	a0 01       	movw	r20, r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	ff 27       	eor	r31, r31
    2ec8:	59 1b       	sub	r21, r25
    2eca:	99 f0       	breq	.+38     	; 0x2ef2 <__addsf3x+0x60>
    2ecc:	59 3f       	cpi	r21, 0xF9	; 249
    2ece:	50 f4       	brcc	.+20     	; 0x2ee4 <__addsf3x+0x52>
    2ed0:	50 3e       	cpi	r21, 0xE0	; 224
    2ed2:	68 f1       	brcs	.+90     	; 0x2f2e <__addsf3x+0x9c>
    2ed4:	1a 16       	cp	r1, r26
    2ed6:	f0 40       	sbci	r31, 0x00	; 0
    2ed8:	a2 2f       	mov	r26, r18
    2eda:	23 2f       	mov	r18, r19
    2edc:	34 2f       	mov	r19, r20
    2ede:	44 27       	eor	r20, r20
    2ee0:	58 5f       	subi	r21, 0xF8	; 248
    2ee2:	f3 cf       	rjmp	.-26     	; 0x2eca <__addsf3x+0x38>
    2ee4:	46 95       	lsr	r20
    2ee6:	37 95       	ror	r19
    2ee8:	27 95       	ror	r18
    2eea:	a7 95       	ror	r26
    2eec:	f0 40       	sbci	r31, 0x00	; 0
    2eee:	53 95       	inc	r21
    2ef0:	c9 f7       	brne	.-14     	; 0x2ee4 <__addsf3x+0x52>
    2ef2:	7e f4       	brtc	.+30     	; 0x2f12 <__addsf3x+0x80>
    2ef4:	1f 16       	cp	r1, r31
    2ef6:	ba 0b       	sbc	r27, r26
    2ef8:	62 0b       	sbc	r22, r18
    2efa:	73 0b       	sbc	r23, r19
    2efc:	84 0b       	sbc	r24, r20
    2efe:	ba f0       	brmi	.+46     	; 0x2f2e <__addsf3x+0x9c>
    2f00:	91 50       	subi	r25, 0x01	; 1
    2f02:	a1 f0       	breq	.+40     	; 0x2f2c <__addsf3x+0x9a>
    2f04:	ff 0f       	add	r31, r31
    2f06:	bb 1f       	adc	r27, r27
    2f08:	66 1f       	adc	r22, r22
    2f0a:	77 1f       	adc	r23, r23
    2f0c:	88 1f       	adc	r24, r24
    2f0e:	c2 f7       	brpl	.-16     	; 0x2f00 <__addsf3x+0x6e>
    2f10:	0e c0       	rjmp	.+28     	; 0x2f2e <__addsf3x+0x9c>
    2f12:	ba 0f       	add	r27, r26
    2f14:	62 1f       	adc	r22, r18
    2f16:	73 1f       	adc	r23, r19
    2f18:	84 1f       	adc	r24, r20
    2f1a:	48 f4       	brcc	.+18     	; 0x2f2e <__addsf3x+0x9c>
    2f1c:	87 95       	ror	r24
    2f1e:	77 95       	ror	r23
    2f20:	67 95       	ror	r22
    2f22:	b7 95       	ror	r27
    2f24:	f7 95       	ror	r31
    2f26:	9e 3f       	cpi	r25, 0xFE	; 254
    2f28:	08 f0       	brcs	.+2      	; 0x2f2c <__addsf3x+0x9a>
    2f2a:	b0 cf       	rjmp	.-160    	; 0x2e8c <__addsf3+0x28>
    2f2c:	93 95       	inc	r25
    2f2e:	88 0f       	add	r24, r24
    2f30:	08 f0       	brcs	.+2      	; 0x2f34 <__addsf3x+0xa2>
    2f32:	99 27       	eor	r25, r25
    2f34:	ee 0f       	add	r30, r30
    2f36:	97 95       	ror	r25
    2f38:	87 95       	ror	r24
    2f3a:	08 95       	ret

00002f3c <__cmpsf2>:
    2f3c:	0e 94 88 18 	call	0x3110	; 0x3110 <__fp_cmp>
    2f40:	08 f4       	brcc	.+2      	; 0x2f44 <__cmpsf2+0x8>
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	08 95       	ret

00002f46 <__divsf3>:
    2f46:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <__divsf3x>
    2f4a:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__fp_round>
    2f4e:	0e 94 bc 18 	call	0x3178	; 0x3178 <__fp_pscB>
    2f52:	58 f0       	brcs	.+22     	; 0x2f6a <__divsf3+0x24>
    2f54:	0e 94 b5 18 	call	0x316a	; 0x316a <__fp_pscA>
    2f58:	40 f0       	brcs	.+16     	; 0x2f6a <__divsf3+0x24>
    2f5a:	29 f4       	brne	.+10     	; 0x2f66 <__divsf3+0x20>
    2f5c:	5f 3f       	cpi	r21, 0xFF	; 255
    2f5e:	29 f0       	breq	.+10     	; 0x2f6a <__divsf3+0x24>
    2f60:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_inf>
    2f64:	51 11       	cpse	r21, r1
    2f66:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__fp_szero>
    2f6a:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__fp_nan>

00002f6e <__divsf3x>:
    2f6e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__fp_split3>
    2f72:	68 f3       	brcs	.-38     	; 0x2f4e <__divsf3+0x8>

00002f74 <__divsf3_pse>:
    2f74:	99 23       	and	r25, r25
    2f76:	b1 f3       	breq	.-20     	; 0x2f64 <__divsf3+0x1e>
    2f78:	55 23       	and	r21, r21
    2f7a:	91 f3       	breq	.-28     	; 0x2f60 <__divsf3+0x1a>
    2f7c:	95 1b       	sub	r25, r21
    2f7e:	55 0b       	sbc	r21, r21
    2f80:	bb 27       	eor	r27, r27
    2f82:	aa 27       	eor	r26, r26
    2f84:	62 17       	cp	r22, r18
    2f86:	73 07       	cpc	r23, r19
    2f88:	84 07       	cpc	r24, r20
    2f8a:	38 f0       	brcs	.+14     	; 0x2f9a <__divsf3_pse+0x26>
    2f8c:	9f 5f       	subi	r25, 0xFF	; 255
    2f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f90:	22 0f       	add	r18, r18
    2f92:	33 1f       	adc	r19, r19
    2f94:	44 1f       	adc	r20, r20
    2f96:	aa 1f       	adc	r26, r26
    2f98:	a9 f3       	breq	.-22     	; 0x2f84 <__divsf3_pse+0x10>
    2f9a:	35 d0       	rcall	.+106    	; 0x3006 <__divsf3_pse+0x92>
    2f9c:	0e 2e       	mov	r0, r30
    2f9e:	3a f0       	brmi	.+14     	; 0x2fae <__divsf3_pse+0x3a>
    2fa0:	e0 e8       	ldi	r30, 0x80	; 128
    2fa2:	32 d0       	rcall	.+100    	; 0x3008 <__divsf3_pse+0x94>
    2fa4:	91 50       	subi	r25, 0x01	; 1
    2fa6:	50 40       	sbci	r21, 0x00	; 0
    2fa8:	e6 95       	lsr	r30
    2faa:	00 1c       	adc	r0, r0
    2fac:	ca f7       	brpl	.-14     	; 0x2fa0 <__divsf3_pse+0x2c>
    2fae:	2b d0       	rcall	.+86     	; 0x3006 <__divsf3_pse+0x92>
    2fb0:	fe 2f       	mov	r31, r30
    2fb2:	29 d0       	rcall	.+82     	; 0x3006 <__divsf3_pse+0x92>
    2fb4:	66 0f       	add	r22, r22
    2fb6:	77 1f       	adc	r23, r23
    2fb8:	88 1f       	adc	r24, r24
    2fba:	bb 1f       	adc	r27, r27
    2fbc:	26 17       	cp	r18, r22
    2fbe:	37 07       	cpc	r19, r23
    2fc0:	48 07       	cpc	r20, r24
    2fc2:	ab 07       	cpc	r26, r27
    2fc4:	b0 e8       	ldi	r27, 0x80	; 128
    2fc6:	09 f0       	breq	.+2      	; 0x2fca <__divsf3_pse+0x56>
    2fc8:	bb 0b       	sbc	r27, r27
    2fca:	80 2d       	mov	r24, r0
    2fcc:	bf 01       	movw	r22, r30
    2fce:	ff 27       	eor	r31, r31
    2fd0:	93 58       	subi	r25, 0x83	; 131
    2fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd4:	3a f0       	brmi	.+14     	; 0x2fe4 <__divsf3_pse+0x70>
    2fd6:	9e 3f       	cpi	r25, 0xFE	; 254
    2fd8:	51 05       	cpc	r21, r1
    2fda:	78 f0       	brcs	.+30     	; 0x2ffa <__divsf3_pse+0x86>
    2fdc:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_inf>
    2fe0:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__fp_szero>
    2fe4:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe6:	e4 f3       	brlt	.-8      	; 0x2fe0 <__divsf3_pse+0x6c>
    2fe8:	98 3e       	cpi	r25, 0xE8	; 232
    2fea:	d4 f3       	brlt	.-12     	; 0x2fe0 <__divsf3_pse+0x6c>
    2fec:	86 95       	lsr	r24
    2fee:	77 95       	ror	r23
    2ff0:	67 95       	ror	r22
    2ff2:	b7 95       	ror	r27
    2ff4:	f7 95       	ror	r31
    2ff6:	9f 5f       	subi	r25, 0xFF	; 255
    2ff8:	c9 f7       	brne	.-14     	; 0x2fec <__divsf3_pse+0x78>
    2ffa:	88 0f       	add	r24, r24
    2ffc:	91 1d       	adc	r25, r1
    2ffe:	96 95       	lsr	r25
    3000:	87 95       	ror	r24
    3002:	97 f9       	bld	r25, 7
    3004:	08 95       	ret
    3006:	e1 e0       	ldi	r30, 0x01	; 1
    3008:	66 0f       	add	r22, r22
    300a:	77 1f       	adc	r23, r23
    300c:	88 1f       	adc	r24, r24
    300e:	bb 1f       	adc	r27, r27
    3010:	62 17       	cp	r22, r18
    3012:	73 07       	cpc	r23, r19
    3014:	84 07       	cpc	r24, r20
    3016:	ba 07       	cpc	r27, r26
    3018:	20 f0       	brcs	.+8      	; 0x3022 <__divsf3_pse+0xae>
    301a:	62 1b       	sub	r22, r18
    301c:	73 0b       	sbc	r23, r19
    301e:	84 0b       	sbc	r24, r20
    3020:	ba 0b       	sbc	r27, r26
    3022:	ee 1f       	adc	r30, r30
    3024:	88 f7       	brcc	.-30     	; 0x3008 <__divsf3_pse+0x94>
    3026:	e0 95       	com	r30
    3028:	08 95       	ret

0000302a <__fixsfsi>:
    302a:	0e 94 1c 18 	call	0x3038	; 0x3038 <__fixunssfsi>
    302e:	68 94       	set
    3030:	b1 11       	cpse	r27, r1
    3032:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__fp_szero>
    3036:	08 95       	ret

00003038 <__fixunssfsi>:
    3038:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__fp_splitA>
    303c:	88 f0       	brcs	.+34     	; 0x3060 <__fixunssfsi+0x28>
    303e:	9f 57       	subi	r25, 0x7F	; 127
    3040:	98 f0       	brcs	.+38     	; 0x3068 <__fixunssfsi+0x30>
    3042:	b9 2f       	mov	r27, r25
    3044:	99 27       	eor	r25, r25
    3046:	b7 51       	subi	r27, 0x17	; 23
    3048:	b0 f0       	brcs	.+44     	; 0x3076 <__fixunssfsi+0x3e>
    304a:	e1 f0       	breq	.+56     	; 0x3084 <__fixunssfsi+0x4c>
    304c:	66 0f       	add	r22, r22
    304e:	77 1f       	adc	r23, r23
    3050:	88 1f       	adc	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	1a f0       	brmi	.+6      	; 0x305c <__fixunssfsi+0x24>
    3056:	ba 95       	dec	r27
    3058:	c9 f7       	brne	.-14     	; 0x304c <__fixunssfsi+0x14>
    305a:	14 c0       	rjmp	.+40     	; 0x3084 <__fixunssfsi+0x4c>
    305c:	b1 30       	cpi	r27, 0x01	; 1
    305e:	91 f0       	breq	.+36     	; 0x3084 <__fixunssfsi+0x4c>
    3060:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__fp_zero>
    3064:	b1 e0       	ldi	r27, 0x01	; 1
    3066:	08 95       	ret
    3068:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_zero>
    306c:	67 2f       	mov	r22, r23
    306e:	78 2f       	mov	r23, r24
    3070:	88 27       	eor	r24, r24
    3072:	b8 5f       	subi	r27, 0xF8	; 248
    3074:	39 f0       	breq	.+14     	; 0x3084 <__fixunssfsi+0x4c>
    3076:	b9 3f       	cpi	r27, 0xF9	; 249
    3078:	cc f3       	brlt	.-14     	; 0x306c <__fixunssfsi+0x34>
    307a:	86 95       	lsr	r24
    307c:	77 95       	ror	r23
    307e:	67 95       	ror	r22
    3080:	b3 95       	inc	r27
    3082:	d9 f7       	brne	.-10     	; 0x307a <__fixunssfsi+0x42>
    3084:	3e f4       	brtc	.+14     	; 0x3094 <__fixunssfsi+0x5c>
    3086:	90 95       	com	r25
    3088:	80 95       	com	r24
    308a:	70 95       	com	r23
    308c:	61 95       	neg	r22
    308e:	7f 4f       	sbci	r23, 0xFF	; 255
    3090:	8f 4f       	sbci	r24, 0xFF	; 255
    3092:	9f 4f       	sbci	r25, 0xFF	; 255
    3094:	08 95       	ret

00003096 <__floatunsisf>:
    3096:	e8 94       	clt
    3098:	09 c0       	rjmp	.+18     	; 0x30ac <__floatsisf+0x12>

0000309a <__floatsisf>:
    309a:	97 fb       	bst	r25, 7
    309c:	3e f4       	brtc	.+14     	; 0x30ac <__floatsisf+0x12>
    309e:	90 95       	com	r25
    30a0:	80 95       	com	r24
    30a2:	70 95       	com	r23
    30a4:	61 95       	neg	r22
    30a6:	7f 4f       	sbci	r23, 0xFF	; 255
    30a8:	8f 4f       	sbci	r24, 0xFF	; 255
    30aa:	9f 4f       	sbci	r25, 0xFF	; 255
    30ac:	99 23       	and	r25, r25
    30ae:	a9 f0       	breq	.+42     	; 0x30da <__floatsisf+0x40>
    30b0:	f9 2f       	mov	r31, r25
    30b2:	96 e9       	ldi	r25, 0x96	; 150
    30b4:	bb 27       	eor	r27, r27
    30b6:	93 95       	inc	r25
    30b8:	f6 95       	lsr	r31
    30ba:	87 95       	ror	r24
    30bc:	77 95       	ror	r23
    30be:	67 95       	ror	r22
    30c0:	b7 95       	ror	r27
    30c2:	f1 11       	cpse	r31, r1
    30c4:	f8 cf       	rjmp	.-16     	; 0x30b6 <__floatsisf+0x1c>
    30c6:	fa f4       	brpl	.+62     	; 0x3106 <__floatsisf+0x6c>
    30c8:	bb 0f       	add	r27, r27
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <__floatsisf+0x36>
    30cc:	60 ff       	sbrs	r22, 0
    30ce:	1b c0       	rjmp	.+54     	; 0x3106 <__floatsisf+0x6c>
    30d0:	6f 5f       	subi	r22, 0xFF	; 255
    30d2:	7f 4f       	sbci	r23, 0xFF	; 255
    30d4:	8f 4f       	sbci	r24, 0xFF	; 255
    30d6:	9f 4f       	sbci	r25, 0xFF	; 255
    30d8:	16 c0       	rjmp	.+44     	; 0x3106 <__floatsisf+0x6c>
    30da:	88 23       	and	r24, r24
    30dc:	11 f0       	breq	.+4      	; 0x30e2 <__floatsisf+0x48>
    30de:	96 e9       	ldi	r25, 0x96	; 150
    30e0:	11 c0       	rjmp	.+34     	; 0x3104 <__floatsisf+0x6a>
    30e2:	77 23       	and	r23, r23
    30e4:	21 f0       	breq	.+8      	; 0x30ee <__floatsisf+0x54>
    30e6:	9e e8       	ldi	r25, 0x8E	; 142
    30e8:	87 2f       	mov	r24, r23
    30ea:	76 2f       	mov	r23, r22
    30ec:	05 c0       	rjmp	.+10     	; 0x30f8 <__floatsisf+0x5e>
    30ee:	66 23       	and	r22, r22
    30f0:	71 f0       	breq	.+28     	; 0x310e <__floatsisf+0x74>
    30f2:	96 e8       	ldi	r25, 0x86	; 134
    30f4:	86 2f       	mov	r24, r22
    30f6:	70 e0       	ldi	r23, 0x00	; 0
    30f8:	60 e0       	ldi	r22, 0x00	; 0
    30fa:	2a f0       	brmi	.+10     	; 0x3106 <__floatsisf+0x6c>
    30fc:	9a 95       	dec	r25
    30fe:	66 0f       	add	r22, r22
    3100:	77 1f       	adc	r23, r23
    3102:	88 1f       	adc	r24, r24
    3104:	da f7       	brpl	.-10     	; 0x30fc <__floatsisf+0x62>
    3106:	88 0f       	add	r24, r24
    3108:	96 95       	lsr	r25
    310a:	87 95       	ror	r24
    310c:	97 f9       	bld	r25, 7
    310e:	08 95       	ret

00003110 <__fp_cmp>:
    3110:	99 0f       	add	r25, r25
    3112:	00 08       	sbc	r0, r0
    3114:	55 0f       	add	r21, r21
    3116:	aa 0b       	sbc	r26, r26
    3118:	e0 e8       	ldi	r30, 0x80	; 128
    311a:	fe ef       	ldi	r31, 0xFE	; 254
    311c:	16 16       	cp	r1, r22
    311e:	17 06       	cpc	r1, r23
    3120:	e8 07       	cpc	r30, r24
    3122:	f9 07       	cpc	r31, r25
    3124:	c0 f0       	brcs	.+48     	; 0x3156 <__fp_cmp+0x46>
    3126:	12 16       	cp	r1, r18
    3128:	13 06       	cpc	r1, r19
    312a:	e4 07       	cpc	r30, r20
    312c:	f5 07       	cpc	r31, r21
    312e:	98 f0       	brcs	.+38     	; 0x3156 <__fp_cmp+0x46>
    3130:	62 1b       	sub	r22, r18
    3132:	73 0b       	sbc	r23, r19
    3134:	84 0b       	sbc	r24, r20
    3136:	95 0b       	sbc	r25, r21
    3138:	39 f4       	brne	.+14     	; 0x3148 <__fp_cmp+0x38>
    313a:	0a 26       	eor	r0, r26
    313c:	61 f0       	breq	.+24     	; 0x3156 <__fp_cmp+0x46>
    313e:	23 2b       	or	r18, r19
    3140:	24 2b       	or	r18, r20
    3142:	25 2b       	or	r18, r21
    3144:	21 f4       	brne	.+8      	; 0x314e <__fp_cmp+0x3e>
    3146:	08 95       	ret
    3148:	0a 26       	eor	r0, r26
    314a:	09 f4       	brne	.+2      	; 0x314e <__fp_cmp+0x3e>
    314c:	a1 40       	sbci	r26, 0x01	; 1
    314e:	a6 95       	lsr	r26
    3150:	8f ef       	ldi	r24, 0xFF	; 255
    3152:	81 1d       	adc	r24, r1
    3154:	81 1d       	adc	r24, r1
    3156:	08 95       	ret

00003158 <__fp_inf>:
    3158:	97 f9       	bld	r25, 7
    315a:	9f 67       	ori	r25, 0x7F	; 127
    315c:	80 e8       	ldi	r24, 0x80	; 128
    315e:	70 e0       	ldi	r23, 0x00	; 0
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	08 95       	ret

00003164 <__fp_nan>:
    3164:	9f ef       	ldi	r25, 0xFF	; 255
    3166:	80 ec       	ldi	r24, 0xC0	; 192
    3168:	08 95       	ret

0000316a <__fp_pscA>:
    316a:	00 24       	eor	r0, r0
    316c:	0a 94       	dec	r0
    316e:	16 16       	cp	r1, r22
    3170:	17 06       	cpc	r1, r23
    3172:	18 06       	cpc	r1, r24
    3174:	09 06       	cpc	r0, r25
    3176:	08 95       	ret

00003178 <__fp_pscB>:
    3178:	00 24       	eor	r0, r0
    317a:	0a 94       	dec	r0
    317c:	12 16       	cp	r1, r18
    317e:	13 06       	cpc	r1, r19
    3180:	14 06       	cpc	r1, r20
    3182:	05 06       	cpc	r0, r21
    3184:	08 95       	ret

00003186 <__fp_round>:
    3186:	09 2e       	mov	r0, r25
    3188:	03 94       	inc	r0
    318a:	00 0c       	add	r0, r0
    318c:	11 f4       	brne	.+4      	; 0x3192 <__fp_round+0xc>
    318e:	88 23       	and	r24, r24
    3190:	52 f0       	brmi	.+20     	; 0x31a6 <__fp_round+0x20>
    3192:	bb 0f       	add	r27, r27
    3194:	40 f4       	brcc	.+16     	; 0x31a6 <__fp_round+0x20>
    3196:	bf 2b       	or	r27, r31
    3198:	11 f4       	brne	.+4      	; 0x319e <__fp_round+0x18>
    319a:	60 ff       	sbrs	r22, 0
    319c:	04 c0       	rjmp	.+8      	; 0x31a6 <__fp_round+0x20>
    319e:	6f 5f       	subi	r22, 0xFF	; 255
    31a0:	7f 4f       	sbci	r23, 0xFF	; 255
    31a2:	8f 4f       	sbci	r24, 0xFF	; 255
    31a4:	9f 4f       	sbci	r25, 0xFF	; 255
    31a6:	08 95       	ret

000031a8 <__fp_split3>:
    31a8:	57 fd       	sbrc	r21, 7
    31aa:	90 58       	subi	r25, 0x80	; 128
    31ac:	44 0f       	add	r20, r20
    31ae:	55 1f       	adc	r21, r21
    31b0:	59 f0       	breq	.+22     	; 0x31c8 <__fp_splitA+0x10>
    31b2:	5f 3f       	cpi	r21, 0xFF	; 255
    31b4:	71 f0       	breq	.+28     	; 0x31d2 <__fp_splitA+0x1a>
    31b6:	47 95       	ror	r20

000031b8 <__fp_splitA>:
    31b8:	88 0f       	add	r24, r24
    31ba:	97 fb       	bst	r25, 7
    31bc:	99 1f       	adc	r25, r25
    31be:	61 f0       	breq	.+24     	; 0x31d8 <__fp_splitA+0x20>
    31c0:	9f 3f       	cpi	r25, 0xFF	; 255
    31c2:	79 f0       	breq	.+30     	; 0x31e2 <__fp_splitA+0x2a>
    31c4:	87 95       	ror	r24
    31c6:	08 95       	ret
    31c8:	12 16       	cp	r1, r18
    31ca:	13 06       	cpc	r1, r19
    31cc:	14 06       	cpc	r1, r20
    31ce:	55 1f       	adc	r21, r21
    31d0:	f2 cf       	rjmp	.-28     	; 0x31b6 <__fp_split3+0xe>
    31d2:	46 95       	lsr	r20
    31d4:	f1 df       	rcall	.-30     	; 0x31b8 <__fp_splitA>
    31d6:	08 c0       	rjmp	.+16     	; 0x31e8 <__fp_splitA+0x30>
    31d8:	16 16       	cp	r1, r22
    31da:	17 06       	cpc	r1, r23
    31dc:	18 06       	cpc	r1, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	f1 cf       	rjmp	.-30     	; 0x31c4 <__fp_splitA+0xc>
    31e2:	86 95       	lsr	r24
    31e4:	71 05       	cpc	r23, r1
    31e6:	61 05       	cpc	r22, r1
    31e8:	08 94       	sec
    31ea:	08 95       	ret

000031ec <__fp_zero>:
    31ec:	e8 94       	clt

000031ee <__fp_szero>:
    31ee:	bb 27       	eor	r27, r27
    31f0:	66 27       	eor	r22, r22
    31f2:	77 27       	eor	r23, r23
    31f4:	cb 01       	movw	r24, r22
    31f6:	97 f9       	bld	r25, 7
    31f8:	08 95       	ret

000031fa <__gesf2>:
    31fa:	0e 94 88 18 	call	0x3110	; 0x3110 <__fp_cmp>
    31fe:	08 f4       	brcc	.+2      	; 0x3202 <__gesf2+0x8>
    3200:	8f ef       	ldi	r24, 0xFF	; 255
    3202:	08 95       	ret
    3204:	16 f0       	brts	.+4      	; 0x320a <__gesf2+0x10>
    3206:	0c 94 bf 19 	jmp	0x337e	; 0x337e <__fp_mpack>
    320a:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__fp_nan>
    320e:	68 94       	set
    3210:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_inf>

00003214 <log>:
    3214:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__fp_splitA>
    3218:	a8 f3       	brcs	.-22     	; 0x3204 <__gesf2+0xa>
    321a:	99 23       	and	r25, r25
    321c:	c1 f3       	breq	.-16     	; 0x320e <__gesf2+0x14>
    321e:	ae f3       	brts	.-22     	; 0x320a <__gesf2+0x10>
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	1f 93       	push	r17
    3226:	0f 93       	push	r16
    3228:	ff 92       	push	r15
    322a:	c9 2f       	mov	r28, r25
    322c:	dd 27       	eor	r29, r29
    322e:	88 23       	and	r24, r24
    3230:	2a f0       	brmi	.+10     	; 0x323c <log+0x28>
    3232:	21 97       	sbiw	r28, 0x01	; 1
    3234:	66 0f       	add	r22, r22
    3236:	77 1f       	adc	r23, r23
    3238:	88 1f       	adc	r24, r24
    323a:	da f7       	brpl	.-10     	; 0x3232 <log+0x1e>
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e8       	ldi	r20, 0x80	; 128
    3242:	5f eb       	ldi	r21, 0xBF	; 191
    3244:	9f e3       	ldi	r25, 0x3F	; 63
    3246:	88 39       	cpi	r24, 0x98	; 152
    3248:	20 f0       	brcs	.+8      	; 0x3252 <log+0x3e>
    324a:	80 3e       	cpi	r24, 0xE0	; 224
    324c:	38 f0       	brcs	.+14     	; 0x325c <log+0x48>
    324e:	21 96       	adiw	r28, 0x01	; 1
    3250:	8f 77       	andi	r24, 0x7F	; 127
    3252:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__addsf3>
    3256:	e8 e6       	ldi	r30, 0x68	; 104
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	04 c0       	rjmp	.+8      	; 0x3264 <log+0x50>
    325c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__addsf3>
    3260:	e5 e9       	ldi	r30, 0x95	; 149
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	0e 94 cd 19 	call	0x339a	; 0x339a <__fp_powser>
    3268:	8b 01       	movw	r16, r22
    326a:	be 01       	movw	r22, r28
    326c:	ec 01       	movw	r28, r24
    326e:	fb 2e       	mov	r15, r27
    3270:	6f 57       	subi	r22, 0x7F	; 127
    3272:	71 09       	sbc	r23, r1
    3274:	75 95       	asr	r23
    3276:	77 1f       	adc	r23, r23
    3278:	88 0b       	sbc	r24, r24
    327a:	99 0b       	sbc	r25, r25
    327c:	0e 94 4d 18 	call	0x309a	; 0x309a <__floatsisf>
    3280:	28 e1       	ldi	r18, 0x18	; 24
    3282:	32 e7       	ldi	r19, 0x72	; 114
    3284:	41 e3       	ldi	r20, 0x31	; 49
    3286:	5f e3       	ldi	r21, 0x3F	; 63
    3288:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3x>
    328c:	af 2d       	mov	r26, r15
    328e:	98 01       	movw	r18, r16
    3290:	ae 01       	movw	r20, r28
    3292:	ff 90       	pop	r15
    3294:	0f 91       	pop	r16
    3296:	1f 91       	pop	r17
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__addsf3x>
    32a0:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__fp_round>

000032a4 <__mulsf3>:
    32a4:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3x>
    32a8:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__fp_round>
    32ac:	0e 94 b5 18 	call	0x316a	; 0x316a <__fp_pscA>
    32b0:	38 f0       	brcs	.+14     	; 0x32c0 <__mulsf3+0x1c>
    32b2:	0e 94 bc 18 	call	0x3178	; 0x3178 <__fp_pscB>
    32b6:	20 f0       	brcs	.+8      	; 0x32c0 <__mulsf3+0x1c>
    32b8:	95 23       	and	r25, r21
    32ba:	11 f0       	breq	.+4      	; 0x32c0 <__mulsf3+0x1c>
    32bc:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_inf>
    32c0:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__fp_nan>
    32c4:	11 24       	eor	r1, r1
    32c6:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__fp_szero>

000032ca <__mulsf3x>:
    32ca:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__fp_split3>
    32ce:	70 f3       	brcs	.-36     	; 0x32ac <__mulsf3+0x8>

000032d0 <__mulsf3_pse>:
    32d0:	95 9f       	mul	r25, r21
    32d2:	c1 f3       	breq	.-16     	; 0x32c4 <__mulsf3+0x20>
    32d4:	95 0f       	add	r25, r21
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	55 1f       	adc	r21, r21
    32da:	62 9f       	mul	r22, r18
    32dc:	f0 01       	movw	r30, r0
    32de:	72 9f       	mul	r23, r18
    32e0:	bb 27       	eor	r27, r27
    32e2:	f0 0d       	add	r31, r0
    32e4:	b1 1d       	adc	r27, r1
    32e6:	63 9f       	mul	r22, r19
    32e8:	aa 27       	eor	r26, r26
    32ea:	f0 0d       	add	r31, r0
    32ec:	b1 1d       	adc	r27, r1
    32ee:	aa 1f       	adc	r26, r26
    32f0:	64 9f       	mul	r22, r20
    32f2:	66 27       	eor	r22, r22
    32f4:	b0 0d       	add	r27, r0
    32f6:	a1 1d       	adc	r26, r1
    32f8:	66 1f       	adc	r22, r22
    32fa:	82 9f       	mul	r24, r18
    32fc:	22 27       	eor	r18, r18
    32fe:	b0 0d       	add	r27, r0
    3300:	a1 1d       	adc	r26, r1
    3302:	62 1f       	adc	r22, r18
    3304:	73 9f       	mul	r23, r19
    3306:	b0 0d       	add	r27, r0
    3308:	a1 1d       	adc	r26, r1
    330a:	62 1f       	adc	r22, r18
    330c:	83 9f       	mul	r24, r19
    330e:	a0 0d       	add	r26, r0
    3310:	61 1d       	adc	r22, r1
    3312:	22 1f       	adc	r18, r18
    3314:	74 9f       	mul	r23, r20
    3316:	33 27       	eor	r19, r19
    3318:	a0 0d       	add	r26, r0
    331a:	61 1d       	adc	r22, r1
    331c:	23 1f       	adc	r18, r19
    331e:	84 9f       	mul	r24, r20
    3320:	60 0d       	add	r22, r0
    3322:	21 1d       	adc	r18, r1
    3324:	82 2f       	mov	r24, r18
    3326:	76 2f       	mov	r23, r22
    3328:	6a 2f       	mov	r22, r26
    332a:	11 24       	eor	r1, r1
    332c:	9f 57       	subi	r25, 0x7F	; 127
    332e:	50 40       	sbci	r21, 0x00	; 0
    3330:	9a f0       	brmi	.+38     	; 0x3358 <__mulsf3_pse+0x88>
    3332:	f1 f0       	breq	.+60     	; 0x3370 <__mulsf3_pse+0xa0>
    3334:	88 23       	and	r24, r24
    3336:	4a f0       	brmi	.+18     	; 0x334a <__mulsf3_pse+0x7a>
    3338:	ee 0f       	add	r30, r30
    333a:	ff 1f       	adc	r31, r31
    333c:	bb 1f       	adc	r27, r27
    333e:	66 1f       	adc	r22, r22
    3340:	77 1f       	adc	r23, r23
    3342:	88 1f       	adc	r24, r24
    3344:	91 50       	subi	r25, 0x01	; 1
    3346:	50 40       	sbci	r21, 0x00	; 0
    3348:	a9 f7       	brne	.-22     	; 0x3334 <__mulsf3_pse+0x64>
    334a:	9e 3f       	cpi	r25, 0xFE	; 254
    334c:	51 05       	cpc	r21, r1
    334e:	80 f0       	brcs	.+32     	; 0x3370 <__mulsf3_pse+0xa0>
    3350:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_inf>
    3354:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__fp_szero>
    3358:	5f 3f       	cpi	r21, 0xFF	; 255
    335a:	e4 f3       	brlt	.-8      	; 0x3354 <__mulsf3_pse+0x84>
    335c:	98 3e       	cpi	r25, 0xE8	; 232
    335e:	d4 f3       	brlt	.-12     	; 0x3354 <__mulsf3_pse+0x84>
    3360:	86 95       	lsr	r24
    3362:	77 95       	ror	r23
    3364:	67 95       	ror	r22
    3366:	b7 95       	ror	r27
    3368:	f7 95       	ror	r31
    336a:	e7 95       	ror	r30
    336c:	9f 5f       	subi	r25, 0xFF	; 255
    336e:	c1 f7       	brne	.-16     	; 0x3360 <__mulsf3_pse+0x90>
    3370:	fe 2b       	or	r31, r30
    3372:	88 0f       	add	r24, r24
    3374:	91 1d       	adc	r25, r1
    3376:	96 95       	lsr	r25
    3378:	87 95       	ror	r24
    337a:	97 f9       	bld	r25, 7
    337c:	08 95       	ret

0000337e <__fp_mpack>:
    337e:	9f 3f       	cpi	r25, 0xFF	; 255
    3380:	31 f0       	breq	.+12     	; 0x338e <__fp_mpack_finite+0xc>

00003382 <__fp_mpack_finite>:
    3382:	91 50       	subi	r25, 0x01	; 1
    3384:	20 f4       	brcc	.+8      	; 0x338e <__fp_mpack_finite+0xc>
    3386:	87 95       	ror	r24
    3388:	77 95       	ror	r23
    338a:	67 95       	ror	r22
    338c:	b7 95       	ror	r27
    338e:	88 0f       	add	r24, r24
    3390:	91 1d       	adc	r25, r1
    3392:	96 95       	lsr	r25
    3394:	87 95       	ror	r24
    3396:	97 f9       	bld	r25, 7
    3398:	08 95       	ret

0000339a <__fp_powser>:
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	1f 93       	push	r17
    33a0:	0f 93       	push	r16
    33a2:	ff 92       	push	r15
    33a4:	ef 92       	push	r14
    33a6:	df 92       	push	r13
    33a8:	7b 01       	movw	r14, r22
    33aa:	8c 01       	movw	r16, r24
    33ac:	68 94       	set
    33ae:	06 c0       	rjmp	.+12     	; 0x33bc <__fp_powser+0x22>
    33b0:	da 2e       	mov	r13, r26
    33b2:	ef 01       	movw	r28, r30
    33b4:	0e 94 65 19 	call	0x32ca	; 0x32ca <__mulsf3x>
    33b8:	fe 01       	movw	r30, r28
    33ba:	e8 94       	clt
    33bc:	a5 91       	lpm	r26, Z+
    33be:	25 91       	lpm	r18, Z+
    33c0:	35 91       	lpm	r19, Z+
    33c2:	45 91       	lpm	r20, Z+
    33c4:	55 91       	lpm	r21, Z+
    33c6:	a6 f3       	brts	.-24     	; 0x33b0 <__fp_powser+0x16>
    33c8:	ef 01       	movw	r28, r30
    33ca:	0e 94 49 17 	call	0x2e92	; 0x2e92 <__addsf3x>
    33ce:	fe 01       	movw	r30, r28
    33d0:	97 01       	movw	r18, r14
    33d2:	a8 01       	movw	r20, r16
    33d4:	da 94       	dec	r13
    33d6:	69 f7       	brne	.-38     	; 0x33b2 <__fp_powser+0x18>
    33d8:	df 90       	pop	r13
    33da:	ef 90       	pop	r14
    33dc:	ff 90       	pop	r15
    33de:	0f 91       	pop	r16
    33e0:	1f 91       	pop	r17
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <__mulsi3>:
    33e8:	db 01       	movw	r26, r22
    33ea:	8f 93       	push	r24
    33ec:	9f 93       	push	r25
    33ee:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__muluhisi3>
    33f2:	bf 91       	pop	r27
    33f4:	af 91       	pop	r26
    33f6:	a2 9f       	mul	r26, r18
    33f8:	80 0d       	add	r24, r0
    33fa:	91 1d       	adc	r25, r1
    33fc:	a3 9f       	mul	r26, r19
    33fe:	90 0d       	add	r25, r0
    3400:	b2 9f       	mul	r27, r18
    3402:	90 0d       	add	r25, r0
    3404:	11 24       	eor	r1, r1
    3406:	08 95       	ret

00003408 <__udivmodhi4>:
    3408:	aa 1b       	sub	r26, r26
    340a:	bb 1b       	sub	r27, r27
    340c:	51 e1       	ldi	r21, 0x11	; 17
    340e:	07 c0       	rjmp	.+14     	; 0x341e <__udivmodhi4_ep>

00003410 <__udivmodhi4_loop>:
    3410:	aa 1f       	adc	r26, r26
    3412:	bb 1f       	adc	r27, r27
    3414:	a6 17       	cp	r26, r22
    3416:	b7 07       	cpc	r27, r23
    3418:	10 f0       	brcs	.+4      	; 0x341e <__udivmodhi4_ep>
    341a:	a6 1b       	sub	r26, r22
    341c:	b7 0b       	sbc	r27, r23

0000341e <__udivmodhi4_ep>:
    341e:	88 1f       	adc	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	5a 95       	dec	r21
    3424:	a9 f7       	brne	.-22     	; 0x3410 <__udivmodhi4_loop>
    3426:	80 95       	com	r24
    3428:	90 95       	com	r25
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	08 95       	ret

00003430 <__divmodhi4>:
    3430:	97 fb       	bst	r25, 7
    3432:	07 2e       	mov	r0, r23
    3434:	16 f4       	brtc	.+4      	; 0x343a <__divmodhi4+0xa>
    3436:	00 94       	com	r0
    3438:	07 d0       	rcall	.+14     	; 0x3448 <__divmodhi4_neg1>
    343a:	77 fd       	sbrc	r23, 7
    343c:	09 d0       	rcall	.+18     	; 0x3450 <__divmodhi4_neg2>
    343e:	0e 94 04 1a 	call	0x3408	; 0x3408 <__udivmodhi4>
    3442:	07 fc       	sbrc	r0, 7
    3444:	05 d0       	rcall	.+10     	; 0x3450 <__divmodhi4_neg2>
    3446:	3e f4       	brtc	.+14     	; 0x3456 <__divmodhi4_exit>

00003448 <__divmodhi4_neg1>:
    3448:	90 95       	com	r25
    344a:	81 95       	neg	r24
    344c:	9f 4f       	sbci	r25, 0xFF	; 255
    344e:	08 95       	ret

00003450 <__divmodhi4_neg2>:
    3450:	70 95       	com	r23
    3452:	61 95       	neg	r22
    3454:	7f 4f       	sbci	r23, 0xFF	; 255

00003456 <__divmodhi4_exit>:
    3456:	08 95       	ret

00003458 <__udivmodsi4>:
    3458:	a1 e2       	ldi	r26, 0x21	; 33
    345a:	1a 2e       	mov	r1, r26
    345c:	aa 1b       	sub	r26, r26
    345e:	bb 1b       	sub	r27, r27
    3460:	fd 01       	movw	r30, r26
    3462:	0d c0       	rjmp	.+26     	; 0x347e <__udivmodsi4_ep>

00003464 <__udivmodsi4_loop>:
    3464:	aa 1f       	adc	r26, r26
    3466:	bb 1f       	adc	r27, r27
    3468:	ee 1f       	adc	r30, r30
    346a:	ff 1f       	adc	r31, r31
    346c:	a2 17       	cp	r26, r18
    346e:	b3 07       	cpc	r27, r19
    3470:	e4 07       	cpc	r30, r20
    3472:	f5 07       	cpc	r31, r21
    3474:	20 f0       	brcs	.+8      	; 0x347e <__udivmodsi4_ep>
    3476:	a2 1b       	sub	r26, r18
    3478:	b3 0b       	sbc	r27, r19
    347a:	e4 0b       	sbc	r30, r20
    347c:	f5 0b       	sbc	r31, r21

0000347e <__udivmodsi4_ep>:
    347e:	66 1f       	adc	r22, r22
    3480:	77 1f       	adc	r23, r23
    3482:	88 1f       	adc	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	1a 94       	dec	r1
    3488:	69 f7       	brne	.-38     	; 0x3464 <__udivmodsi4_loop>
    348a:	60 95       	com	r22
    348c:	70 95       	com	r23
    348e:	80 95       	com	r24
    3490:	90 95       	com	r25
    3492:	9b 01       	movw	r18, r22
    3494:	ac 01       	movw	r20, r24
    3496:	bd 01       	movw	r22, r26
    3498:	cf 01       	movw	r24, r30
    349a:	08 95       	ret

0000349c <__umulhisi3>:
    349c:	a2 9f       	mul	r26, r18
    349e:	b0 01       	movw	r22, r0
    34a0:	b3 9f       	mul	r27, r19
    34a2:	c0 01       	movw	r24, r0
    34a4:	a3 9f       	mul	r26, r19
    34a6:	70 0d       	add	r23, r0
    34a8:	81 1d       	adc	r24, r1
    34aa:	11 24       	eor	r1, r1
    34ac:	91 1d       	adc	r25, r1
    34ae:	b2 9f       	mul	r27, r18
    34b0:	70 0d       	add	r23, r0
    34b2:	81 1d       	adc	r24, r1
    34b4:	11 24       	eor	r1, r1
    34b6:	91 1d       	adc	r25, r1
    34b8:	08 95       	ret

000034ba <__muluhisi3>:
    34ba:	0e 94 4e 1a 	call	0x349c	; 0x349c <__umulhisi3>
    34be:	a5 9f       	mul	r26, r21
    34c0:	90 0d       	add	r25, r0
    34c2:	b4 9f       	mul	r27, r20
    34c4:	90 0d       	add	r25, r0
    34c6:	a4 9f       	mul	r26, r20
    34c8:	80 0d       	add	r24, r0
    34ca:	91 1d       	adc	r25, r1
    34cc:	11 24       	eor	r1, r1
    34ce:	08 95       	ret

000034d0 <eeprom_read_block>:
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22

000034d4 <eeprom_read_blraw>:
    34d4:	fc 01       	movw	r30, r24
    34d6:	f9 99       	sbic	0x1f, 1	; 31
    34d8:	fe cf       	rjmp	.-4      	; 0x34d6 <eeprom_read_blraw+0x2>
    34da:	06 c0       	rjmp	.+12     	; 0x34e8 <eeprom_read_blraw+0x14>
    34dc:	f2 bd       	out	0x22, r31	; 34
    34de:	e1 bd       	out	0x21, r30	; 33
    34e0:	f8 9a       	sbi	0x1f, 0	; 31
    34e2:	31 96       	adiw	r30, 0x01	; 1
    34e4:	00 b4       	in	r0, 0x20	; 32
    34e6:	0d 92       	st	X+, r0
    34e8:	41 50       	subi	r20, 0x01	; 1
    34ea:	50 40       	sbci	r21, 0x00	; 0
    34ec:	b8 f7       	brcc	.-18     	; 0x34dc <eeprom_read_blraw+0x8>
    34ee:	08 95       	ret

000034f0 <eeprom_read_byte>:
    34f0:	f9 99       	sbic	0x1f, 1	; 31
    34f2:	fe cf       	rjmp	.-4      	; 0x34f0 <eeprom_read_byte>
    34f4:	92 bd       	out	0x22, r25	; 34
    34f6:	81 bd       	out	0x21, r24	; 33
    34f8:	f8 9a       	sbi	0x1f, 0	; 31
    34fa:	99 27       	eor	r25, r25
    34fc:	80 b5       	in	r24, 0x20	; 32
    34fe:	08 95       	ret

00003500 <eeprom_update_block>:
    3500:	dc 01       	movw	r26, r24
    3502:	a4 0f       	add	r26, r20
    3504:	b5 1f       	adc	r27, r21
    3506:	41 50       	subi	r20, 0x01	; 1
    3508:	50 40       	sbci	r21, 0x00	; 0
    350a:	48 f0       	brcs	.+18     	; 0x351e <eeprom_update_block+0x1e>
    350c:	cb 01       	movw	r24, r22
    350e:	84 0f       	add	r24, r20
    3510:	95 1f       	adc	r25, r21
    3512:	2e 91       	ld	r18, -X
    3514:	0e 94 91 1a 	call	0x3522	; 0x3522 <eeprom_update_r18>
    3518:	41 50       	subi	r20, 0x01	; 1
    351a:	50 40       	sbci	r21, 0x00	; 0
    351c:	d0 f7       	brcc	.-12     	; 0x3512 <eeprom_update_block+0x12>
    351e:	08 95       	ret

00003520 <eeprom_update_byte>:
    3520:	26 2f       	mov	r18, r22

00003522 <eeprom_update_r18>:
    3522:	f9 99       	sbic	0x1f, 1	; 31
    3524:	fe cf       	rjmp	.-4      	; 0x3522 <eeprom_update_r18>
    3526:	92 bd       	out	0x22, r25	; 34
    3528:	81 bd       	out	0x21, r24	; 33
    352a:	f8 9a       	sbi	0x1f, 0	; 31
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	00 b4       	in	r0, 0x20	; 32
    3530:	02 16       	cp	r0, r18
    3532:	39 f0       	breq	.+14     	; 0x3542 <eeprom_update_r18+0x20>
    3534:	1f ba       	out	0x1f, r1	; 31
    3536:	20 bd       	out	0x20, r18	; 32
    3538:	0f b6       	in	r0, 0x3f	; 63
    353a:	f8 94       	cli
    353c:	fa 9a       	sbi	0x1f, 2	; 31
    353e:	f9 9a       	sbi	0x1f, 1	; 31
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	08 95       	ret

00003544 <_exit>:
    3544:	f8 94       	cli

00003546 <__stop_program>:
    3546:	ff cf       	rjmp	.-2      	; 0x3546 <__stop_program>
